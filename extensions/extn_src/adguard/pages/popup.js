(self["webpackChunkbrowser_extension"] = self["webpackChunkbrowser_extension"] || []).push([[787],{

/***/ 98570:
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {

"use strict";

// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(70846);
// EXTERNAL MODULE: ./node_modules/react-dom/index.js
var react_dom = __webpack_require__(76644);
// EXTERNAL MODULE: ./Extension/src/common/translators/i18n.js
var i18n = __webpack_require__(57122);
// EXTERNAL MODULE: ./node_modules/mobx-react/dist/mobxreact.esm.js + 17 modules
var mobxreact_esm = __webpack_require__(82497);
// EXTERNAL MODULE: ./node_modules/classnames/index.js
var classnames = __webpack_require__(8356);
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Tabs/Tab.jsx


const Tab = ({
  title,
  active,
  onClick
}) => {
  const tabClass = classnames_default()('tabs__tab', {
    tabs__tab_active: active
  });
  return /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: tabClass,
    onClick: onClick
  }, title);
};
// EXTERNAL MODULE: ./Extension/src/pages/services/messenger.js
var messenger = __webpack_require__(37916);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js
var initializerDefineProperty = __webpack_require__(5497);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js
var applyDecoratedDescriptor = __webpack_require__(26813);
// EXTERNAL MODULE: ./node_modules/webextension-polyfill/dist/browser-polyfill.js
var browser_polyfill = __webpack_require__(53679);
var browser_polyfill_default = /*#__PURE__*/__webpack_require__.n(browser_polyfill);
// EXTERNAL MODULE: ./node_modules/mobx/dist/mobx.esm.js
var mobx_esm = __webpack_require__(31056);
// EXTERNAL MODULE: ./node_modules/punycode/punycode.es6.js
var punycode_es6 = __webpack_require__(2860);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/constants.js
const VIEW_STATES = {
  ACTIONS: 'actions',
  STATS: 'stats'
};
const POPUP_STATES = {
  APPLICATION_ENABLED: 'application.enabled',
  APPLICATION_FILTERING_DISABLED: 'application.filtering.disabled',
  APPLICATION_UNAVAILABLE: 'application.unavailable',
  SITE_IN_EXCEPTION: 'site.in.exception',
  SITE_ALLOWLISTED: 'site.allowlisted'
};
const TIME_RANGES = {
  DAY: 'day',
  WEEK: 'week',
  MONTH: 'month',
  YEAR: 'year'
};
// EXTERNAL MODULE: ./Extension/src/common/translators/reactTranslator.js
var reactTranslator = __webpack_require__(38647);
// EXTERNAL MODULE: ./Extension/src/common/constants.js
var constants = __webpack_require__(84568);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/stores/PopupStore.js




var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29;








 // Do not allow property change outside of store actions

(0,mobx_esm/* configure */.jQ)({
  enforceActions: 'observed'
});
let PopupStore = (_class = class PopupStore {
  // need for render blocking before first data retrieving
  constructor() {
    this.TOTAL_BLOCKED_GROUP_ID = 'total';

    (0,initializerDefineProperty/* default */.Z)(this, "isInitialDataReceived", _descriptor, this);

    (0,initializerDefineProperty/* default */.Z)(this, "applicationFilteringDisabled", _descriptor2, this);

    (0,initializerDefineProperty/* default */.Z)(this, "applicationAvailable", _descriptor3, this);

    (0,initializerDefineProperty/* default */.Z)(this, "canAddRemoveRule", _descriptor4, this);

    (0,initializerDefineProperty/* default */.Z)(this, "url", _descriptor5, this);

    (0,initializerDefineProperty/* default */.Z)(this, "viewState", _descriptor6, this);

    (0,initializerDefineProperty/* default */.Z)(this, "totalBlocked", _descriptor7, this);

    (0,initializerDefineProperty/* default */.Z)(this, "totalBlockedTab", _descriptor8, this);

    (0,initializerDefineProperty/* default */.Z)(this, "documentAllowlisted", _descriptor9, this);

    (0,initializerDefineProperty/* default */.Z)(this, "userAllowlisted", _descriptor10, this);

    (0,initializerDefineProperty/* default */.Z)(this, "showInfoAboutFullVersion", _descriptor11, this);

    (0,initializerDefineProperty/* default */.Z)(this, "isEdgeBrowser", _descriptor12, this);

    (0,initializerDefineProperty/* default */.Z)(this, "stats", _descriptor13, this);

    (0,initializerDefineProperty/* default */.Z)(this, "selectedTimeRange", _descriptor14, this);

    (0,initializerDefineProperty/* default */.Z)(this, "selectedBlockedType", _descriptor15, this);

    (0,initializerDefineProperty/* default */.Z)(this, "promoNotification", _descriptor16, this);

    (0,initializerDefineProperty/* default */.Z)(this, "hasCustomRulesToReset", _descriptor17, this);

    (0,initializerDefineProperty/* default */.Z)(this, "settings", _descriptor18, this);

    this.currentTabId = null;

    (0,initializerDefineProperty/* default */.Z)(this, "getPopupData", _descriptor19, this);

    (0,initializerDefineProperty/* default */.Z)(this, "changeApplicationFilteringDisabled", _descriptor20, this);

    (0,initializerDefineProperty/* default */.Z)(this, "setViewState", _descriptor21, this);

    (0,initializerDefineProperty/* default */.Z)(this, "toggleAllowlisted", _descriptor22, this);

    (0,initializerDefineProperty/* default */.Z)(this, "getStatisticsData", _descriptor23, this);

    this.getDataByRange = (stats, range) => {
      switch (range) {
        case TIME_RANGES.DAY:
          return stats.lastMonth[stats.lastMonth.length - 1];

        case TIME_RANGES.WEEK:
          {
            const result = {};

            for (let i = 0; i < stats.lastWeek.length; i += 1) {
              const day = stats.lastWeek[i]; // eslint-disable-next-line no-restricted-syntax

              for (const type of Object.keys(day)) {
                result[type] = (result[type] || 0) + day[type];
              }
            }

            return result;
          }

        case TIME_RANGES.MONTH:
          return stats.lastYear[stats.lastYear.length - 1];

        case TIME_RANGES.YEAR:
          {
            const result = {};

            for (let i = 0; i < stats.lastYear.length; i += 1) {
              const month = stats.lastYear[i]; // eslint-disable-next-line no-restricted-syntax

              for (const type of Object.keys(month)) {
                result[type] = (result[type] || 0) + month[type];
              }
            }

            return result;
          }

        default:
          throw new Error('There is no such time range type');
      }
    };

    (0,initializerDefineProperty/* default */.Z)(this, "setSelectedBlockedType", _descriptor24, this);

    (0,initializerDefineProperty/* default */.Z)(this, "setSelectedTimeRange", _descriptor25, this);

    (0,initializerDefineProperty/* default */.Z)(this, "closePromoNotification", _descriptor26, this);

    (0,initializerDefineProperty/* default */.Z)(this, "openPromoNotificationUrl", _descriptor27, this);

    (0,initializerDefineProperty/* default */.Z)(this, "updateBlockedStats", _descriptor28, this);

    (0,initializerDefineProperty/* default */.Z)(this, "onSettingUpdated", _descriptor29, this);

    (0,mobx_esm/* makeObservable */.rC)(this);
  }

  get currentSite() {
    if (this.applicationAvailable) {
      return this.domainName ? punycode_es6/* default.toUnicode */.ZP.toUnicode(this.domainName) : this.url;
    }

    return this.url;
  }

  get currentStatusMessage() {
    let messageKey = '';

    if (!this.applicationAvailable) {
      messageKey = 'popup_site_filtering_state_secure_page';
    } else if (!this.canAddRemoveRule) {
      messageKey = 'popup_site_exception_information';
    } else if (this.applicationFilteringDisabled) {
      messageKey = 'popup_site_filtering_state_paused';
    } else if (this.documentAllowlisted) {
      messageKey = 'popup_site_filtering_state_disabled';
    } else {
      messageKey = 'popup_site_filtering_state_enabled';
    }

    if (messageKey) {
      return reactTranslator/* reactTranslator.getMessage */._.getMessage(messageKey);
    }

    return null;
  }

  get popupState() {
    if (this.applicationFilteringDisabled) {
      return POPUP_STATES.APPLICATION_FILTERING_DISABLED;
    }

    if (!this.applicationAvailable) {
      return POPUP_STATES.APPLICATION_UNAVAILABLE;
    }

    if (!this.canAddRemoveRule) {
      return POPUP_STATES.SITE_IN_EXCEPTION;
    }

    if (this.documentAllowlisted) {
      return POPUP_STATES.SITE_ALLOWLISTED;
    }

    return POPUP_STATES.APPLICATION_ENABLED;
  }

  get statsDataByType() {
    const {
      stats
    } = this;

    if (!stats) {
      return null;
    }

    const statsDataForCurrentRange = this.getDataByRange(stats, this.selectedTimeRange);
    const {
      blockedGroups
    } = stats;
    return blockedGroups.slice().sort((groupA, groupB) => groupA.displayNumber - groupB.displayNumber).map(group => {
      const {
        groupId,
        groupName
      } = group;
      const blocked = statsDataForCurrentRange[group.groupId];
      return {
        groupId,
        blocked,
        groupName
      };
    }).filter(group => group.blocked > 0 || group.groupId === this.TOTAL_BLOCKED_GROUP_ID);
  }

  get appearanceTheme() {
    if (!this.settings) {
      return null;
    }

    return this.settings.values[this.settings.names.APPEARANCE_THEME];
  }

}, (_descriptor = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "isInitialDataReceived", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _descriptor2 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "applicationFilteringDisabled", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return null;
  }
}), _descriptor3 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "applicationAvailable", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _descriptor4 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "canAddRemoveRule", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _descriptor5 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "url", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return null;
  }
}), _descriptor6 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "viewState", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return VIEW_STATES.ACTIONS;
  }
}), _descriptor7 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "totalBlocked", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return 0;
  }
}), _descriptor8 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "totalBlockedTab", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return 0;
  }
}), _descriptor9 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "documentAllowlisted", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return null;
  }
}), _descriptor10 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "userAllowlisted", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return null;
  }
}), _descriptor11 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "showInfoAboutFullVersion", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return true;
  }
}), _descriptor12 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "isEdgeBrowser", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _descriptor13 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "stats", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return null;
  }
}), _descriptor14 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "selectedTimeRange", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return TIME_RANGES.WEEK;
  }
}), _descriptor15 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "selectedBlockedType", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return this.TOTAL_BLOCKED_GROUP_ID;
  }
}), _descriptor16 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "promoNotification", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return null;
  }
}), _descriptor17 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "hasCustomRulesToReset", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return false;
  }
}), _descriptor18 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "settings", [mobx_esm/* observable */.LO], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return null;
  }
}), _descriptor19 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "getPopupData", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return async () => {
      // get current tab id
      const tabs = await browser_polyfill_default().tabs.query({
        active: true,
        currentWindow: true
      });
      const currentTab = tabs === null || tabs === void 0 ? void 0 : tabs[0];
      const response = await messenger/* messenger.getTabInfoForPopup */.d.getTabInfoForPopup(currentTab === null || currentTab === void 0 ? void 0 : currentTab.id);
      (0,mobx_esm/* runInAction */.z)(() => {
        const {
          frameInfo,
          options,
          stats,
          settings
        } = response; // frame info

        this.applicationFilteringDisabled = frameInfo.applicationFilteringDisabled;
        this.applicationAvailable = frameInfo.applicationAvailable;
        this.url = frameInfo.url;
        this.totalBlocked = frameInfo.totalBlocked;
        this.totalBlockedTab = frameInfo.totalBlockedTab;
        this.domainName = frameInfo.domainName;
        this.documentAllowlisted = frameInfo.documentAllowlisted;
        this.userAllowlisted = frameInfo.userAllowlisted;
        this.canAddRemoveRule = frameInfo.canAddRemoveRule; // options

        this.showInfoAboutFullVersion = options.showInfoAboutFullVersion;
        this.isEdgeBrowser = options.isEdgeBrowser;
        this.promoNotification = options.notification;
        this.hasCustomRulesToReset = options.hasCustomRulesToReset; // stats

        this.stats = stats; // settings

        this.settings = settings;
        this.isInitialDataReceived = true;
        this.currentTabId = currentTab === null || currentTab === void 0 ? void 0 : currentTab.id;
      });
    };
  }
}), _descriptor20 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "changeApplicationFilteringDisabled", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return async state => {
      await messenger/* messenger.changeApplicationFilteringDisabled */.d.changeApplicationFilteringDisabled(state);
      (0,mobx_esm/* runInAction */.z)(() => {
        this.applicationFilteringDisabled = state;
      });
    };
  }
}), _descriptor21 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "setViewState", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return state => {
      this.viewState = state;
    };
  }
}), (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "currentSite", [mobx_esm/* computed */.Fl], Object.getOwnPropertyDescriptor(_class.prototype, "currentSite"), _class.prototype), (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "currentStatusMessage", [mobx_esm/* computed */.Fl], Object.getOwnPropertyDescriptor(_class.prototype, "currentStatusMessage"), _class.prototype), _descriptor22 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "toggleAllowlisted", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return () => {
      if (!this.applicationAvailable || this.applicationFilteringDisabled) {
        return;
      }

      if (!this.canAddRemoveRule) {
        return;
      }

      let isAllowlisted = this.documentAllowlisted;

      if (isAllowlisted) {
        messenger/* messenger.removeAllowlistDomain */.d.removeAllowlistDomain(this.currentTabId);
        isAllowlisted = false;
      } else {
        messenger/* messenger.addAllowlistDomain */.d.addAllowlistDomain(this.currentTabId);
        isAllowlisted = true;
      }

      (0,mobx_esm/* runInAction */.z)(() => {
        this.documentAllowlisted = isAllowlisted;
        this.userAllowlisted = isAllowlisted;
        this.totalBlockedTab = 0;
      });
    };
  }
}), (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "popupState", [mobx_esm/* computed */.Fl], Object.getOwnPropertyDescriptor(_class.prototype, "popupState"), _class.prototype), _descriptor23 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "getStatisticsData", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return async () => {
      const {
        stats
      } = await messenger/* messenger.getStatisticsData */.d.getStatisticsData();
      (0,mobx_esm/* runInAction */.z)(() => {
        this.stats = stats;
      });
    };
  }
}), (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "statsDataByType", [mobx_esm/* computed */.Fl], Object.getOwnPropertyDescriptor(_class.prototype, "statsDataByType"), _class.prototype), _descriptor24 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "setSelectedBlockedType", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return value => {
      this.selectedBlockedType = value;
    };
  }
}), _descriptor25 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "setSelectedTimeRange", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return value => {
      this.selectedTimeRange = value;
    };
  }
}), _descriptor26 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "closePromoNotification", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return async () => {
      this.promoNotification = null;
      await messenger/* messenger.sendMessage */.d.sendMessage(constants/* MESSAGE_TYPES.SET_NOTIFICATION_VIEWED */.oK.SET_NOTIFICATION_VIEWED, {
        withDelay: false
      });
    };
  }
}), _descriptor27 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "openPromoNotificationUrl", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return async () => {
      let {
        url
      } = this.promoNotification;
      url = `${url}&from=popup`;
      (0,mobx_esm/* runInAction */.z)(() => {
        this.promoNotification = null;
      });
      await messenger/* messenger.sendMessage */.d.sendMessage(constants/* MESSAGE_TYPES.SET_NOTIFICATION_VIEWED */.oK.SET_NOTIFICATION_VIEWED, {
        withDelay: false
      });
      await messenger/* messenger.sendMessage */.d.sendMessage('openTab', {
        url
      });
    };
  }
}), _descriptor28 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "updateBlockedStats", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return tabInfo => {
      this.totalBlocked = tabInfo.totalBlocked;
      this.totalBlockedTab = tabInfo.totalBlockedTab;
    };
  }
}), _descriptor29 = (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "onSettingUpdated", [mobx_esm/* action */.aD], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function () {
    return (name, value) => {
      if (!this.settings) {
        return;
      }

      this.settings.values[name] = value;
    };
  }
}), (0,applyDecoratedDescriptor/* default */.Z)(_class.prototype, "appearanceTheme", [mobx_esm/* computed */.Fl], Object.getOwnPropertyDescriptor(_class.prototype, "appearanceTheme"), _class.prototype)), _class);
const popupStore = /*#__PURE__*/(0,react.createContext)(new PopupStore());
// EXTERNAL MODULE: ./Extension/src/pages/common/components/ui/Icon.jsx
var Icon = __webpack_require__(87235);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js
var injectStylesIntoStyleTag = __webpack_require__(35491);
var injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js
var styleDomAPI = __webpack_require__(19532);
var styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js
var insertBySelector = __webpack_require__(48190);
var insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js
var setAttributesWithoutAttributes = __webpack_require__(47630);
var setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js
var insertStyleElement = __webpack_require__(60664);
var insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js
var styleTagTransform = __webpack_require__(82563);
var styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Actions/actions.pcss
var actions = __webpack_require__(82328);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Actions/actions.pcss

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (styleTagTransform_default());
options.setAttributes = (setAttributesWithoutAttributes_default());

      options.insert = insertBySelector_default().bind(null, "head");
    
options.domAPI = (styleDomAPI_default());
options.insertStyleElement = (insertStyleElement_default());

var update = injectStylesIntoStyleTag_default()(actions/* default */.Z, options);




       /* harmony default export */ const Actions_actions = (actions/* default */.Z && actions/* default.locals */.Z.locals ? actions/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Actions/Actions.jsx








const Actions = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);

  const handleBlockAds = () => {
    if (!store.applicationAvailable) {
      return;
    }

    messenger/* messenger.openAssistant */.d.openAssistant();
    window.close();
  };

  const handleOpenFilteringLog = () => {
    messenger/* messenger.openFilteringLog */.d.openFilteringLog();
    window.close();
  };

  const handleAbuseSite = () => {
    if (!store.applicationAvailable) {
      return;
    }

    messenger/* messenger.openAbuseSite */.d.openAbuseSite(store.url, 'popup');
    window.close();
  };

  const handleCheckSiteSecurity = () => {
    if (!store.applicationAvailable) {
      return;
    }

    messenger/* messenger.checkSiteSecurity */.d.checkSiteSecurity(store.url);
    window.close();
  };

  const resetCustomRulesForPage = async () => {
    if (!store.applicationAvailable) {
      return;
    }

    await messenger/* messenger.resetCustomRulesForPage */.d.resetCustomRulesForPage(store.url);
    window.close();
  };

  const actionChangingClassname = classnames_default()('action', {
    action_disabled: !store.applicationAvailable
  });
  return /*#__PURE__*/react.createElement("div", {
    className: "actions"
  }, /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: actionChangingClassname,
    onClick: handleBlockAds
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#block-ad",
    classname: "icon--action"
  }), /*#__PURE__*/react.createElement("div", {
    className: "action-title"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_block_site_ads_option'))), /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: "action",
    onClick: handleOpenFilteringLog
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#sandwich",
    classname: "icon--action"
  }), /*#__PURE__*/react.createElement("div", {
    className: "action-title"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_open_filtering_log'))), /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: actionChangingClassname,
    onClick: handleAbuseSite
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#thumb-down",
    classname: "icon--action"
  }), /*#__PURE__*/react.createElement("div", {
    className: "action-title"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_abuse_site'))), /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: actionChangingClassname,
    onClick: handleCheckSiteSecurity
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#shield",
    classname: "icon--action"
  }), /*#__PURE__*/react.createElement("div", {
    className: "action-title"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_security_report'))), store.hasCustomRulesToReset && /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: actionChangingClassname,
    onClick: resetCustomRulesForPage
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#small-cross",
    classname: "icon--action"
  }), /*#__PURE__*/react.createElement("div", {
    className: "action-title",
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_reset_custom_rules')
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_reset_custom_rules'))));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Actions/index.js

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Stats/StatsTable/stats-table.pcss
var stats_table = __webpack_require__(66680);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsTable/stats-table.pcss

      
      
      
      
      
      
      
      
      

var stats_table_options = {};

stats_table_options.styleTagTransform = (styleTagTransform_default());
stats_table_options.setAttributes = (setAttributesWithoutAttributes_default());

      stats_table_options.insert = insertBySelector_default().bind(null, "head");
    
stats_table_options.domAPI = (styleDomAPI_default());
stats_table_options.insertStyleElement = (insertStyleElement_default());

var stats_table_update = injectStylesIntoStyleTag_default()(stats_table/* default */.Z, stats_table_options);




       /* harmony default export */ const StatsTable_stats_table = (stats_table/* default */.Z && stats_table/* default.locals */.Z.locals ? stats_table/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsTable/StatsTable.jsx
/* eslint-disable jsx-a11y/no-noninteractive-tabindex */




const StatsTable = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const {
    statsDataByType
  } = store;

  if (!statsDataByType) {
    return null;
  }

  const statsDataByTypeWithoutTotal = statsDataByType.filter(group => group.groupId !== store.TOTAL_BLOCKED_GROUP_ID);

  if (statsDataByTypeWithoutTotal.length === 0) {
    return null;
  }

  const renderStatsByType = statsDataByTypeWithoutTotal.map(stats => {
    return /*#__PURE__*/react.createElement("li", {
      className: "stats__item",
      key: stats.groupId
    }, /*#__PURE__*/react.createElement("span", {
      className: "stats__name"
    }, stats.groupName), /*#__PURE__*/react.createElement("span", {
      className: "stats__value"
    }, stats.blocked));
  });
  return /*#__PURE__*/react.createElement("div", {
    className: "stats"
  }, /*#__PURE__*/react.createElement("ul", {
    className: "stats__list"
  }, renderStatsByType));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsTable/index.js

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Tabs/tabs.pcss
var tabs = __webpack_require__(95255);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Tabs/tabs.pcss

      
      
      
      
      
      
      
      
      

var tabs_options = {};

tabs_options.styleTagTransform = (styleTagTransform_default());
tabs_options.setAttributes = (setAttributesWithoutAttributes_default());

      tabs_options.insert = insertBySelector_default().bind(null, "head");
    
tabs_options.domAPI = (styleDomAPI_default());
tabs_options.insertStyleElement = (insertStyleElement_default());

var tabs_update = injectStylesIntoStyleTag_default()(tabs/* default */.Z, tabs_options);




       /* harmony default export */ const Tabs_tabs = (tabs/* default */.Z && tabs/* default.locals */.Z.locals ? tabs/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Tabs/Tabs.jsx









const Tabs = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const contentMap = {
    [VIEW_STATES.ACTIONS]: Actions,
    [VIEW_STATES.STATS]: StatsTable
  };
  const TabContent = contentMap[store.viewState];

  const handleTabClick = viewState => () => {
    store.setViewState(viewState);
  };

  return /*#__PURE__*/react.createElement("div", {
    className: "tabs"
  }, /*#__PURE__*/react.createElement("div", {
    className: "tabs__panel"
  }, /*#__PURE__*/react.createElement(Tab, {
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_tab_actions'),
    active: store.viewState === VIEW_STATES.ACTIONS,
    onClick: handleTabClick(VIEW_STATES.ACTIONS)
  }), /*#__PURE__*/react.createElement(Tab, {
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_tab_statistics'),
    active: store.viewState === VIEW_STATES.STATS,
    onClick: handleTabClick(VIEW_STATES.STATS)
  })), /*#__PURE__*/react.createElement("div", {
    className: "tabs__content",
    tabIndex: TabContent === contentMap[VIEW_STATES.STATS] ? 0 : -1
  }, /*#__PURE__*/react.createElement(TabContent, null)));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Tabs/index.js

// EXTERNAL MODULE: ./Extension/src/common/common-script.js
var common_script = __webpack_require__(71351);
// EXTERNAL MODULE: ./Extension/src/pages/common/constants.js
var common_constants = __webpack_require__(79735);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Header/header.pcss
var header = __webpack_require__(69091);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Header/header.pcss

      
      
      
      
      
      
      
      
      

var header_options = {};

header_options.styleTagTransform = (styleTagTransform_default());
header_options.setAttributes = (setAttributesWithoutAttributes_default());

      header_options.insert = insertBySelector_default().bind(null, "head");
    
header_options.domAPI = (styleDomAPI_default());
header_options.insertStyleElement = (insertStyleElement_default());

var header_update = injectStylesIntoStyleTag_default()(header/* default */.Z, header_options);




       /* harmony default export */ const Header_header = (header/* default */.Z && header/* default.locals */.Z.locals ? header/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Header/Header.jsx










const Header = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const [filtersUpdating, setFiltersUpdating] = (0,react.useState)(false);
  const {
    applicationFilteringDisabled
  } = store;
  const updateFiltersWithMinDuration = (0,common_script/* addMinDurationTime */.ey)(messenger/* messenger.updateFilters.bind */.d.updateFilters.bind(messenger/* messenger */.d), common_constants/* MIN_FILTERS_UPDATE_DISPLAY_DURATION */.Q);
  const refUpdatingBtn = (0,react.useRef)(null);

  const handleUpdateFiltersClick = async () => {
    refUpdatingBtn.current.blur();
    setFiltersUpdating(true);
    await updateFiltersWithMinDuration();
    setFiltersUpdating(false);
  };

  const handleEnableClick = async () => {
    await store.changeApplicationFilteringDisabled(false);
  };

  const handlePauseClick = async () => {
    await store.changeApplicationFilteringDisabled(true);
  };

  const handleSettingsClick = e => {
    e.preventDefault();
    messenger/* messenger.openSettingsTab */.d.openSettingsTab();
    window.close();
  };

  return /*#__PURE__*/react.createElement("div", {
    className: "popup-header"
  }, /*#__PURE__*/react.createElement("div", {
    className: "popup-header__logo"
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#logo",
    classname: "icon--logo"
  })), /*#__PURE__*/react.createElement("div", {
    className: "popup-header__buttons"
  }, /*#__PURE__*/react.createElement("button", {
    className: classnames_default()('button', 'popup-header__button', {
      'updating-filters': filtersUpdating
    }),
    ref: refUpdatingBtn,
    disabled: filtersUpdating,
    type: "button",
    onClick: handleUpdateFiltersClick,
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_header_update_filters')
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#update-filters",
    classname: "icon--update-filters"
  })), !applicationFilteringDisabled && /*#__PURE__*/react.createElement("button", {
    className: "button popup-header__button",
    type: "button",
    onClick: handlePauseClick,
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('context_disable_protection')
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#pause",
    classname: "icon--pause"
  })), applicationFilteringDisabled && /*#__PURE__*/react.createElement("button", {
    className: "button popup-header__button",
    type: "button",
    onClick: handleEnableClick,
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('context_enable_protection')
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#start",
    classname: "icon--button icon--start"
  })), /*#__PURE__*/react.createElement("button", {
    className: "button popup-header__button",
    type: "button",
    onClick: handleSettingsClick,
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('options_settings')
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#settings",
    classname: "icon--settings"
  }))));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Header/index.js

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Footer/footer.pcss
var footer = __webpack_require__(9066);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Footer/footer.pcss

      
      
      
      
      
      
      
      
      

var footer_options = {};

footer_options.styleTagTransform = (styleTagTransform_default());
footer_options.setAttributes = (setAttributesWithoutAttributes_default());

      footer_options.insert = insertBySelector_default().bind(null, "head");
    
footer_options.domAPI = (styleDomAPI_default());
footer_options.insertStyleElement = (insertStyleElement_default());

var footer_update = injectStylesIntoStyleTag_default()(footer/* default */.Z, footer_options);




       /* harmony default export */ const Footer_footer = (footer/* default */.Z && footer/* default.locals */.Z.locals ? footer/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Footer/Footer.jsx






const Footer = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const LINK_TO_IOS = 'https://link.adtidy.org/forward.html?action=ios_about&from=popup&app=browser_extension';
  const LINK_TO_ANDROID = 'https://link.adtidy.org/forward.html?action=android_about&from=popup&app=browser_extension';
  let footerContent = /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {
    className: "footer__text"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_adguard_footer_title')), /*#__PURE__*/react.createElement("div", {
    className: "footer__platforms"
  }, /*#__PURE__*/react.createElement("a", {
    href: LINK_TO_IOS,
    target: "_blank",
    rel: "noreferrer",
    className: "footer__link",
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_adguard_for_ios')
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#apple",
    classname: "footer__icon"
  })), /*#__PURE__*/react.createElement("a", {
    href: LINK_TO_ANDROID,
    target: "_blank",
    rel: "noreferrer",
    className: "footer__link",
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_adguard_for_android')
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#android",
    classname: "footer__icon"
  }))));

  if (store.isEdgeBrowser) {
    const currentYear = new Date().getFullYear();
    const footerText = `© 2009-${currentYear} AdGuard Software Ltd`;
    footerContent = /*#__PURE__*/react.createElement("div", {
      className: "footer__text"
    }, footerText);
  }

  return /*#__PURE__*/react.createElement("div", {
    className: "footer"
  }, footerContent);
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Footer/index.js

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/ui/icons.pcss
var icons = __webpack_require__(80493);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/ui/icons.pcss

      
      
      
      
      
      
      
      
      

var icons_options = {};

icons_options.styleTagTransform = (styleTagTransform_default());
icons_options.setAttributes = (setAttributesWithoutAttributes_default());

      icons_options.insert = insertBySelector_default().bind(null, "head");
    
icons_options.domAPI = (styleDomAPI_default());
icons_options.insertStyleElement = (insertStyleElement_default());

var icons_update = injectStylesIntoStyleTag_default()(icons/* default */.Z, icons_options);




       /* harmony default export */ const ui_icons = (icons/* default */.Z && icons/* default.locals */.Z.locals ? icons/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/ui/Icons.jsx


const Icons = () => {
  return /*#__PURE__*/react.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    className: "hidden"
  }, /*#__PURE__*/react.createElement("symbol", {
    id: "update-filters",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("g", {
    fill: "none"
  }, /*#__PURE__*/react.createElement("path", {
    id: "Vector 13",
    d: "M6 7.00005C9.6 1.80005 19.5 3.50002 20 12.0001V13.5",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round"
  }), /*#__PURE__*/react.createElement("path", {
    id: "Vector 14",
    d: "M18 16.9999C14.4 22.1999 4.5 20.5 4 11.9999V11",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round"
  }), /*#__PURE__*/react.createElement("path", {
    id: "Vector 15",
    d: "M22 12L20 14L18 12",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }), /*#__PURE__*/react.createElement("path", {
    id: "Vector 16",
    d: "M2 12L4 10L6 12",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }))), /*#__PURE__*/react.createElement("symbol", {
    id: "pause",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("g", {
    fill: "none"
  }, /*#__PURE__*/react.createElement("circle", {
    cx: "12",
    cy: "12",
    r: "10",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }), /*#__PURE__*/react.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M9.5 16L9.5 8L9.5 16Z",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }), /*#__PURE__*/react.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M14.5 16L14.5 8L14.5 16Z",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }))), /*#__PURE__*/react.createElement("symbol", {
    id: "start",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("path", {
    fill: "none",
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M19 12L7 20L7 4L19 12Z",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "settings",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("path", {
    fill: "none",
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M7.92921 18.9146C8.06451 18.9146 8.19778 18.9475 8.31752 19.0105C8.74311 19.2345 9.1883 19.4192 9.64753 19.5621C9.91308 19.6446 10.12 19.8541 10.1991 20.1207C10.453 20.9752 10.6939 21.6143 10.852 22H13.148C13.3061 21.6135 13.5475 20.9742 13.8011 20.1199C13.8803 19.8534 14.0872 19.6438 14.3527 19.5613C14.812 19.4184 15.2572 19.2337 15.6827 19.0097C15.9289 18.88 16.2236 18.8818 16.4682 19.0144C17.2521 19.4394 17.8745 19.7207 18.2592 19.8822L19.8832 18.2591C19.7215 17.874 19.4405 17.2513 19.0152 16.4673C18.8826 16.2227 18.8809 15.9281 19.0105 15.6819C19.2346 15.2563 19.4192 14.8111 19.5621 14.3518C19.6446 14.0863 19.8542 13.8794 20.1207 13.8002C20.9752 13.5463 21.6143 13.3054 22 13.1473V10.8514C21.6135 10.6933 20.9744 10.4519 20.12 10.1982C19.8534 10.119 19.6439 9.91214 19.5613 9.64659C19.4184 9.18735 19.2338 8.74215 19.0097 8.31656C18.8801 8.07037 18.8818 7.77571 19.0144 7.53109C19.4394 6.74718 19.7207 6.12475 19.8819 5.74009L18.2597 4.1168C17.8745 4.27827 17.2518 4.55954 16.4679 4.98483C16.2233 5.11742 15.9287 5.11918 15.6825 4.98952C15.2569 4.76548 14.8117 4.58084 14.3525 4.43792C14.0869 4.3554 13.88 4.14586 13.8009 3.87929C13.5472 3.02507 13.3061 2.3857 13.148 2H10.852C10.6958 2.38492 10.4546 3.02064 10.2009 3.86965C10.1242 4.14096 9.91549 4.35507 9.64623 4.4387C9.18701 4.58154 8.74182 4.76609 8.31621 4.99004C8.07003 5.1197 7.77538 5.11794 7.53076 4.98535C6.74686 4.56032 6.12443 4.27905 5.73978 4.11785L4.11678 5.74035C4.27824 6.12553 4.55951 6.74823 4.98479 7.53213C5.11738 7.77675 5.11913 8.07141 4.98948 8.3176C4.76553 8.7432 4.58099 9.1884 4.43815 9.64763C4.35563 9.91318 4.1461 10.1201 3.87952 10.1992C3.02505 10.4529 2.38596 10.6941 2 10.8521V13.1481C2.38387 13.3044 3.01568 13.5442 3.86208 13.7958C4.1443 13.8731 4.36551 14.0924 4.44518 14.374C4.58538 14.8197 4.76482 15.2522 4.98141 15.6663C5.12378 15.9228 5.12082 16.2352 4.97359 16.489C4.55508 17.2627 4.27746 17.8779 4.11756 18.2599L5.74082 19.8842C6.126 19.7228 6.74868 19.4415 7.53258 19.0162C7.65429 18.9499 7.79061 18.915 7.92921 18.9146Z",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinejoin: "round"
  }), /*#__PURE__*/react.createElement("path", {
    fill: "none",
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 9.27271C10.4937 9.27271 9.27271 10.4937 9.27271 12C9.27271 13.5062 10.4937 14.7273 12 14.7273C13.5062 14.7273 14.7273 13.5062 14.7273 12C14.7255 10.4945 13.5055 9.27447 12 9.27271Z",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinejoin: "round"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "logo",
    viewBox: "0 0 160 35"
  }, /*#__PURE__*/react.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/react.createElement("path", {
    fill: "currentColor",
    d: "M125.471 24.653l-1.217-3.04h-6.06l-1.15 3.04h-4.115l6.57-15.487h3.672l6.503 15.487h-4.203zM121.268 13.3l-1.99 5.316h3.937l-1.947-5.316zM112.31 18.813c0 .933-.159 1.782-.476 2.548a5.538 5.538 0 01-1.36 1.969c-.59.547-1.302.973-2.135 1.28-.833.306-1.758.459-2.776.459-1.032 0-1.961-.153-2.787-.46-.826-.306-1.526-.732-2.101-1.28a5.552 5.552 0 01-1.328-1.968c-.31-.766-.464-1.615-.464-2.549V9.166h3.76v9.34c0 .423.056.824.166 1.203.11.38.28.719.509 1.018.229.299.53.535.907.71.376.176.83.263 1.36.263.531 0 .985-.087 1.36-.262.377-.176.683-.412.919-.711.236-.3.405-.638.508-1.018.104-.379.155-.78.155-1.203v-9.34h3.783v9.646zM96.789 23.712c-.767.394-1.663.715-2.688.963-1.025.248-2.142.372-3.35.372-1.254 0-2.408-.197-3.463-.59-1.054-.395-1.96-.949-2.72-1.663a7.578 7.578 0 01-1.78-2.57c-.429-1-.642-2.111-.642-3.337 0-1.24.217-2.362.652-3.368a7.493 7.493 0 011.803-2.57 8 8 0 012.699-1.63c1.032-.38 2.145-.569 3.34-.569 1.238 0 2.389.186 3.45.558 1.062.372 1.925.871 2.588 1.498l-2.389 2.69c-.368-.422-.855-.768-1.46-1.038-.604-.27-1.29-.405-2.057-.405-.663 0-1.275.12-1.836.361-.56.24-1.047.576-1.46 1.006a4.56 4.56 0 00-.962 1.532 5.32 5.32 0 00-.343 1.935c0 .715.104 1.371.31 1.97.207.597.513 1.111.918 1.541.406.43.907.766 1.504 1.007.597.24 1.28.36 2.046.36a7.75 7.75 0 001.261-.098 4.742 4.742 0 001.106-.317v-2.822H90.33V15.51h6.459v8.203zM159.307 16.866c0 1.356-.254 2.526-.763 3.51a7.095 7.095 0 01-2.013 2.429 8.429 8.429 0 01-2.82 1.4 11.547 11.547 0 01-3.186.448h-5.84V9.166h5.663c1.106 0 2.198.127 3.274.382a8.261 8.261 0 012.876 1.27c.84.59 1.519 1.381 2.035 2.373.516.991.774 2.216.774 3.675zm-3.937 0c0-.875-.144-1.6-.432-2.177a3.674 3.674 0 00-1.15-1.378 4.626 4.626 0 00-1.637-.733 8.13 8.13 0 00-1.891-.219h-1.88v9.057h1.791a8.22 8.22 0 001.958-.23 4.651 4.651 0 001.659-.755c.48-.35.863-.816 1.15-1.4.288-.583.432-1.305.432-2.165zM80.487 16.866c0 1.356-.255 2.526-.763 3.51a7.095 7.095 0 01-2.013 2.429 8.429 8.429 0 01-2.82 1.4 11.547 11.547 0 01-3.186.448h-5.84V9.166h5.663c1.106 0 2.197.127 3.274.382a8.261 8.261 0 012.875 1.27c.841.59 1.52 1.381 2.035 2.373.517.991.775 2.216.775 3.675zm-3.938 0c0-.875-.143-1.6-.431-2.177a3.674 3.674 0 00-1.15-1.378 4.626 4.626 0 00-1.637-.733 8.13 8.13 0 00-1.891-.219h-1.88v9.057h1.791a8.22 8.22 0 001.958-.23 4.651 4.651 0 001.659-.755c.479-.35.862-.816 1.15-1.4.288-.583.431-1.305.431-2.165zM60.468 24.653l-1.216-3.04H53.19l-1.15 3.04h-4.115l6.57-15.487h3.672l6.503 15.487h-4.203zM56.265 13.3l-1.99 5.316h3.937L56.265 13.3zM139.252 24.653l-3.385-6.147h-1.283v6.147h-3.716V9.166h5.973c.752 0 1.485.076 2.2.23a5.757 5.757 0 011.925.776 4.08 4.08 0 011.36 1.444c.34.598.509 1.341.509 2.23 0 1.05-.288 1.933-.863 2.648-.575.714-1.371 1.225-2.389 1.531l4.093 6.628h-4.424zm-.155-10.74c0-.365-.078-.66-.232-.886a1.586 1.586 0 00-.598-.525 2.615 2.615 0 00-.818-.252 6.102 6.102 0 00-.874-.066h-2.013v3.61h1.792c.31 0 .627-.026.951-.077.324-.05.62-.142.885-.273.265-.132.483-.321.652-.569.17-.248.255-.569.255-.963z"
  }), /*#__PURE__*/react.createElement("path", {
    fill: "#68BC71",
    d: "M17.154 0C11.792 0 5.324 1.252 0 4.007c0 5.95-.073 20.776 17.154 30.905C34.382 24.784 34.31 9.959 34.31 4.008 28.984 1.252 22.517 0 17.154 0z"
  }), /*#__PURE__*/react.createElement("path", {
    fill: "#67B279",
    d: "M17.137 34.902C-.073 24.772 0 9.956 0 4.007 5.319 1.255 11.778.003 17.137 0v34.902z"
  }), /*#__PURE__*/react.createElement("path", {
    fill: "#FFF",
    d: "M16.529 23.295l10.373-13.88c-.76-.605-1.427-.179-1.794.152l-.013.001-8.65 8.933-3.259-3.894c-1.554-1.783-3.668-.423-4.162-.063l7.505 8.75"
  }))), /*#__PURE__*/react.createElement("symbol", {
    id: "block-ad",
    viewBox: "0 0 17 17"
  }, /*#__PURE__*/react.createElement("g", {
    fill: "#DF3812",
    fillRule: "nonzero"
  }, /*#__PURE__*/react.createElement("path", {
    d: "M14 7.186V1.445C14 .649 13.376 0 12.606 0H1.394C.629 0 0 .645 0 1.44v10.12C0 12.354.628 13 1.402 13h5.634v-.9H1.402c-.272 0-.502-.237-.502-.54V1.44c0-.302.23-.54.494-.54h11.212c.265 0 .494.238.494.545v5.741h.9zm0-5.741C14 .649 13.376 0 12.606 0H1.394C.629 0 0 .645 0 1.44v10.12C0 12.354.628 13 1.402 13h5.634v-.9H1.402c-.272 0-.502-.237-.502-.54V1.44c0-.302.23-.54.494-.54h11.212c.265 0 .494.238.494.545v5.741h.9V1.445z"
  }), /*#__PURE__*/react.createElement("path", {
    d: "M9.55 16.29V6.992l6.63 5.95-2.708-.011 1.134 2.6-2.172 1.083-1.126-2.581L9.55 16.29zm.9-7.282v4.662l1.078-1.385 1.352 3.1.56-.278-1.344-3.082 1.724.007-3.37-3.024z"
  }))), /*#__PURE__*/react.createElement("symbol", {
    id: "sandwich",
    viewBox: "0 0 14 13"
  }, /*#__PURE__*/react.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/react.createElement("path", {
    d: "M-5-6h24v24H-5z"
  }), /*#__PURE__*/react.createElement("path", {
    stroke: "#4A90E2",
    strokeLinecap: "square",
    d: "M.5.5h13M.5 6.25h13M.5 12.25h13"
  }))), /*#__PURE__*/react.createElement("symbol", {
    id: "thumb-down",
    viewBox: "0 0 16 18"
  }, /*#__PURE__*/react.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/react.createElement("path", {
    d: "M-4-4h24v24H-4z"
  }), /*#__PURE__*/react.createElement("path", {
    fill: "#F5A623",
    d: "M14.719 7.667c.208-.742.083-1.765-.585-2.377.129-.515.126-1.161-.141-1.734a1.895 1.895 0 00-.818-.878 2.337 2.337 0 00-.342-1.147C12.441.89 11.764.445 10.803.208c-.405-.1-1.28-.126-1.28-.126h-.02c-1.623 0-3.51.646-5.464 1.892l-2.023.299a1.21 1.21 0 00-1.05 1.191v5.838c0 .49.358.723.64.91.156.103.372.237.617.393.686.434 1.834 1.161 2.222 1.532.485.463.933 1.277 1.406 2.138.305.553.62 1.126.984 1.684.464.71 1.158 1.116 1.904 1.116.637 0 1.246-.307 1.63-.822.425-.572.533-1.33.294-2.081-.264-.83-.602-1.798-1.106-2.69-.006-.01-.011-.02 0-.04.013-.022.025-.023.037-.023h3.635c.889 0 1.592-.491 1.882-1.316.289-.82.113-1.808-.392-2.436zm-1.49 2.874H9.594c-.711 0-1.161.755-.814 1.368.425.753.736 1.588 1.034 2.525.322 1.011-.325 1.763-1.075 1.763-.4 0-.827-.213-1.154-.714-.94-1.44-1.603-3.095-2.525-3.976-.728-.696-3.203-2.117-3.203-2.205V3.464a.34.34 0 01.294-.33l2.139-.322a.349.349 0 00.135-.05C6.352 1.513 8.086.935 9.502.935c.382 0 .74.042 1.074.124 1.658.408 1.763 1.413 1.696 1.934a.335.335 0 00.253.366c.886.233.927 1.421.646 1.998-.079.16-.003.35.156.434.662.35.71 1.375.45 1.856a.321.321 0 00.087.406c.725.563.764 2.487-.635 2.487z"
  }))), /*#__PURE__*/react.createElement("symbol", {
    id: "shield",
    viewBox: "0 0 14 15"
  }, /*#__PURE__*/react.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/react.createElement("path", {
    d: "M-5-5h24v24H-5z"
  }), /*#__PURE__*/react.createElement("path", {
    fill: "#67B279",
    d: "M7 15a.477.477 0 01-.145-.023c-1.583-.504-2.93-1.47-4.005-2.873C2.004 11 1.326 9.625.836 8.019.01 5.309 0 2.896 0 2.794c0-.243.186-.446.43-.47.036-.003 3.722-.38 6.291-2.234a.477.477 0 01.558 0c2.568 1.855 6.255 2.23 6.292 2.234a.473.473 0 01.429.47c0 .102-.01 2.515-.836 5.225-.49 1.606-1.168 2.98-2.014 4.085-1.075 1.403-2.422 2.37-4.005 2.874A.478.478 0 017 15zM.963 3.208c.04.792.193 2.616.788 4.558C2.767 11.081 4.533 13.187 7 14.031c2.473-.846 4.24-2.96 5.255-6.286a19.5 19.5 0 00.782-4.537C11.974 3.054 9.22 2.532 7 1.048 4.78 2.532 2.027 3.054.963 3.208z"
  }))), /*#__PURE__*/react.createElement("symbol", {
    id: "small-cross",
    viewBox: "0 0 14 12"
  }, /*#__PURE__*/react.createElement("path", {
    fill: "none",
    fillRule: "evenodd",
    stroke: "#B267A0",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    d: "M6.42857143,6.42857143 L17.604347,17.604347 M6.42857143,17.5714286 L17.604347,6.39565302",
    transform: "translate(-5 -6)"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "apple",
    viewBox: "0 0 24 24",
    width: "24",
    height: "24"
  }, /*#__PURE__*/react.createElement("path", {
    fill: "currentColor",
    d: "M14.8902 4.03331C15.5764 3.23057 16.0389 2.11243 15.9124 1C14.9235 1.038 13.7272 1.63744 13.0182 2.43923C12.3815 3.15077 11.8257 4.2879 11.9751 5.37849C13.0782 5.46114 14.204 4.837 14.8902 4.03331M17.3638 11.0936C17.3914 13.9692 19.9715 14.9259 20 14.9382C19.9791 15.0057 19.5879 16.3014 18.641 17.6409C17.8215 18.798 16.9717 19.9503 15.6326 19.975C14.3173 19.9988 13.8938 19.2208 12.3892 19.2208C10.8854 19.2208 10.4153 19.9503 9.17045 19.9988C7.87802 20.0453 6.893 18.7467 6.06786 17.5934C4.37952 15.2346 3.08994 10.9274 4.82206 8.02041C5.68241 6.57738 7.21943 5.66254 8.88874 5.63974C10.1574 5.61599 11.3556 6.46528 12.1312 6.46528C12.9069 6.46528 14.363 5.44404 15.8934 5.59414C16.5339 5.61979 18.3326 5.84399 19.487 7.47891C19.3938 7.53496 17.3409 8.69015 17.3638 11.0936"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "android",
    viewBox: "0 0 24 24",
    width: "24",
    height: "24"
  }, /*#__PURE__*/react.createElement("path", {
    fill: "currentColor",
    fillRule: "evenodd",
    d: "M6.6 17.25C6.6 17.7312 7.005 18.125 7.5 18.125H8.4V21.1875C8.4 21.9137 9.003 22.5 9.75 22.5C10.497 22.5 11.1 21.9137 11.1 21.1875V18.125H12.9V21.1875C12.9 21.9137 13.503 22.5 14.25 22.5C14.997 22.5 15.6 21.9137 15.6 21.1875V18.125H16.5C16.995 18.125 17.4 17.7312 17.4 17.25V8.49995H6.6V17.25V17.25ZM3.85 8.49995C3.103 8.49995 2.5 9.0862 2.5 9.81245V15.9375C2.5 16.6637 3.103 17.25 3.85 17.25C4.597 17.25 5.2 16.6637 5.2 15.9375V9.81245C5.2 9.0862 4.597 8.49995 3.85 8.49995V8.49995ZM20.15 8.49995C19.403 8.49995 18.8 9.0862 18.8 9.81245V15.9375C18.8 16.6637 19.403 17.25 20.15 17.25C20.897 17.25 21.5 16.6637 21.5 15.9375V9.81245C21.5 9.0862 20.897 8.49995 20.15 8.49995V8.49995ZM15.177 3.08995L16.347 1.95245C16.527 1.77745 16.527 1.5062 16.347 1.3312C16.167 1.1562 15.888 1.1562 15.708 1.3312L14.376 2.6262C13.665 2.2762 12.855 2.07495 12 2.07495C11.136 2.07495 10.326 2.2762 9.60598 2.6262L8.26498 1.3312C8.08498 1.1562 7.80598 1.1562 7.62598 1.3312C7.44598 1.5062 7.44598 1.77745 7.62598 1.95245L8.80498 3.0987C7.47298 4.05245 6.59998 5.5837 6.59998 7.32495H17.4C17.4 5.5837 16.527 4.0437 15.177 3.08995V3.08995ZM10.2 5.57495H9.29999V4.69995H10.2V5.57495V5.57495ZM14.7 5.57495H13.8V4.69995H14.7V5.57495V5.57495Z"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "cross",
    viewBox: "0 0 15.642 15.642"
  }, /*#__PURE__*/react.createElement("path", {
    d: "m8.882 7.821 6.541-6.541c.293-.293.293-.768 0-1.061s-.768-.293-1.061 0l-6.541 6.541-6.541-6.54c-.293-.293-.768-.293-1.061 0s-.293.768 0 1.061l6.541 6.541-6.54 6.54c-.293.293-.293.768 0 1.061.147.146.338.22.53.22s.384-.073.53-.22l6.541-6.541 6.541 6.541c.147.146.338.22.53.22s.384-.073.53-.22c.293-.293.293-.768 0-1.061z",
    fill: "currentColor",
    fillRule: "evenodd"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "cross-gray",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("path", {
    d: "M6.42857 6.79596L17.6043 18.6103",
    stroke: "#888888",
    strokeWidth: "1.5",
    strokeLinecap: "round"
  }), /*#__PURE__*/react.createElement("path", {
    d: "M6.42871 18.5755L17.6045 6.76111",
    stroke: "#888888",
    strokeWidth: "1.5",
    strokeLinecap: "round"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "play",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M19 12L7 20L7 4L19 12Z",
    stroke: "#a4a4a4",
    strokeWidth: "3",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    fill: "#fff"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "circle",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2.5 12C2.5 6.75329 6.75329 2.5 12 2.5C17.2467 2.5 21.5 6.75329 21.5 12C21.5 17.2467 17.2467 21.5 12 21.5C6.75329 21.5 2.5 17.2467 2.5 12ZM18.5 12C18.5 8.41015 15.5899 5.5 12 5.5C8.41015 5.5 5.5 8.41015 5.5 12C5.5 15.5899 8.41015 18.5 12 18.5C15.5899 18.5 18.5 15.5899 18.5 12Z",
    fill: "#c23814"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "checkmark",
    viewBox: "0 0 24 24"
  }, /*#__PURE__*/react.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M20.9842 4.86804C21.6094 5.4116 21.6755 6.35904 21.132 6.98421L10.6987 18.9842C10.4212 19.3034 10.0219 19.4905 9.5991 19.4997C9.1763 19.5088 8.76928 19.339 8.47828 19.0322L2.91156 13.1617C2.34153 12.5606 2.36674 11.6112 2.96787 11.0412C3.569 10.4711 4.51841 10.4963 5.08845 11.0975L9.51856 15.7693L18.868 5.01584C19.4116 4.39066 20.359 4.32449 20.9842 4.86804Z",
    fill: "#67b279"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "exclamation",
    viewBox: "0 0 4 24"
  }, /*#__PURE__*/react.createElement("path", {
    d: "M3.9697 6.88858V0H0V6.88858L0.848485 15.4217H3.12121L3.9697 6.88858ZM4 22V17.8731H0V22H4Z",
    fill: "#D58500"
  })), /*#__PURE__*/react.createElement("symbol", {
    id: "select",
    viewBox: "0 0 14 8"
  }, /*#__PURE__*/react.createElement("path", {
    d: "m6 10 6 6 6-6",
    fill: "none",
    stroke: "#888",
    strokeLinecap: "round",
    strokeWidth: "1.5",
    transform: "translate(-5 -9)"
  })));
};
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Main/main.pcss
var main = __webpack_require__(21936);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Main/main.pcss

      
      
      
      
      
      
      
      
      

var main_options = {};

main_options.styleTagTransform = (styleTagTransform_default());
main_options.setAttributes = (setAttributesWithoutAttributes_default());

      main_options.insert = insertBySelector_default().bind(null, "head");
    
main_options.domAPI = (styleDomAPI_default());
main_options.insertStyleElement = (insertStyleElement_default());

var main_update = injectStylesIntoStyleTag_default()(main/* default */.Z, main_options);




       /* harmony default export */ const Main_main = (main/* default */.Z && main/* default.locals */.Z.locals ? main/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Main/Main.jsx







const Main = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const switchersMap = {
    [POPUP_STATES.APPLICATION_ENABLED]: {
      handler: () => {
        store.toggleAllowlisted();
      },
      mode: 'enabled'
    },
    [POPUP_STATES.APPLICATION_FILTERING_DISABLED]: {
      handler: () => {
        store.changeApplicationFilteringDisabled(false);
      },
      mode: 'disabled'
    },
    [POPUP_STATES.APPLICATION_UNAVAILABLE]: {
      mode: 'unavailable'
    },
    [POPUP_STATES.SITE_IN_EXCEPTION]: {
      mode: 'in-exception'
    },
    [POPUP_STATES.SITE_ALLOWLISTED]: {
      handler: () => {
        store.toggleAllowlisted();
      },
      mode: 'allowlisted'
    }
  };
  const switcher = switchersMap[store.popupState];
  return /*#__PURE__*/react.createElement("div", {
    className: `main main--${switcher.mode}`
  }, store.isInitialDataReceived && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {
    className: "main__header"
  }, store.showInfoAboutFullVersion && /*#__PURE__*/react.createElement("div", {
    className: "main__cta-link"
  }, /*#__PURE__*/react.createElement("a", {
    href: "https://link.adtidy.org/forward.html?action=compare&from=popup&app=browser_extension",
    target: "_blank",
    rel: "noreferrer"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_header_cta_link'))), /*#__PURE__*/react.createElement("div", {
    className: "main__stats"
  }, /*#__PURE__*/react.createElement("div", {
    className: "main__total-blocked-tab"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_tab_blocked_count', {
    num: store.totalBlockedTab.toLocaleString()
  })), /*#__PURE__*/react.createElement("div", {
    className: "main__total-blocked-all"
  }, reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_tab_blocked_all_count', {
    num: store.totalBlocked.toLocaleString()
  })))), /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: "switcher",
    onClick: switcher.handler,
    title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_switch_button')
  }, /*#__PURE__*/react.createElement("div", {
    className: `switcher__center switcher__center--${switcher.mode}`
  }), /*#__PURE__*/react.createElement("div", {
    className: "switcher__btn"
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#checkmark",
    classname: "icon--checkmark switcher__icon switcher__icon--checkmark",
    width: "66",
    height: "66"
  }), /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#circle",
    classname: "icon--circle switcher__icon switcher__icon--circle"
  }), /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#play",
    classname: "icon--play switcher__icon switcher__icon--play"
  }), /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#exclamation",
    classname: "icon--exclamation switcher__icon switcher__icon--exclamation"
  }))), /*#__PURE__*/react.createElement("div", {
    className: "switcher__info"
  }, /*#__PURE__*/react.createElement("div", {
    className: "current-site"
  }, store.currentSite), /*#__PURE__*/react.createElement("div", {
    className: "current-status"
  }, store.currentStatusMessage))));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Main/index.js

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsChart/Filters.jsx






const Filters = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const {
    stats
  } = store;

  if (!stats) {
    return null;
  }

  const statsData = store.statsDataByType;
  const existingGroups = stats.blockedGroups.filter(group => {
    return statsData.find(data => data.groupId === group.groupId);
  });

  const handleBlockedTypeChange = e => {
    store.setSelectedBlockedType(e.target.value);
  };

  const handleTimeRangeChange = e => {
    store.setSelectedTimeRange(e.target.value);
  };

  const timeRangeOptions = {
    [TIME_RANGES.DAY]: {
      id: TIME_RANGES.DAY,
      title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_time_day')
    },
    [TIME_RANGES.WEEK]: {
      id: TIME_RANGES.WEEK,
      title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_time_week')
    },
    [TIME_RANGES.MONTH]: {
      id: TIME_RANGES.MONTH,
      title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_time_month')
    },
    [TIME_RANGES.YEAR]: {
      id: TIME_RANGES.YEAR,
      title: reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_time_year')
    }
  };
  return /*#__PURE__*/react.createElement("div", {
    className: "stats-chart__filters"
  }, /*#__PURE__*/react.createElement("div", {
    className: "stats-chart__select stats-chart__select--left"
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#select",
    classname: "icon--select stats-chart__icon"
  }), /*#__PURE__*/react.createElement("select", {
    className: "stats-chart__select-in",
    name: "blocked-type",
    id: "blocked-type",
    onChange: handleBlockedTypeChange,
    value: store.selectedBlockedType
  }, existingGroups.map(group => {
    return /*#__PURE__*/react.createElement("option", {
      key: group.groupId,
      value: group.groupId
    }, group.groupName);
  }))), /*#__PURE__*/react.createElement("div", {
    className: "stats-chart__select stats-chart__select--left"
  }, /*#__PURE__*/react.createElement(Icon/* Icon */.J, {
    id: "#select",
    classname: "icon--select stats-chart__icon"
  }), /*#__PURE__*/react.createElement("select", {
    className: "stats-chart__select-in",
    name: "time-range",
    id: "time-range",
    onChange: handleTimeRangeChange,
    value: store.selectedTimeRange
  }, Object.values(timeRangeOptions).map(timeRange => {
    return /*#__PURE__*/react.createElement("option", {
      key: timeRange.id,
      value: timeRange.id
    }, timeRange.title);
  }))));
});
// EXTERNAL MODULE: ./node_modules/c3/c3.js
var c3 = __webpack_require__(36554);
var c3_default = /*#__PURE__*/__webpack_require__.n(c3);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./node_modules/c3/c3.css
var c3_c3 = __webpack_require__(25460);
;// CONCATENATED MODULE: ./node_modules/c3/c3.css

      
      
      
      
      
      
      
      
      

var c3_options = {};

c3_options.styleTagTransform = (styleTagTransform_default());
c3_options.setAttributes = (setAttributesWithoutAttributes_default());

      c3_options.insert = insertBySelector_default().bind(null, "head");
    
c3_options.domAPI = (styleDomAPI_default());
c3_options.insertStyleElement = (insertStyleElement_default());

var c3_update = injectStylesIntoStyleTag_default()(c3_c3/* default */.Z, c3_options);




       /* harmony default export */ const node_modules_c3_c3 = (c3_c3/* default */.Z && c3_c3/* default.locals */.Z.locals ? c3_c3/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Stats/StatsChart/chart.pcss
var chart = __webpack_require__(18572);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsChart/chart.pcss

      
      
      
      
      
      
      
      
      

var chart_options = {};

chart_options.styleTagTransform = (styleTagTransform_default());
chart_options.setAttributes = (setAttributesWithoutAttributes_default());

      chart_options.insert = insertBySelector_default().bind(null, "head");
    
chart_options.domAPI = (styleDomAPI_default());
chart_options.insertStyleElement = (insertStyleElement_default());

var chart_update = injectStylesIntoStyleTag_default()(chart/* default */.Z, chart_options);




       /* harmony default export */ const StatsChart_chart = (chart/* default */.Z && chart/* default.locals */.Z.locals ? chart/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsChart/Chart.jsx






const DAYS_OF_WEEK = [reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_week_days_mon'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_week_days_tue'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_week_days_wed'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_week_days_thu'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_week_days_fri'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_week_days_sat'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_week_days_sun')];

const dayOfWeekAsString = dayIndex => {
  return DAYS_OF_WEEK[dayIndex];
};

const MONTHS_OF_YEAR = [reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_jan'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_feb'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_mar'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_apr'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_may'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_jun'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_jul'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_aug'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_sep'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_oct'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_nov'), reactTranslator/* reactTranslator.getMessage */._.getMessage('popup_statistics_months_dec')];

const monthsAsString = monthIndex => {
  return MONTHS_OF_YEAR[monthIndex];
};

const selectRequestsStatsData = (stats, range, type) => {
  const result = [];

  switch (range) {
    case TIME_RANGES.DAY:
      stats.today.forEach(d => {
        result.push(d[type]);
      });
      break;

    case TIME_RANGES.WEEK:
      stats.lastWeek.forEach(d => {
        result.push(d[type]);
      });
      break;

    case TIME_RANGES.MONTH:
      stats.lastMonth.forEach(d => {
        result.push(d[type]);
      });
      break;

    case TIME_RANGES.YEAR:
      stats.lastYear.forEach(d => {
        result.push(d[type]);
      });
      break;

    default:
      break;
  }

  return result.map(val => val === undefined ? 0 : val);
};

const getCategoriesLines = (statsData, range) => {
  const now = new Date();
  const day = now.getDay();
  const month = now.getMonth();
  const lastDayOfPrevMonth = new Date(now.getFullYear(), now.getMonth(), 0).getDate();
  let categories = [];
  const lines = [];
  const HOURS_PER_DAY = 24;
  const DAYS_PER_WEEK = 7;
  const DAYS_PER_MONTH = 30;
  const MONTHS_PER_YEAR = 12;

  switch (range) {
    case TIME_RANGES.DAY:
      for (let i = 1; i <= HOURS_PER_DAY; i += 1) {
        if (i % 3 === 0) {
          const hour = (i + now.getHours()) % HOURS_PER_DAY;
          categories.push(hour.toString());
          lines.push({
            value: i - 1
          });
        } else {
          categories.push('');
        }
      }

      break;

    case TIME_RANGES.WEEK:
      for (let i = 0; i < DAYS_PER_WEEK; i += 1) {
        categories.push(dayOfWeekAsString((day + i) % DAYS_PER_WEEK));
        lines.push({
          value: i
        });
      }

      break;

    case TIME_RANGES.MONTH:
      for (let i = 0; i <= DAYS_PER_MONTH; i += 1) {
        if (i % 3 === 0) {
          const c = (i + now.getDate()) % lastDayOfPrevMonth + 1;
          categories.push(c.toString());
          lines.push({
            value: i
          });
        } else {
          categories.push('');
        }
      }

      break;

    case TIME_RANGES.YEAR:
      for (let i = 0; i <= MONTHS_PER_YEAR; i += 1) {
        categories.push(monthsAsString((month + i) % MONTHS_PER_YEAR));
        categories = categories.slice(-statsData.length);
        lines.push({
          value: i
        });
      }

      break;

    default:
      throw new Error(`Wrong range type: ${range}`);
  }

  return {
    categories,
    lines
  };
};

const Chart = ({
  stats,
  range,
  type
}) => {
  (0,react.useEffect)(() => {
    const statsData = selectRequestsStatsData(stats, range, type);
    const categoriesLines = getCategoriesLines(statsData, range);
    const {
      categories
    } = categoriesLines;
    const {
      lines
    } = categoriesLines;
    const grad1 = '<linearGradient id="grad1" x1="50%" y1="0%" x2="50%" y2="100%">' + '  <stop offset="0%" style="stop-color:#73BE66;stop-opacity:1" />' + '  <stop offset="23%" style="stop-color:#6DBE85;stop-opacity:1" />' + '  <stop offset="100%" style="stop-color:#65BDA8;stop-opacity:1" />' + '</linearGradient>';
    c3_default().generate({
      bindTo: '#chart',
      size: {
        height: 230
      },
      data: {
        columns: [['data1'].concat(statsData)],
        types: {
          data1: 'area-spline'
        },
        colors: {
          data1: 'url(#grad1)'
        }
      },
      padding: {
        left: 15,
        right: 15
      },
      axis: {
        x: {
          show: true,
          type: 'category',
          categories,
          tick: {
            outer: false,
            multiline: false
          }
        },
        y: {
          show: false
        }
      },
      legend: {
        show: false
      },
      grid: {
        lines: {
          front: false
        },
        x: {
          lines
        },
        focus: {
          show: true
        }
      },
      spline: {
        interpolation: {
          type: 'basis'
        }
      },
      point: {
        show: false
      },
      tooltip: {
        position(data, width, height, element) {
          const chart = document.querySelector('#chart');
          const elementRect = element.getBoundingClientRect();
          const elementCenterPosition = elementRect.left + elementRect.width / 2;
          const tooltipHalfWidth = chart.querySelector('.chart__tooltip').clientWidth / 2;
          const tooltipLeft = elementCenterPosition - tooltipHalfWidth; // eslint-disable-next-line no-undef

          const top = d3.mouse(element)[1] - 50;
          return {
            top,
            left: tooltipLeft
          };
        },

        contents(d) {
          const [{
            value
          }] = d;
          return `<div id="tooltip" class="chart__tooltip">${value}</div>`;
        }

      },

      oninit() {
        // eslint-disable-next-line react/no-this-in-sfc
        this.svg[0][0].getElementsByTagName('defs')[0].innerHTML += grad1;
      }

    });
  }, [range, type, stats]);
  return /*#__PURE__*/react.createElement("div", {
    className: "chart",
    id: "chart"
  });
};
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Stats/StatsChart/stats-chart.pcss
var stats_chart = __webpack_require__(95191);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsChart/stats-chart.pcss

      
      
      
      
      
      
      
      
      

var stats_chart_options = {};

stats_chart_options.styleTagTransform = (styleTagTransform_default());
stats_chart_options.setAttributes = (setAttributesWithoutAttributes_default());

      stats_chart_options.insert = insertBySelector_default().bind(null, "head");
    
stats_chart_options.domAPI = (styleDomAPI_default());
stats_chart_options.insertStyleElement = (insertStyleElement_default());

var stats_chart_update = injectStylesIntoStyleTag_default()(stats_chart/* default */.Z, stats_chart_options);




       /* harmony default export */ const StatsChart_stats_chart = (stats_chart/* default */.Z && stats_chart/* default.locals */.Z.locals ? stats_chart/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsChart/StatsChart.jsx






const StatsChart = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const {
    stats
  } = store;

  if (!stats) {
    return null;
  }

  return /*#__PURE__*/react.createElement("div", {
    className: "stats-chart"
  }, /*#__PURE__*/react.createElement(Filters, null), /*#__PURE__*/react.createElement(Chart, {
    stats: stats,
    range: store.selectedTimeRange,
    type: store.selectedBlockedType
  }));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Stats/StatsChart/index.js

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/MainContainer/main-container.pcss
var main_container = __webpack_require__(20291);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/MainContainer/main-container.pcss

      
      
      
      
      
      
      
      
      

var main_container_options = {};

main_container_options.styleTagTransform = (styleTagTransform_default());
main_container_options.setAttributes = (setAttributesWithoutAttributes_default());

      main_container_options.insert = insertBySelector_default().bind(null, "head");
    
main_container_options.domAPI = (styleDomAPI_default());
main_container_options.insertStyleElement = (insertStyleElement_default());

var main_container_update = injectStylesIntoStyleTag_default()(main_container/* default */.Z, main_container_options);




       /* harmony default export */ const MainContainer_main_container = (main_container/* default */.Z && main_container/* default.locals */.Z.locals ? main_container/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/MainContainer/MainContainer.jsx







const MainContainer = (0,mobxreact_esm/* observer */.Pi)(() => {
  const store = (0,react.useContext)(popupStore);
  const contentMap = {
    [VIEW_STATES.ACTIONS]: Main,
    [VIEW_STATES.STATS]: StatsChart
  };
  const Content = contentMap[store.viewState];
  return /*#__PURE__*/react.createElement("div", {
    className: "main-container"
  }, /*#__PURE__*/react.createElement(Content, null));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/MainContainer/index.js

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/PromoNotification/promo-notification.pcss
var promo_notification = __webpack_require__(60384);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/PromoNotification/promo-notification.pcss

      
      
      
      
      
      
      
      
      

var promo_notification_options = {};

promo_notification_options.styleTagTransform = (styleTagTransform_default());
promo_notification_options.setAttributes = (setAttributesWithoutAttributes_default());

      promo_notification_options.insert = insertBySelector_default().bind(null, "head");
    
promo_notification_options.domAPI = (styleDomAPI_default());
promo_notification_options.insertStyleElement = (insertStyleElement_default());

var promo_notification_update = injectStylesIntoStyleTag_default()(promo_notification/* default */.Z, promo_notification_options);




       /* harmony default export */ const PromoNotification_promo_notification = (promo_notification/* default */.Z && promo_notification/* default.locals */.Z.locals ? promo_notification/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/PromoNotification/PromoNotification.jsx







const PromoNotification = (0,mobxreact_esm/* observer */.Pi)(() => {
  const {
    promoNotification,
    closePromoNotification,
    openPromoNotificationUrl
  } = (0,react.useContext)(popupStore);
  const [notificationOnClose, setNotificationOnClose] = (0,react.useState)(false); // schedule notification removal

  (0,react.useEffect)(() => {
    if (promoNotification) {
      messenger/* messenger.sendMessage */.d.sendMessage(constants/* MESSAGE_TYPES.SET_NOTIFICATION_VIEWED */.oK.SET_NOTIFICATION_VIEWED, {
        withDelay: true
      });
    }
  }, [promoNotification]);

  if (!promoNotification) {
    return null;
  }

  const closeTimeoutMs = 300;

  const handleNotificationClose = e => {
    setNotificationOnClose(true);
    setTimeout(() => {
      e.preventDefault();
      closePromoNotification();
    }, closeTimeoutMs);
  };

  const handleNotificationClick = e => {
    e.preventDefault();
    openPromoNotificationUrl();
  };

  const {
    title,
    btn
  } = promoNotification.text;
  const notificationClassnames = classnames_default()('promo-notification', {
    'promo-notification--close': notificationOnClose
  });
  return /*#__PURE__*/react.createElement("div", {
    className: notificationClassnames
  }, /*#__PURE__*/react.createElement("button", {
    "aria-label": "close",
    type: "button",
    className: "promo-notification__close",
    onClick: handleNotificationClose
  }, /*#__PURE__*/react.createElement("svg", {
    className: "icon icon--button"
  }, /*#__PURE__*/react.createElement("use", {
    xlinkHref: "#cross-gray"
  }))), /*#__PURE__*/react.createElement("div", {
    className: "promo-notification__content"
  }, /*#__PURE__*/react.createElement("div", {
    className: "promo-notification__title"
  }, title), /*#__PURE__*/react.createElement("button", {
    type: "button",
    className: "promo-notification__btn",
    onClick: handleNotificationClick
  }, btn)));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/PromoNotification/index.js

// EXTERNAL MODULE: ./Extension/src/pages/common/hooks/useAppearanceTheme.js
var useAppearanceTheme = __webpack_require__(72730);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/styles/main.pcss
var styles_main = __webpack_require__(65201);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/styles/main.pcss

      
      
      
      
      
      
      
      
      

var styles_main_options = {};

styles_main_options.styleTagTransform = (styleTagTransform_default());
styles_main_options.setAttributes = (setAttributesWithoutAttributes_default());

      styles_main_options.insert = insertBySelector_default().bind(null, "head");
    
styles_main_options.domAPI = (styleDomAPI_default());
styles_main_options.insertStyleElement = (insertStyleElement_default());

var styles_main_update = injectStylesIntoStyleTag_default()(styles_main/* default */.Z, styles_main_options);




       /* harmony default export */ const popup_styles_main = (styles_main/* default */.Z && styles_main/* default.locals */.Z.locals ? styles_main/* default.locals */.Z.locals : undefined);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!./node_modules/postcss-loader/dist/cjs.js!./Extension/src/pages/popup/components/Popup/popup.pcss
var popup = __webpack_require__(12845);
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Popup/popup.pcss

      
      
      
      
      
      
      
      
      

var popup_options = {};

popup_options.styleTagTransform = (styleTagTransform_default());
popup_options.setAttributes = (setAttributesWithoutAttributes_default());

      popup_options.insert = insertBySelector_default().bind(null, "head");
    
popup_options.domAPI = (styleDomAPI_default());
popup_options.insertStyleElement = (insertStyleElement_default());

var popup_update = injectStylesIntoStyleTag_default()(popup/* default */.Z, popup_options);




       /* harmony default export */ const Popup_popup = (popup/* default */.Z && popup/* default.locals */.Z.locals ? popup/* default.locals */.Z.locals : undefined);

;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Popup/Popup.jsx













const Popup = (0,mobxreact_esm/* observer */.Pi)(() => {
  const {
    appearanceTheme,
    getPopupData,
    updateBlockedStats
  } = (0,react.useContext)(popupStore);
  (0,useAppearanceTheme/* useAppearanceTheme */.D)(appearanceTheme); // retrieve init data

  (0,react.useEffect)(() => {
    (async () => {
      await getPopupData();
    })();
  }, [getPopupData]); // subscribe to stats change

  (0,react.useEffect)(() => {
    const messageHandler = message => {
      switch (message.type) {
        case 'updateTotalBlocked':
          {
            const {
              tabInfo
            } = message;
            updateBlockedStats(tabInfo);
            break;
          }

        default:
          break;
      }
    };

    messenger/* messenger.onMessage.addListener */.d.onMessage.addListener(messageHandler);
    return () => {
      messenger/* messenger.onMessage.removeListener */.d.onMessage.removeListener(messageHandler);
    };
  }, [updateBlockedStats]);
  return /*#__PURE__*/react.createElement("div", {
    className: "popup"
  }, /*#__PURE__*/react.createElement(Icons, null), /*#__PURE__*/react.createElement(Header, null), /*#__PURE__*/react.createElement(MainContainer, null), /*#__PURE__*/react.createElement(Tabs, null), /*#__PURE__*/react.createElement(Footer, null), /*#__PURE__*/react.createElement(PromoNotification, null));
});
;// CONCATENATED MODULE: ./Extension/src/pages/popup/components/Popup/index.js

;// CONCATENATED MODULE: ./Extension/src/pages/popup/index.jsx




const popupPage = {
  init: () => {
    document.documentElement.lang = i18n/* i18n.getUILanguage */.a.getUILanguage();
    react_dom.render( /*#__PURE__*/react.createElement(Popup, null), document.getElementById('root'));
  }
};
;// CONCATENATED MODULE: ./Extension/pages/popup/index.js

popupPage.init();

/***/ }),

/***/ 92273:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "X": () => (/* reexport default from dynamic */ webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default.a)
/* harmony export */ });
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53679);
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _windows__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5802);


(0,_windows__WEBPACK_IMPORTED_MODULE_1__/* .patchWindows */ .x)((webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default()));


/***/ }),

/***/ 5802:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "x": () => (/* binding */ patchWindows)
/* harmony export */ });
/* eslint-disable no-unused-vars */

/**
 * This function patches if necessary browser.windows implementation for Firefox for Android
 */
const patchWindows = function (browser) {
  // Make compatible with Android WebExt
  if (typeof browser.windows === 'undefined') {
    browser.windows = function () {
      const defaultWindow = {
        id: 1,
        type: 'normal'
      };
      const emptyListener = {
        addListener() {// Doing nothing
        }

      };

      const create = function (createData) {
        return Promise.resolve(defaultWindow);
      };

      const update = function (windowId, data) {
        return Promise.resolve();
      };

      const getAll = function (query) {
        return Promise.resolve(defaultWindow);
      };

      const getLastFocused = function () {
        return Promise.resolve(defaultWindow);
      };

      return {
        onCreated: emptyListener,
        onRemoved: emptyListener,
        onFocusChanged: emptyListener,
        create,
        update,
        getAll,
        getLastFocused
      };
    }();
  }
};

/***/ }),

/***/ 71351:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VX": () => (/* binding */ runtimeImpl),
/* harmony export */   "ey": () => (/* binding */ addMinDurationTime)
/* harmony export */ });
/* unused harmony exports i18n, sleep, sleepIfNecessary */
/* harmony import */ var _background_extension_api_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(92273);
/**
 * This file is part of Adguard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * Adguard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Adguard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Adguard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

const runtimeImpl = (() => {
  return {
    onMessage: _background_extension_api_browser__WEBPACK_IMPORTED_MODULE_0__/* .browser.runtime.onMessage */ .X.runtime.onMessage,
    sendMessage: _background_extension_api_browser__WEBPACK_IMPORTED_MODULE_0__/* .browser.runtime.sendMessage */ .X.runtime.sendMessage
  };
})(); // eslint-disable-next-line prefer-destructuring

const i18n = _background_extension_api_browser__WEBPACK_IMPORTED_MODULE_0__/* .browser.i18n */ .X.i18n;
/**
 * Sleeps given period of time
 * @param wait
 * @returns {Promise<unknown>}
 */

const sleep = wait => {
  return new Promise(resolve => {
    setTimeout(resolve, wait);
  });
};
/**
 * Sleeps necessary period of time if minimum duration didn't pass since entry time
 * @param {number} entryTimeMs
 * @param {number} minDurationMs
 * @returns {Promise<void>}
 */

const sleepIfNecessary = async (entryTimeMs, minDurationMs) => {
  if (Date.now() - entryTimeMs < minDurationMs) {
    await sleep(minDurationMs - (Date.now() - entryTimeMs));
  }
};
/**
 * Executes async function with at least required time
 * @param fn
 * @param minDurationMs
 */

const addMinDurationTime = (fn, minDurationMs) => {
  return async (...args) => {
    const start = Date.now();

    try {
      const response = await fn(...args);
      await sleepIfNecessary(start, minDurationMs);
      return response;
    } catch (e) {
      await sleepIfNecessary(start, minDurationMs);
      throw e;
    }
  };
};

/***/ }),

/***/ 84568:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CI": () => (/* binding */ ANTIBANNER_GROUPS_ID),
/* harmony export */   "Jn": () => (/* binding */ STEALTH_ACTIONS),
/* harmony export */   "Oi": () => (/* binding */ FULLSCREEN_USER_RULES_EDITOR),
/* harmony export */   "Qp": () => (/* binding */ NOTIFIER_TYPES),
/* harmony export */   "TJ": () => (/* binding */ NAVIGATION_TAGS),
/* harmony export */   "VC": () => (/* binding */ CUSTOM_FILTERS_GROUP_DISPLAY_NUMBER),
/* harmony export */   "XR": () => (/* binding */ TRUSTED_TAG),
/* harmony export */   "XS": () => (/* binding */ WASTE_CHARACTERS),
/* harmony export */   "du": () => (/* binding */ FILTERING_LOG),
/* harmony export */   "gu": () => (/* binding */ ANTIBANNER_FILTERS_ID),
/* harmony export */   "ih": () => (/* binding */ CUSTOM_FILTERS_START_ID),
/* harmony export */   "nn": () => (/* binding */ SCROLLBAR_WIDTH),
/* harmony export */   "oK": () => (/* binding */ MESSAGE_TYPES)
/* harmony export */ });
/**
 * Filter ids used in the code on the background page and filtering log page
 */
const ANTIBANNER_FILTERS_ID = {
  STEALTH_MODE_FILTER_ID: -1,
  USER_FILTER_ID: 0,
  RUSSIAN_FILTER_ID: 1,
  ENGLISH_FILTER_ID: 2,
  TRACKING_FILTER_ID: 3,
  SOCIAL_FILTER_ID: 4,
  SEARCH_AND_SELF_PROMO_FILTER_ID: 10,
  URL_TRACKING_FILTER_ID: 17,
  ALLOWLIST_FILTER_ID: 100,
  EASY_PRIVACY: 118,
  FANBOY_ANNOYANCES: 122,
  FANBOY_SOCIAL: 123,
  FANBOY_ENHANCED: 215,
  MOBILE_ADS_FILTER_ID: 11
};
/**
 * Group ids used in the code on the multiple entry points
 */

const ANTIBANNER_GROUPS_ID = {
  // custom filters group identifier
  CUSTOM_FILTERS_GROUP_ID: 0,
  PRIVACY_FILTERS_GROUP_ID: 2,
  // other filters group identifier
  OTHER_FILTERS_GROUP_ID: 6,
  // language-specific group identifier
  LANGUAGE_FILTERS_GROUP_ID: 7
};
/**
 * Stealth action bitwise masks used o the background page and on the filtering log page
 */

const STEALTH_ACTIONS = {
  HIDE_REFERRER: 1 << 0,
  HIDE_SEARCH_QUERIES: 1 << 1,
  BLOCK_CHROME_CLIENT_DATA: 1 << 2,
  SEND_DO_NOT_TRACK: 1 << 3,
  STRIPPED_TRACKING_URL: 1 << 4,
  FIRST_PARTY_COOKIES: 1 << 5,
  THIRD_PARTY_COOKIES: 1 << 6
};
/**
 * Message types used for message passing between background page and
 * other pages (popup, filtering log, content scripts)
 */

const MESSAGE_TYPES = {
  SCRIPTLET_CLOSE_WINDOW: 'scriptletCloseWindow',
  CREATE_EVENT_LISTENER: 'createEventListener',
  REMOVE_LISTENER: 'removeListener',
  OPEN_EXTENSION_STORE: 'openExtensionStore',
  OPEN_COMPARE_PAGE: 'openComparePage',
  ADD_AND_ENABLE_FILTER: 'addAndEnableFilter',
  APPLY_SETTINGS_JSON: 'applySettingsJson',
  OPEN_FILTERING_LOG: 'openFilteringLog',
  SET_FILTERING_LOG_WINDOW_STATE: 'setFilteringLogWindowState',
  OPEN_FULLSCREEN_USER_RULES: 'openFullscreenUserRules',
  RESET_BLOCKED_ADS_COUNT: 'resetBlockedAdsCount',
  RESET_SETTINGS: 'resetSettings',
  GET_USER_RULES: 'getUserRules',
  SAVE_USER_RULES: 'saveUserRules',
  GET_ALLOWLIST_DOMAINS: 'getAllowlistDomains',
  SAVE_ALLOWLIST_DOMAINS: 'saveAllowlistDomains',
  CHECK_ANTIBANNER_FILTERS_UPDATE: 'checkAntiBannerFiltersUpdate',
  DISABLE_FILTERS_GROUP: 'disableFiltersGroup',
  DISABLE_ANTIBANNER_FILTER: 'disableAntiBannerFilter',
  LOAD_CUSTOM_FILTER_INFO: 'loadCustomFilterInfo',
  SUBSCRIBE_TO_CUSTOM_FILTER: 'subscribeToCustomFilter',
  REMOVE_ANTIBANNER_FILTER: 'removeAntiBannerFilter',
  GET_TAB_INFO_FOR_POPUP: 'getTabInfoForPopup',
  CHANGE_APPLICATION_FILTERING_DISABLED: 'changeApplicationFilteringDisabled',
  OPEN_SETTINGS_TAB: 'openSettingsTab',
  OPEN_ASSISTANT: 'openAssistant',
  OPEN_ABUSE_TAB: 'openAbuseTab',
  OPEN_SITE_REPORT_TAB: 'openSiteReportTab',
  RESET_CUSTOM_RULES_FOR_PAGE: 'resetCustomRulesForPage',
  REMOVE_ALLOWLIST_DOMAIN: 'removeAllowlistDomainPopup',
  ADD_ALLOWLIST_DOMAIN_POPUP: 'addAllowlistDomainPopup',
  GET_STATISTICS_DATA: 'getStatisticsData',
  ON_OPEN_FILTERING_LOG_PAGE: 'onOpenFilteringLogPage',
  GET_FILTERING_LOG_DATA: 'getFilteringLogData',
  INITIALIZE_FRAME_SCRIPT: 'initializeFrameScript',
  ON_CLOSE_FILTERING_LOG_PAGE: 'onCloseFilteringLogPage',
  GET_FILTERING_INFO_BY_TAB_ID: 'getFilteringInfoByTabId',
  SYNCHRONIZE_OPEN_TABS: 'synchronizeOpenTabs',
  CLEAR_EVENTS_BY_TAB_ID: 'clearEventsByTabId',
  REFRESH_PAGE: 'refreshPage',
  OPEN_TAB: 'openTab',
  CONTENT_SCRIPT_ADD_USER_RULE: 'contentScriptAddUserRule',
  FILTERING_LOG_ADD_USER_RULE: 'filteringLogAddUserRule',
  DEVTOOLS_ADD_USER_RULE: 'devtoolsAddUserRule',
  UN_ALLOWLIST_FRAME: 'unAllowlistFrame',
  REMOVE_USER_RULE: 'removeUserRule',
  GET_TAB_FRAME_INFO_BY_ID: 'getTabFrameInfoById',
  ENABLE_FILTERS_GROUP: 'enableFiltersGroup',
  NOTIFY_LISTENERS: 'notifyListeners',
  ADD_LONG_LIVED_CONNECTION: 'addLongLivedConnection',
  GET_OPTIONS_DATA: 'getOptionsData',
  CHANGE_USER_SETTING: 'changeUserSetting',
  CHECK_REQUEST_FILTER_READY: 'checkRequestFilterReady',
  OPEN_THANKYOU_PAGE: 'openThankYouPage',
  OPEN_SAFEBROWSING_TRUSTED: 'openSafebrowsingTrusted',
  GET_SELECTORS_AND_SCRIPTS: 'getSelectorsAndScripts',
  CHECK_PAGE_SCRIPT_WRAPPER_REQUEST: 'checkPageScriptWrapperRequest',
  PROCESS_SHOULD_COLLAPSE: 'processShouldCollapse',
  PROCESS_SHOULD_COLLAPSE_MANY: 'processShouldCollapseMany',
  ADD_FILTERING_SUBSCRIPTION: 'addFilterSubscription',
  SET_NOTIFICATION_VIEWED: 'setNotificationViewed',
  SAVE_CSS_HITS_STATS: 'saveCssHitStats',
  GET_COOKIE_RULES: 'getCookieRules',
  SAVE_COOKIE_LOG_EVENT: 'saveCookieRuleEvent',
  LOAD_SETTINGS_JSON: 'loadSettingsJson',
  ADD_URL_TO_TRUSTED: 'addUrlToTrusted',
  SET_PRESERVE_LOG_STATE: 'setPreserveLogState',
  GET_USER_RULES_EDITOR_DATA: 'getUserRulesEditorData',
  GET_EDITOR_STORAGE_CONTENT: 'getEditorStorageContent',
  SET_EDITOR_STORAGE_CONTENT: 'setEditorStorageContent',
  CONVERT_RULES_TEXT: 'convertRulesText'
};
const NOTIFIER_TYPES = {
  ADD_RULES: 'event.add.rules',
  REMOVE_RULE: 'event.remove.rule',
  UPDATE_FILTER_RULES: 'event.update.filter.rules',
  FILTER_GROUP_ENABLE_DISABLE: 'filter.group.enable.disable',
  // enabled or disabled filter group
  FILTER_ENABLE_DISABLE: 'event.filter.enable.disable',
  // Enabled or disabled
  FILTER_ADD_REMOVE: 'event.filter.add.remove',
  // Added or removed
  ADS_BLOCKED: 'event.ads.blocked',
  START_DOWNLOAD_FILTER: 'event.start.download.filter',
  SUCCESS_DOWNLOAD_FILTER: 'event.success.download.filter',
  ERROR_DOWNLOAD_FILTER: 'event.error.download.filter',
  ENABLE_FILTER_SHOW_POPUP: 'event.enable.filter.show.popup',
  LOG_EVENT: 'event.log.track',
  UPDATE_TAB_BUTTON_STATE: 'event.update.tab.button.state',
  REQUEST_FILTER_UPDATED: 'event.request.filter.updated',
  APPLICATION_INITIALIZED: 'event.application.initialized',
  APPLICATION_UPDATED: 'event.application.updated',
  CHANGE_PREFS: 'event.change.prefs',
  UPDATE_FILTERS_SHOW_POPUP: 'event.update.filters.show.popup',
  USER_FILTER_UPDATED: 'event.user.filter.updated',
  UPDATE_ALLOWLIST_FILTER_RULES: 'event.update.allowlist.filter.rules',
  SETTING_UPDATED: 'event.update.setting.value',
  FILTERS_UPDATE_CHECK_READY: 'event.update.filters.check',
  // Log events
  TAB_ADDED: 'log.tab.added',
  TAB_CLOSE: 'log.tab.close',
  TAB_UPDATE: 'log.tab.update',
  TAB_RESET: 'log.tab.reset',
  LOG_EVENT_ADDED: 'log.event.added',
  // Sync events
  SETTINGS_UPDATED: 'event.sync.finished',
  // Fullscreen user rules events
  FULLSCREEN_USER_RULES_EDITOR_UPDATED: 'event.user.rules.editor.updated'
};
const FULLSCREEN_USER_RULES_EDITOR = 'fullscreen_user_rules_editor';
const FILTERING_LOG = 'filtering-log';
const NAVIGATION_TAGS = {
  REGULAR: 'regular',
  PARTY: 'party'
};
/**
 * Trusted tag for custom filters
 */

const TRUSTED_TAG = 'trusted';
/**
 * Custom filters group display number
 *
 * @type {number}
 */

const CUSTOM_FILTERS_GROUP_DISPLAY_NUMBER = 99;
/**
 * Custom filters identifiers starts from this number
 *
 * @type {number}
 */

const CUSTOM_FILTERS_START_ID = 1000; // Unnecessary characters that will be replaced

const WASTE_CHARACTERS = /[.*+?^${}()|[\]\\]/g; // Custom scrollbar width

const SCROLLBAR_WIDTH = 12;

/***/ }),

/***/ 9224:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => (/* binding */ log)
/* harmony export */ });
/**
 * This file is part of Adguard Browser Extension (https://github.com/AdguardTeam/AdguardBrowserExtension).
 *
 * Adguard Browser Extension is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Adguard Browser Extension is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Adguard Browser Extension. If not, see <http://www.gnu.org/licenses/>.
 */

/* eslint-disable no-console */

/**
 * Simple logger with log levels
 */
const log = (() => {
  // Redefine if you need it
  const CURRENT_LEVEL = 'INFO';
  const LEVELS = {
    ERROR: 1,
    WARN: 2,
    INFO: 3,
    DEBUG: 4
  };
  /**
   * Pretty-print javascript error
   */

  const errorToString = function (error) {
    return `${error.toString()}\nStack trace:\n${error.stack}`;
  };

  const getLocalTimeString = date => {
    const ONE_MINUTE_MS = 60 * 1000;
    const timeZoneOffsetMs = date.getTimezoneOffset() * ONE_MINUTE_MS;
    const localTime = new Date(date - timeZoneOffsetMs);
    return localTime.toISOString().replace('Z', '');
  };
  /**
   * Prints log message
   */


  const print = function (level, method, args) {
    // check log level
    if (LEVELS[CURRENT_LEVEL] < LEVELS[level]) {
      return;
    }

    if (!args || args.length === 0 || !args[0]) {
      return;
    }

    const str = `${args[0]}`;
    args = Array.prototype.slice.call(args, 1);
    let formatted = str.replace(/{(\d+)}/g, (match, number) => {
      if (typeof args[number] !== 'undefined') {
        let value = args[number];

        if (value instanceof Error) {
          value = errorToString(value);
        } else if (value && value.message) {
          value = value.message;
        } else if (typeof value === 'object') {
          value = JSON.stringify(value);
        }

        return value;
      }

      return match;
    });
    formatted = `${getLocalTimeString(new Date())}: ${formatted}`;
    console[method](formatted);
  };
  /**
   * Expose public API
   */


  return {
    debug(...args) {
      print('DEBUG', 'log', args);
    },

    info(...args) {
      print('INFO', 'info', args);
    },

    warn(...args) {
      print('WARN', 'info', args);
    },

    error(...args) {
      print('ERROR', 'error', args);
    }

  };
})();

/***/ }),

/***/ 57122:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ i18n)
/* harmony export */ });
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53679);
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);

const i18n = {
  getMessage: (webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().i18n.getMessage),
  getUILanguage: (webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().i18n.getUILanguage),
  getBaseMessage: key => key,
  getBaseUILanguage: () => 'en'
};

/***/ }),

/***/ 38647:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_": () => (/* binding */ reactTranslator)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70846);
/* harmony import */ var _adguard_translate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58396);
/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(57122);



/**
 * Retrieves localised messages by key, formats and converts into react components or string
 */

const reactTranslator = _adguard_translate__WEBPACK_IMPORTED_MODULE_1__/* .translate.createReactTranslator */ .Iu.createReactTranslator(_i18n__WEBPACK_IMPORTED_MODULE_2__/* .i18n */ .a, react__WEBPACK_IMPORTED_MODULE_0__);

/***/ }),

/***/ 87235:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "J": () => (/* binding */ Icon)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70846);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8356);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__);


const Icon = ({
  id,
  classname,
  title
}) => {
  const iconClassname = classnames__WEBPACK_IMPORTED_MODULE_1___default()('icon', classname);
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", {
    className: iconClassname
  }, title && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("title", null, title), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("use", {
    xlinkHref: id
  }));
};

/***/ }),

/***/ 79735:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Q": () => (/* binding */ MIN_FILTERS_UPDATE_DISPLAY_DURATION),
/* harmony export */   "d": () => (/* binding */ HANDLER_DELAY_MS)
/* harmony export */ });
const MIN_FILTERS_UPDATE_DISPLAY_DURATION = 2000;
const HANDLER_DELAY_MS = 2000; // less time leads to interface freeze

/***/ }),

/***/ 72730:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D": () => (/* binding */ useAppearanceTheme)
/* harmony export */ });
/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(49789);
/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(70846);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32155);



const useAppearanceTheme = appearanceTheme => {
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)(() => {
    const STORAGE_KEY = 'appearance_theme';
    const DARK_THEME_CLASS = 'dark-mode';
    const LIGHT_THEME_CLASS = 'light-mode';
    const SET_TO_STORAGE_TIMEOUT = 500;
    const throttledSetToStorage = lodash_throttle__WEBPACK_IMPORTED_MODULE_0___default()(mode => {
      localStorage.setItem(STORAGE_KEY, mode);
    }, SET_TO_STORAGE_TIMEOUT);
    let theme = appearanceTheme;

    if (!theme) {
      theme = localStorage.getItem(STORAGE_KEY);
    } else {
      throttledSetToStorage(theme);
    }

    switch (theme) {
      case _constants__WEBPACK_IMPORTED_MODULE_2__/* .APPEARANCE_THEMES.DARK */ .cC.DARK:
        {
          document.documentElement.classList.add(DARK_THEME_CLASS);
          document.documentElement.classList.remove(LIGHT_THEME_CLASS);
          break;
        }

      case _constants__WEBPACK_IMPORTED_MODULE_2__/* .APPEARANCE_THEMES.LIGHT */ .cC.LIGHT:
        {
          document.documentElement.classList.add(LIGHT_THEME_CLASS);
          document.documentElement.classList.remove(DARK_THEME_CLASS);
          break;
        }

      default:
        {
          document.documentElement.classList.remove(DARK_THEME_CLASS);
          document.documentElement.classList.remove(LIGHT_THEME_CLASS);
        }
    }
  }, [appearanceTheme]);
};

/***/ }),

/***/ 32155:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D2": () => (/* binding */ CHANGELOG_URL),
/* harmony export */   "Kd": () => (/* binding */ GITHUB_URL),
/* harmony export */   "Sb": () => (/* binding */ PRIVACY_URL),
/* harmony export */   "Y0": () => (/* binding */ GLOBAL_PRIVACY_CONTROL_URL),
/* harmony export */   "YH": () => (/* binding */ ACKNOWLEDGMENTS_URL),
/* harmony export */   "Z5": () => (/* binding */ DO_NOT_TRACK_URL),
/* harmony export */   "cC": () => (/* binding */ APPEARANCE_THEMES),
/* harmony export */   "eN": () => (/* binding */ DEFAULT_THIRD_PARTY_COOKIES_SELF_DESTRUCT_MIN),
/* harmony export */   "l7": () => (/* binding */ HOW_TO_CREATE_RULES_URL),
/* harmony export */   "o6": () => (/* binding */ WEBSITE_URL),
/* harmony export */   "pR": () => (/* binding */ COMPARE_URL),
/* harmony export */   "sn": () => (/* binding */ DISCUSS_URL),
/* harmony export */   "uj": () => (/* binding */ DEFAULT_FIRST_PARTY_COOKIES_SELF_DESTRUCT_MIN),
/* harmony export */   "wk": () => (/* binding */ BROWSER_ADDON_STORE_LINKS)
/* harmony export */ });
/* eslint-disable max-len */
const PRIVACY_URL = 'https://link.adtidy.org/forward.html?action=privacy&from=options_screen&app=browser_extension';
const ACKNOWLEDGMENTS_URL = 'https://link.adtidy.org/forward.html?action=acknowledgments&from=options_screen&app=browser_extension';
const GITHUB_URL = 'https://link.adtidy.org/forward.html?action=github_options&from=options_screen&app=browser_extension';
const WEBSITE_URL = 'https://link.adtidy.org/forward.html?action=adguard_site&from=options_screen_footer&app=browser_extension';
const DISCUSS_URL = 'https://link.adtidy.org/forward.html?action=discuss&from=options_screen&app=browser_extension';
const COMPARE_URL = 'https://link.adtidy.org/forward.html?action=compare&from=options_screen&app=browser_extension';
const CHANGELOG_URL = 'https://link.adtidy.org/forward.html?action=github_version_popup&from=options_screen&app=browser_extension';
const GLOBAL_PRIVACY_CONTROL_URL = 'https://link.adtidy.org/forward.html?action=global_privacy_control&from=options_screen&app=browser_extension';
const DO_NOT_TRACK_URL = 'https://link.adtidy.org/forward.html?action=do_not_track&from=options_screen&app=browser_extension';
const HOW_TO_CREATE_RULES_URL = 'https://link.adtidy.org/forward.html?action=userfilter_description&from=options&app=browser_extension';
const DEFAULT_FIRST_PARTY_COOKIES_SELF_DESTRUCT_MIN = 4320;
const DEFAULT_THIRD_PARTY_COOKIES_SELF_DESTRUCT_MIN = 2880;
const APPEARANCE_THEMES = {
  SYSTEM: 'system',
  DARK: 'dark',
  LIGHT: 'light'
};
const BROWSER_ADDON_STORE_LINKS = {
  CHROME: 'https://agrd.io/extension_chrome',
  FIREFOX: 'https://agrd.io/extension_firefox',
  OPERA: 'https://agrd.io/extension_opera',
  EDGE: 'https://agrd.io/extension_edge'
};

/***/ }),

/***/ 37916:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => (/* binding */ messenger)
/* harmony export */ });
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53679);
/* harmony import */ var webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webextension_polyfill__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(32380);
/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9224);
/* harmony import */ var _common_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(84568);





class Messenger {
  constructor() {
    this.onMessage = (webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.onMessage);

    this.createLongLivedConnection = (page, events, callback) => {
      const eventListener = (...args) => {
        callback(...args);
      };

      const port = webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.connect({
        name: `${page}_${(0,nanoid__WEBPACK_IMPORTED_MODULE_3__/* .nanoid */ .x0)()}`
      });
      port.postMessage({
        type: _common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.ADD_LONG_LIVED_CONNECTION */ .oK.ADD_LONG_LIVED_CONNECTION,
        data: {
          events
        }
      });
      port.onMessage.addListener(message => {
        if (message.type === _common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.NOTIFY_LISTENERS */ .oK.NOTIFY_LISTENERS) {
          const [type, ...data] = message.data;
          eventListener({
            type,
            data
          });
        }
      });
      port.onDisconnect.addListener(() => {
        if ((webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.lastError)) {
          _common_log__WEBPACK_IMPORTED_MODULE_1__/* .log.error */ .c.error((webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.lastError.message));
        }
      });

      const onUnload = () => {
        port.disconnect();
      };

      window.addEventListener('beforeunload', onUnload);
      window.addEventListener('unload', onUnload);
      return onUnload;
    };

    this.createEventListener = async (events, callback, onUnloadCallback) => {
      const eventListener = (...args) => {
        callback(...args);
      };

      let {
        listenerId
      } = await this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.CREATE_EVENT_LISTENER */ .oK.CREATE_EVENT_LISTENER, {
        events
      });
      webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.onMessage.addListener(message => {
        if (message.type === _common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.NOTIFY_LISTENERS */ .oK.NOTIFY_LISTENERS) {
          const [type, ...data] = message.data;
          eventListener({
            type,
            data
          });
        }
      });

      const onUnload = async () => {
        if (listenerId) {
          const type = _common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.REMOVE_LISTENER */ .oK.REMOVE_LISTENER;
          this.sendMessage(type, {
            listenerId
          });
          listenerId = null;

          if (typeof onUnloadCallback === 'function') {
            onUnloadCallback();
          }
        }
      };

      window.addEventListener('beforeunload', onUnload);
      window.addEventListener('unload', onUnload);
      return onUnload;
    };

    this.openExtensionStore = async () => {
      return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.OPEN_EXTENSION_STORE */ .oK.OPEN_EXTENSION_STORE);
    };

    this.openComparePage = async () => {
      return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.OPEN_COMPARE_PAGE */ .oK.OPEN_COMPARE_PAGE);
    };
  }

  // eslint-disable-next-line class-methods-use-this
  async sendMessage(type, data) {
    _common_log__WEBPACK_IMPORTED_MODULE_1__/* .log.debug */ .c.debug('Request type:', type);

    if (data) {
      _common_log__WEBPACK_IMPORTED_MODULE_1__/* .log.debug */ .c.debug('Request data:', data);
    }

    const response = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.sendMessage({
      type,
      data
    });

    if (response) {
      _common_log__WEBPACK_IMPORTED_MODULE_1__/* .log.debug */ .c.debug('Response type:', type);
      _common_log__WEBPACK_IMPORTED_MODULE_1__/* .log.debug */ .c.debug('Response data:', response);
    }

    return response;
  }
  /**
   * Creates long lived connections between popup and background page
   * @param {string} page
   * @param events
   * @param callback
   * @returns {function}
   */


  async getOptionsData() {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.GET_OPTIONS_DATA */ .oK.GET_OPTIONS_DATA);
  } // eslint-disable-next-line class-methods-use-this


  async changeUserSetting(settingId, value) {
    // FIXME refactor message handler to use common message format { type, data }
    await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().runtime.sendMessage({
      type: _common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.CHANGE_USER_SETTING */ .oK.CHANGE_USER_SETTING,
      key: settingId,
      value
    });
  }

  async enableFilter(filterId) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.ADD_AND_ENABLE_FILTER */ .oK.ADD_AND_ENABLE_FILTER, {
      filterId
    });
  }

  async disableFilter(filterId) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.DISABLE_ANTIBANNER_FILTER */ .oK.DISABLE_ANTIBANNER_FILTER, {
      filterId
    });
  }

  async applySettingsJson(json) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.APPLY_SETTINGS_JSON */ .oK.APPLY_SETTINGS_JSON, {
      json
    });
  }

  async openFilteringLog() {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.OPEN_FILTERING_LOG */ .oK.OPEN_FILTERING_LOG);
  }

  async resetStatistics() {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.RESET_BLOCKED_ADS_COUNT */ .oK.RESET_BLOCKED_ADS_COUNT);
  }

  async setFilteringLogWindowState(windowState) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.SET_FILTERING_LOG_WINDOW_STATE */ .oK.SET_FILTERING_LOG_WINDOW_STATE, {
      windowState
    });
  }

  async resetSettings() {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.RESET_SETTINGS */ .oK.RESET_SETTINGS);
  }

  async getUserRules() {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.GET_USER_RULES */ .oK.GET_USER_RULES);
  }

  async saveUserRules(value) {
    await this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.SAVE_USER_RULES */ .oK.SAVE_USER_RULES, {
      value
    });
  }

  async getAllowlist() {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.GET_ALLOWLIST_DOMAINS */ .oK.GET_ALLOWLIST_DOMAINS);
  }

  async saveAllowlist(value) {
    await this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.SAVE_ALLOWLIST_DOMAINS */ .oK.SAVE_ALLOWLIST_DOMAINS, {
      value
    });
  }

  async updateFilters() {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.CHECK_ANTIBANNER_FILTERS_UPDATE */ .oK.CHECK_ANTIBANNER_FILTERS_UPDATE);
  }

  async updateGroupStatus(id, data) {
    const type = data ? _common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.ENABLE_FILTERS_GROUP */ .oK.ENABLE_FILTERS_GROUP : _common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.DISABLE_FILTERS_GROUP */ .oK.DISABLE_FILTERS_GROUP;
    const groupId = id - 0;
    await this.sendMessage(type, {
      groupId
    });
  }

  async updateFilterStatus(filterId, data) {
    const type = data ? _common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.ADD_AND_ENABLE_FILTER */ .oK.ADD_AND_ENABLE_FILTER : _common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.DISABLE_ANTIBANNER_FILTER */ .oK.DISABLE_ANTIBANNER_FILTER;
    await this.sendMessage(type, {
      filterId
    });
  }

  async checkCustomUrl(url) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.LOAD_CUSTOM_FILTER_INFO */ .oK.LOAD_CUSTOM_FILTER_INFO, {
      url
    });
  }

  async addCustomFilter(filter) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.SUBSCRIBE_TO_CUSTOM_FILTER */ .oK.SUBSCRIBE_TO_CUSTOM_FILTER, {
      filter
    });
  }

  async removeCustomFilter(filterId) {
    await this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.REMOVE_ANTIBANNER_FILTER */ .oK.REMOVE_ANTIBANNER_FILTER, {
      filterId
    });
  }

  async getTabInfoForPopup(tabId) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.GET_TAB_INFO_FOR_POPUP */ .oK.GET_TAB_INFO_FOR_POPUP, {
      tabId
    });
  }

  async changeApplicationFilteringDisabled(state) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.CHANGE_APPLICATION_FILTERING_DISABLED */ .oK.CHANGE_APPLICATION_FILTERING_DISABLED, {
      state
    });
  }

  async openSettingsTab() {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.OPEN_SETTINGS_TAB */ .oK.OPEN_SETTINGS_TAB);
  }

  async openAssistant() {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.OPEN_ASSISTANT */ .oK.OPEN_ASSISTANT);
  }

  async openAbuseSite(url, from) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.OPEN_ABUSE_TAB */ .oK.OPEN_ABUSE_TAB, {
      url,
      from
    });
  }

  async checkSiteSecurity(url) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.OPEN_SITE_REPORT_TAB */ .oK.OPEN_SITE_REPORT_TAB, {
      url
    });
  }

  async resetCustomRulesForPage(url) {
    const [currentTab] = await webextension_polyfill__WEBPACK_IMPORTED_MODULE_0___default().tabs.query({
      active: true,
      currentWindow: true
    });
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.RESET_CUSTOM_RULES_FOR_PAGE */ .oK.RESET_CUSTOM_RULES_FOR_PAGE, {
      url,
      tabId: currentTab === null || currentTab === void 0 ? void 0 : currentTab.id
    });
  }

  async removeAllowlistDomain(tabId) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.REMOVE_ALLOWLIST_DOMAIN */ .oK.REMOVE_ALLOWLIST_DOMAIN, {
      tabId
    });
  }

  async addAllowlistDomain(tabId) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.ADD_ALLOWLIST_DOMAIN_POPUP */ .oK.ADD_ALLOWLIST_DOMAIN_POPUP, {
      tabId
    });
  }

  async getStatisticsData() {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.GET_STATISTICS_DATA */ .oK.GET_STATISTICS_DATA);
  }

  async onOpenFilteringLogPage() {
    await this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.ON_OPEN_FILTERING_LOG_PAGE */ .oK.ON_OPEN_FILTERING_LOG_PAGE);
  }

  async getFilteringLogData() {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.GET_FILTERING_LOG_DATA */ .oK.GET_FILTERING_LOG_DATA);
  }

  async onCloseFilteringLogPage() {
    await this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.ON_CLOSE_FILTERING_LOG_PAGE */ .oK.ON_CLOSE_FILTERING_LOG_PAGE);
  }

  async getFilteringInfoByTabId(tabId) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.GET_FILTERING_INFO_BY_TAB_ID */ .oK.GET_FILTERING_INFO_BY_TAB_ID, {
      tabId
    });
  }

  async synchronizeOpenTabs() {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.SYNCHRONIZE_OPEN_TABS */ .oK.SYNCHRONIZE_OPEN_TABS);
  }

  async clearEventsByTabId(tabId, ignorePreserveLog) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.CLEAR_EVENTS_BY_TAB_ID */ .oK.CLEAR_EVENTS_BY_TAB_ID, {
      tabId,
      ignorePreserveLog
    });
  }

  async refreshPage(tabId, preserveLogEnabled) {
    await this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.REFRESH_PAGE */ .oK.REFRESH_PAGE, {
      tabId,
      preserveLogEnabled
    });
  }

  async openTab(url, options) {
    await this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.OPEN_TAB */ .oK.OPEN_TAB, {
      url,
      options
    });
  }

  async filteringLogAddUserRule(ruleText) {
    await this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.FILTERING_LOG_ADD_USER_RULE */ .oK.FILTERING_LOG_ADD_USER_RULE, {
      ruleText
    });
  }

  async unAllowlistFrame(frameInfo) {
    await this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.UN_ALLOWLIST_FRAME */ .oK.UN_ALLOWLIST_FRAME, {
      frameInfo
    });
  }

  async removeUserRule(ruleText) {
    await this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.REMOVE_USER_RULE */ .oK.REMOVE_USER_RULE, {
      ruleText
    });
  }

  async getTabFrameInfoById(tabId) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.GET_TAB_FRAME_INFO_BY_ID */ .oK.GET_TAB_FRAME_INFO_BY_ID, {
      tabId
    });
  }

  async setPreserveLogState(state) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.SET_PRESERVE_LOG_STATE */ .oK.SET_PRESERVE_LOG_STATE, {
      state
    });
  }

  async getEditorStorageContent() {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.GET_EDITOR_STORAGE_CONTENT */ .oK.GET_EDITOR_STORAGE_CONTENT);
  }

  async setEditorStorageContent(content) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.SET_EDITOR_STORAGE_CONTENT */ .oK.SET_EDITOR_STORAGE_CONTENT, {
      content
    });
  }

  async convertRuleText(content) {
    return this.sendMessage(_common_constants__WEBPACK_IMPORTED_MODULE_2__/* .MESSAGE_TYPES.CONVERT_RULES_TEXT */ .oK.CONVERT_RULES_TEXT, {
      content
    });
  }

}

const messenger = new Messenger();


/***/ }),

/***/ 84381:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n    font-family: 'Roboto Flex';\n    src: url('../../../../assets/fonts/Roboto-Flex-Regular.woff2') format('woff2 supports variations'),\n       url('../../../../assets/fonts/Roboto-Flex-Regular.woff2') format('woff2-variations');\n    font-weight: 100 1000;\n    font-stretch: 25% 151%;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 26834:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ":root {\n    /*GRAYSCALE*/\n    --white: #ffffff;\n    --gray100: #f3f3f3;\n    --gray300: #d8d8d8;\n    --gray400: #a4a4a4;\n    --gray700: #888888;\n    --gray900: #4d4d4d;\n    --grayDark: #2a2a2a;\n    --black: #131313;\n    /*FEEDBACK*/\n    --red300: #bf4829;\n    --red400: #c23814;\n    --orange400: #eb9300;\n    /*BRAND*/\n    --green400: #67b279;\n    --green700: #4d995f;\n    /*ADDITIONAL*/\n    --purple400: #b267a0;\n    --purple700: #994d87;\n    --slateblue400: #677bb2;\n    --slateblue700: #4d6199;\n    --outline: #005ecc;\n    /*EDITOR*/\n    --green-editor: #338033;\n    --yellow-editor500: #ffff00;\n    --blue-selection: rgb(181, 213, 255);\n    /* - dark mode*/\n    --cyan-editor: #4093d6;\n    --yellow-editor: #dbdb84;\n    --pink-editor: #c46cbd;\n    --orange-editor: #cf8263;\n    --blueDark-editor: #264f78;\n    /* - light mode*/\n    --blue-editor: #4141e2;\n    --brown-editor: #795e26;\n    --purple-editor: #9e45b4;\n    --red-editor: #a31515;\n    /*FILTERING-LOG*/\n    --regular-row-hover: var(--gray100);\n    --regular-row-active: var(--gray300);\n    --red-row: #ffd3c7;\n    --red-row-hover: #ffb5a1;\n    --red-row-active: #ff967b;\n    --green-row: #dcffe5;\n    --green-row-hover: #c3ffd1;\n    --green-row-active: #a9ffbe;\n    --orange-row: #ffe4b7;\n    --orange-row-hover: #ffdda5;\n    --orange-row-active: #ffcf7d;\n    /*GRADIENTS*/\n}\n    /*FILTERING-LOG-DARK*/\n    @media (color-index: 48) {:root {\n        --regular-row-hover: #2f2f2f;\n        --regular-row-active: #3b3b3b;\n        --red-row: #46231a;\n        --red-row-hover: #692d1e;\n        --red-row-active: #7a3320;\n        --green-row: #2c4332;\n        --green-row-hover: #3d6246;\n        --green-row-active: #457250;\n        --orange-row: #4d350d;\n        --orange-row-hover: #61410B;\n        --orange-row-active: #744c0a;\n        --blue-selection: #556a86;\n        --outline: #99c9ff;\n}\n    }\n    @media (color: 48842621) {:root {\n        --regular-row-hover: #2f2f2f;\n        --regular-row-active: #3b3b3b;\n        --red-row: #46231a;\n        --red-row-hover: #692d1e;\n        --red-row-active: #7a3320;\n        --green-row: #2c4332;\n        --green-row-hover: #3d6246;\n        --green-row-active: #457250;\n        --orange-row: #4d350d;\n        --orange-row-hover: #61410B;\n        --orange-row-active: #744c0a;\n        --blue-selection: #556a86;\n        --outline: #99c9ff;\n}\n    }\n    @media (prefers-color-scheme: dark) {:root {\n        --regular-row-hover: #2f2f2f;\n        --regular-row-active: #3b3b3b;\n        --red-row: #46231a;\n        --red-row-hover: #692d1e;\n        --red-row-active: #7a3320;\n        --green-row: #2c4332;\n        --green-row-hover: #3d6246;\n        --green-row-active: #457250;\n        --orange-row: #4d350d;\n        --orange-row-hover: #61410B;\n        --orange-row-active: #744c0a;\n        --blue-selection: #556a86;\n        --outline: #99c9ff;\n}\n    }\n    :root {\n\n    --switch-btn-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2);\n    --swamp: #547b88;\n    --switch-field-enabled: linear-gradient(90deg, #67B279 0%, #39774C 100%);\n    --switch-field-disabled: linear-gradient(90deg, #732613 0%, #BF4829 100%);\n\n    --greyf7: #f7f7f7;\n    --gray05: rgba(239, 239, 239, 0.5);\n    --greye7: #e7e7e7;\n    --gey6a: #d1d1d1;\n    --grayd8: var(--gray700);\n    --grey78: #787878;\n    --gray-base: var(--gray900);\n    --gray4a: #4a4a4a;\n    --gray88: var(--gray700);\n    --green74: #66b574;\n    --green86: #68bc86;\n    --green75: #5ba575;\n    --red23: #F66F23;\n    --t3: 0.3s ease;\n    --overlay-gray: rgba(137, 137, 137, 0.5);\n    --light-shadow: rgba(0, 0, 0, 0.05);\n    --sidebar-transition: 0.3s ease;\n    --z-idx5: 5;\n    --z-idx6: 6;\n    --z-idx7: 7;\n    --z-idx8: 8;\n}\n\n.dark-mode {\n    --regular-row-hover: #2f2f2f;\n    --regular-row-active: #3b3b3b;\n    --red-row: #46231a;\n    --red-row-hover: #692d1e;\n    --red-row-active: #7a3320;\n    --green-row: #2c4332;\n    --green-row-hover: #3d6246;\n    --green-row-active: #457250;\n    --orange-row: #4d350d;\n    --orange-row-hover: #61410B;\n    --orange-row-active: #744c0a;\n    --blue-selection: #556a86;\n    --outline: #99c9ff;\n}\n\n.light-mode {\n    --regular-row-hover: var(--gray100);\n    --regular-row-active: var(--gray300);\n    --red-row: #ffd3c7;\n    --red-row-hover: #ffb5a1;\n    --red-row-active: #ff967b;\n    --green-row: #dcffe5;\n    --green-row-hover: #c3ffd1;\n    --green-row-active: #a9ffbe;\n    --orange-row: #ffe4b7;\n    --orange-row-hover: #ffdda5;\n    --orange-row-active: #ffcf7d;\n    --blue-selection: rgb(181, 213, 255);\n    --outline: #005ecc;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 82328:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".actions {\n    background-color: transparent;\n    border: 0;\n    height: 168px;\n    padding-top: 9px;\n    padding-bottom: 9px;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    max-width: 320px;\n}\n\n    @media (color-index: 48) {.actions {\n        background-color: var(--black)\n}\n    }\n\n    @media (color: 48842621) {.actions {\n        background-color: var(--black)\n}\n    }\n\n    @media (prefers-color-scheme: dark) {.actions {\n        background-color: var(--black)\n}\n    }\n\n    .actions .action {\n        width: 100%;\n        display: flex;\n        align-items: center;\n        padding: 0 20px;\n        cursor: pointer;\n        transition: 0.3s ease background-color;\n        height: 35px;\n    }\n\n    .actions .action:hover {\n            background-color: var(--gray100);\n        }\n\n    @media (color-index: 48) {\n\n    .actions .action:hover {\n                background-color: var(--grayDark)\n        }\n            }\n\n    @media (color: 48842621) {\n\n    .actions .action:hover {\n                background-color: var(--grayDark)\n        }\n            }\n\n    @media (prefers-color-scheme: dark) {\n\n    .actions .action:hover {\n                background-color: var(--grayDark)\n        }\n            }\n\n    .actions .action_disabled {\n            cursor: auto;\n            cursor: initial;\n            opacity: 0.5;\n        }\n\n    .actions .action_disabled:hover {\n                background-color: inherit;\n            }\n\n    .actions .action .action-title {\n            padding-left: 15px;\n            font-size: 13px;\n            color: var(--gray900);\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            max-width: 100%;\n        }\n\n    @media (color-index: 48) {\n\n    .actions .action .action-title {\n                color: var(--gray300)\n        }\n            }\n\n    @media (color: 48842621) {\n\n    .actions .action .action-title {\n                color: var(--gray300)\n        }\n            }\n\n    @media (prefers-color-scheme: dark) {\n\n    .actions .action .action-title {\n                color: var(--gray300)\n        }\n            }\n\n.light-mode .actions {\n        background-color: var(--white);\n    }\n\n.light-mode .actions .action:hover {\n                background-color: var(--gray100);\n            }\n\n.light-mode .actions .action .action-title {\n                color: var(--gray900);\n            }\n\n.dark-mode .actions {\n        background-color: var(--black);\n    }\n\n.dark-mode .actions .action:hover {\n                background-color: var(--grayDark);\n            }\n\n.dark-mode .actions .action .action-title {\n                color: var(--gray300);\n            }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 9066:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".footer {\n    margin-top: auto;\n    display: flex;\n    align-items: center;\n    height: 40px;\n    padding: 0 12px 0 16px;\n    font-size: 13px;\n    color: var(--gray900);\n    background-color: var(--gray100);\n}\n\n    @media (color-index: 48) {.footer {\n        color: var(--gray300);\n        background-color: var(--gray900)\n}\n    }\n\n    @media (color: 48842621) {.footer {\n        color: var(--gray300);\n        background-color: var(--gray900)\n}\n    }\n\n    @media (prefers-color-scheme: dark) {.footer {\n        color: var(--gray300);\n        background-color: var(--gray900)\n}\n    }\n\n    .footer__text {\n        max-width: 215px;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n    }\n\n    .footer__platforms {\n        flex-grow: 1;\n        flex-shrink: 0;\n        text-align: right;\n    }\n\n    .footer__link {\n        margin-left: 10px;\n    }\n\n    .footer__icon {\n        width: 24px;\n        height: 24px;\n        color: var(--gray300);\n        transition: 0.3s ease color;\n    }\n\n    @media (color-index: 48) {\n\n    .footer__icon {\n            color: var(--gray400)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .footer__icon {\n            color: var(--gray400)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .footer__icon {\n            color: var(--gray400)\n    }\n        }\n\n    .footer__icon:hover {\n            color: var(--gray700);\n        }\n\n    @media (color-index: 48) {\n\n    .footer__icon:hover {\n                color: var(--gray300)\n        }\n            }\n\n    @media (color: 48842621) {\n\n    .footer__icon:hover {\n                color: var(--gray300)\n        }\n            }\n\n    @media (prefers-color-scheme: dark) {\n\n    .footer__icon:hover {\n                color: var(--gray300)\n        }\n            }\n\n.light-mode .footer {\n        color: var(--gray900);\n        background-color: var(--gray100);\n    }\n\n.light-mode .footer__icon {\n            color: var(--gray300);\n        }\n\n.light-mode .footer__icon:hover {\n                color: var(--gray700);\n            }\n\n.dark-mode .footer {\n        color: var(--gray300);\n        background-color: var(--gray900);\n    }\n\n.dark-mode .footer__icon {\n            color: var(--gray400);\n        }\n\n.dark-mode .footer__icon:hover {\n                color: var(--gray300)\n            }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 69091:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".popup-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    min-height: 50px;\n    padding: 0 16px;\n}\n\n    @media (color-index: 48) {.popup-header {\n        background-color: var(--black)\n}\n    }\n\n    @media (color: 48842621) {.popup-header {\n        background-color: var(--black)\n}\n    }\n\n    @media (prefers-color-scheme: dark) {.popup-header {\n        background-color: var(--black)\n}\n    }\n\n    .popup-header__logo {\n        width: 113px;\n        height: 25px;\n    }\n\n    .popup-header__buttons {\n        display: flex;\n    }\n\n    .popup-header__button {\n        width: 24px;\n        height: 24px;\n        margin: 0 8px;\n        padding: 0;\n        border-radius: 4px;\n        color: var(--gray400);\n        transition: var(--t3) color, var(--t3) background-color;\n    }\n\n    @media (color-index: 48) {\n\n    .popup-header__button {\n            color: var(--gray700)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .popup-header__button {\n            color: var(--gray700)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .popup-header__button {\n            color: var(--gray700)\n    }\n        }\n\n    .popup-header__button:hover {\n            color: var(--gray700);\n            background-color: var(--gray100);\n        }\n\n    @media (color-index: 48) {\n\n    .popup-header__button:hover {\n                background-color: var(--gray900);\n                color: var(--gray400)\n        }\n            }\n\n    @media (color: 48842621) {\n\n    .popup-header__button:hover {\n                background-color: var(--gray900);\n                color: var(--gray400)\n        }\n            }\n\n    @media (prefers-color-scheme: dark) {\n\n    .popup-header__button:hover {\n                background-color: var(--gray900);\n                color: var(--gray400)\n        }\n            }\n\n    .popup-header__button.updating-filters {\n            pointer-events: none;\n            animation: spin 1.5s infinite linear;\n        }\n\n@keyframes spin {\n    0% {transform: rotate(0)}\n    100% {transform: rotate(360deg)}\n}\n\n.light-mode .popup-header {\n        background-color: var(--white);\n    }\n\n.light-mode .popup-header__button {\n            color: var(--gray400);\n        }\n\n.light-mode .popup-header__button:hover {\n                background-color: var(--gray100);\n                color: var(--gray700);\n            }\n\n.dark-mode .popup-header {\n        background-color: var(--black);\n    }\n\n.dark-mode .popup-header__button {\n            color: var(--gray700);\n        }\n\n.dark-mode .popup-header__button:hover {\n                background-color: var(--gray900);\n                color: var(--gray400);\n            }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 21936:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".main {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 300px;\n    color: var(--gray900);\n}\n\n    @media (color-index: 48) {.main {\n        color: var(--gray300)\n}\n    }\n\n    @media (color: 48842621) {.main {\n        color: var(--gray300)\n}\n    }\n\n    @media (prefers-color-scheme: dark) {.main {\n        color: var(--gray300)\n}\n    }\n\n    .main__header {\n        min-height: 75px;\n    }\n\n    .main__cta-link {\n        text-align: center;\n        font-size: 12px;\n        color: var(--gray700);\n        transition: var(--t3) color;\n    }\n\n    @media (color-index: 48) {\n\n    .main__cta-link {\n            color: var(--gray400)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .main__cta-link {\n            color: var(--gray400)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .main__cta-link {\n            color: var(--gray400)\n    }\n        }\n\n    .main__cta-link:hover {\n            color: var(--gray900);\n        }\n\n    @media (color-index: 48) {\n\n    .main__cta-link:hover {\n                color: var(--gray100)\n        }\n            }\n\n    @media (color: 48842621) {\n\n    .main__cta-link:hover {\n                color: var(--gray100)\n        }\n            }\n\n    @media (prefers-color-scheme: dark) {\n\n    .main__cta-link:hover {\n                color: var(--gray100)\n        }\n            }\n\n    .main__total-blocked-tab {\n        font-weight: bold;\n        text-align: center;\n        font-size: 24px;\n    }\n\n    .main__total-blocked-all {\n        text-align: center;\n        font-size: 16px;\n    }\n\n    .main .current-site {\n        padding-bottom: 2px;\n        font-size: 16px;\n        max-width: 260px;\n        text-align: center;\n        margin: 0 auto;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        font-weight: bold;\n    }\n\n    .main .current-status {\n        font-size: 14px;\n        text-align: center;\n        max-width: 280px;\n    }\n\n    .main--allowlisted .switcher {\n            opacity: 1;\n        }\n\n    .main--allowlisted .switcher__btn {\n                right: 36px;\n            }\n\n    .main--allowlisted .switcher__btn .switcher__icon--play {\n                    display: none;\n                }\n\n    .main--allowlisted .switcher__btn .switcher__icon--checkmark {\n                    display: none;\n                }\n\n    .main--allowlisted .switcher__btn .switcher__icon--circle {\n                    display: block;\n                }\n\n    .main--disabled .switcher {\n            opacity: 1;\n        }\n\n    .main--disabled .switcher__center {\n                opacity: 0;\n            }\n\n    .main--disabled .switcher__btn {\n                right: 18px;\n            }\n\n    .main--disabled .switcher__btn .switcher__icon--play {\n                    display: block;\n                }\n\n    .main--disabled .switcher__btn .switcher__icon--checkmark {\n                    display: none;\n                }\n\n    .main--disabled .switcher__btn .switcher__icon--circle {\n                    display: none;\n                }\n\n    .main--enabled .switcher, .main--unavailable .switcher, .main--in-exception .switcher {\n            opacity: 1;\n        }\n\n    .main--unavailable .switcher {\n            pointer-events: none;\n        }\n\n    .main--unavailable .switcher__center {\n                opacity: 0;\n            }\n\n    .main--unavailable .switcher__btn {\n                right: 18px;\n            }\n\n    .main--in-exception .switcher {\n            cursor: default;\n        }\n\n    .main--in-exception .switcher:hover .switcher__btn {\n                    transform: none;\n                }\n\n    .main--in-exception .switcher__btn {\n                cursor: default;\n                right: 22px;\n            }\n\n    .main--in-exception .switcher__btn:before {\n                    display: none;\n                }\n\n    .main--in-exception .switcher .switcher__icon--checkmark {\n                display: none;\n            }\n\n    .main--in-exception .switcher .switcher__icon--exclamation {\n                display: block;\n            }\n\n.switcher {\n    opacity: 0;\n    position: relative;\n    cursor: pointer;\n    height: 80px;\n    padding: 0 5px;\n}\n\n.switcher__info {\n        padding-top: 35px;\n    }\n\n.switcher__center {\n        width: 80px;\n        height: 30px;\n        border-radius: 100px;\n    }\n\n.switcher__center--enabled {\n            background-image: var(--switch-field-enabled);\n        }\n\n.switcher__center--allowlisted {\n            background-image: var(--switch-field-disabled);\n        }\n\n.switcher__btn {\n        position: absolute;\n        width: 50px;\n        height: 50px;\n        right: 5px;\n        top: 15px;\n        border-radius: 50%;\n        box-shadow: var(--switch-btn-shadow);\n        background-color: var(--white);\n        padding: 4px;\n        cursor: pointer;\n        transition: var(--t3) box-shadow;\n    }\n\n.switcher__btn:before {\n            content: '';\n            display: block;\n            width: 100%;\n            height: 100%;\n            border-radius: 50%;\n            background-color: var(--white);\n        }\n\n.switcher:hover .switcher__btn {\n            box-shadow: 0 0 0 6px rgba(0, 0, 0, 0.1);\n        }\n\n@media (color-index: 48) {\n\n.switcher:hover .switcher__btn {\n                box-shadow: 0 0 0 6px rgba(255, 255, 255, 0.2)\n        }\n            }\n\n@media (color: 48842621) {\n\n.switcher:hover .switcher__btn {\n                box-shadow: 0 0 0 6px rgba(255, 255, 255, 0.2)\n        }\n            }\n\n@media (prefers-color-scheme: dark) {\n\n.switcher:hover .switcher__btn {\n                box-shadow: 0 0 0 6px rgba(255, 255, 255, 0.2)\n        }\n            }\n\n.switcher__icon {\n        position: absolute;\n        left: 13px;\n        top: 13px;\n    }\n\n.switcher__icon--play {\n            display: none;\n        }\n\n.switcher__icon--circle {\n            display: none;\n        }\n\n.switcher__icon--checkmark {\n            display: block;\n        }\n\n.switcher__icon--exclamation {\n            display: none;\n            left: calc(50% - 2px);\n            top: 14px;\n        }\n\n.switcher__icon--cross {\n            color: var(--white);\n            display: none;\n            left: 17px;\n            top: 17px;\n        }\n\n.light-mode .main {\n        color: var(--gray900);\n    }\n\n.light-mode .main__cta-link {\n            color: var(--gray700);\n        }\n\n.light-mode .main__cta-link:hover {\n                color: var(--gray900);\n            }\n\n.light-mode .switcher:hover .switcher__btn {\n                box-shadow: 0 0 0 6px rgba(0, 0, 0, 0.1);\n            }\n\n.dark-mode .main {\n        color: var(--gray300);\n    }\n\n.dark-mode .main__cta-link {\n            color: var(--gray400);\n        }\n\n.dark-mode .main__cta-link:hover {\n                color: var(--gray100);\n            }\n\n.dark-mode .switcher:hover .switcher__btn {\n                box-shadow: 0 0 0 6px rgba(255, 255, 255, 0.2);\n            }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 20291:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".main-container {\n    height: 300px;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 12845:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".popup {\n    height: 100%;\n    min-height: 600px;\n    overflow: hidden;\n    display: flex;\n    justify-content: flex-start;\n    align-items: stretch;\n    flex-direction: column;\n}\n\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 60384:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@keyframes notify-show {\n    0% {\n        transform: translateY(200px);\n    }\n\n    100% {\n        transform: translateY(0);\n    }\n}\n\n@keyframes notify-show-reverse {\n    0% {\n        transform: translateY(0);\n    }\n\n    100% {\n        transform: translateY(200px);\n    }\n}\n\n.promo-notification {\n    position: fixed;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 194px;\n    background-color: #E6F6FF;\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-image: url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='320' height='194' viewBox='0 0 320 194' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cg clip-path='url%28%23clip0_647_16511%29'%3E%3Crect width='320' height='194' fill='%23E4F3FF'/%3E%3Cpath d='M196.772 143.101C199.502 142.029 201.646 139.885 203.858 137.948C209.337 133.193 215.784 129.579 222.698 127.366C225.55 126.45 228.661 125.793 231.495 126.761C235.384 128.092 237.735 132.225 238.323 136.288C238.91 140.369 238.115 144.484 237.666 148.582C237.217 152.68 237.13 157.02 239.014 160.668C239.671 161.931 240.57 163.366 239.982 164.663C239.498 165.735 238.236 166.15 237.096 166.426C225.947 169.141 214.038 168.674 203.132 165.112C200.47 164.248 197.826 163.158 195.7 161.343C192.105 158.248 190.705 153.631 190.1 149.084C189.892 147.527 189.028 144.086 190.463 143.153C191.431 142.565 195.164 143.723 196.772 143.101Z' fill='%23F3F3F3'/%3E%3Cpath opacity='0.64' d='M237.581 155.81C229.907 155.516 222.336 152.248 217.203 146.473C214.731 143.689 212.916 140.455 211.775 136.928C211.378 135.7 210.963 134.352 210.687 132.951C208.284 134.438 206.003 136.115 203.859 137.983C201.647 139.902 199.504 142.064 196.773 143.136C195.183 143.758 191.449 142.6 190.481 143.222C189.064 144.138 189.928 147.597 190.118 149.153C190.723 153.7 192.123 158.317 195.718 161.412C197.844 163.228 200.489 164.317 203.151 165.182C214.057 168.743 225.966 169.21 237.114 166.496C238.255 166.219 239.534 165.787 240.001 164.732C240.588 163.435 239.689 162 239.033 160.738C238.238 159.147 237.805 157.504 237.581 155.81Z' fill='%23F3F3F3'/%3E%3Cpath opacity='0.64' d='M239.032 160.686C237.148 157.02 237.218 152.68 237.684 148.6C238.134 144.502 238.946 140.386 238.341 136.306C237.771 132.381 235.576 128.404 231.929 126.934C231.963 127.539 231.963 128.127 231.963 128.663C231.808 139.193 223.166 147.234 214.247 151.453C208.785 154.029 202.839 155.551 196.824 155.966C195.165 156.069 193.523 156.069 191.898 155.983C192.763 158.023 193.99 159.873 195.736 161.378C197.861 163.193 200.506 164.283 203.168 165.147C214.074 168.709 225.983 169.176 237.131 166.461C238.272 166.185 239.551 165.752 240.018 164.698C240.571 163.383 239.689 161.948 239.032 160.686Z' fill='%23E9E9E9'/%3E%3Cpath d='M-8.58074 79.4875C-1.97818 76.3233 2.93053 70.5654 8.02937 65.309C13.9233 59.2226 20.595 53.4647 28.684 50.8883C36.773 48.312 46.5731 49.6088 52.2078 55.9546C59.1387 63.7701 57.635 75.5798 58.8967 85.9544C59.8301 93.6488 62.7511 101.412 68.5932 106.496C72.6204 109.989 77.7192 111.977 82.8008 113.516C90.7515 115.92 99.7393 117.303 107.068 113.378C114.465 109.401 118.268 101.067 124.145 95.0667C128.172 90.9687 133.409 87.8737 139.13 87.2512C144.834 86.6287 150.97 88.7728 154.426 93.3722C159.836 100.582 157.382 110.663 157.814 119.654C158.765 139.781 175.738 156.346 194.802 162.864C198.605 164.161 202.701 165.268 205.519 168.138C210.565 173.274 209.494 181.677 207.662 188.645C206.383 193.504 204.723 198.605 200.817 201.752C196.704 205.072 191.034 205.504 185.763 205.573C153.096 206.057 120.895 198.57 89.0922 191.135C61.1783 184.599 33.0396 177.994 7.04417 165.908C2.91325 163.988 -1.28681 161.827 -4.19055 158.317C-9.66964 151.695 -9.23754 142.219 -9.65236 133.643C-10.2573 121.193 -13.282 108.865 -18.5019 97.5393C-19.7118 94.9284 -27.4032 82.4443 -24.9316 80.5769C-23.7217 79.6605 -18.5883 81.5279 -16.9636 81.4933C-14.0598 81.4414 -11.1734 80.7325 -8.58074 79.4875Z' fill='%23F3F3F3'/%3E%3Cpath opacity='0.34' d='M205.536 168.156C202.719 165.285 198.623 164.196 194.82 162.882C175.773 156.363 158.8 139.781 157.832 119.672C157.4 110.68 159.854 100.6 154.444 93.3896C153.788 92.5077 153.01 91.7123 152.18 91.0034C150.78 93.5798 149.207 96.0869 147.427 98.3866C145.197 101.274 142.553 103.816 139.614 105.977C136.503 108.26 133.064 109.851 129.711 111.735C127.982 112.704 125.666 114.173 123.713 112.946C122.365 112.098 121.691 110.456 121.259 109.003C120.377 105.995 120.204 102.692 120.412 99.4933C116.385 104.681 112.824 110.352 107.103 113.412C99.7744 117.338 90.7867 115.954 82.8359 113.551C77.7371 112.012 72.6383 110.023 68.6283 106.531C62.7863 101.447 59.8652 93.6835 58.9319 85.989C57.6701 75.6145 59.1739 63.8048 52.2429 55.9892C46.6083 49.6435 36.8081 48.3467 28.7191 50.923C20.5956 53.4648 13.9239 59.2227 8.02996 65.3091C2.93112 70.5655 -1.97759 76.3234 -8.58015 79.4876C-11.1728 80.7326 -14.0592 81.4415 -16.9284 81.5107C-18.5531 81.5453 -23.6865 79.6951 -24.8964 80.5943C-27.3681 82.4444 -19.6766 94.9457 -18.4667 97.5567C-13.2469 108.882 -10.2221 121.211 -9.6172 133.66C-9.20238 142.236 -9.63448 151.729 -4.1554 158.334C-1.25165 161.844 2.94841 164.006 7.07933 165.925C33.0747 178.011 61.2134 184.617 89.1274 191.153C120.948 198.588 153.148 206.075 185.798 205.59C191.07 205.504 196.739 205.089 200.852 201.769C204.759 198.622 206.418 193.504 207.697 188.663C209.512 181.677 210.583 173.291 205.536 168.156Z' fill='%23D8D8D8'/%3E%3Cpath d='M32.1761 96.4155C65.2753 84.2427 70.5297 55.9374 88.5225 53.7587C120.567 49.851 111.891 104.75 113.878 116.456C115.002 122.992 117.716 129.579 122.987 133.591C144.731 150.104 179.265 119.395 182.549 117.787C189.635 114.346 199.107 113.793 204.569 119.464C214.455 129.752 203.151 149.533 212.623 160.219C217.307 165.51 225.413 166.184 232.327 164.749C306.805 149.36 324.02 228 319.249 234.778C313.58 242.818 279.063 229.452 269.35 231.043C224.394 238.391 178.435 233.1 133.185 227.792C109.696 225.043 86.1892 222.276 62.821 218.611C39.9713 214.979 16.5166 210.501 -6.12568 215.343C-15.4937 186.086 -17.0493 154.98 -17.8098 124.271C-17.9653 117.77 -18.0345 92.6979 -7.301 95.4645C-0.629305 97.1936 4.86707 99.7699 12.0227 99.891C18.8673 100.012 25.7464 98.7843 32.1761 96.4155Z' fill='%23F3F3F3'/%3E%3Cg opacity='0.34'%3E%3Cpath opacity='0.34' d='M175.615 168.276C174.906 170.749 174.526 173.446 175.183 175.971C180.178 195.216 221.626 173.291 242.937 164.801C244.752 164.075 246.584 163.383 248.433 162.761C243.386 162.916 238.028 163.539 232.324 164.714C225.411 166.15 217.304 165.475 212.62 160.184C203.149 149.516 214.453 129.718 204.566 119.429C203.702 118.53 202.734 117.787 201.68 117.182C213.346 134.732 180.645 150.64 175.615 168.276Z' fill='%23A4A4A4'/%3E%3Cpath opacity='0.34' d='M212.619 160.201C209.248 156.397 208.505 151.452 208.505 146.196C207.935 146.974 207.33 147.717 206.69 148.426C205.238 150.034 203.475 151.383 201.73 152.663C198.1 155.308 194.159 157.746 191.601 161.55C189.614 164.49 187.66 168.121 188.404 171.804C189.13 175.4 192.517 176.922 195.888 177.129C198.446 177.285 201.056 176.818 203.545 176.247C205.895 175.711 208.211 174.968 210.441 174.052C214.848 172.253 218.807 169.746 222.903 167.377C224.113 166.686 225.34 165.994 226.602 165.371C221.313 165.475 216.058 164.075 212.619 160.201Z' fill='%23888888'/%3E%3Cpath opacity='0.34' d='M263.765 163.885C289.483 181.262 218.999 183.821 178.484 201.959C192.778 201.752 255.209 233.342 269.365 231.025C279.078 229.434 313.595 242.8 319.264 234.76C323.257 229.071 311.745 172.616 263.765 163.885Z' fill='%23A4A4A4'/%3E%3Cpath opacity='0.34' d='M292.578 177.285C293.719 181.953 293.684 186.83 291.852 191.463C288.413 200.109 280.324 205.469 272.459 209.688C266.686 212.783 260.637 215.308 254.397 217.296C246.792 223.815 237.355 229.798 226.656 234.587C240.95 234.38 255.21 233.325 269.365 231.008C279.079 229.417 313.596 242.783 319.265 234.743C322.29 230.455 316.43 197.048 292.578 177.285Z' fill='%23888888'/%3E%3Cpath opacity='0.34' d='M103.973 60.4156C114.862 89.3088 58.982 91.9888 70.1476 145.02C74.7106 166.686 97.7331 197.982 145.524 138.899C145.991 138.329 146.492 137.793 147.01 137.274C138.662 139.331 130.141 139.003 123.003 133.574C117.731 129.562 115 122.974 113.894 116.438C112.235 106.824 117.8 68.0755 102.071 56.7153C102.832 57.8738 103.471 59.1015 103.973 60.4156Z' fill='%23A4A4A4'/%3E%3Cpath opacity='0.34' d='M122.207 140.179C121.533 141.475 121.343 142.962 122.415 144.104C123.504 145.245 125.128 145.452 126.615 145.21C129.311 144.778 132.025 143.222 133.874 141.233C134.686 140.351 135.395 139.383 136.052 138.38C132.629 138.156 129.294 137.291 126.165 135.614C124.61 136.911 123.123 138.38 122.207 140.179Z' fill='%23888888'/%3E%3Cpath opacity='0.34' d='M113.08 84.8823C111.905 86.9227 110.539 88.8592 109.07 90.7094C102.225 99.303 93.3414 105.908 85.5981 113.62C81.6054 117.597 77.8202 123.355 79.9116 129.216C81.6746 134.179 86.8425 136.997 91.6994 138.156C97.3167 139.487 103.003 138.778 108.517 137.343C113.253 136.115 117.902 134.611 122.621 133.297C117.574 129.268 114.947 122.836 113.858 116.456C112.994 111.337 114.169 97.9716 113.08 84.8823Z' fill='%23888888'/%3E%3C/g%3E%3Cg opacity='0.5'%3E%3Cpath opacity='0.5' d='M89.7476 70.1157C90.2662 70.2714 90.8538 70.0466 91.044 69.5451C91.0958 69.4068 91.1131 69.2685 91.1131 69.1302C91.0958 68.8362 90.9403 68.5423 90.7328 68.3175C90.0588 67.5394 88.9007 67.2109 87.8637 67.2973C86.8266 67.3665 85.8587 67.7815 84.9772 68.231C85.9106 67.6258 86.9476 67.0552 87.6217 66.1734C88.2958 65.2916 88.5032 63.9775 87.5871 63.1129C86.7748 62.3348 85.392 62.2484 84.2167 62.3694C81.8315 62.6288 79.6191 63.5625 77.9598 64.9458C77.3376 65.4299 76.4561 66.2599 75.8166 67.1417C75.2462 67.9371 75.8857 69.0264 76.8536 68.9227C81.2093 68.4039 85.5822 68.8189 89.7476 70.1157Z' fill='%23D8D8D8'/%3E%3C/g%3E%3Cpath d='M83.9747 64.41C84.4933 63.8912 84.8044 63.1477 84.5278 62.4734C84.3723 62.0757 84.0612 61.7817 83.6982 61.557C82.5574 60.8134 81.0364 60.8134 79.7401 61.2284C78.4438 61.6607 77.303 62.4561 76.1795 63.2688C77.3376 62.2486 78.5129 61.1766 79.1351 59.7587C79.7401 58.3408 79.5845 56.4734 78.3746 55.5397C77.2685 54.6925 75.7129 54.8481 74.3647 55.1939C71.6338 55.8855 69.0757 57.1996 66.8979 58.9806C65.4806 60.1391 62.6978 62.3869 62.3867 64.41H83.9747Z' fill='%23D8D8D8'/%3E%3Cpath d='M77.9615 62.0757C77.5294 62.7501 78.9986 63.0267 79.4134 63.044C80.364 63.0959 81.3319 62.7328 82.127 62.2486C82.5591 61.9893 82.9394 61.6607 83.2505 61.2976C82.1788 60.8135 80.8825 60.8481 79.7418 61.2285C79.1195 61.436 78.5319 61.7126 77.9788 62.0584C77.9788 62.0584 77.9788 62.0757 77.9615 62.0757Z' fill='white'/%3E%3Cpath d='M67.591 62.4388C70.2009 62.6117 73.4676 62.6117 75.559 60.7962C76.7862 59.7241 77.7887 57.8567 77.0455 56.2486C76.8208 55.7645 76.4751 55.2976 76.0603 54.9172C75.4899 54.9345 74.9195 55.0556 74.3664 55.1939C71.6355 55.8855 69.0774 57.1996 66.8996 58.9806C66.07 59.655 64.7564 60.727 63.7539 61.9028C64.9984 62.214 66.312 62.3696 67.591 62.4388Z' fill='%23F3F3F3'/%3E%3Cpath d='M245.912 145.037C246.275 145.037 246.535 144.692 246.431 144.346C246.206 143.654 245.29 143.464 244.582 143.671C243.89 143.879 243.303 144.346 242.594 144.553C243.562 144.259 244.27 143.239 244.184 142.219C244.08 141.043 243.009 140.092 241.851 139.85C240.693 139.591 239.483 139.902 238.377 140.369C237.201 140.87 236.13 141.597 235.127 142.375C234.54 142.841 233.883 143.36 233.779 144.138C233.762 144.242 233.762 144.38 233.762 144.519C233.779 144.813 234.021 145.037 234.298 145.037H245.912Z' fill='%23D8D8D8'/%3E%3Cpath d='M3.35172 45.4861C3.56706 44.7545 4.21237 44.1306 4.98674 44.0229C7.43927 43.6785 7.35299 47.3154 6.04134 48.0902C6.70804 47.8966 7.50416 48.155 7.91273 48.7358C8.0204 48.8863 8.10668 49.0802 8.12807 49.2738C8.14946 49.6614 7.76228 50.3067 6.55759 50.1348C5.46056 49.9623 4.36318 49.2952 3.78241 48.3269C3.35208 47.6163 3.11571 46.2822 3.35208 45.4861H3.35172Z' fill='%23D58500'/%3E%3Cpath d='M4.90106 45.8089C4.72886 45.293 4.92246 44.5396 5.58951 44.7115C6.40666 44.9268 6.38527 45.8306 6.23482 46.0891C5.9767 46.5194 5.09466 46.3904 4.90106 45.8089Z' fill='%23BF4829'/%3E%3Cpath d='M4.62002 48.047C5.02896 48.4559 5.373 48.929 5.50206 49.467C5.52346 49.5961 5.54485 49.7251 5.43789 49.8114C5.3944 49.8542 5.30883 49.8756 5.24394 49.8756C4.92129 49.8756 4.62003 49.7037 4.34051 49.5315C4.10414 49.359 3.84601 49.1871 3.63067 48.9935C3.3943 48.7996 3.15757 48.5846 2.98537 48.3044C2.74863 47.9603 2.46876 47.1207 3.09304 47.0351C3.67381 46.9489 4.27598 47.7026 4.62002 48.047Z' fill='%238E2C13'/%3E%3Cpath d='M0.963304 46.3899C0.167543 46.3685 -0.585432 46.7989 -0.864947 47.4659C-1.74699 49.6396 1.91023 50.6507 3.0069 49.6824C2.66285 50.2418 2.74877 51.06 3.24363 51.6194C3.37269 51.7699 3.54489 51.8993 3.73812 51.9635C4.12567 52.0925 4.87829 51.9207 4.94282 50.7584C5.0077 49.6824 4.57738 48.456 3.73812 47.6385C3.09282 47.0142 1.8022 46.4117 0.962945 46.3899H0.963304Z' fill='%23B45F00'/%3E%3Cpath d='M0.942586 47.9395C0.448088 47.6165 -0.348385 47.5737 -0.326638 48.2622C-0.283142 49.0797 0.62029 49.3381 0.921196 49.2736C1.41569 49.1445 1.50197 48.2835 0.942586 47.9395Z' fill='%238E2C13'/%3E%3Cpath d='M69.7564 37.7907C69.497 36.9092 68.7194 36.1574 67.7863 36.0276C64.831 35.6126 64.935 39.9951 66.5155 40.9286C65.7121 40.6953 64.7528 41.0068 64.2605 41.7066C64.1307 41.8879 64.0268 42.1216 64.001 42.3549C63.9752 42.8219 64.4418 43.5995 65.8934 43.3924C67.2153 43.1845 68.5377 42.3807 69.2375 41.2138C69.756 40.3576 70.0408 38.7501 69.756 37.7907H69.7564Z' fill='%23D58500'/%3E%3Cpath d='M67.8891 38.1796C68.0966 37.5579 67.8633 36.6502 67.0595 36.8572C66.0748 37.1167 66.1006 38.2058 66.2819 38.5172C66.5929 39.0358 67.6558 38.8802 67.8891 38.1796Z' fill='%23BF4829'/%3E%3Cpath d='M68.2284 40.8766C67.7357 41.3694 67.3211 41.9395 67.1656 42.5877C67.1398 42.7433 67.114 42.8988 67.2429 43.0027C67.2953 43.0543 67.3984 43.0801 67.4766 43.0801C67.8654 43.0801 68.2284 42.873 68.5652 42.6655C68.8501 42.4576 69.1611 42.2505 69.4206 42.0172C69.7054 41.7835 69.9907 41.5245 70.1982 41.1868C70.4834 40.7722 70.8207 39.7605 70.0684 39.6574C69.3686 39.5534 68.643 40.4616 68.2284 40.8766Z' fill='%238E2C13'/%3E%3Cpath d='M72.635 38.8798C73.5939 38.854 74.5012 39.3726 74.838 40.1764C75.9009 42.7957 71.494 44.0141 70.1725 42.8472C70.5871 43.5213 70.4835 44.5072 69.8872 45.1813C69.7317 45.3626 69.5242 45.5185 69.2914 45.5959C68.8244 45.7514 67.9175 45.5443 67.8397 44.1438C67.7616 42.8472 68.2801 41.3694 69.2914 40.3843C70.069 39.6321 71.6241 38.906 72.6354 38.8798H72.635Z' fill='%23B45F00'/%3E%3Cpath d='M72.6599 40.7472C73.2557 40.358 74.2155 40.3064 74.1893 41.136C74.1369 42.1211 73.0482 42.4325 72.6857 42.3548C72.0898 42.1992 71.9858 41.1617 72.6599 40.7472Z' fill='%238E2C13'/%3E%3Cpath d='M105.53 54.0982C105.371 53.5576 104.894 53.0965 104.322 53.0169C102.51 52.7624 102.573 55.4501 103.543 56.0226C103.05 55.8795 102.462 56.0705 102.16 56.4997C102.08 56.6109 102.016 56.7542 102.001 56.8973C101.985 57.1837 102.271 57.6605 103.161 57.5335C103.972 57.406 104.783 56.9131 105.212 56.1975C105.53 55.6724 105.705 54.6865 105.53 54.0982H105.53Z' fill='%23D58500'/%3E%3Cpath d='M104.386 54.3367C104.513 53.9555 104.37 53.3988 103.877 53.5258C103.273 53.6849 103.289 54.3528 103.4 54.5438C103.591 54.8618 104.243 54.7664 104.386 54.3367Z' fill='%23BF4829'/%3E%3Cpath d='M104.594 55.9908C104.292 56.293 104.038 56.6426 103.943 57.0402C103.927 57.1356 103.911 57.2309 103.99 57.2947C104.022 57.3263 104.085 57.3421 104.133 57.3421C104.372 57.3421 104.594 57.2151 104.801 57.0879C104.976 56.9604 105.166 56.8334 105.326 56.6903C105.5 56.547 105.675 56.3881 105.802 56.181C105.977 55.9268 106.184 55.3063 105.723 55.2431C105.294 55.1793 104.849 55.7363 104.594 55.9908Z' fill='%238E2C13'/%3E%3Cpath d='M107.293 54.7662C107.881 54.7504 108.438 55.0684 108.644 55.5613C109.296 57.1677 106.593 57.9149 105.783 57.1993C106.037 57.6127 105.974 58.2173 105.608 58.6307C105.513 58.7419 105.385 58.8375 105.243 58.8849C104.956 58.9803 104.4 58.8533 104.352 57.9944C104.304 57.1993 104.622 56.293 105.243 55.6888C105.72 55.2275 106.673 54.7823 107.293 54.7662H107.293Z' fill='%23B45F00'/%3E%3Cpath d='M107.308 55.9112C107.674 55.6725 108.262 55.6409 108.246 56.1496C108.214 56.7537 107.547 56.9448 107.324 56.8971C106.959 56.8017 106.895 56.1654 107.308 55.9112Z' fill='%238E2C13'/%3E%3Cpath d='M74.5303 20.0982C74.3711 19.5576 73.8943 19.0965 73.322 19.0169C71.5096 18.7624 71.5734 21.4501 72.5427 22.0226C72.05 21.8795 71.4617 22.0705 71.1597 22.4997C71.0802 22.6109 71.0164 22.7542 71.0006 22.8973C70.9848 23.1837 71.2709 23.6605 72.1612 23.5335C72.9719 23.406 73.7828 22.9131 74.212 22.1975C74.53 21.6724 74.7047 20.6865 74.53 20.0982H74.5303Z' fill='%23D58500'/%3E%3Cpath d='M73.3858 20.3367C73.513 19.9555 73.37 19.3988 72.877 19.5258C72.2731 19.6849 72.289 20.3528 72.4001 20.5438C72.5909 20.8618 73.2427 20.7664 73.3858 20.3367Z' fill='%23BF4829'/%3E%3Cpath d='M73.5944 21.9908C73.2922 22.293 73.038 22.6426 72.9426 23.0402C72.9268 23.1356 72.911 23.2309 72.99 23.2947C73.0222 23.3263 73.0854 23.3421 73.1333 23.3421C73.3718 23.3421 73.5944 23.2151 73.801 23.0879C73.9756 22.9604 74.1664 22.8334 74.3255 22.6903C74.5002 22.547 74.6751 22.3881 74.8024 22.181C74.9773 21.9268 75.1842 21.3063 74.7228 21.2431C74.2936 21.1793 73.8487 21.7363 73.5944 21.9908Z' fill='%238E2C13'/%3E%3Cpath d='M76.2932 20.7662C76.8812 20.7504 77.4377 21.0684 77.6442 21.5613C78.2961 23.1677 75.5934 23.9149 74.783 23.1993C75.0372 23.6127 74.9738 24.2173 74.6081 24.6307C74.5127 24.7419 74.3854 24.8375 74.2426 24.8849C73.9562 24.9803 73.4001 24.8533 73.3524 23.9944C73.3044 23.1993 73.6224 22.293 74.2426 21.6888C74.7195 21.2275 75.6733 20.7823 76.2935 20.7662H76.2932Z' fill='%23B45F00'/%3E%3Cpath d='M76.3083 21.9112C76.6738 21.6725 77.2624 21.6409 77.2463 22.1496C77.2141 22.7537 76.5465 22.9448 76.3242 22.8971C75.9587 22.8017 75.895 22.1654 76.3083 21.9112Z' fill='%238E2C13'/%3E%3Cpath d='M55.1399 2.97677C54.9984 2.49592 54.5742 2.08584 54.0653 2.01507C52.4533 1.78871 52.51 4.17913 53.3721 4.68834C52.9339 4.5611 52.4106 4.73099 52.1421 5.11272C52.0713 5.21161 52.0146 5.33908 52.0005 5.46632C51.9865 5.72104 52.241 6.14519 53.0328 6.03224C53.7538 5.91882 54.4751 5.48038 54.8568 4.84394C55.1397 4.37691 55.295 3.50004 55.1397 2.97677H55.1399Z' fill='%23D58500'/%3E%3Cpath d='M54.1217 3.18886C54.2349 2.84978 54.1076 2.35463 53.6692 2.46758C53.1321 2.60912 53.1461 3.20315 53.245 3.37304C53.4147 3.65588 53.9944 3.57105 54.1217 3.18886Z' fill='%23BF4829'/%3E%3Cpath d='M54.3061 4.65976C54.0373 4.92854 53.8112 5.2395 53.7263 5.59311C53.7123 5.67794 53.6982 5.76276 53.7685 5.81947C53.7971 5.84759 53.8533 5.86165 53.896 5.86165C54.1081 5.86165 54.3061 5.7487 54.4898 5.63552C54.6451 5.5221 54.8148 5.40916 54.9563 5.28191C55.1117 5.15444 55.2673 5.01313 55.3805 4.82895C55.5361 4.60282 55.72 4.05096 55.3097 3.99472C54.928 3.93801 54.5322 4.4334 54.3061 4.65976Z' fill='%238E2C13'/%3E%3Cpath d='M56.7097 3.57081C57.2327 3.55675 57.7276 3.83959 57.9113 4.27803C58.4911 5.70676 56.0873 6.37133 55.3665 5.73488C55.5926 6.10255 55.5361 6.64034 55.2109 7.00801C55.1261 7.1069 55.0129 7.19196 54.8859 7.23414C54.6311 7.31897 54.1365 7.20602 54.0941 6.44209C54.0514 5.73488 54.3342 4.92877 54.8859 4.39145C55.31 3.98113 56.1583 3.58511 56.7099 3.57081H56.7097Z' fill='%23B45F00'/%3E%3Cpath d='M56.7222 4.5893C57.0472 4.377 57.5707 4.34888 57.5564 4.80137C57.5278 5.3387 56.934 5.50859 56.7362 5.46617C56.4112 5.38135 56.3545 4.81543 56.7222 4.5893Z' fill='%238E2C13'/%3E%3Cpath d='M72.3632 58.7013C73.5618 59.5236 75.3328 62.2696 71.9978 65.2031C73.0349 64.617 75.0731 64.0807 75.6841 65.2258C76.2157 66.189 75.2309 67.8613 73.3383 67.9097C66.0565 68.1719 66.7116 54.8434 72.3636 58.7013H72.3632Z' fill='%23B45F00'/%3E%3Cpath d='M73.2465 68.4715C73.2577 68.5969 73.2097 68.7597 73.0869 68.8023C73.0245 68.8081 72.962 68.8139 72.8963 68.7883C72.4568 68.655 72.066 68.3592 71.6922 68.0776C71.2155 67.7103 70.7248 67.3607 70.2654 67.0079C69.7544 66.6121 69.1954 66.2051 68.844 65.6529C68.6956 65.4135 68.5753 65.1398 68.6122 64.8516C68.6346 64.5807 68.8624 64.3067 69.1448 64.281C69.3186 64.2803 69.4843 64.3601 69.6187 64.4424C70.5886 65.017 71.4503 65.7909 72.2809 66.5684C72.7633 66.9981 73.2177 67.81 73.2469 68.4715H73.2465Z' fill='%23732613'/%3E%3Cpath d='M74.0386 59.5426C75.1888 60.3536 76.7658 63.0542 73.0881 65.8767C74.2047 65.2993 76.3429 64.8168 76.8713 65.9222C77.3371 66.8594 76.1728 68.4693 74.2173 68.5238C66.7561 68.7232 68.5971 55.7442 74.0386 59.5426Z' fill='%23D58500'/%3E%3Cpath d='M7.76001 4.31434C8.34461 5.06918 8.90111 7.14208 6.22653 8.3074C6.99284 8.14899 8.37522 8.22266 8.52755 9.0615C8.66671 9.77056 7.71514 10.6189 6.52169 10.2693C1.91479 8.97178 4.99958 0.767157 7.76025 4.31441L7.76001 4.31434Z' fill='%23B45F00'/%3E%3Cpath d='M6.35069 10.6024C6.33254 10.683 6.26982 10.7753 6.18447 10.7773C6.14424 10.7684 6.104 10.7594 6.06804 10.7302C5.81991 10.5587 5.63488 10.2952 5.45765 10.0441C5.23322 9.71868 4.99644 9.40155 4.77996 9.08869C4.5398 8.73859 4.27186 8.37184 4.16291 7.95598C4.11814 7.77644 4.09786 7.5811 4.17874 7.40826C4.2471 7.24336 4.44464 7.11766 4.62641 7.15831C4.73519 7.19272 4.82285 7.2759 4.89034 7.35436C5.38169 7.90838 5.76526 8.56534 6.1287 9.21832C6.3442 9.58393 6.46541 10.1829 6.35092 10.6025L6.35069 10.6024Z' fill='%23732613'/%3E%3Cpath d='M8.63968 5.17659C9.19626 5.91473 9.6406 7.92024 6.77392 8.94744C7.58818 8.81039 9.02234 8.93779 9.13092 9.73519C9.2342 10.4148 8.18291 11.188 6.94892 10.8296C2.24239 9.45683 5.99874 1.70886 8.63968 5.17659Z' fill='%23D58500'/%3E%3Cpath opacity='0.4' d='M40.6379 48.9699C40.3329 48.5809 38.1264 48.0597 36.4169 45.339C36.2109 45.0101 36.4169 45.824 36.0307 45.877C35.9278 45.8915 35.8238 45.9059 35.7188 45.9203C36.0879 52.1901 39.7666 48.4656 40.6379 48.9676V48.9699Z' fill='%23CEB79B'/%3E%3Cpath d='M67.7525 73.5105C66.249 74.1942 64.4018 73.8776 62.7981 74.2959V74.2992C59.1078 74.8493 55.391 75.2388 51.6722 75.4892C51.6722 75.4892 51.6722 75.4926 51.6688 75.4892C42.9016 75.9006 19.9081 76.54 14.9855 68.4335L14.9822 68.4402C14.7611 67.3418 15.6996 66.3116 16.3866 65.5839C19.8265 61.6319 20.1307 53.8958 20.8345 49.1465C21.6371 43.9815 20.9259 38.6165 21.2695 33.4605V33.4571C21.7854 27.3191 25.2458 21.3118 31.938 21.0441C38.3734 20.7867 39.0545 21.6606 41.6956 23.2085C47.822 26.2127 47.7543 33.5743 49.462 39.2786C49.6401 40.1224 50.2281 40.5489 49.1389 40.9312C48.5979 41.2406 49.4337 42.2594 49.455 42.7369C52.8444 51.2148 56.5507 60.6125 60.4688 66.2949C62.099 68.3952 66.7383 68.564 67.2426 70.6303C67.9703 72.2046 68.1469 73.2451 67.7525 73.5105Z' fill='%23CE8000'/%3E%3Cpath d='M67.7538 73.5101C57.433 75.8209 24.2176 78.4069 18.1102 68.4391C17.8925 67.3446 18.8287 66.3123 19.5147 65.5823C24.7721 59.3377 25.7657 49.4136 24.7798 42.735L28.4166 36.8796C30.0028 37.3625 31.2172 38.4612 32.5455 39.3984C35.5928 41.233 48.4969 40.7236 48.8974 42.9809C49.2794 45.4744 49.2066 47.9296 49.9912 50.337C51.1648 52.9387 53.8681 54.9012 54.1824 57.8686C53.7502 57.4666 53.2181 57.1705 52.6462 57.0164C52.5782 56.9963 53.1883 59.8991 53.3044 60.171C54.8038 63.446 63.2408 70.1138 66.9676 70.0592C67.9239 71.9538 68.1919 73.2139 67.7538 73.5101Z' fill='%23C07500'/%3E%3Cpath opacity='0.6' d='M33.418 66.5631C33.6651 69.7257 34.9542 73.1323 35.8186 76.1654C41.3808 76.3286 54.4379 75.8127 59.9723 75.2271C59.7439 72.3456 58.9985 69.1954 57.176 66.8946C55.8503 65.4227 56.5345 64.5367 54.8732 63.48C50.121 60.4567 50.9664 56.6892 50.9762 56.0385C51.0071 53.7907 49.3408 52.9696 48.1214 48.1791C47.5639 45.9826 47.2511 43.6391 47.7014 41.4027C46.6833 40.3617 45.3164 39.3035 43.7825 39.4072C42.7801 42.5134 42.2895 45.7669 41.6969 48.9714C40.8608 54.809 33.4182 66.5633 33.4182 66.5633L33.418 66.5631Z' fill='%23A05A07'/%3E%3Cpath d='M20.2853 53.7825C20.2853 53.7825 19.1048 60.4464 17.2852 61.8743C17.2852 61.8743 21.1531 60.6554 21.341 58.3323C21.5289 56.0091 20.2853 53.7825 20.2853 53.7825Z' fill='%23CE8000'/%3E%3Cpath d='M15.9258 64.2547C15.9258 64.2547 23.0667 62.8945 23.6827 51.1546C23.6827 51.1546 21.5544 47.6903 21.0264 48.953C20.4982 50.2158 15.9258 64.2547 15.9258 64.2547Z' fill='%23CE8000'/%3E%3Cpath d='M19.8552 57.2439C19.8552 57.2439 19.4119 59.1611 18.4119 59.9614C17.4118 60.7617 15.9641 62.4753 16.0877 64.3192C16.2112 66.163 15.2109 68.1634 15.2109 68.1634C15.2109 68.1634 21.6985 60.3277 19.8552 57.2439Z' fill='%23CE8000'/%3E%3Cpath d='M91.2595 225.432C91.2638 225.633 91.2466 225.809 91.1951 225.963C91.0965 226.327 90.8651 226.58 90.5266 226.756C90.5222 226.756 90.5181 226.76 90.5137 226.764C90.4365 226.803 90.3508 226.837 90.261 226.876C90.261 226.876 90.2566 226.872 90.2566 226.876C90.1624 226.91 90.0594 226.94 89.9523 226.97C89.8622 226.996 89.7639 227.017 89.6653 227.034C89.648 227.034 89.6311 227.039 89.6097 227.043C89.5497 227.051 89.4897 227.064 89.4298 227.073C89.3654 227.082 89.3054 227.09 89.2413 227.099C89.2071 227.103 89.177 227.107 89.1428 227.112C88.5942 227.176 87.9643 227.193 87.2788 227.215C87.1887 227.215 87.0945 227.219 87.0003 227.223C84.455 227.305 81.2625 227.459 78.8758 229.661C76.3691 231.971 78.2716 236.149 75.3533 239.372C74.4751 240.344 73.45 241.166 72.3578 241.886V241.891C72.1009 242.058 71.844 242.221 71.5825 242.38C71.0682 242.692 70.5454 242.98 70.0141 243.245C70.0012 243.25 69.9927 243.254 69.9839 243.258C69.7139 243.395 69.4439 243.528 69.1741 243.657H69.1698C68.8997 243.785 68.6297 243.905 68.3556 244.025C68.0814 244.141 67.807 244.257 67.5285 244.368C66.9799 244.587 66.4273 244.792 65.8702 244.981C65.853 244.981 65.8401 244.989 65.8272 244.994C65.5531 245.088 65.2787 245.178 65.0002 245.259C64.726 245.349 64.4475 245.431 64.169 245.517C64.1432 245.521 64.1175 245.529 64.0961 245.534C63.5435 245.701 62.982 245.855 62.425 245.992C62.0736 246.086 61.7266 246.172 61.3753 246.254C60.9168 246.365 60.4584 246.468 59.9955 246.562C44.7407 246.631 48.19 249.763 40.1425 247.081C24.639 241.913 26.9487 253.243 13.4121 251.465C12.5508 251.353 11.621 251.186 10.6225 250.959C10.6196 250.956 10.6168 250.955 10.614 250.955C7.01023 250.145 3.35496 249.674 -0.330181 249.558C-4.68382 249.288 -9.06758 249.284 -13.4297 249.146C-15.0195 249.095 -16.6435 249.151 -18.049 248.936C-18.0704 248.932 -18.0876 248.928 -18.1046 248.928C-18.2032 248.915 -18.2974 248.898 -18.396 248.876C-18.4645 248.863 -18.5332 248.851 -18.6017 248.833C-18.7003 248.816 -18.7945 248.791 -18.8887 248.765C-18.9188 248.756 -18.9487 248.752 -18.9744 248.743C-19.0686 248.718 -19.1587 248.692 -19.2485 248.662C-19.8828 248.456 -20.444 248.152 -20.9027 247.698C-21.0528 247.548 -21.1941 247.385 -21.3225 247.201C-21.3255 247.201 -21.3269 247.199 -21.3269 247.196C-21.9697 246.262 -22.2953 244.87 -22.1455 242.783C-22.0641 241.6 -21.8327 240.199 -21.417 238.532C-22.7731 238.703 -25.67 239.388 -28.2498 238.928C-28.2665 238.925 -28.283 238.923 -28.2997 238.92C-28.5396 238.875 -28.7778 238.825 -29.0102 238.759H-29.0146C-29.5587 238.609 -30.0772 238.391 -30.5529 238.095C-30.6901 238.009 -30.8229 237.919 -30.9514 237.821C-31.1143 237.701 -31.2685 237.568 -31.4142 237.418C-31.4443 237.392 -31.4698 237.367 -31.4999 237.332C-31.5599 237.277 -31.6155 237.212 -31.6713 237.148C-31.7828 237.02 -31.8899 236.886 -31.9929 236.741C-32.0742 236.625 -32.1514 236.505 -32.2243 236.377C-32.4256 236.038 -32.6014 235.657 -32.7386 235.228C-33.3556 233.356 -32.7687 230.266 -31.9802 227.104V227.1C-31.6675 225.857 -31.3246 224.601 -31.016 223.406C-30.8916 222.926 -30.7717 222.454 -30.6602 221.996C-25.9295 202.554 -10.4175 89.8816 -7.76918 70.5428C-6.23937 68.7088 -4.04543 68.0318 -3.07704 67.8132L68.0258 69.3044L70.6568 69.36C77.0587 76.5591 80.6069 88.0604 81.2111 97.8218C82.6595 121.3 81.4896 143.865 82.938 167.343L91.2597 225.432L91.2595 225.432Z' fill='%232B6B40'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.33'%3E%3Cpath d='M-3.04266 67.8032L67.9572 69.2259C67.9786 69.2517 68.0043 69.2774 68.0257 69.3032C73.9647 76.0394 76.0089 85.6294 76.6259 94.8211C61.5422 121.809 69.7527 175.681 89.0183 209.816L91.2552 225.431H91.2508C91.2552 225.629 91.238 225.804 91.1952 225.963C91.1824 226.01 91.1651 226.053 91.1525 226.095C91.1139 226.177 91.0753 226.254 91.0282 226.323C91.0238 226.327 91.0282 226.327 91.0282 226.327C90.8997 226.503 90.7324 226.644 90.5267 226.755C90.5224 226.755 90.5183 226.76 90.5139 226.764C90.4367 226.803 90.3509 226.837 90.2611 226.875H90.2567C90.1625 226.91 90.0595 226.94 89.9525 226.97C89.8582 226.991 89.764 227.012 89.6654 227.034C89.6482 227.034 89.6312 227.038 89.6098 227.042C89.5499 227.051 89.4899 227.064 89.4299 227.073C89.3656 227.081 89.3056 227.09 89.2415 227.098C89.2072 227.103 89.1771 227.107 89.1429 227.111C89.0057 227.128 88.8644 227.137 88.7143 227.15C88.4229 227.171 88.1102 227.184 87.7801 227.197C87.6172 227.205 87.4501 227.21 87.2787 227.214C87.1886 227.214 87.0944 227.219 87.0002 227.223C86.7515 227.227 86.4946 227.236 86.2331 227.248C84.8104 225.354 82.7235 223.045 80.431 222.71C74.1189 221.789 71.9335 234.567 72.3363 241.518C72.3407 241.642 72.3492 241.762 72.3577 241.887V241.891C72.1005 242.058 71.8434 242.221 71.5821 242.379C71.0678 242.688 70.5409 242.975 70.0137 243.245C70.0008 243.25 69.9923 243.254 69.9836 243.258C69.7136 243.395 69.4438 243.528 69.1738 243.656H69.1694C68.8994 243.785 68.6296 243.905 68.3552 244.025C68.081 244.141 67.8066 244.257 67.5281 244.368C66.9796 244.587 66.4269 244.788 65.8699 244.981C65.8526 244.981 65.8397 244.989 65.8271 244.993C65.553 245.084 65.2786 245.173 65 245.259C64.7259 245.349 64.4474 245.431 64.1689 245.516C64.1431 245.521 64.1174 245.529 64.096 245.534C63.539 245.696 62.9819 245.851 62.4249 245.992C62.1077 243.558 61.7093 241.133 61.2766 238.733C60.6809 235.429 59.9483 232.155 59.3398 228.856C58.9454 226.709 58.5428 224.566 58.0671 222.437C57.0215 217.783 55.6503 213.052 53.1392 208.999C51.995 207.143 50.5681 205.45 48.8113 204.186C47.1273 202.969 45.0103 201.988 42.9106 202.297C32.7891 203.805 16.57 241.377 13.412 251.464C12.7692 251.378 12.0838 251.263 11.3594 251.117C11.1195 251.066 10.8752 251.014 10.6224 250.959C10.6195 250.956 10.6167 250.954 10.6139 250.954C7.01012 250.136 3.35484 249.664 -0.334671 249.549C-4.68831 249.279 -9.07619 249.279 -13.4386 249.137C-14.4283 249.107 -15.4353 249.12 -16.3911 249.082C-16.7726 249.064 -17.1495 249.039 -17.5137 249.005C-17.6936 248.983 -17.8736 248.962 -18.0494 248.936C-18.0707 248.932 -18.088 248.928 -18.105 248.928C-18.2036 248.91 -18.3022 248.893 -18.3964 248.876C-18.4648 248.863 -18.5336 248.85 -18.602 248.833C-18.6963 248.812 -18.7948 248.791 -18.8891 248.765C-18.9192 248.756 -18.949 248.752 -18.9748 248.744C-19.069 248.718 -19.1591 248.692 -19.2489 248.662C-19.8832 248.456 -20.4444 248.152 -20.9031 247.698C-21.0531 247.552 -21.1945 247.385 -21.3229 247.201C-21.3258 247.201 -21.3273 247.199 -21.3273 247.196C-21.3958 247.098 -21.4601 246.995 -21.5201 246.888C-22.0429 245.967 -22.2872 244.651 -22.1543 242.783H-22.1459C-20.0763 242.431 -17.9979 242.075 -15.9581 241.566C-14.2098 241.128 -12.4828 240.571 -10.8374 239.809C-9.24325 239.067 -7.76492 238.112 -6.4238 236.951C-5.16401 235.866 -3.98119 234.547 -3.41566 232.923C-2.92297 231.509 -2.97008 229.769 -3.89548 228.543C-4.64121 227.562 -5.8495 227.159 -7.0107 227.048C-8.30472 226.919 -9.62885 227.116 -10.8801 227.438C-12.4699 227.84 -14.0167 228.41 -15.4737 229.182C-17.1106 230.043 -18.636 231.131 -20.0459 232.344C-21.4557 233.561 -22.7541 234.919 -23.9367 236.372C-24.528 237.092 -25.0979 237.829 -25.6549 238.579L-26.0148 239.08C-26.2933 239.085 -26.5718 239.085 -26.8504 239.072C-27.159 239.063 -27.4674 239.037 -27.7716 238.999C-28.0715 238.965 -28.3673 238.913 -28.6587 238.845C-28.7786 238.819 -28.8945 238.789 -29.0101 238.759H-29.0144C-29.4214 238.643 -29.8158 238.493 -30.1885 238.3C-30.3128 238.236 -30.4328 238.168 -30.5527 238.095C-30.6899 238.009 -30.8228 237.919 -30.9512 237.821C-31.1142 237.696 -31.2683 237.564 -31.414 237.418C-31.4442 237.392 -31.4696 237.366 -31.4998 237.332C-31.5597 237.277 -31.6153 237.212 -31.6712 237.148C-31.7827 237.019 -31.8897 236.887 -31.9927 236.741C-32.074 236.625 -32.1513 236.505 -32.2241 236.377C-32.4254 236.038 -32.6012 235.657 -32.7384 235.228L-32.7428 235.224C-33.2226 233.767 -32.9742 231.573 -32.4643 229.182C-32.4385 229.045 -32.4087 228.908 -32.3742 228.771C-32.3142 228.496 -32.2499 228.218 -32.1858 227.943C-32.1173 227.665 -32.0486 227.382 -31.9801 227.104V227.099C-31.6715 225.856 -31.3288 224.601 -31.0158 223.405C-30.8915 222.925 -30.7715 222.454 -30.6601 221.995C-25.9293 202.554 -10.4173 89.8811 -7.76904 70.5424C-6.23923 68.7083 -4.04529 68.0313 -3.0769 67.8127L-3.04266 67.8043V67.8032Z' fill='%23949984'/%3E%3C/g%3E%3Cpath d='M84.2104 131.674L82.011 151.304L79.9707 204.984L77.6617 212.889C76.4555 213.318 75.6125 215.551 75.4918 216.866C75.371 218.181 75.8133 219.223 77.0887 219.162C89.1638 218.573 90.9924 223.559 91.2563 225.433L84.2106 131.674L84.2104 131.674Z' fill='%233B754B'/%3E%3Cpath d='M89.6979 213.579C89.5651 213.51 89.4194 213.442 89.2693 213.382C88.8149 213.197 88.2965 213.056 87.7225 212.945C87.6154 212.927 87.5039 212.906 87.3925 212.889C86.6854 212.782 85.9141 212.73 85.1172 212.73C84.9159 212.73 84.7102 212.735 84.5087 212.743C84.3416 212.748 84.1702 212.756 84.0031 212.769C83.9601 212.769 83.9218 212.769 83.8788 212.773C79.8636 213.043 75.63 214.556 75.5015 216.981C75.5059 215.794 76.6027 167.407 74.8286 125.481C74.7043 122.443 74.5586 119.439 74.4 116.487C74.4 116.469 74.4 116.452 74.3957 116.435C74.3099 114.854 74.2201 113.29 74.1256 111.743C73.3158 98.712 72.1546 87.018 70.4961 78.5377L79.4948 77.2522C80.0691 81.4045 80.5875 85.4583 81.0503 89.4135C82.4259 101.112 83.3343 111.979 83.9514 122.04C83.9514 122.074 83.9558 122.104 83.9558 122.139C83.99 122.713 84.0242 123.283 84.0587 123.853C84.0929 124.423 84.1231 124.988 84.1573 125.55C84.2173 126.677 84.2773 127.795 84.3329 128.901C84.4186 130.559 84.4914 132.196 84.5643 133.811C84.607 134.75 84.6415 135.68 84.6757 136.605C84.8513 141.062 84.9756 145.343 85.0698 149.439C85.0956 150.515 85.1169 151.578 85.1383 152.627C85.1512 153.394 85.1684 154.157 85.1813 154.911C85.1985 155.85 85.2155 156.775 85.2284 157.688C85.2284 157.782 85.2284 157.881 85.2328 157.975C85.2457 158.793 85.2541 159.604 85.267 160.405C85.3013 163.027 85.3314 165.564 85.3612 168.024C85.3656 168.504 85.3741 168.984 85.3785 169.455C85.387 170.282 85.3957 171.1 85.4086 171.91C85.4171 172.639 85.4258 173.359 85.4343 174.07C85.4773 177.16 85.5285 180.108 85.6058 182.915C85.6271 183.75 85.6485 184.577 85.6742 185.387C85.7685 188.215 85.8884 190.893 86.0599 193.426C86.1026 194.146 86.1541 194.853 86.2099 195.551C86.3 196.653 86.3942 197.724 86.5057 198.765C86.5101 198.817 86.5142 198.868 86.5229 198.919C86.6385 200.008 86.7672 201.066 86.9085 202.09C86.9085 202.112 86.9129 202.133 86.917 202.159C87.4741 206.101 88.2412 209.572 89.3251 212.593C89.4407 212.923 89.5651 213.249 89.6979 213.579Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.65' d='M89.6979 213.579V213.583C89.5651 213.51 89.4194 213.446 89.2693 213.382C88.8149 213.198 88.2965 213.056 87.7225 212.945C87.6154 212.928 87.5039 212.906 87.3925 212.889C86.6854 212.782 85.9141 212.731 85.1172 212.731C84.9159 212.731 84.7102 212.735 84.5087 212.743C84.3416 212.748 84.1702 212.756 84.0031 212.769C83.9601 212.769 83.9218 212.769 83.8788 212.774C84.5172 208.728 86.6727 130.448 74.8286 125.482C74.7043 122.443 74.5586 119.44 74.4 116.487C74.4 116.47 74.4 116.453 74.3957 116.436C73.5858 101.532 72.3518 88.0254 70.4961 78.5382L79.4948 77.2527C80.0691 81.405 80.5875 85.4588 81.0503 89.4139C82.4259 101.116 83.3343 111.984 83.9514 122.049C83.9514 122.079 83.9558 122.109 83.9558 122.139C83.99 122.714 84.0242 123.284 84.0587 123.854C84.0929 124.424 84.1231 124.989 84.1573 125.55C84.2173 126.677 84.2773 127.796 84.3329 128.901C84.4186 130.56 84.4914 132.197 84.5643 133.812C84.6029 134.751 84.6415 135.68 84.6757 136.606C84.8513 141.063 84.9756 145.344 85.0698 149.44C85.0956 150.515 85.1169 151.578 85.1383 152.628C85.1512 153.395 85.1684 154.158 85.1813 154.912C85.1985 155.846 85.2114 156.772 85.2284 157.689C85.2284 157.783 85.2284 157.882 85.2328 157.976C85.2457 158.794 85.2541 159.604 85.267 160.406C85.3013 163.028 85.3314 165.565 85.3612 168.025C85.3656 168.505 85.3741 168.984 85.3785 169.456C85.387 170.283 85.3957 171.101 85.4086 171.911C85.4171 172.64 85.4258 173.36 85.4343 174.071C85.4773 177.16 85.5285 180.109 85.6058 182.915C85.6271 183.751 85.6485 184.578 85.6742 185.388C85.7685 188.216 85.8884 190.894 86.0599 193.427C86.1026 194.147 86.1541 194.853 86.2099 195.552C86.3 196.653 86.3942 197.725 86.5057 198.766C86.5101 198.817 86.5142 198.869 86.5229 198.92C86.6385 200.008 86.7672 201.067 86.9085 202.091C86.9085 202.113 86.9129 202.134 86.917 202.16C87.3541 205.841 88.0999 209.251 89.3251 212.594C89.4407 212.924 89.5651 213.25 89.6979 213.58V213.579Z' fill='%233B754B'/%3E%3Cpath opacity='0.65' d='M83.9558 122.139C82.5716 119.911 81.0977 117.742 79.4049 115.767C78.2309 114.391 76.9325 113.084 75.4884 112.013V112.017C75.3728 111.931 74.8371 111.837 74.1256 111.743C73.3158 98.712 72.1546 87.018 70.4961 78.5377L79.4948 77.2522C80.0691 81.4045 80.5875 85.4583 81.0503 89.4135C82.4259 101.112 83.3343 111.979 83.9514 122.04C83.9514 122.074 83.9558 122.104 83.9558 122.139Z' fill='%233B754B'/%3E%3Cpath d='M-7.75783 222.839C-8.21988 225.911 -8.65595 228.225 -9.05313 229.602C-9.28712 230.414 -9.50928 230.9 -9.71469 231.025C-13.9932 233.599 -27.8961 229.577 -31.7485 232.821C-31.764 232.834 -31.7789 232.847 -31.7941 232.861C-31.8363 232.898 -31.8775 232.936 -31.9174 232.975C-31.9313 232.989 -31.9455 233.003 -31.9588 233.016C-31.9941 233.052 -32.0278 233.09 -32.061 233.128C-32.0791 233.148 -32.0981 233.168 -32.1156 233.189C-32.1398 233.219 -32.1643 233.249 -32.1877 233.279C-32.2111 233.31 -32.2338 233.341 -32.2554 233.373C-32.278 233.403 -32.2979 233.435 -32.3169 233.466C-32.3316 233.49 -32.3465 233.513 -32.3602 233.537C-32.388 233.585 -32.4147 233.634 -32.44 233.684C-32.4528 233.708 -32.4641 233.734 -32.4762 233.759C-32.4806 233.767 -32.484 233.774 -32.4865 233.782C-32.4994 233.81 -32.5118 233.839 -32.5228 233.868C-32.5514 233.937 -32.5774 234.009 -32.6008 234.082C-32.6598 234.269 -32.7015 234.468 -32.7239 234.681C-32.7429 234.847 -32.7491 235.021 -32.7437 235.203V235.209C-32.8649 234.835 -32.9396 234.412 -32.9725 233.95C-33.0047 233.528 -33.0029 233.074 -32.9733 232.593C-32.9715 232.558 -32.9689 232.524 -32.9671 232.49C-32.961 232.404 -32.954 232.316 -32.9463 232.228C-32.9375 232.124 -32.9272 232.017 -32.9159 231.91C-32.8925 231.692 -32.8657 231.47 -32.8335 231.246C-32.8292 231.211 -32.824 231.176 -32.8189 231.141C-32.7167 230.435 -32.5754 229.694 -32.4106 228.935C-32.3725 228.762 -32.3334 228.587 -32.2927 228.411C-32.2502 228.222 -32.206 228.034 -32.1601 227.844C-32.1038 227.608 -32.0456 227.372 -31.9866 227.135C-31.9658 227.05 -31.9449 226.966 -31.9233 226.882C-31.8003 226.395 -31.6736 225.906 -31.5462 225.421C-31.5462 225.421 -31.5462 225.42 -31.5454 225.418C-31.235 224.24 -30.923 223.079 -30.6594 221.997C-30.6517 221.963 -30.6429 221.929 -30.6352 221.894C-28.5659 213.325 -24.4805 187.289 -20.3026 158.995C-16.3614 132.304 -12.3395 103.602 -9.85292 85.6558C-9.57723 83.6667 -9.32059 81.8097 -9.08479 80.1018C-2.51225 81.4352 3.26026 82.6206 3.50814 82.7249C4.37692 83.0857 -3.07753 191.753 -7.75731 222.839L-7.75783 222.839Z' fill='%233B754B'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.33'%3E%3Cpath d='M81.0036 78.7588C80.9762 78.6873 80.9595 78.6243 80.9531 78.5676C80.9595 78.5907 80.9782 78.6581 81.0036 78.7588Z' fill='%238D9280'/%3E%3C/g%3E%3Cpath d='M26.8047 60.667C26.8047 60.667 24.6223 60.4749 24.4282 62.8823C24.2362 65.2896 26.8047 65.9643 26.9308 65.9944C27.0574 66.0248 26.8026 60.6667 26.8026 60.6667H26.8049L26.8047 60.667Z' fill='%23B4B296'/%3E%3Cpath d='M25.5825 60.9021C25.5825 60.9021 24.6401 60.705 24.4481 63.0974C24.2561 65.4921 25.6304 66.3712 25.6129 66.2424C25.0445 62.2664 25.5825 60.9024 25.5825 60.9024V60.9021Z' fill='%23BBB99D'/%3E%3Cpath d='M70.0648 99.4225C69.7536 97.6773 69.6028 95.7902 70.0574 94.0549C70.1606 93.658 70.295 93.2665 70.4839 92.9002C70.6911 92.4965 70.9264 92.1073 71.1334 91.7027C71.4968 90.9956 71.7844 90.2632 71.8276 89.4619C71.8806 88.4845 71.6963 87.5421 71.3275 86.6406C70.9609 85.7461 70.4891 84.8902 70.2159 83.9599C69.8579 82.7328 69.9078 81.2676 70.7766 80.2547C71.4837 79.431 72.5574 79.0521 73.6053 78.9005C74.8072 78.7262 76.0394 78.8019 77.2315 78.9991C78.3986 79.1911 79.5199 79.5118 80.6083 79.9716C81.5331 80.361 81.5432 81.5804 82.4217 82.0631C83.3641 82.5812 90.2564 91.1974 91.0134 91.973C90.9406 91.9001 85.8438 82.9045 85.7928 82.8137C85.7223 82.6922 85.6518 82.5709 85.5812 82.4502C85.4445 82.2203 85.3035 81.9905 85.1593 81.7657C84.9045 81.3711 84.6342 80.9819 84.3307 80.6239C82.4845 78.4539 81.606 77.653 79.3789 75.8771C76.893 73.8966 74.3405 71.8782 71.3326 70.8527C67.1622 69.433 55.7524 68.1117 52.1836 70.691C54.0329 72.5048 52.4341 74.9703 52.2117 77.5493C51.8482 81.7323 60.8005 88.4902 63.0282 92.0489C65.2561 95.6107 68.1098 98.7309 70.6299 102.088C70.7686 102.274 70.9076 102.462 71.0464 102.648C70.6101 101.61 70.2687 100.535 70.069 99.4228H70.0643L70.0648 99.4225Z' fill='%23BBBBA5'/%3E%3Cpath d='M70.491 89.5228C70.9281 85.8655 67.367 82.0933 69.5623 80.0067C72.1604 77.5392 78.6943 77.6475 83.4065 79.8579C83.5074 79.9058 83.6266 79.911 83.735 79.9388C82.2628 78.2589 81.3485 77.4532 79.371 75.8742C76.886 73.8937 74.3327 71.8753 71.3248 70.8498C67.1552 69.4301 55.7446 68.1088 52.1758 70.6881C54.025 72.5018 52.4262 74.9673 52.2038 77.5464C51.8404 81.7299 60.7935 88.4867 63.0204 92.0462C64.7731 94.8477 66.9153 97.3791 68.9754 99.9658C67.9099 93.2785 70.2032 91.9453 70.4908 89.5226L70.491 89.5228Z' fill='%23BBB99D'/%3E%3Cpath d='M76.2211 205.302C76.1081 204.751 75.835 204.21 75.3827 203.839C75.1907 203.679 74.9183 203.538 74.8372 203.301C74.7211 202.962 74.759 202.859 74.6635 202.505C74.4663 201.782 74.4009 200.784 74.2969 200.043C74.1883 199.269 74.1679 198.489 74.1656 197.711C74.1602 196.109 74.0593 194.51 73.9085 192.916C73.8979 192.817 72.2945 177.658 71.5395 177.918C64.6367 180.296 47.2945 182.998 47.5616 184.367C47.696 185.047 49.181 190.524 49.4511 191.16C49.7615 191.891 49.9185 192.689 50.1636 193.439C50.4004 194.164 50.6887 194.877 50.9132 195.607C51.1227 196.291 51.2159 196.975 51.5474 197.625C51.8556 198.228 52.3351 198.739 52.5954 199.365C52.9004 200.1 53.0294 201.74 53.0703 202.51C53.1408 203.816 53.0703 204.308 53.2593 205.604C53.5857 207.845 54.4436 210.065 56.0046 211.821C57.6837 213.71 60.2849 214.61 62.8284 214.938C65.5662 215.292 68.4124 214.991 71.0188 214.15C72.2237 213.761 73.3519 213.218 74.3445 212.473C74.812 212.121 75.2133 211.7 75.532 211.228C75.916 210.656 75.991 209.99 76.0291 209.333C76.1073 207.987 76.5017 206.653 76.2211 205.309V205.302Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.3' d='M76.2243 205.302C76.1105 204.751 75.8382 204.21 75.3859 203.839C75.1939 203.679 74.9215 203.538 74.8404 203.301C74.7243 202.962 74.7622 202.859 74.6667 202.505C74.4695 201.782 74.4033 200.784 74.3001 200.043C74.1915 199.269 74.1712 198.489 74.1688 197.711C74.1634 196.109 74.0625 194.51 73.9109 192.916C73.9011 192.817 72.2977 177.658 71.5427 177.918C68.6381 178.919 63.8826 179.978 59.3717 180.97C59.6677 181.258 59.9498 181.551 60.2253 181.852C61.5288 183.284 62.7286 184.876 63.6574 186.558C65.7365 190.317 66.5195 194.727 65.4435 198.89C64.463 202.682 62.579 206.216 60.044 209.257C59.0514 210.447 57.968 211.559 56.8086 212.592C58.4553 213.963 60.6649 214.658 62.8341 214.938C65.572 215.292 68.4182 214.991 71.0245 214.15C72.2295 213.761 73.3585 213.218 74.3511 212.473C74.8178 212.121 75.2199 211.7 75.5378 211.228C75.9218 210.656 75.9975 209.99 76.0356 209.333C76.1139 207.987 76.5074 206.653 76.2269 205.309L76.2243 205.302Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M49.4485 191.152C49.6078 191.529 49.7293 191.923 49.84 192.319C54.9293 192.039 65.6146 191.337 74.189 198.895C74.1684 198.498 74.1633 198.102 74.161 197.705C74.1555 196.103 74.0546 194.505 73.9038 192.91C73.8932 192.813 72.2898 177.653 71.5348 177.913C64.632 180.29 47.2898 182.993 47.5578 184.363C47.6914 185.042 49.1764 190.519 49.4464 191.155L49.4485 191.152Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M49.4485 191.153C49.5046 191.284 49.5548 191.418 49.6003 191.552H49.6132C58.5457 189.528 68.9079 190.749 73.7944 191.913C73.4211 188.525 72.1737 177.694 71.5348 177.913C64.632 180.29 47.2898 182.993 47.5578 184.363C47.6914 185.042 49.1764 190.519 49.4464 191.155L49.4487 191.152L49.4485 191.153Z' fill='%233B754B'/%3E%3Cpath d='M26.8339 202.504C26.4073 200.959 27.2861 199.382 27.4326 197.789C27.5767 196.242 29.218 190.033 29.1225 188.482C28.9351 185.461 28.2864 187.164 27.8295 184.168C27.4403 181.624 25.5844 179.414 23.2555 178.158C20.9267 176.903 18.177 176.527 15.5197 176.685C12.8632 176.848 10.2718 177.517 7.72396 178.252C7.29975 178.376 6.86806 178.502 6.50151 178.744C5.37764 179.487 5.22602 181.005 5.18303 182.321L5.03656 186.792L4.93051 190.013C4.8901 191.233 4.91532 192.416 4.90271 193.64C4.89525 194.358 4.82703 195.075 4.635 195.77C4.37733 196.702 4.11965 197.518 4.00871 198.475C3.94307 199.044 3.79917 199.761 3.57934 200.297C3.33686 200.89 2.75613 202.28 2.43025 202.833C2.31415 203.027 2.20295 203.23 2.10951 203.439C1.96561 204.482 2.02379 205.549 2.18287 206.594C2.37233 207.827 2.70568 209.05 3.29156 210.161C4.36729 212.202 6.26159 213.781 8.4007 214.776C10.5398 215.769 12.9132 216.213 15.2798 216.357C18.2172 216.537 21.2379 216.254 23.9073 215.069C24.6093 214.759 25.3012 214.372 25.7633 213.776C26.1571 213.268 26.3566 212.649 26.5365 212.038C27.0411 210.328 27.4478 208.588 27.7559 206.832C27.8697 206.177 27.9706 205.503 27.8218 204.853C27.6321 204.028 27.0586 203.325 26.8339 202.507V202.504V202.504Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.3' d='M26.8341 202.504C26.4076 200.959 27.2864 199.382 27.4329 197.789C27.577 196.242 29.2183 190.033 29.1228 188.482C28.9362 185.461 28.2867 187.164 27.8298 184.168C27.4406 181.624 25.5847 179.414 23.2558 178.158C21.4954 177.211 19.4953 176.761 17.4753 176.67C17.6113 177.107 17.7454 177.544 17.8517 177.992C18.036 178.752 18.1773 179.522 18.2834 180.298C18.47 181.649 18.5611 183.011 18.6293 184.375C18.6947 185.693 18.7856 187.007 18.8062 188.326C18.844 190.963 18.715 193.608 18.3212 196.215C17.932 198.806 17.2854 201.36 16.293 203.791C15.4294 205.899 14.0651 207.759 12.4262 209.335C10.7697 210.926 8.87051 212.248 6.89847 213.412C6.75663 213.495 6.61557 213.579 6.47656 213.665C7.08277 214.089 7.73171 214.461 8.40305 214.771C10.5422 215.764 12.9163 216.209 15.2829 216.352C18.2203 216.532 21.2403 216.249 23.9097 215.064C24.6116 214.754 25.3036 214.367 25.7664 213.771C26.1602 213.263 26.3597 212.644 26.5389 212.033C27.0442 210.323 27.4509 208.583 27.759 206.826C27.872 206.172 27.9729 205.498 27.8244 204.849C27.6347 204.023 27.0617 203.32 26.8372 202.502L26.8341 202.504Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M26.8358 202.504C26.4085 200.959 27.2881 199.382 27.4346 197.789C27.578 196.242 29.22 190.033 29.1237 188.482C28.9371 185.461 28.2877 187.164 27.8307 184.168C27.4415 181.624 25.5856 179.414 23.2575 178.158C20.9287 176.903 18.1782 176.527 15.5217 176.685C12.8645 176.848 10.2738 177.517 7.72519 178.252C7.30097 178.376 6.86928 178.502 6.50272 178.744C5.37911 179.487 5.22775 181.005 5.18477 182.321L4.97266 188.77C6.46257 189.2 7.89971 189.816 9.28151 190.511C10.1124 190.928 10.9251 191.372 11.7287 191.837C12.4861 192.274 13.2485 192.709 13.9688 193.206C17.0678 195.349 19.4162 198.445 20.8837 201.899C21.6137 203.616 22.144 205.422 22.4498 207.264C22.606 208.201 22.6843 209.144 22.77 210.091C22.8611 211.126 22.9468 212.165 23.015 213.203C23.0629 213.928 23.1031 214.653 23.1365 215.381C23.3968 215.285 23.6539 215.178 23.9067 215.068C24.6087 214.756 25.3006 214.37 25.7627 213.774C26.1565 213.266 26.356 212.648 26.536 212.036C27.0405 210.326 27.4472 208.585 27.7553 206.83C27.8691 206.175 27.97 205.502 27.8212 204.852C27.6315 204.026 27.0588 203.324 26.8333 202.505H26.8364L26.8358 202.504Z' fill='%233B754B'/%3E%3Cpath opacity='0.3' d='M27.3065 198.604C27.3642 198.334 27.4097 198.061 27.4355 197.789C27.5788 196.242 29.2209 190.033 29.1246 188.482C28.938 185.461 28.2893 187.164 27.8316 184.168C27.4432 181.624 25.5865 179.414 23.2584 178.158C20.9296 176.903 18.1791 176.527 15.5226 176.685C12.8661 176.848 10.2747 177.517 7.72606 178.252C7.30184 178.376 6.87016 178.502 6.5036 178.744C5.38025 179.487 5.22863 181.005 5.18565 182.321L5.00391 187.866C11.9335 188.394 22.4754 193.683 27.3065 198.604Z' fill='%233B754B'/%3E%3Cpath d='M108.2 121.829C106.879 128.061 97.5826 126.958 94.047 123.603C92.2811 122.059 91.1478 119.965 89.7938 118.081C88.7512 116.602 87.4966 115.195 85.8646 114.367C82.1661 113.313 79.7652 110.555 77.1236 107.96C74.2781 105.45 70.6169 103.845 67.7362 101.441C64.4228 98.0745 59.7011 95.427 57.3285 91.1269C54.9551 86.9535 55.628 81.7166 57.834 77.6148H57.8387C57.8353 77.6027 57.8569 77.5934 57.8515 77.5795C60.4818 74.1546 66.2043 72.1892 69.3548 74.0001C73.9643 75.8795 79.9871 77.0716 83.9221 80.2772C88.5589 85.532 91.0489 91.8366 95.1657 97.483C98.4946 101.723 101.669 105.558 105.834 109.055C109.352 112.341 109.037 116.818 108.177 121.835L108.2 121.829L108.2 121.829Z' fill='%23C5CAB9'/%3E%3Cpath opacity='0.4' d='M108.201 121.829C107.673 126.298 101.144 125.47 97.9701 125.463C97.1372 125.379 96.3235 125.094 95.5965 124.686C95.247 124.499 94.918 124.281 94.6011 124.044C91.0838 121.4 89.9116 116.427 85.8758 114.364C82.1778 113.31 79.7767 110.552 77.1356 107.957C74.2899 105.447 70.6289 103.842 67.7475 101.438C61.2475 95.4356 53.3966 91.3072 56.5067 80.8901C56.846 79.7655 57.289 78.6483 57.8527 77.6215V77.614H57.8581C57.8548 77.6019 57.8754 77.5924 57.8702 77.5788C59.7102 74.7598 64.7488 73.2432 67.2452 73.3173C69.5208 73.7235 71.7817 74.7609 73.9954 75.6538C75.8539 76.4683 77.5132 77.56 79.6127 77.7201C83.9795 79.2692 85.3839 82.1021 87.7797 85.4878C86.5526 87.2261 84.1967 89.5982 83.4971 91.5103C82.0468 95.85 80.8787 101.495 84.6513 104.992C89.3463 108.546 96.515 107.912 101.175 104.532C107.545 110.792 110.06 111.746 108.201 121.829Z' fill='%23C2C2AC'/%3E%3Cpath d='M79.2553 77.5692C77.663 76.8783 76.9839 77.1587 76.614 76.92C73.6455 75.6327 70.8117 73.8967 67.5701 73.3147C64.5864 73.3675 59.6499 74.9485 57.8666 77.5818C57.8666 77.5818 57.8666 77.5919 57.8589 77.5919C57.8589 77.5919 57.8589 77.5968 57.8542 77.6019V77.6071H57.8488V77.6145C55.824 81.3944 55.0435 86.1326 56.8616 90.1418C58.0558 92.8393 60.1511 95.0502 62.4957 96.8253C66.3831 100.249 69.8716 103.318 74.3431 105.866C78.4888 108.425 80.9836 113.036 85.8848 114.367C87.8916 115.38 89.2693 117.242 90.4961 119.068V119.075C91.5595 120.644 92.5755 122.286 94.007 123.552C94.007 123.557 94.0144 123.559 94.0168 123.559C94.189 123.711 94.3607 123.862 94.545 123.996C94.8811 124.255 95.2389 124.488 95.6104 124.691C97.3001 125.665 99.5396 125.829 101.181 124.656C103.625 122.858 105.914 120.653 107.639 118.133C105.092 115.333 102.256 113.027 99.1841 110.813C95.181 106.638 91.0228 111.406 88.6072 112.803C86.527 110.944 83.211 111.09 81.6295 108.508C76.0145 100.294 78.8008 89.6095 86.1752 83.2962C84.8904 80.4965 82.2761 78.7744 79.2602 77.5592L79.2548 77.5692H79.2553Z' fill='%23BBBBA5'/%3E%3Cpath d='M85.8711 114.365C86.0858 114.357 86.3005 114.352 86.5154 114.361C86.9342 114.38 87.3615 114.437 87.7523 114.599C88.1948 114.781 88.6059 115.074 88.9397 115.415C89.5763 116.07 89.9444 116.908 90.1895 117.777C90.311 118.206 90.4042 118.641 90.4976 119.078C90.3359 118.835 90.172 118.592 90.0052 118.356C88.9397 116.827 87.7098 115.355 86.0603 114.46C85.9995 114.427 85.9365 114.395 85.8737 114.365H85.8711Z' fill='%23BBB99D'/%3E%3Cpath d='M82.5255 112.881C82.4375 112.828 82.3518 112.78 82.2684 112.725C82.2403 112.707 82.2122 112.687 82.1849 112.67C82.0439 112.579 81.9118 112.49 81.7759 112.394C81.1164 111.914 80.5406 111.366 79.9828 110.798C79.8713 110.684 79.7575 110.568 79.6489 110.452C79.5382 110.34 79.4265 110.219 79.3212 110.103C79.2098 109.989 79.0988 109.871 78.9928 109.754C78.4396 109.166 77.881 108.592 77.2529 108.067C77.212 108.029 77.1641 107.996 77.1239 107.961C76.614 107.536 76.0858 107.124 75.5457 106.728C75.3993 106.619 75.2497 106.506 75.0989 106.4C74.869 106.241 74.6443 106.084 74.4167 105.922C74.3887 105.904 74.3614 105.887 74.3333 105.872C74.2476 105.811 74.1588 105.75 74.0684 105.69C73.985 105.634 73.9014 105.579 73.818 105.523V105.518C73.7093 105.447 73.6033 105.379 73.497 105.308C73.4545 105.28 73.4143 105.25 73.3711 105.222H73.3937C73.4818 105.237 73.5729 105.255 73.6661 105.271C73.6918 105.273 73.7093 105.278 73.732 105.28C74.5781 105.421 75.434 105.573 76.2626 105.826C76.2701 105.826 76.2832 105.834 76.2907 105.836C77.1922 106.116 78.0123 106.622 78.7075 107.261C80.1264 108.557 81.1092 110.249 82.0107 111.921C82.1754 112.227 82.3371 112.553 82.5108 112.873L82.5183 112.883L82.5258 112.881L82.5255 112.881Z' fill='%23BBB99D'/%3E%3Cpath d='M91.9109 121.162C91.8002 120.134 91.7294 119.098 91.785 118.065C91.8404 117.014 92.0682 115.989 92.3881 114.988C92.628 114.238 92.9063 113.495 93.2039 112.762C93.6433 111.914 94.0423 111.01 94.7018 110.32C95.0652 109.939 95.525 109.625 96.0653 109.584C96.7724 109.534 97.3711 109.827 97.9418 110.214C98.5807 110.648 99.2531 111.038 99.8943 111.47C100.548 111.909 101.195 112.361 101.826 112.836C103.912 114.408 105.86 116.211 107.625 118.141C106.45 119.853 105.056 121.417 103.471 122.779C101.822 124.194 100.498 125.667 98.1393 125.479C96.23 125.327 94.563 124.229 93.2906 122.87C92.9393 122.496 92.6139 122.102 92.3027 121.695C92.1691 121.521 92.0401 121.342 91.9111 121.163L91.9109 121.162Z' fill='%23BBB99D'/%3E%3Cpath d='M98.1231 101.11C76.6841 97.5219 90.0867 89.1609 90.0867 89.1609C91.6909 91.97 93.1355 94.8572 95.1858 97.4818C96.1433 98.7073 97.1177 99.9198 98.1208 101.11H98.1231Z' fill='%23CCD1C0'/%3E%3Cpath d='M59.9145 137.072L62.3594 137.829C62.3594 137.829 61.2203 139.982 60.0717 139.719C58.9198 139.456 59.9147 137.069 59.9147 137.069L59.9145 137.072Z' fill='%2306B253'/%3E%3Cpath d='M14.1397 138.344L13.3945 138.693L13.4553 139.269C13.4553 139.269 13.9454 140.562 14.8036 140.143C15.6626 139.723 14.1397 138.347 14.1397 138.347V138.344Z' fill='%2306B253'/%3E%3Cpath d='M39.5225 192.84C40.4618 192.82 41.3892 192.641 42.311 192.474C46.3341 191.744 50.4075 191.226 54.4988 190.926C59.522 190.554 69.8309 190.014 74.0538 187.559C74.314 187.407 74.582 187.235 74.7133 186.983C74.8695 186.682 74.8013 186.329 74.7284 186.002C74.3088 184.105 73.0895 177.421 72.6197 175.537C69.306 175.64 61.7924 180.958 58.4789 181.061C40.6693 181.623 22.3694 181.226 4.60506 179.981C4.54199 181.895 3.89047 184.583 3.82972 186.5C3.82483 186.662 3.82457 186.839 3.93063 186.97C4.03411 187.097 5.24885 187.334 5.41823 187.38C7.1586 187.857 8.9085 188.336 10.7091 188.564C11.9643 188.723 13.2421 188.758 14.4751 189.028C15.7073 189.299 16.8616 189.796 18.0459 190.206C22.0235 191.573 26.3645 191.909 30.6229 191.742C32.1406 191.681 33.6915 191.563 35.156 191.926C35.851 192.098 36.5097 192.375 37.1993 192.563C37.9489 192.768 38.7374 192.863 39.5227 192.846V192.84H39.5225Z' fill='%2300C55E'/%3E%3Cpath opacity='0.5' d='M74.7303 185.999C74.3107 184.102 73.0914 177.418 72.6208 175.533C69.3079 175.637 61.7943 180.955 58.4806 181.058C40.6709 181.619 22.3711 181.222 4.60643 179.977C4.55597 181.51 4.12918 183.539 3.92969 185.271C4.26304 185.153 4.60129 185.047 4.94236 184.941C5.83404 184.668 6.76562 184.494 7.70055 184.445C8.48051 184.403 9.25841 184.441 10.0111 184.67C11.6827 185.186 13.1981 186.32 14.2891 187.676C14.6731 188.153 15.0191 188.671 15.277 189.23C16.0289 189.452 16.7589 189.734 17.4941 190C17.9811 189.323 18.5444 188.704 19.2242 188.232C19.8023 187.83 20.4716 187.545 21.181 187.499C21.9695 187.451 22.7721 187.671 23.4543 188.06C24.8536 188.861 25.1586 190.19 25.1053 191.625C26.9394 191.781 28.7899 191.804 30.6263 191.733C32.1144 191.675 33.6342 191.561 35.0737 191.897C35.2786 191.377 35.5738 190.874 35.9934 190.503C36.4328 190.114 37.0086 189.884 37.5968 190.038C38.2509 190.21 38.7691 190.707 39.0211 191.329C39.2206 191.814 39.2942 192.322 39.3094 192.837H39.5318C40.4711 192.817 41.3978 192.638 42.3196 192.471C46.2243 191.764 50.1738 191.256 54.1416 190.95C54.5939 190.071 55.5309 189.263 56.2632 188.892C56.8087 188.616 57.3665 188.472 57.9781 188.552C58.6595 188.644 59.2809 188.947 59.7612 189.439C60.0389 189.725 60.2688 190.046 60.4632 190.39C67.1405 189.7 70.977 189.349 74.0608 187.555C74.3203 187.404 74.5882 187.231 74.7195 186.979C74.8765 186.678 74.8083 186.325 74.7347 185.999H74.7301H74.7303Z' fill='%2306B253'/%3E%3Cpath opacity='0.4' d='M68.1686 189.356C68.5071 188.699 68.9563 188.096 69.4592 187.555C70.6135 186.317 66.8756 186.482 68.4592 185.958C69.4008 185.648 70.3607 185.397 71.3229 185.155C72.3459 184.897 73.3784 184.663 74.4219 184.491C73.8816 181.765 73.0054 177.064 72.6236 175.531C69.3107 175.634 61.7971 180.952 58.4836 181.056C40.6739 181.616 22.3741 181.22 4.6095 179.974C4.55647 181.58 4.00071 184.291 3.81641 186.072C3.88951 186.017 6.43045 183.289 10.4209 185.731C11.8346 186.597 12.805 187.211 13.1479 188.805C13.5948 188.858 14.0396 188.924 14.4767 189.02C14.8355 189.098 15.1861 189.196 15.5344 189.305C15.5753 189.275 15.6134 189.245 15.6482 189.217C21.5957 184.609 27.508 187.928 28.6926 190.929C28.8012 191.205 28.8921 191.485 28.9778 191.768C29.5287 191.765 30.0765 191.752 30.6245 191.73C30.9128 191.72 31.2027 191.705 31.4933 191.695C33.4154 188.686 39.3354 187.441 41.9517 192.536C42.0732 192.513 42.1914 192.493 42.3129 192.47C45.2145 191.944 48.142 191.528 51.0838 191.225C52.6295 189.437 57.7739 185.788 65.4006 189.817C66.3051 189.701 67.2195 189.576 68.1233 189.444C68.1385 189.414 68.1536 189.386 68.1688 189.355L68.1686 189.356Z' fill='%2306B253'/%3E%3Cpath d='M73.4323 176.921C73.2122 176.198 73.1371 175.438 73.0385 174.695C72.6372 171.656 72.5635 168.594 72.0961 165.563C71.6317 162.552 70.8183 159.558 70.6795 156.515C70.6113 155.024 69.2802 153.203 69.1469 151.715C68.561 145.246 60.1353 139.304 58.7219 132.35C58.7873 132.13 58.8099 131.898 58.7893 131.676C58.7741 131.499 58.7391 131.324 58.6938 131.152L16.02 134.07C15.8681 134.432 15.7598 134.803 15.6565 135.181C15.4594 135.909 15.1793 136.559 14.7901 137.222C14.0297 138.513 15.621 140.772 14.8107 142.038C13.2703 144.437 10.6836 145.824 10.075 148.527C9.41348 151.462 8.22886 154.713 7.79718 157.679C5.32472 174.642 3.98385 176.508 3.96094 182.693C3.96094 182.693 5.21866 182.973 6.39788 183.561C8.5218 184.625 10.7549 184.994 13.1913 185.07C13.9288 185.092 14.6132 185.115 15.3312 185.292C15.9876 185.454 16.6187 185.696 17.2677 185.883C18.7558 186.31 20.3917 186.373 21.9403 186.476C23.6423 186.593 25.332 186.712 27.0136 186.992C28.6632 187.265 30.2915 187.639 31.9284 187.967C35.073 188.596 38.3159 188.9 41.5158 189.221C43.041 189.372 44.5767 189.46 46.1096 189.377C47.7182 189.291 49.2107 188.743 50.8293 188.727C55.2545 188.682 55.8684 188.94 57.7321 186.608C58.5934 185.532 60.2324 185.565 61.5686 185.583C64.94 185.629 72.8701 183.443 74.749 180.672C74.5971 179.965 74.3173 179.273 74.0516 178.603C73.8292 178.045 73.6079 177.489 73.4333 176.918V176.921H73.4323Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.1' d='M12.1662 178.711C12.2064 178.398 12.2473 178.085 12.2769 177.772C12.3809 176.776 12.4491 175.768 12.3809 174.768C12.3505 174.321 12.2975 173.859 12.1381 173.437C12.0295 173.146 11.8429 172.821 11.5121 172.758C11.0925 172.677 10.6508 172.98 10.3481 173.237C9.75165 173.745 9.38278 174.457 9.13026 175.191C8.86306 175.971 8.70372 176.784 8.55442 177.593C8.41568 178.341 8.30242 179.103 8.06508 179.825C7.76468 180.75 7.38833 181.647 7.08459 182.569C6.95871 182.951 6.84262 183.337 6.74609 183.728C8.28414 184.441 9.88525 184.804 11.5803 184.966C11.6738 183.913 11.7389 182.854 11.8223 181.798C11.9034 180.763 12.0272 179.737 12.1659 178.707V178.711L12.1662 178.711Z' fill='%2300C55E'/%3E%3Cpath opacity='0.1' d='M26.0237 185.547C25.5161 183.862 25.5032 182.073 25.0661 180.371C24.8491 179.52 24.5312 178.665 23.9781 177.971C23.6972 177.617 23.283 177.089 22.7731 177.125C22.3769 177.152 22.1115 177.524 21.9445 177.847C21.7025 178.315 21.5561 178.835 21.4474 179.347C21.2402 180.325 21.1493 181.32 21.2098 182.316C21.2827 183.503 21.5203 184.67 21.7447 185.834C21.7857 186.047 21.8281 186.259 21.8683 186.471C21.891 186.471 21.9169 186.474 21.9396 186.476C23.4874 186.58 25.0257 186.691 26.5537 186.921C26.3434 186.476 26.1622 186.016 26.0204 185.547H26.0235H26.0237Z' fill='%2300C55E'/%3E%3Cpath opacity='0.1' d='M67.0845 183.392C66.8013 182.288 66.3977 181.214 65.9021 180.189C65.7178 179.81 65.5181 179.439 65.349 179.052C65.195 178.701 65.0486 178.347 64.8944 177.998C64.594 177.327 64.2761 176.546 63.7303 176.031C63.5332 175.846 63.1499 175.566 62.8616 175.677C62.6044 175.776 62.5686 176.147 62.5534 176.382C62.5329 176.703 62.548 177.026 62.5534 177.347C62.5609 177.87 62.5589 178.39 62.5815 178.91C62.6294 180.001 62.7478 181.088 63.0155 182.152C63.2279 182.995 63.5056 183.823 63.841 184.625C63.9396 184.862 64.0436 185.102 64.1566 185.337C65.1773 185.165 66.3009 184.91 67.4322 184.584C67.3087 184.188 67.1872 183.791 67.0839 183.392L67.0845 183.392Z' fill='%2300C55E'/%3E%3Cpath opacity='0.4' d='M74.0545 178.603C73.8329 178.044 73.6107 177.489 73.4362 176.918C73.2161 176.196 73.1402 175.435 73.0424 174.693C72.6403 171.653 72.5674 168.592 72.1 165.56C71.6356 162.55 70.8222 159.556 70.6834 156.512C70.6152 155.022 69.2841 153.201 69.1508 151.712C68.5649 145.243 60.1392 139.301 58.725 132.347C58.7909 132.127 58.8138 131.895 58.7932 131.672C58.778 131.496 58.743 131.321 58.6977 131.15L16.0239 134.067C15.872 134.428 15.7637 134.8 15.6604 135.179C15.4633 135.906 15.1832 136.555 14.794 137.22C14.0336 138.51 15.6249 140.769 14.8146 142.034C13.2742 144.435 10.6875 145.821 10.0789 148.524C9.41738 151.459 8.23276 154.711 7.80108 157.676C5.32888 174.639 3.9875 176.506 3.96484 182.69C3.96484 182.69 5.22256 182.97 6.40178 183.559C6.41465 183.566 6.42984 183.571 6.44193 183.579C7.61651 179.517 8.22066 170.895 10.16 167.768C11.5138 165.588 14.2591 164.171 14.873 167.935C15.4967 171.752 13.8601 181.303 13.0794 185.062C13.1172 185.062 13.1584 185.064 13.1954 185.067C13.9329 185.089 14.6174 185.112 15.3345 185.289C15.9917 185.451 16.6229 185.694 17.2718 185.88C17.9844 186.085 18.7316 186.207 19.4897 186.287C19.0905 181.17 17.9236 167.791 22.9846 168.594C27.2551 169.272 26.7854 177.052 34.1798 188.361C36.6096 188.738 39.0771 188.972 41.5197 189.217C41.651 189.23 41.7846 189.242 41.9182 189.255C41.5501 185.903 39.3399 171.782 41.9941 169.721C42.8554 169.054 43.9564 168.973 44.9974 169.165C50.3536 170.152 51.5632 184.916 54.9953 188.576C56.0819 188.374 56.7231 187.871 57.736 186.606C58.2938 185.908 59.1801 185.676 60.0996 185.605C59.5137 179.049 55.3542 169.054 59.8316 167.117C64.2918 165.186 64.9686 172.727 70.583 183.478C72.4573 182.685 74.0401 181.72 74.7526 180.669C74.6007 179.962 74.3209 179.27 74.0553 178.6V178.603H74.0545Z' fill='%233B754B'/%3E%3Cpath opacity='0.4' d='M74.0556 178.603C73.8332 178.044 73.6111 177.489 73.4373 176.918C73.2172 176.196 73.1413 175.435 73.0427 174.693C72.6414 171.653 72.5685 168.592 72.1011 165.56C71.6367 162.55 70.8233 159.556 70.6845 156.512C70.6163 155.022 69.2852 153.201 69.1519 151.712C68.5652 145.243 60.1403 139.301 58.7261 132.347C58.792 132.127 58.8149 131.895 58.7943 131.672C58.7791 131.496 58.7441 131.321 58.6988 131.15L16.025 134.067C15.8731 134.428 15.7648 134.8 15.6615 135.179C15.4644 135.906 15.1843 136.555 14.7951 137.22C14.0347 138.51 15.626 140.769 14.8157 142.034C13.5227 144.05 11.4891 145.354 10.5117 147.319C10.8175 147.458 11.1202 147.597 11.4284 147.734C13.934 148.852 16.4569 149.933 18.9678 151.043C20.3238 151.641 21.6971 152.204 23.0614 152.788C23.7353 153.076 24.4046 153.369 25.0716 153.675C25.6726 153.953 26.2711 154.218 26.7507 154.685C26.7635 154.698 26.7635 154.715 26.7561 154.728C26.5769 155.104 26.4405 155.496 26.3447 155.895C27.2583 156.044 28.1984 156.079 29.1227 156.095C31.1077 156.125 33.0951 156.102 35.0801 156.102C35.0976 156.102 35.1179 156.12 35.1158 156.138C35.0878 156.428 35.0628 156.718 35.0399 157.009C36.1357 156.895 37.2699 156.954 38.3407 157.108C39.2551 157.239 40.1467 157.464 41.0026 157.812C41.9548 158.198 42.8586 158.694 43.7176 159.252C45.337 160.303 46.7762 161.548 47.9531 163.087C49.0844 164.564 49.9684 166.217 50.703 167.924C51.4506 169.66 52.0545 171.453 52.6532 173.244C53.3451 175.308 54.0798 177.359 54.7519 179.43C55.6176 182.101 56.4053 184.844 56.8225 187.633C57.1049 187.365 57.4007 187.029 57.7338 186.612C58.2924 185.915 59.1786 185.683 60.0981 185.611C59.5115 179.056 55.3527 169.061 59.8302 167.123C64.2904 165.193 64.9671 172.734 70.5808 183.485C72.455 182.692 74.0386 181.727 74.7512 180.676C74.5993 179.968 74.3187 179.276 74.0538 178.607L74.0561 178.602L74.0556 178.603Z' fill='%233B754B'/%3E%3Cpath opacity='0.4' d='M38.9697 184.903C37.459 181.05 36.5045 176.963 35.8252 172.889C35.0421 168.205 34.6408 163.433 34.863 158.684C34.8879 158.156 34.9206 157.625 34.9615 157.098C34.7796 157.115 34.5973 157.14 34.4161 157.171C33.7893 157.275 33.0873 157.436 32.6049 157.878C32.5699 157.908 32.5192 157.858 32.5547 157.828C32.9388 157.474 33.466 157.297 33.9661 157.186C34.2946 157.112 34.6308 157.06 34.9693 157.022C34.9716 156.986 34.9739 156.95 34.977 156.915C34.9891 156.751 35.0043 156.587 35.0195 156.423C35.0269 156.352 35.0323 156.281 35.0401 156.211C35.0447 156.15 34.8838 156.175 34.8581 156.175H30.3652C29.1556 156.175 27.9408 156.17 26.739 156.021C26.6023 156.003 26.4659 155.983 26.3323 155.96C26.1554 156.731 26.1297 157.532 26.2489 158.328C26.4257 159.514 26.8499 160.646 27.3369 161.738C27.8551 162.892 28.4485 164.011 28.954 165.17C29.5147 166.457 29.977 167.785 30.4838 169.091C31.5598 171.868 32.651 174.641 33.6768 177.437C34.6261 180.021 35.5709 182.616 36.74 185.112C37.3159 186.339 37.9419 187.544 38.6567 188.696C38.7077 188.779 38.7599 188.863 38.8107 188.947C39.543 189.025 40.2759 189.095 41.0082 189.169C40.9856 189.131 40.9626 189.093 40.9423 189.055C40.1819 187.724 39.5332 186.33 38.9726 184.902H38.9703L38.9697 184.903Z' fill='%233B754B'/%3E%3Cpath opacity='0.4' d='M10.0777 148.525C9.83262 149.611 9.51472 150.743 9.19141 151.887C9.68152 152.776 10.0375 153.752 10.3251 154.716C10.6636 155.851 10.9215 156.987 10.9161 158.177C10.9114 159.941 10.608 161.82 9.75746 163.386C9.65887 163.568 9.38112 163.838 9.61022 163.985C9.79762 164.103 9.98655 164.217 10.184 164.318C10.6257 164.546 11.0831 164.742 11.5506 164.909C12.4922 165.247 13.4619 165.505 14.4272 165.775C15.4319 166.058 16.4168 166.405 17.4222 166.685C18.5209 166.993 19.6295 167.256 20.748 167.478C25.3804 168.402 30.1153 168.86 34.8381 168.905C37.2503 168.928 39.6617 168.862 42.0716 168.753C44.4854 168.645 46.8922 168.539 49.2818 168.155C51.5725 167.788 53.8375 167.284 56.1208 166.869C58.1945 166.493 60.3563 166.094 62.4727 166.179C63.9547 166.24 65.4397 166.573 66.7334 167.328C67.9734 168.054 68.993 169.092 69.7709 170.294C70.8317 171.929 71.4812 173.803 72.1808 175.609C72.9031 177.476 73.5953 179.355 74.2795 181.24C74.4638 181.052 74.6255 180.863 74.7537 180.671C74.6026 179.964 74.322 179.271 74.0571 178.602C73.8347 178.044 73.6126 177.488 73.438 176.918C73.2187 176.195 73.1428 175.435 73.0442 174.692C72.6429 171.653 72.5693 168.591 72.1026 165.56C71.6374 162.549 70.824 159.556 70.6853 156.511C70.6178 155.021 69.2867 153.2 69.1526 151.712C68.5667 145.242 60.1418 139.301 58.7276 132.347C58.793 132.127 58.8156 131.894 58.7958 131.672C58.7806 131.495 58.7449 131.321 58.6995 131.149L16.0257 134.067C15.8746 134.428 15.7663 134.8 15.6623 135.178C15.4659 135.906 15.185 136.555 14.7966 137.219C14.0362 138.51 15.6275 140.768 14.8164 142.034C13.276 144.434 10.6901 145.82 10.0815 148.524H10.0785L10.0777 148.525Z' fill='%233B754B'/%3E%3Cpath d='M19.8791 90.313C18.2978 90.389 16.6792 90.8 15.3226 91.5378C13.3124 92.6344 12.1834 94.7233 11.7136 96.7219C11.1939 98.9323 11.3548 101.314 12.307 103.416C12.7971 103.052 13.2996 102.701 13.792 102.342C16.353 100.47 18.8865 98.5178 21.093 96.3074C22.081 95.3195 23.0908 94.2458 23.6798 93.0179C23.9022 92.5536 24.0507 92.0307 23.9727 91.5581C23.9673 91.5581 23.9652 91.5527 23.9598 91.5507C22.9649 90.5097 21.336 90.2448 19.876 90.313H19.8791Z' fill='%23CCD1C0'/%3E%3Cpath d='M60.0774 134.593C60.0447 134.191 59.9083 133.804 59.7747 133.421C59.7747 133.309 59.7739 133.2 59.777 133.097C59.7848 132.93 59.6936 132.822 59.5675 132.769C58.8171 129.954 60.3451 126.827 60.6206 124.018C60.9006 121.154 63.6655 118.921 63.7216 116C63.7443 114.816 65.3431 111.239 65.7037 110.45C67.5097 106.497 68.4673 99.5273 68.6614 95.3874C68.0148 92.2855 68.411 76.6057 68.3989 76.5326C68.1788 75.1886 63.7899 78.3159 64.0722 76.9746C64.3402 75.704 64.9639 79.7837 65.6481 78.6089C65.3802 78.1265 65.0525 77.6768 64.6231 77.3053C63.7747 76.5727 62.6153 76.209 61.4917 75.8883C58.3093 74.984 54.6625 74.1906 50.7912 73.5996C50.8216 73.0135 50.7838 72.4199 50.7153 71.8363C50.4877 69.9165 49.9194 67.9259 48.8212 66.2486C48.727 66.1073 48.5232 66.0239 48.3409 66.0744C33.0261 70.4244 26.2404 64.2707 25.6568 62.6819C25.0385 60.9894 25.7078 64.8671 18.8657 66.7413C18.641 66.8021 18.5553 66.9738 18.5705 67.138C18.5576 67.1885 18.5553 67.2466 18.5705 67.3097C19.1335 69.8182 18.3329 72.4907 19.4341 74.9132C19.4599 74.9688 19.4871 75.0244 19.5152 75.0774C16.4543 76.1637 13.7468 77.6315 11.5827 79.5587C9.84957 81.1022 8.45052 82.9136 6.91016 84.6133C8.52646 88.7919 8.49609 93.3234 8.19774 97.7365C8.01627 100.445 7.7918 103.355 9.36769 105.674C9.87531 106.421 10.5544 107.076 11.0015 107.854C11.5449 108.798 11.6177 109.271 11.7791 110.324C11.8041 110.491 11.7086 110.663 11.7336 110.834C12.0113 112.592 11.5372 114.154 11.7845 116.026C11.9006 116.897 12.8477 118.153 12.878 118.953C12.9789 121.576 14.2696 123.897 15.1507 126.352C15.9868 128.684 16.3557 131.147 16.2525 133.592C15.9693 134.095 15.8079 134.631 15.6584 135.179C15.5325 135.646 15.3708 136.083 15.169 136.51C15.1788 136.5 15.1917 136.492 15.2017 136.482C15.2473 136.445 15.3103 136.492 15.2851 136.54C14.7116 137.604 14.3178 138.733 13.9033 139.852C13.6505 140.537 13.3934 141.219 13.0853 141.886C12.7771 142.555 12.4214 143.204 12.0775 143.859C11.3451 145.25 10.6046 146.637 9.88767 148.034C9.57208 148.651 9.26395 149.27 8.94836 149.884C8.86805 150.293 8.79443 150.705 8.72364 151.116C8.73574 151.401 8.75092 151.687 8.77898 151.975C8.93292 153.662 9.14992 155.342 9.30179 157.03C9.45367 158.707 9.54145 160.392 9.43848 162.072C9.42329 162.314 9.40501 162.557 9.38545 162.797C9.38004 162.852 9.31723 163.065 9.4256 163.087C9.53707 163.11 9.64569 163.133 9.75638 163.156C10.1958 163.247 10.638 163.34 11.0774 163.428C11.9887 163.615 12.9007 163.797 13.8122 163.971C17.4644 164.671 21.1444 165.265 24.8586 165.623C28.6601 165.992 32.4806 166.104 36.3019 165.954C40.1536 165.803 43.987 165.427 47.806 164.954C49.7122 164.719 51.6168 164.462 53.5183 164.201C55.4054 163.943 57.2917 163.721 59.1834 163.496C60.1804 163.378 61.1784 163.249 62.1687 163.082C62.6989 162.994 66.4793 162.037 66.9339 161.756C67.6464 161.316 67.4521 160.423 67.4341 159.756C67.4142 159.005 67.4773 158.26 67.5131 157.51C67.5532 156.654 67.5957 155.797 67.6596 154.944C67.8006 153.036 67.9981 151.089 68.596 149.247C68.6066 149.212 68.6187 149.179 68.6295 149.143C68.5991 149.06 68.5687 148.979 68.5353 148.896C67.2879 145.743 60.2319 136.478 60.0725 134.583L60.078 134.593L60.0774 134.593Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.4' d='M60.0774 134.593C60.0447 134.191 59.9083 133.804 59.7747 133.421C59.7747 133.309 59.7739 133.2 59.777 133.097C59.7848 132.93 59.6936 132.822 59.5675 132.769C58.8171 129.954 60.3451 126.827 60.6206 124.018C60.9006 121.154 63.6655 118.921 63.7216 116C63.7443 114.816 65.3431 111.239 65.7037 110.45C67.5097 106.497 68.4673 99.5273 68.6614 95.3874C68.0148 92.2855 68.411 76.6057 68.3989 76.5326C68.1788 75.1886 63.7899 78.3159 64.0722 76.9746C64.3402 75.704 64.9639 79.7837 65.6481 78.6089C65.3802 78.1265 65.0525 77.6768 64.6231 77.3053C63.7747 76.5727 62.6153 76.209 61.4917 75.8883C58.3093 74.984 54.6625 74.1906 50.7912 73.5996C50.8216 73.0135 50.7838 72.4199 50.7153 71.8363C50.4877 69.9165 49.9194 67.9259 48.8212 66.2486C48.727 66.1073 48.5232 66.0239 48.3409 66.0744C33.0261 70.4244 26.2404 64.2707 25.6568 62.6819C25.0385 60.9894 25.7078 64.8671 18.8657 66.7413C18.641 66.8021 18.5553 66.9738 18.5705 67.138C18.5576 67.1885 18.5553 67.2466 18.5705 67.3097C19.1335 69.8182 18.3329 72.4907 19.4341 74.9132C19.4599 74.9688 19.4871 75.0244 19.5152 75.0774C16.4543 76.1637 13.7468 77.6315 11.5827 79.5587C9.84957 81.1022 8.45052 82.9136 6.91016 84.6133C8.52646 88.7919 8.49609 93.3234 8.19774 97.7365C8.01627 100.445 7.7918 103.355 9.36769 105.674C9.87531 106.421 10.5544 107.076 11.0015 107.854C11.5449 108.798 11.6177 109.271 11.7791 110.324C11.8041 110.491 11.7086 110.663 11.7336 110.834C12.0113 112.592 11.5372 114.154 11.7845 116.026C11.9006 116.897 12.8477 118.153 12.878 118.953C12.9789 121.576 14.2696 123.897 15.1507 126.352C15.9868 128.684 16.3557 131.147 16.2525 133.592C15.9693 134.095 15.8079 134.631 15.6584 135.179C15.5325 135.646 15.3708 136.083 15.169 136.51C15.1788 136.5 15.1917 136.492 15.2017 136.482C15.2473 136.445 15.3103 136.492 15.2851 136.54C14.7116 137.604 14.3178 138.733 13.9033 139.852C13.6505 140.537 13.3934 141.219 13.0853 141.886C12.7771 142.555 12.4214 143.204 12.0775 143.859C11.3451 145.25 10.6046 146.637 9.88767 148.034C9.57208 148.651 9.26395 149.27 8.94836 149.884C8.86805 150.293 8.79443 150.705 8.72364 151.116C8.73574 151.401 8.75092 151.687 8.77898 151.975C8.93292 153.662 9.14992 155.342 9.30179 157.03C9.45367 158.707 9.54145 160.392 9.43848 162.072C9.42329 162.314 9.40501 162.557 9.38545 162.797C9.38004 162.852 9.31723 163.065 9.4256 163.087C9.53707 163.11 9.64569 163.133 9.75638 163.156C10.1958 163.247 10.638 163.34 11.0774 163.428C11.9887 163.615 12.9007 163.797 13.8122 163.971C17.4644 164.671 21.1444 165.265 24.8586 165.623C28.6601 165.992 32.4806 166.104 36.3019 165.954C40.1536 165.803 43.987 165.427 47.806 164.954C49.7122 164.719 51.6168 164.462 53.5183 164.201C55.4054 163.943 57.2917 163.721 59.1834 163.496C60.1804 163.378 61.1784 163.249 62.1687 163.082C62.6989 162.994 66.4793 162.037 66.9339 161.756C67.6464 161.316 67.4521 160.423 67.4341 159.756C67.4142 159.005 67.4773 158.26 67.5131 157.51C67.5532 156.654 67.5957 155.797 67.6596 154.944C67.8006 153.036 67.9981 151.089 68.596 149.247C68.6066 149.212 68.6187 149.179 68.6295 149.143C68.5991 149.06 68.5687 148.979 68.5353 148.896C67.2879 145.743 60.2319 136.478 60.0725 134.583L60.078 134.593L60.0774 134.593Z' fill='%23C2C2AC'/%3E%3Cpath d='M18.5719 67.3105C19.1348 69.819 18.3343 72.4915 19.4355 74.914C19.4605 74.9696 19.4885 75.0252 19.5166 75.0782C18.8496 75.3158 18.1978 75.5709 17.5664 75.8461C17.8874 76.1593 18.2334 76.4497 18.5914 76.7125C19.6597 77.5033 20.8397 78.1018 22.0567 78.6297C23.0591 79.0643 24.1405 79.2563 25.2314 79.2082C26.2891 79.1603 27.3273 78.9327 28.35 78.6676C29.2924 78.4225 30.2417 78.1878 31.1506 77.8364C31.9391 77.5332 32.7016 77.162 33.421 76.7174C34.8051 75.8584 36.0276 74.7369 36.9471 73.388C37.7422 72.2235 38.3008 70.9225 38.6316 69.5559C38.212 69.8288 37.7955 70.1065 37.3659 70.3668C35.6085 71.4227 33.6813 72.3473 31.6181 72.572C29.7773 72.7715 27.8073 72.4052 26.337 71.2332C25.0471 70.2051 24.072 68.7829 23.3724 67.3028C23.0545 66.6283 22.7767 65.9158 22.5772 65.1858C21.6827 65.7516 20.4883 66.3048 18.8743 66.7468C18.6496 66.8075 18.5639 66.9792 18.5791 67.1434C18.5662 67.1939 18.5639 67.2521 18.5791 67.3151L18.5716 67.31L18.5719 67.3105Z' fill='%23C2C2AC'/%3E%3Cpath d='M21.7695 65.638C20.9939 66.0395 20.0417 66.421 18.8671 66.7418C18.6424 66.8025 18.5567 66.9742 18.5719 67.1384C18.559 67.1889 18.5567 67.2471 18.5719 67.3101C19.1348 69.8186 18.3343 72.4911 19.4355 74.9136C19.4605 74.9692 19.4885 75.0248 19.5166 75.0778C18.8496 75.3152 18.1978 75.5703 17.5664 75.8457C17.8874 76.159 18.2334 76.4496 18.5914 76.7122C19.6597 77.5029 20.8397 78.1014 22.0567 78.6294C23.0591 79.0639 24.1405 79.2559 25.2314 79.2078C25.4204 79.2003 25.6078 79.1851 25.7944 79.1648C25.8672 74.6405 23.0012 67.4893 21.7736 65.6375H21.7689L21.7695 65.638Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.4' d='M60.0809 134.593C60.0475 134.191 59.9118 133.804 59.7775 133.421C59.7775 133.31 59.7775 133.2 59.7798 133.097C59.7875 132.93 59.6971 132.822 59.5702 132.769C58.8206 129.955 60.3479 126.827 60.6233 124.018C60.9042 121.154 63.669 118.921 63.7244 116.001C63.747 114.816 65.3458 111.239 65.7072 110.451C67.5133 106.498 68.4701 99.5282 68.6649 95.3874C68.0178 92.2856 68.4145 76.606 68.4016 76.5326C68.2376 75.5246 65.7201 77.0379 64.5962 77.283C64.5628 77.2552 64.528 77.2274 64.4923 77.1996C64.5051 77.2299 64.5172 77.2629 64.5301 77.2982C64.197 77.3589 64.0073 77.2907 64.0732 76.9748C64.0778 76.9522 64.083 76.9344 64.0884 76.9141C63.3205 76.4317 62.3964 76.1462 61.4895 75.8886C58.3071 74.9843 54.6603 74.1912 50.7891 73.5999C50.8195 73.0138 50.7816 72.4202 50.7132 71.8366C50.4856 69.9168 49.9172 67.9262 48.8191 66.2489C48.7249 66.1073 48.521 66.0242 48.3388 66.0747C45.7984 66.7972 43.4924 67.2266 41.4087 67.4387C41.1332 67.7164 40.8403 67.9793 40.5322 68.2243C40.0624 68.6007 39.5676 68.9469 39.0577 69.2702C38.9408 69.3433 38.8247 69.4192 38.7087 69.4949C38.1228 71.963 36.7791 74.1986 34.797 75.8152C33.5367 76.8433 32.0767 77.6163 30.5342 78.1291C29.5591 78.4524 28.5514 78.7075 27.5513 78.935C26.5711 79.1575 25.5633 79.3266 24.5532 79.281C24.0554 79.2584 23.5583 79.1927 23.0759 79.0638C22.5706 78.9299 22.1039 78.7278 21.6259 78.5206C20.8382 78.1795 20.0703 77.7854 19.3457 77.3257C18.6916 76.9115 18.0473 76.4314 17.4844 75.8783C15.2498 76.8559 13.2497 78.0709 11.5749 79.5613C9.84253 81.1045 8.44348 82.9157 6.90234 84.6162C8.51942 88.794 8.48827 93.3263 8.1907 97.7394C8.00871 100.447 7.78399 103.357 9.35987 105.676C9.86749 106.424 10.5465 107.078 10.9937 107.857C11.5371 108.801 11.6099 109.273 11.7713 110.326C11.7971 110.493 11.7008 110.666 11.7258 110.837C12.0043 112.595 11.5294 114.156 11.7767 116.028C11.8928 116.9 12.8398 118.155 12.8702 118.956C12.9711 121.578 14.2618 123.9 15.1434 126.355C15.9788 128.686 16.3476 131.149 16.2444 133.595C15.9612 134.097 15.7999 134.633 15.6511 135.182C15.5244 135.648 15.3628 136.086 15.161 136.513C15.1707 136.503 15.1836 136.495 15.1936 136.485C15.2392 136.447 15.3023 136.495 15.277 136.543C14.704 137.606 14.3097 138.736 13.896 139.854C13.6432 140.54 13.3853 141.221 13.0772 141.888C12.7691 142.557 12.4133 143.207 12.0694 143.861C11.3371 145.253 10.5973 146.64 9.88036 148.036C9.56478 148.653 9.25588 149.272 8.94029 149.886C8.85997 150.295 8.78636 150.706 8.71557 151.119C8.72844 151.404 8.74363 151.689 8.77091 151.978C8.92484 153.665 9.14262 155.344 9.29372 157.032C9.44559 158.709 9.53337 160.394 9.4304 162.074C9.41521 162.317 9.39771 162.559 9.37738 162.799C9.37197 162.855 9.30916 163.067 9.41753 163.089C9.52899 163.112 9.63762 163.135 9.74831 163.158C10.1885 163.249 10.63 163.342 11.0694 163.431C11.9814 163.617 12.8926 163.799 13.8049 163.974C17.4571 164.674 21.1363 165.267 24.8513 165.626C28.652 165.995 32.4733 166.105 36.2939 165.957C40.1455 165.805 43.9789 165.428 47.7979 164.957C49.7049 164.721 51.6087 164.463 53.511 164.204C55.3973 163.946 57.2836 163.724 59.1754 163.499C60.1731 163.38 61.1703 163.251 62.1606 163.085C62.6909 162.996 66.472 162.039 66.9266 161.758C67.6384 161.319 67.444 160.425 67.4268 159.758C67.4062 159.008 67.4692 158.262 67.505 157.512C67.5452 156.656 67.5884 155.8 67.6515 154.946C67.7926 153.039 67.99 151.091 68.5885 149.249C68.5983 149.214 68.6111 149.181 68.6212 149.146C68.5908 149.063 68.5604 148.981 68.5277 148.899C67.2803 145.746 60.2236 136.48 60.065 134.585L60.0802 134.593H60.0809Z' fill='%23C2C2AC'/%3E%3Cpath opacity='0.4' d='M46.0736 66.7023C47.0381 66.6088 48.0032 66.538 48.97 66.4902C48.9221 66.4093 48.8722 66.3311 48.8212 66.2528C48.7278 66.1113 48.5231 66.0281 48.3417 66.0786C47.432 66.3362 46.5555 66.5561 45.707 66.7429C45.8285 66.7278 45.9521 66.7151 46.0736 66.7025V66.7023Z' fill='%23C2C2AC'/%3E%3Cpath d='M50.7102 71.8367C50.4979 70.0304 49.9802 68.1637 49.0051 66.552C47.7752 66.6076 46.5329 66.691 45.3205 66.8601C44.6839 66.951 44.0069 67.0522 43.419 67.325C42.8635 67.5801 42.5858 67.9868 42.7217 68.6134C43.0123 69.9321 44.0981 71.0688 44.9388 72.074C45.9949 73.3346 46.8812 74.7365 47.7652 76.1209C48.8108 77.7577 49.8011 79.435 50.6593 81.1783C52.306 84.5154 53.5055 88.1174 53.6746 91.8584C53.8188 95.0467 53.2656 98.3225 52.1471 101.314C50.3761 106.048 47.0449 109.984 42.7873 112.681C38.4455 115.432 33.3927 116.938 28.3135 117.524C23.0885 118.128 17.7322 117.819 12.6148 116.607C12.3674 116.549 12.1201 116.488 11.875 116.425C12.1481 117.251 12.8447 118.271 12.8727 118.959C12.9736 121.581 14.2643 123.903 15.1454 126.358C15.5954 127.613 15.9079 128.907 16.0878 130.213C23.6947 131.302 31.3875 131.711 39.0672 131.84C42.906 131.903 46.7523 131.95 50.5911 131.868C53.5207 131.804 56.4526 131.642 59.3627 131.266C59.3117 128.871 60.39 126.337 60.6179 124.021C60.8979 121.156 63.6636 118.923 63.7192 116.004C63.7418 114.819 65.3406 111.242 65.7018 110.454C67.5078 106.5 68.4646 99.5308 68.6587 95.3901C68.0121 92.2882 68.409 76.6089 68.3961 76.5355C68.2322 75.5275 65.7139 77.0408 64.59 77.2856C64.5573 77.2578 64.5218 77.23 64.4868 77.2022C64.4989 77.2326 64.5117 77.2653 64.5246 77.3008C64.1908 77.3616 64.0018 77.2934 64.0672 76.9775C64.0726 76.9549 64.0777 76.9371 64.0824 76.9168C63.3145 76.4344 62.3904 76.1489 61.4835 75.8912C58.3019 74.9869 54.6551 74.1936 50.7831 73.6026C50.8135 73.0164 50.7754 72.4228 50.7072 71.8393L50.7102 71.8367Z' fill='%23C2C2AC'/%3E%3Cpath opacity='0.68' d='M55.0728 75.8842C54.9848 75.9347 54.6107 76.0837 54.6388 76.2176C54.6692 76.3741 54.7019 76.5283 54.7443 76.6825C54.9492 77.4151 55.255 78.1122 55.5251 78.8221C55.793 79.5218 55.8636 80.2847 56.1694 80.9669C67.6096 106.516 48.6604 118.103 42.3547 122.666C41.2682 123.451 40.1626 124.221 38.9857 124.865C38.6822 125.033 38.3718 125.196 38.0508 125.343C38.3921 125.434 38.7255 125.548 39.0614 125.652C39.5865 125.81 40.1214 125.941 40.6548 126.068C41.7787 126.336 42.91 126.563 44.0488 126.758C46.3624 127.154 48.6933 127.425 51.0268 127.68C53.3152 127.93 55.6054 128.165 57.9067 128.273C58.5098 128.301 59.1162 128.321 59.7225 128.329C60.0427 126.864 60.4852 125.403 60.6208 124.017C60.9017 121.152 63.6665 118.919 63.7227 115.999C63.7453 114.815 65.3433 111.238 65.7047 110.449C67.5108 106.496 68.4683 99.5264 68.6624 95.3864C68.0158 92.2838 68.412 76.6045 68.3999 76.5314C68.2351 75.5234 65.7176 77.0367 64.5938 77.2815C64.5611 77.2537 64.5255 77.2259 64.4898 77.1981C64.5026 77.2285 64.5155 77.2614 64.5276 77.2967C64.1945 77.3574 64.0048 77.2892 64.0707 76.9734C64.0761 76.9507 64.0805 76.933 64.0859 76.9126C63.318 76.4302 62.3939 76.1448 61.487 75.8871C60.1765 75.5159 58.785 75.1622 57.3349 74.8337C56.8804 75.0206 56.426 75.2101 55.9812 75.4173C55.6731 75.5612 55.368 75.7102 55.07 75.8796L55.0723 75.8848L55.0728 75.8842Z' fill='%23BBB99D'/%3E%3Cpath d='M9.3646 105.675C9.40244 105.73 9.44362 105.786 9.48069 105.842C9.49356 105.859 9.50643 105.877 9.51853 105.895C9.54659 105.932 9.57465 105.97 9.60425 106.008C9.61944 106.026 9.63231 106.046 9.6475 106.064C9.67787 106.104 9.70825 106.142 9.74094 106.182C9.769 106.218 9.79628 106.251 9.82433 106.286C9.84493 106.311 9.8645 106.337 9.88741 106.365C10.0846 106.61 10.2895 106.85 10.4807 107.097C11.6911 104.7 16.7696 103.919 15.0449 104.084C12.7519 104.301 11.5948 95.1057 11.6957 94.0374L17.6309 93.3759C18.1895 92.8044 18.772 92.1527 19.3633 91.4479C20.3513 92.2613 21.3763 93.0268 22.5002 93.6384C22.8387 93.8199 23.1846 93.9921 23.4827 94.2341C24.0815 94.7242 24.4192 95.4573 24.7325 96.1644C24.9525 96.6623 25.177 97.1972 25.0761 97.7305C24.9145 98.5865 24.0555 99.4606 23.4902 100.08C22.7625 100.868 21.9869 101.61 21.1894 102.328C19.9564 103.437 18.674 104.49 17.469 105.63C16.2617 106.774 15.0903 107.951 13.8678 109.078C13.1097 109.775 12.3797 110.583 11.8069 111.472C11.8123 111.563 11.8167 111.654 11.8221 111.745V111.763C11.8244 111.852 11.8275 111.942 11.8275 112.031V112.044C11.8298 112.62 11.7866 113.185 11.7516 113.761C11.7485 113.817 11.7441 113.872 11.741 113.928C11.741 113.956 11.7387 113.983 11.7364 114.011C11.731 114.085 11.7289 114.16 11.7259 114.234V114.299C11.7235 114.378 11.7212 114.459 11.7184 114.537V114.582C11.7184 114.663 11.7161 114.747 11.7161 114.831V114.848C11.7161 114.934 11.7161 115.019 11.7184 115.108V115.154C11.7184 115.237 11.7238 115.323 11.7289 115.409C11.7289 115.426 11.7289 115.441 11.7313 115.46C11.7367 115.545 11.7441 115.633 11.7519 115.722C11.7519 115.734 11.7542 115.747 11.7565 115.762C11.767 115.856 11.7771 115.949 11.7892 116.043C11.7946 116.076 11.7997 116.109 11.8075 116.141C11.8075 116.149 11.8098 116.156 11.8129 116.164C11.8175 116.194 11.825 116.222 11.8327 116.253V116.262C11.8553 116.336 11.8782 116.409 11.9032 116.487C12.1864 117.306 12.8577 118.298 12.8837 118.971C12.9339 120.256 13.2698 121.468 13.7018 122.664C13.9566 123.363 14.2421 124.053 14.525 124.748L14.5456 124.796C14.5759 124.869 14.6063 124.945 14.6359 125.018C14.6869 125.142 14.7376 125.268 14.7855 125.392C14.7929 125.412 14.8007 125.429 14.8081 125.45C14.8658 125.596 14.9219 125.743 14.9772 125.889L14.9847 125.908C15.0424 126.062 15.1008 126.216 15.1561 126.372C15.9922 128.704 16.3611 131.167 16.2571 133.612C16.2244 133.67 16.194 133.731 16.1637 133.789C16.1539 133.809 16.1438 133.829 16.1333 133.849C16.1135 133.89 16.0955 133.928 16.0779 133.968C16.0682 133.993 16.0553 134.019 16.0453 134.041C16.0301 134.077 16.0149 134.113 15.9997 134.15C15.9899 134.178 15.977 134.203 15.967 134.231C15.9541 134.263 15.9413 134.299 15.9292 134.332C15.9186 134.36 15.9086 134.39 15.8988 134.417C15.8882 134.451 15.8761 134.481 15.8653 134.514C15.8555 134.544 15.8455 134.577 15.8349 134.607C15.8303 134.625 15.8252 134.643 15.8174 134.66C15.7871 134.759 15.7567 134.857 15.7294 134.956H60.1629C60.1531 134.926 60.1454 134.898 60.1379 134.87L60.1325 134.847C60.1279 134.824 60.1204 134.801 60.115 134.779C60.1127 134.764 60.1096 134.752 60.1052 134.736C60.1022 134.721 60.0978 134.704 60.0947 134.688C60.09 134.658 60.0849 134.63 60.0849 134.602C60.0522 134.201 59.9158 133.814 59.7822 133.431C59.7822 133.319 59.7822 133.21 59.7845 133.107C59.7922 132.94 59.7011 132.832 59.575 132.779C58.8246 129.964 60.3526 126.837 60.6281 124.028C60.6358 123.945 60.6479 123.861 60.6584 123.778C60.6584 123.77 60.6584 123.76 60.6607 123.753C60.6736 123.675 60.6857 123.597 60.7032 123.517C60.7032 123.505 60.7086 123.495 60.7114 123.482C60.7266 123.407 60.7441 123.331 60.7637 123.255C60.7668 123.242 60.7691 123.23 60.7743 123.217C60.7941 123.141 60.8144 123.065 60.8373 122.99C60.8396 122.98 60.842 122.97 60.8471 122.96C60.8698 122.881 60.895 122.806 60.923 122.73L60.9285 122.715C60.9838 122.553 61.0469 122.392 61.1128 122.232L61.1174 122.217C61.1509 122.139 61.1833 122.063 61.2183 121.985L61.226 121.964C61.2618 121.886 61.2973 121.81 61.3352 121.734L61.3426 121.719C61.678 121.027 62.0871 120.353 62.4688 119.67C61.9514 118.68 61.4438 117.685 60.7866 116.781C60.3982 116.245 59.9662 115.74 59.4784 115.29C58.9358 114.79 58.3296 114.398 57.7332 113.969C56.5488 113.115 55.506 112.092 54.4226 111.12C53.2586 110.076 52.0513 109.154 50.634 108.478C49.1824 107.786 47.6868 107.204 46.2754 106.431C44.924 105.691 43.5476 104.999 42.2013 104.251C40.8811 103.519 39.5775 102.738 38.3831 101.814C37.0598 100.788 35.794 99.6946 34.4511 98.6915C33.2819 97.8173 32.0747 96.9964 30.8697 96.1709C30.2818 95.7665 29.7438 95.4205 29.0539 95.246C28.362 95.0692 28.0562 94.6192 27.6145 94.0691C25.9124 91.9467 23.6415 90.376 21.3786 88.8578C23.7149 85.6246 25.803 81.9058 26.3866 79.17C26.3138 79.18 26.2432 79.1926 26.1696 79.2027H26.1521C26.0808 79.2153 26.0133 79.223 25.9418 79.2305H25.9274C25.7778 79.2482 25.6293 79.2632 25.4797 79.2735H25.4548C25.394 79.2784 25.3312 79.2809 25.2705 79.2835H25.2097C25.1595 79.2835 25.1088 79.2861 25.0578 79.2884H24.7726C24.7021 79.2884 24.6315 79.2858 24.561 79.2809C24.0632 79.2583 23.5661 79.1926 23.0837 79.0637C22.5784 78.9298 22.1109 78.7277 21.6337 78.5205C20.846 78.1795 20.0782 77.7854 19.3535 77.3256C18.6995 76.9114 18.0551 76.4314 17.4922 75.8782C15.2568 76.8558 13.2567 78.0708 11.5827 79.5613C9.84957 81.105 8.45052 82.9161 6.91016 84.6158C8.52646 88.7944 8.49608 93.3259 8.19851 97.739C8.01652 100.447 7.7918 103.357 9.36769 105.676H9.3646V105.675ZM28.8619 98.0361C28.8467 98.0286 28.8315 98.0178 28.814 98.0104C28.7731 97.9877 28.8086 97.9277 28.849 97.9473C28.8717 97.9602 28.8946 97.9723 28.9172 97.9831C28.9278 97.9725 28.9399 97.9625 28.9499 97.9527C28.9857 97.9223 29.0364 97.9725 29.0009 98.0029C28.9955 98.0083 28.988 98.0134 28.9834 98.0181C29.0562 98.0559 41.8556 106.143 46.2777 107.996C46.3256 107.895 46.3864 107.797 46.4569 107.699C46.485 107.661 46.548 107.699 46.5207 107.734C46.4525 107.827 46.3941 107.923 46.3462 108.022C46.382 108.037 46.4144 108.052 46.4494 108.064C46.4927 108.083 46.4721 108.153 46.4296 108.135C46.3918 108.12 46.3537 108.102 46.3158 108.087C45.6944 109.537 47.5383 111.833 50.5104 111.411C50.7305 111.381 50.9529 111.351 51.1774 111.346C51.339 111.341 51.4072 111.388 51.5385 111.48C55.0821 113.937 54.8089 117.232 54.8089 117.232C54.8826 117.277 59.9634 119.013 58.3852 121.14C57.8374 121.877 56.7743 122.1 55.9207 122.243C55.461 122.322 54.9958 122.375 54.5335 122.43C53.8264 122.516 53.1244 122.615 52.4096 122.657C50.8412 122.751 49.2704 122.698 47.702 122.628C46.1238 122.556 44.5507 122.511 42.9695 122.506C39.787 122.496 36.6054 122.438 33.4284 122.279C31.8448 122.2 30.2635 122.051 28.6776 122.016C27.902 121.999 27.1267 121.995 26.3519 121.961C25.6144 121.927 24.917 121.817 24.1947 121.663C19.3157 120.629 18.9697 123.041 15.4671 116.997C12.8477 112.473 19.3535 106.632 28.8568 98.0284L28.8622 98.0358L28.8619 98.0361Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M64.0898 76.9177C64.2309 77.006 64.3645 77.0997 64.4935 77.2032C64.3243 76.7813 64.1853 76.5388 64.0898 76.9177Z' fill='%239EA58E'/%3E%3Cpath d='M64.0898 76.9177C64.2309 77.006 64.3645 77.0997 64.4935 77.2032C64.3243 76.7813 64.1853 76.5388 64.0898 76.9177Z' fill='%23CCD1C0'/%3E%3Cpath d='M24.706 63.2231C24.6756 63.3469 24.6483 63.4733 24.6277 63.602C24.4434 64.7539 24.6331 65.9511 25.13 67.0047C25.7544 68.3235 26.8199 69.4221 28.1386 70.0561C28.8125 70.3794 29.5325 70.5918 30.2821 70.6119C31.0348 70.6345 31.7875 70.511 32.5069 70.2886C34.0656 69.8087 35.5125 68.9145 36.6644 67.76C36.7298 67.6943 36.7934 67.6287 36.8588 67.5605C30.1966 65.7038 26.8729 63.7966 25.6559 62.6776C25.0267 62.0992 25.3578 62.3239 24.7057 63.2182V63.2233L24.706 63.2231Z' fill='%23CCD1C0'/%3E%3Cpath d='M34.4461 105.806C33.9506 105.247 33.4126 104.732 32.9385 104.154C32.062 103.083 31.1605 101.737 29.7334 101.393C28.3418 101.057 26.8318 101.514 25.796 103.124C25.2482 103.974 24.8618 104.909 24.3869 105.799C23.7686 106.953 22.7935 107.85 21.9778 108.86C21.0786 109.972 20.3213 111.338 20.4776 112.821C20.6392 114.354 21.8941 115.625 23.2782 116.183C24.0461 116.492 24.8665 116.577 25.682 116.451C26.5865 116.313 27.4499 115.992 28.3521 115.837C29.2786 115.678 30.1952 115.767 31.127 115.828C31.9958 115.883 32.8723 115.883 33.6608 115.471C34.9288 114.81 35.7695 113.488 36.1685 112.147C36.6079 110.674 36.4887 109.093 35.7922 107.716C35.4385 107.019 34.9635 106.392 34.4461 105.806V105.806Z' fill='%23CCD1C0'/%3E%3Cpath d='M15.5685 94.479C15.334 94.4432 15.0988 94.4281 14.8666 94.3828C14.4349 94.3024 13.9424 94.156 13.5257 94.3629C13.3285 94.4608 13.1517 94.6224 13.0356 94.8198C13.0562 94.7926 13.0788 94.7668 13.1061 94.7439C13.1167 94.7364 13.1288 94.7493 13.1213 94.7568C12.8945 94.9663 12.8868 95.3002 12.9218 95.5854C12.962 95.9033 13.0585 96.2091 13.1244 96.5224C13.2101 96.9291 13.154 97.3456 13.1614 97.7577C13.1689 98.21 13.2631 98.697 13.6039 99.0257C13.9553 99.3673 14.5206 99.4196 14.9706 99.2731C15.2202 99.1928 15.4372 99.0463 15.6095 98.8489C15.8015 98.6319 15.9449 98.3768 16.1323 98.157C16.3243 97.9294 16.5663 97.7654 16.8039 97.5909C17.0263 97.4269 17.2409 97.2501 17.3465 96.9898C17.521 96.5703 17.4556 96.0778 17.2811 95.6711C17.0891 95.2242 16.7377 94.8631 16.2885 94.6711C16.061 94.5725 15.8164 94.5171 15.5714 94.4813L15.5683 94.479H15.5685Z' fill='%23CCD1C0'/%3E%3Cpath d='M47.9667 163.393C47.5394 157.336 43.7788 151.659 38.1646 149.939C34.6849 148.873 31.0054 149.477 27.4338 149.331C19.7413 149.015 19.6123 144.773 13.7687 142.101C13.5517 142.002 13.3316 141.911 13.1092 141.831C13.1018 141.848 13.0917 141.869 13.0843 141.886C12.7762 142.555 12.4204 143.205 12.0765 143.859C11.3442 145.251 10.6036 146.638 9.88668 148.035C9.57109 148.651 9.26296 149.27 8.94737 149.884C8.86706 150.293 8.79345 150.705 8.72266 151.116C8.73475 151.402 8.74994 151.688 8.778 151.975C8.93193 153.663 9.14893 155.343 9.30081 157.03C9.45268 158.707 9.54046 160.393 9.4375 162.073C9.42231 162.315 9.40403 162.558 9.38446 162.797C9.37906 162.853 9.31625 163.065 9.42462 163.088C9.53608 163.11 9.64471 163.133 9.7554 163.156C10.1948 163.247 10.637 163.34 11.0765 163.428C11.9877 163.616 12.8997 163.798 13.8112 163.972C14.3492 164.076 14.8849 164.174 15.4252 164.272C15.5063 164.07 15.6051 163.873 15.7233 163.684C17.6021 160.668 27.9064 155.183 34.1188 165.699C34.1796 165.801 34.238 165.906 34.2957 166.013C34.9627 166.003 35.6296 165.985 36.2989 165.959C40.1498 165.808 43.984 165.431 47.8022 164.959C47.866 164.952 47.9312 164.944 47.9942 164.934C48.0094 164.419 47.9996 163.903 47.9615 163.391L47.9667 163.393Z' fill='%23CCD1C0'/%3E%3Cpath d='M49.1356 88.5673C47.8531 87.9791 46.3728 87.9791 44.9889 88.0021C44.2643 88.0142 43.5397 88.0399 42.815 88.0095C41.8801 87.9717 40.9506 87.8775 40.0211 87.7719C39.0892 87.6656 38.1597 87.5495 37.2256 87.4708C36.617 87.4206 36.0054 87.3979 35.3946 87.3523C34.8512 87.3091 34.2936 87.2491 33.7752 87.0692C33.3692 86.9281 32.9497 86.7026 32.788 86.2784C32.546 86.1222 32.2987 85.9757 32.0459 85.8444C31.6294 85.6243 30.5277 85.0765 30.3204 85.8369C30.0123 86.9554 31.1696 87.6301 32.0003 88.0548C32.5126 88.3174 33.0428 88.5442 33.5559 88.8075C34.0689 89.0701 34.5309 89.4086 34.9801 89.7697C35.6288 90.2902 36.2404 90.8586 36.8793 91.3891C37.5236 91.9248 38.1973 92.3794 38.9348 92.7784C40.4425 93.5895 42.0389 94.2534 43.4557 95.2233C44.0947 95.6604 44.6805 96.1634 45.3549 96.5474C45.9483 96.8859 46.6024 97.1688 47.2891 97.2296C47.9615 97.2872 48.62 97.1233 49.1786 96.7395C49.7493 96.3479 50.2167 95.8002 50.5346 95.1862C51.1105 94.0768 51.3427 92.7429 51.1661 91.5052C51.0803 90.9041 50.8989 90.3057 50.5681 89.7903C50.219 89.2469 49.722 88.8327 49.1356 88.5648V88.5673Z' fill='%23CCD1C0'/%3E%3Cpath d='M60.0784 134.593C60.0457 134.191 59.9093 133.805 59.7757 133.421C59.7757 133.31 59.7757 133.201 59.778 133.098C59.7855 132.931 59.6946 132.822 59.5685 132.769C59.3865 132.087 59.3386 131.385 59.3765 130.675C57.4469 131.082 55.5021 131.435 53.5473 131.731C45.6658 132.921 37.634 133.193 29.6817 132.429C25.7642 132.049 21.8723 131.435 18.0767 130.483C17.4 130.314 16.7253 130.135 16.056 129.945C16.238 131.155 16.3042 132.378 16.2512 133.596C15.968 134.098 15.8066 134.634 15.6571 135.182C15.5312 135.649 15.3695 136.086 15.1677 136.513C15.1775 136.503 15.1904 136.496 15.2004 136.485C15.246 136.447 15.309 136.496 15.2838 136.544C14.7914 137.46 14.4279 138.425 14.0742 139.391C14.5842 139.353 15.0992 139.363 15.6017 139.444C16.7961 139.63 17.6299 140.318 18.4129 141.098C19.1605 141.843 19.9381 142.593 21.0367 142.912C21.7462 143.116 22.5261 143.169 23.2667 143.184C24.0369 143.202 24.8071 143.164 25.5749 143.089C27.1707 142.934 28.7445 142.644 30.325 142.392C31.8479 142.149 33.3815 142.012 34.9142 141.841C38.2505 141.464 41.6499 140.991 45.0161 141.33C47.4533 141.575 49.8581 142.177 52.1001 143.061C55.9063 144.564 67.6904 154.299 67.7077 154.353V154.347C67.7151 154.254 67.7229 154.163 67.7303 154.069L67.7357 154.001C67.8822 152.347 68.1067 150.725 68.6295 149.149C68.5991 149.065 68.5687 148.985 68.536 148.901C67.2886 145.748 60.2319 136.483 60.0733 134.588L60.0779 134.593H60.0784Z' fill='%23BBB99D'/%3E%3Cpath d='M19.0361 77.1171C18.9928 77.0893 18.9527 77.0615 18.9094 77.0311C18.8693 77.0033 18.8291 76.9755 18.791 76.9477C18.7606 76.9274 18.7302 76.9047 18.6999 76.8844C18.652 76.8517 18.6064 76.8162 18.5611 76.7835C18.5436 76.7709 18.5254 76.7557 18.5058 76.7431C18.253 76.5536 18.0079 76.3541 17.7734 76.1443C20.248 85.3822 44.3107 88.7193 59.52 85.0565C62.3457 84.3744 66.8211 82.8211 68.4374 93.2387C68.1269 87.9308 68.4093 76.6015 68.3995 76.5384C67.4474 76.9148 65.7173 77.0437 64.5934 77.2885C64.5607 77.2607 64.5252 77.2329 64.4902 77.2051C64.5031 77.2355 64.5152 77.2685 64.528 77.3037C64.1942 77.3645 64.0052 77.2963 64.0706 76.9804C64.076 76.9578 64.0812 76.94 64.0858 76.9199C63.3179 76.4375 62.3938 76.1521 61.487 75.8944C58.3053 74.9901 54.6585 74.197 50.7865 73.6057C50.8169 73.0196 50.779 72.426 50.7113 71.8424C50.4838 69.9227 49.9154 67.9321 48.8165 66.2548C48.7231 66.1134 48.519 66.03 48.337 66.0805C45.7965 66.8031 43.4906 67.2324 41.4069 67.4445C41.1314 67.7223 40.8385 67.9851 40.5304 68.2302C40.0606 68.6065 39.5658 68.9527 39.0554 69.276C38.9393 69.3491 38.8232 69.4251 38.7071 69.5007C38.1212 71.9688 36.7775 74.2045 34.7947 75.821C33.5351 76.8491 32.0751 77.6222 30.5319 78.1349C29.5576 78.4582 28.549 78.7133 27.549 78.9409C26.5693 79.1633 25.5618 79.3324 24.5517 79.2868C24.0538 79.2642 23.5562 79.1986 23.0744 79.0696C22.5691 78.9357 22.1016 78.7337 21.6244 78.5264C20.8367 78.1854 20.0688 77.7913 19.3442 77.3315C19.2706 77.2834 19.1946 77.2355 19.1218 77.1876C19.0914 77.1676 19.061 77.1472 19.0307 77.1269L19.0361 77.1169V77.1171Z' fill='%23BBB99D'/%3E%3Cpath d='M73.9127 138.405C73.9127 138.405 68.038 139.41 64.9393 139.731C64.2092 139.805 63.6334 139.843 63.3253 139.82C61.8274 139.706 61.4487 138.441 60.1938 137.289C60.0929 137.195 59.9866 137.104 59.8728 137.013C58.3531 135.793 60.7977 134.531 60.7977 134.531C60.7977 134.531 62.4032 135.609 64.1181 136.236C65.6616 136.796 67.5304 136.607 68.5176 136.922C70.0252 137.403 73.9096 138.405 73.9096 138.405H73.9127V138.405Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M73.9127 138.405C73.9127 138.405 68.038 139.41 64.9393 139.731C64.2092 139.805 63.6334 139.843 63.3253 139.82C61.8274 139.706 61.4487 138.441 60.1938 137.289C60.0929 137.195 59.9866 137.104 59.8728 137.013C58.3531 135.793 60.7977 134.531 60.7977 134.531C60.7977 134.531 62.4032 135.609 64.1181 136.236C65.6616 136.796 67.5304 136.607 68.5176 136.922C70.0252 137.403 73.9096 138.405 73.9096 138.405H73.9127V138.405Z' fill='%23CEB79B'/%3E%3Cpath d='M64.9407 139.728C64.2107 139.802 63.6349 139.84 63.3267 139.817C61.8289 139.703 61.4502 138.438 60.1953 137.286C60.3539 136.48 59.5914 133.292 64.1222 136.233C64.1222 136.233 63.7229 138.375 66.2916 138.223C66.8047 138.193 66.0417 138.958 64.9407 139.728Z' fill='%23CEB79B'/%3E%3Cpath d='M45.2513 70.0089C42.5029 71.1557 36.1216 74.6645 37.9951 77.476C42.4682 84.1906 57.2852 65.9444 57.3634 65.8736C56.7245 65.8458 56.0856 65.8205 55.4521 65.7801C55.0812 65.7549 54.7092 65.7219 54.3406 65.679C53.0324 65.5248 51.6939 65.1206 50.5018 64.6609C50.517 67.4168 47.6913 68.9906 45.2516 70.0112V70.0087L45.2513 70.0089Z' fill='%233B754B'/%3E%3Cpath d='M26.1583 63.4504C25.845 63.0967 25.7189 62.9855 25.5346 62.3919C25.2342 61.4242 24.9359 61.1516 25.5825 60.9014C24.9078 60.7853 24.5369 61.8487 24.3881 63.7106C24.1961 66.1053 25.1781 66.3125 25.3071 66.3452C25.3503 66.3553 25.3503 65.7869 25.3328 65.019C25.062 64.9155 26.3558 63.6725 26.1606 63.4504H26.1583Z' fill='%23CCD1C0'/%3E%3Cpath d='M62.4656 136.99C62.2864 135.669 61.9482 134.467 61.203 133.307C60.8418 132.744 60.4457 132.196 60.18 131.589C59.8644 130.867 59.9401 130.13 60.1422 129.392C60.3221 128.742 60.5262 128.147 60.5641 127.474C60.6073 126.731 60.5442 126.012 60.8925 125.315C61.3167 124.464 62.0262 123.741 62.3546 122.847C63.1833 120.594 59.963 122.202 57.367 122.794C56.6393 122.958 55.995 122.951 55.2652 122.812C54.5632 122.677 53.8842 122.536 53.1619 122.597C52.4622 122.655 51.7703 122.837 51.0835 122.961C50.2603 123.11 49.4567 123.137 48.6183 123.105C46.952 123.042 45.2948 123.039 43.6579 123.354C42.9104 123.499 42.1502 123.728 41.3831 123.739C40.6075 123.749 39.8299 123.468 39.0924 123.284C37.5513 122.895 35.8644 122.963 34.2785 122.966C32.2761 122.966 30.2804 123.008 28.2802 122.951C27.2452 122.92 26.23 122.93 25.1964 123.029C24.1887 123.123 23.2069 123.229 22.2243 122.946C21.3883 122.706 20.5702 122.259 19.8425 121.824C19.2219 121.453 18.6481 121.119 17.8879 121.054C17.1103 120.988 16.3908 121.415 15.6958 121.655C14.8345 121.953 14.0265 121.701 13.3474 121.195C12.83 120.809 11.4101 121.665 12.8246 124.573C13.1402 125.224 13.3369 125.757 13.3701 126.48C13.3899 126.954 13.3798 127.43 13.4612 127.902C13.5515 128.427 13.7588 128.905 14.0113 129.383C14.5114 130.332 15.1328 131.242 15.2868 132.305C15.4461 133.394 14.6705 134.316 14.3974 135.332C14.2767 135.781 14.3495 136.248 14.2715 136.701C14.0895 137.761 12.0416 138.123 13.4535 139.264C13.4535 139.264 15.3421 138.067 17.022 139.386C18.0828 140.217 18.2542 140.596 20.146 140.639C22.8352 140.7 25.9599 141.372 29.7879 141.146C31.3314 141.055 32.8185 140.722 34.3717 140.724C35.8642 140.724 37.2884 141.212 38.7766 141.18C40.2865 141.146 41.7466 140.581 43.2239 140.346C51.4318 139.042 47.2872 140.798 53.2574 139.449C54.7022 139.123 56.0058 138.406 57.5407 138.495C58.2479 138.537 58.8945 138.668 59.5887 138.462C59.8976 138.371 60.17 138.229 60.4984 138.198C61.1245 138.138 62.6906 138.658 62.463 136.989L62.4653 136.991L62.4656 136.99Z' fill='%233E8E5B'/%3E%3Cpath d='M61.2031 133.308C60.8419 132.745 60.445 132.196 60.1801 131.59C59.8645 130.867 59.9397 130.13 60.1423 129.392C60.3214 128.743 60.5263 128.147 60.5634 127.475C60.6066 126.732 60.5436 126.012 60.8919 125.315C61.3161 124.464 62.0263 123.741 62.354 122.847C63.1826 120.594 59.9623 122.202 57.3663 122.794C57.2775 122.814 57.1895 122.832 57.1038 122.847C56.9725 123.264 56.7851 123.666 56.5331 124.027C56.0301 124.747 55.159 125.401 54.1489 125.298C53.3553 125.217 52.8778 124.553 52.7063 123.911C52.6 123.511 52.5653 123.08 52.6304 122.662C52.1107 122.744 51.5923 122.87 51.0803 122.964C50.3883 123.087 49.7113 123.128 49.014 123.118C49.0117 123.271 48.9965 123.428 48.9684 123.587C48.7363 124.921 47.8091 126.091 46.7261 126.997C45.7639 127.805 44.6349 128.503 43.3996 128.93C41.9547 129.43 40.4143 129.62 38.8742 129.673C37.3004 129.726 35.7245 129.658 34.1515 129.706C33.3107 129.731 32.4692 129.681 31.6285 129.66C30.7649 129.639 29.9214 129.677 29.0675 129.812C27.4461 130.067 27.7086 131.519 22.0139 130.339C11.5932 128.185 14.485 129.546 14.485 129.546C14.3339 129.509 14.18 129.466 14.0281 129.417C14.526 130.354 15.1314 131.257 15.2853 132.305C15.4447 133.394 14.6691 134.316 14.3967 135.332C14.2752 135.781 14.3489 136.248 14.2701 136.701C14.1844 137.198 13.6919 137.539 13.3359 137.88C15.2429 137.453 17.3081 137.623 19.2333 137.825C20.109 137.916 20.9832 138.037 21.8594 138.126C23.286 138.27 24.708 138.426 26.117 138.679C28.6454 139.133 31.1106 139.828 33.469 140.755C33.7695 140.735 34.0701 140.722 34.3736 140.722C34.7749 140.722 35.1718 140.758 35.568 140.811C35.8512 140.313 36.2471 139.863 36.7016 139.51C37.427 138.944 38.4317 138.507 39.4099 138.759C40.3592 139.004 41.1976 139.671 41.766 140.376C41.8268 140.452 41.8875 140.53 41.9429 140.612C42.3694 140.508 42.7987 140.412 43.2284 140.344C51.4363 139.04 47.2917 140.796 53.2619 139.447C54.7067 139.12 56.0103 138.404 57.5452 138.492C58.2523 138.535 58.899 138.666 59.5932 138.459C59.9021 138.368 60.1744 138.227 60.5029 138.196C61.1289 138.136 62.695 138.656 62.4675 136.986C62.2883 135.665 61.9501 134.463 61.2049 133.303L61.2025 133.308L61.2031 133.308Z' fill='%233B754B'/%3E%3Cpath d='M61.2384 133.307C61.4652 133.088 62.0565 132.876 60.8091 132.234C60.718 132.189 60.8819 131.986 60.8925 131.938C60.935 131.731 60.9198 131.552 60.8742 131.347C60.8415 131.195 60.7635 131.072 60.6572 130.981C60.5941 130.804 60.4075 130.652 60.1473 130.688C44.3825 132.9 20.0473 131.653 16.4461 129.639C15.7261 129.238 14.7987 128.848 13.968 129.192C13.1219 129.541 13.5492 130.486 14.072 130.918C14.1297 131.284 14.1374 131.676 14.0946 132.12C13.7639 135.536 53.9215 137.256 61.3494 133.987C61.7281 133.82 61.5589 133.398 61.2408 133.307H61.2384Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M14.0701 130.916C14.1203 131.236 14.1332 131.577 14.1051 131.956C14.1386 131.918 14.1764 131.883 14.2166 131.847C14.4488 131.645 14.7219 131.552 14.9966 131.425C15.247 131.309 15.5626 131.117 15.2895 130.829C14.838 130.355 14.0343 130.357 13.684 129.768C13.6408 129.697 13.6006 129.616 13.5648 129.528C13.3303 129.963 13.6734 130.589 14.0701 130.917V130.915V130.916Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M61.2432 133.308C61.47 133.087 62.0612 132.876 60.8138 132.234C60.7227 132.188 60.8867 131.986 60.8972 131.939C60.9397 131.731 60.9245 131.552 60.8789 131.348C60.8462 131.196 60.7682 131.072 60.6619 130.981C60.5989 130.804 60.4122 130.653 60.152 130.688C50.1685 132.09 36.7508 132.103 27.3356 131.413C26.1587 131.807 24.9463 132.095 23.729 132.33C21.6377 132.731 19.5239 132.87 17.3976 132.754C16.3239 132.694 15.2433 132.602 14.1797 132.433C15.8292 135.028 41.003 136.516 54.3509 135.311C54.7296 134.71 55.3131 134.222 55.9595 133.896C56.8913 133.429 58.0204 133.197 59.0477 133.449C59.6258 133.59 60.1085 133.891 60.4521 134.315C60.7876 134.214 61.091 134.105 61.3482 133.992C61.7276 133.825 61.5585 133.404 61.2396 133.313L61.2427 133.307L61.2432 133.308Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M61.4615 133.914C61.6785 133.719 61.5168 133.386 61.2367 133.305C61.4635 133.086 62.0548 132.873 60.8074 132.231C60.7162 132.186 60.8802 131.984 60.8908 131.936C60.9332 131.729 60.9181 131.549 60.8725 131.345C60.8398 131.193 60.7618 131.07 60.6555 130.979C60.5924 130.802 60.4058 130.65 60.1456 130.686C53.0842 131.676 44.3028 131.974 36.4385 131.817C34.8951 132.366 33.3071 132.775 31.7212 133.171C28.6602 133.936 25.4953 134.556 22.3281 134.591C30.8547 135.662 44.1563 136.071 53.0942 135.407C54.693 133.401 59.3301 131.941 61.4615 133.911V133.914Z' fill='%23A05A07'/%3E%3Cpath d='M60.147 130.686C56.8158 131.153 53.1008 131.466 49.2795 131.65C49.1809 131.744 49.0823 131.835 48.9768 131.921C48.3379 132.459 47.6277 132.929 46.8976 133.364C46.0948 133.841 45.251 134.265 44.3776 134.626C43.9634 134.798 43.5392 134.965 43.1067 135.099C42.9482 135.149 42.7865 135.189 42.6271 135.232C42.5968 135.396 42.5741 135.563 42.5664 135.73C45.4657 135.738 48.2818 135.682 50.8402 135.551C51.9435 135.147 53.0292 134.687 54.0877 134.207C55.3153 133.651 56.5576 133.113 57.7451 132.489C58.3613 132.166 58.9925 131.832 59.548 131.425C59.8538 131.201 60.1436 130.961 60.4495 130.741C60.3661 130.695 60.2628 130.67 60.1467 130.688V130.686H60.147Z' fill='%23A05A07'/%3E%3Cpath d='M15.1723 132.817C14.8338 132.741 14.4675 132.918 14.2602 133.17C13.9295 133.573 13.8999 134.439 13.7709 134.926C13.6342 135.447 14.0031 135.99 14.5053 136.28C15.0083 136.571 15.6168 136.664 16.2081 136.747C32.0707 138.978 51.3198 135.282 59.6588 130.814C60.4647 130.382 61.3616 129.662 61.0709 128.864C61.0179 128.717 60.9245 128.578 60.9245 128.427C60.9222 128.038 61.5003 127.77 61.445 127.383C61.4071 127.113 61.0558 126.957 60.7551 126.989C60.4544 127.022 60.1965 127.191 59.9491 127.348C54.2013 130.963 30.3252 136.217 15.1743 132.82L15.172 132.817H15.1723Z' fill='%23D58500'/%3E%3Cpath d='M60.9197 128.424C60.9173 128.035 61.4955 127.767 61.4401 127.38C61.4023 127.11 61.0509 126.953 60.7503 126.987C60.4499 127.019 60.1925 127.188 59.9443 127.345C57.6513 128.787 52.4762 130.49 46.1199 131.799C45.8195 132.271 45.5114 132.738 45.1752 133.185C44.5819 133.976 43.9072 134.663 43.1326 135.277C42.7836 135.553 42.4278 135.82 42.0664 136.08C49.3577 134.858 55.7217 132.921 59.6568 130.813C60.4627 130.382 61.3588 129.661 61.0682 128.863C61.0152 128.717 60.9217 128.578 60.9217 128.426L60.9194 128.424H60.9197Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M60.9202 128.424C60.9171 128.035 61.496 127.767 61.4399 127.38C61.402 127.11 61.0514 126.953 60.7508 126.987C60.4504 127.019 60.1922 127.188 59.9448 127.345C59.0457 127.911 57.7071 128.515 56.0249 129.121C56.0105 129.126 55.9747 129.467 55.965 129.507C55.9346 129.634 55.8913 129.758 55.8411 129.876C55.7371 130.114 55.593 130.334 55.4138 130.52C55.2424 130.697 54.9919 130.914 54.7469 130.973C54.517 131.028 54.2423 131.03 54.1262 131.286C54.0905 131.364 54.083 131.452 54.0732 131.539C54.0475 131.728 53.9942 131.923 53.8554 132.051C53.7947 132.107 53.7167 132.15 53.6361 132.147C53.5679 132.147 53.5048 132.117 53.4495 132.079C53.2392 131.938 53.1437 131.68 53.0958 131.43C53.0503 131.182 53.0397 130.925 52.9517 130.687C52.8858 130.515 52.7043 130.23 52.4896 130.23C52.4039 130.23 52.3097 130.296 52.2294 130.321C52.123 130.354 52.0147 130.382 51.9084 130.412C50.2542 130.869 48.5849 131.274 46.9055 131.632C45.0442 132.032 43.173 132.378 41.2934 132.676C35.0964 136.728 19.9098 138.66 15.43 133.049C15.3747 132.982 15.3193 132.908 15.2609 132.832C15.2328 132.827 15.2055 132.82 15.1775 132.814C15.0462 132.784 14.9095 132.794 14.7813 132.83H14.7759L14.7077 132.852H14.7023C14.6796 132.862 14.6567 132.872 14.6369 132.883C14.6315 132.883 14.6271 132.887 14.6217 132.89C14.6065 132.898 14.589 132.905 14.5738 132.915C14.5664 132.917 14.561 132.923 14.5532 132.925C14.5357 132.935 14.5175 132.946 14.5002 132.958C14.4904 132.963 14.4827 132.97 14.4752 132.976C14.4655 132.983 14.457 132.989 14.4472 132.996C14.4374 133.004 14.4274 133.012 14.4168 133.019C14.4093 133.024 14.4047 133.029 14.397 133.034C14.346 133.074 14.3007 133.12 14.2603 133.168C13.9295 133.569 13.8992 134.436 13.7702 134.924C13.6899 135.234 13.7885 135.55 13.9872 135.817C14.0055 135.846 14.025 135.868 14.0433 135.891L14.0508 135.899C14.0683 135.921 14.0886 135.941 14.1084 135.962L14.1213 135.975C14.1388 135.995 14.1591 136.012 14.1766 136.03C14.1841 136.038 14.1895 136.042 14.1972 136.048C14.2147 136.063 14.2322 136.08 14.2503 136.095C14.26 136.103 14.2701 136.114 14.2806 136.121C14.2958 136.133 14.3133 136.146 14.3285 136.159C14.3437 136.171 14.3589 136.182 14.3741 136.192C14.3862 136.199 14.399 136.209 14.4119 136.217C14.4392 136.237 14.4696 136.255 14.5 136.272C16.6617 137.523 38.0809 138.644 53.5749 133.395C53.423 133.145 53.4938 132.691 53.8125 132.645C54.1129 132.602 54.2418 132.87 54.3103 133.14C56.2043 132.465 57.9995 131.69 59.6514 130.806C60.4573 130.374 61.3534 129.654 61.0628 128.856C61.0105 128.709 60.9163 128.571 60.9163 128.419L60.9194 128.424L60.9202 128.424Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M52.9294 132.882C52.7503 132.708 52.5714 132.432 52.5281 132.182C52.5075 132.071 52.5152 131.978 52.5737 131.882C52.654 131.75 52.5889 131.52 52.5183 131.389C52.3188 131.167 52.2604 130.874 52.3384 130.578C52.3641 130.483 52.3968 130.369 52.4478 130.262C52.1618 130.344 51.874 130.424 51.5813 130.505C51.4879 130.644 51.4022 130.796 51.3538 130.952C51.177 131.518 51.3461 132.13 51.6171 132.634C51.8743 133.115 52.228 133.455 52.7431 133.643C52.7606 133.647 52.7788 133.655 52.7961 133.663C53.271 133.512 53.7408 133.352 54.2052 133.188C53.7431 133.213 53.2581 133.198 52.9328 132.883H52.9297L52.9294 132.882Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M60.9209 128.424C60.9186 128.035 61.4967 127.767 61.4414 127.38C61.4036 127.11 61.0522 126.953 60.7515 126.987C60.4511 127.019 60.1929 127.188 59.9456 127.345C59.1777 127.827 58.0842 128.34 56.7305 128.858C56.8769 129.042 56.9884 129.249 57.0417 129.494C57.097 129.752 57.069 130 57.0113 130.255C56.9331 130.586 56.8898 130.876 56.9506 131.215C57.0007 131.493 57.0515 131.766 57.0136 132.049C57.0136 132.062 57.0082 132.074 57.0062 132.087C57.9228 131.69 58.8091 131.266 59.658 130.811C60.464 130.379 61.36 129.659 61.0694 128.861C61.0164 128.714 60.923 128.576 60.923 128.424H60.9206H60.9209Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M13.8979 135.644C13.8979 135.101 14.3198 134.919 14.7188 134.664C15.0292 134.465 15.2841 134.138 15.1528 133.752C15.0519 133.459 14.812 133.239 14.7134 132.951C14.7036 132.921 14.6959 132.893 14.6884 132.865C14.6709 132.873 14.6506 132.88 14.6331 132.888C14.6277 132.888 14.6233 132.893 14.6179 132.895C14.6027 132.903 14.5844 132.911 14.5692 132.921C14.5618 132.923 14.5571 132.929 14.5494 132.931C14.5319 132.941 14.5136 132.951 14.4964 132.964C14.4866 132.969 14.4789 132.976 14.4714 132.982C14.4609 132.989 14.4532 132.994 14.4434 133.002C14.4336 133.009 14.4235 133.017 14.413 133.024C14.4055 133.03 14.4009 133.035 14.3932 133.04C14.3422 133.08 14.2969 133.125 14.2565 133.174C13.9257 133.575 13.8953 134.442 13.7664 134.929C13.6982 135.189 13.7589 135.457 13.8976 135.694V135.644L13.8979 135.644Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M52.8396 131.357C52.6371 131.137 52.2689 131.117 52.0012 131.238C51.7909 131.332 51.6728 131.526 51.6651 131.728C51.6043 131.961 51.716 132.223 51.9027 132.393C52.1652 132.632 52.625 132.708 52.9081 132.45C53.2358 132.153 53.1068 131.647 52.8399 131.357L52.8396 131.357Z' fill='%23A05A07'/%3E%3Cpath d='M52.7475 131.463C52.5858 131.289 52.2921 131.271 52.0782 131.367C51.9112 131.443 51.8149 131.597 51.8103 131.759C51.7616 131.946 51.8504 132.153 51.9992 132.29C52.2095 132.482 52.575 132.542 52.8028 132.334C53.0654 132.095 52.9614 131.693 52.7475 131.461V131.463Z' fill='%23A05A07'/%3E%3Cpath d='M53.5674 133.324C53.5772 133.347 53.5849 133.373 53.5947 133.395C52.1529 133.958 50.438 131.271 52.3624 130.21C52.3722 130.233 52.3823 130.255 52.3951 130.277C52.6425 130.207 52.8876 130.136 53.1275 130.066C52.9787 129.671 52.7617 129.331 52.4862 129.427C48.9002 130.68 51.6911 135.403 54.1782 133.867C54.456 133.696 54.4158 133.481 54.2768 133.09C54.0446 133.17 53.8094 133.248 53.5697 133.327L53.5674 133.324Z' fill='%23CCD1C0'/%3E%3Cpath d='M52.4846 129.425C52.0985 129.559 51.7873 129.736 51.543 129.938C51.7721 130.011 51.977 130.185 52.0779 130.397C52.1613 130.329 52.257 130.266 52.3631 130.208C52.3736 130.23 52.3837 130.253 52.3958 130.276C52.6439 130.205 52.889 130.135 53.1289 130.064C52.9793 129.67 52.7623 129.329 52.4869 129.425H52.4846Z' fill='%23C2C2AC'/%3E%3Cpath d='M51.6516 133.51C51.7754 133.288 51.9597 133.093 52.1615 133.007C51.7525 132.618 51.4794 132.035 51.5129 131.472C51.4217 131.489 51.3309 131.492 51.2526 131.479C51.0855 131.451 50.9195 131.383 50.798 131.274C50.6971 132.08 51.0606 132.939 51.6516 133.51Z' fill='%23C2C2AC'/%3E%3Cpath d='M54.2735 133.087C54.0406 133.168 53.8061 133.246 53.5664 133.324C53.5762 133.347 53.5839 133.373 53.5937 133.396C53.3865 133.476 53.1772 133.489 52.97 133.451C53.0058 133.567 53.0179 133.693 53.0179 133.795C53.0179 133.892 53.0104 134.042 52.9648 134.16C53.3564 134.2 53.7708 134.115 54.1752 133.865C54.4529 133.693 54.4128 133.478 54.2738 133.087H54.2735Z' fill='%23C2C2AC'/%3E%3Cpath d='M52.4521 130.261C52.6797 130.195 52.9067 130.129 53.1289 130.064C52.9801 129.67 52.7631 129.329 52.4877 129.425C52.3564 129.47 52.2372 129.521 52.1211 129.577C52.3131 129.746 52.4344 130.004 52.4519 130.261L52.4521 130.261Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M52.4834 129.424C52.3923 129.458 52.3035 129.492 52.2201 129.528C52.1449 129.599 52.0713 129.672 52.0008 129.74C51.7328 129.995 51.4574 130.26 51.3109 130.606C51.0028 131.336 51.2023 132.236 51.5917 132.902C51.9477 133.512 52.513 133.911 53.2405 133.84C53.6114 133.804 53.8619 133.653 54.1298 133.405C54.1898 133.35 54.2557 133.294 54.3218 133.236C54.3067 133.191 54.2915 133.143 54.2709 133.09C54.0387 133.17 53.8034 133.249 53.5638 133.327C53.5735 133.35 53.5813 133.375 53.5918 133.398C52.1493 133.961 50.4344 131.273 52.3596 130.212C52.3694 130.235 52.3794 130.258 52.3923 130.281C52.6397 130.21 52.8847 130.139 53.1246 130.068C52.9758 129.674 52.7581 129.333 52.4834 129.429V129.424V129.424Z' fill='%23C2C2AC'/%3E%3Cpath d='M51.8693 132.668C51.7586 132.506 51.6675 132.327 51.6044 132.14C51.3691 132.195 51.1393 132.264 50.9102 132.336C50.9853 132.566 51.0916 132.786 51.2227 132.991C51.3593 132.814 51.6196 132.698 51.8693 132.668Z' fill='%23BBB99D'/%3E%3Cpath d='M54.2735 133.087C54.0413 133.168 53.8068 133.246 53.5664 133.324C53.577 133.347 53.5847 133.373 53.5945 133.396C53.6954 133.549 53.744 133.754 53.769 133.921C53.7767 133.966 53.7788 134.012 53.7788 134.057C53.9101 134.009 54.0444 133.946 54.1757 133.865C54.4535 133.693 54.4133 133.478 54.2735 133.087V133.087Z' fill='%23BBB99D'/%3E%3Cpath d='M52.955 131.982C52.9581 131.794 52.8724 131.6 52.7455 131.464C52.7128 131.428 52.6749 131.403 52.6348 131.38C52.0286 131.587 50.9176 131.792 50.4048 132.087C50.0936 132.267 50.3008 132.615 50.5937 132.661C50.7001 132.678 51.9779 132.34 52.9452 131.986C52.9475 131.986 52.9506 131.984 52.955 131.981V131.982Z' fill='%23CCD1C0'/%3E%3Cpath d='M52.7446 131.464C52.712 131.428 52.6741 131.403 52.634 131.38C52.4473 131.443 52.2144 131.507 51.9647 131.572C51.8813 131.842 51.6233 132.093 51.404 132.216C51.0678 132.406 50.6565 132.515 50.2773 132.431C50.3304 132.543 50.4519 132.636 50.5929 132.656C50.6992 132.674 51.977 132.336 52.9444 131.982C52.9475 131.982 52.9498 131.979 52.955 131.977C52.9573 131.79 52.8716 131.595 52.7446 131.458V131.464V131.464Z' fill='%23C2C2AC'/%3E%3Cpath d='M52.7474 131.464C52.7147 131.428 52.6769 131.403 52.6359 131.38C52.5533 131.408 52.4568 131.439 52.3582 131.466C52.4014 131.711 52.2375 131.974 52.0804 132.161C52.0326 132.219 51.9772 132.272 51.9219 132.323C52.2604 132.222 52.6215 132.102 52.9448 131.984C52.9472 131.984 52.9495 131.982 52.9546 131.979C52.9569 131.792 52.8712 131.597 52.7451 131.461L52.7474 131.464Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M55.8347 130.091C55.4758 129.988 55.0722 130.352 55.0591 130.695C55.0462 131.011 55.2966 131.327 55.622 131.433C55.8316 131.501 56.0385 131.445 56.1927 131.326C56.6625 131.021 56.3878 130.253 55.837 130.091H55.8347V130.091Z' fill='%23A05A07'/%3E%3Cpath d='M55.8108 130.273C55.5474 130.197 55.2501 130.465 55.2424 130.715C55.2349 130.948 55.4162 131.18 55.6537 131.256C55.8077 131.306 55.9596 131.266 56.0733 131.177C56.4193 130.952 56.2144 130.389 55.8108 130.27V130.273Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M59.444 128.937C59.3431 128.735 59.1464 128.58 58.8605 128.588C58.0272 128.608 57.9544 129.684 58.5523 129.965C58.6033 129.995 58.661 130.018 58.7246 130.03C59.3179 130.169 59.7725 129.498 59.4438 128.935V128.937H59.444Z' fill='%23A05A07'/%3E%3Cpath d='M59.2842 129.043C59.2114 128.897 59.0696 128.786 58.8623 128.79C58.2592 128.806 58.2059 129.584 58.6407 129.788C58.6786 129.809 58.719 129.826 58.7643 129.837C59.1929 129.938 59.5216 129.45 59.284 129.043H59.2842Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M48.6147 132.38C48.3848 132.231 48.0813 132.241 47.8316 132.34C47.5312 132.461 47.4303 132.79 47.5031 133.055C47.6898 133.745 48.6497 133.828 48.9176 133.148C49.0337 132.853 48.8819 132.555 48.6149 132.38L48.6147 132.38Z' fill='%23A05A07'/%3E%3Cpath d='M48.5248 132.511C48.348 132.398 48.1158 132.405 47.9261 132.48C47.6962 132.571 47.6179 132.824 47.6733 133.026C47.8174 133.554 48.5498 133.617 48.7568 133.097C48.8448 132.872 48.7287 132.642 48.5246 132.508V132.511H48.5248Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M43.9117 133.251C43.9117 133.251 43.8942 133.251 43.8844 133.248C43.584 133.178 43.2607 133.216 43.071 133.476C43.0102 133.559 42.9822 133.653 42.9798 133.748C42.8964 134.094 43.0457 134.436 43.3616 134.638C43.5505 134.759 43.7706 134.776 43.9951 134.746C44.2553 134.711 44.4299 134.484 44.5179 134.284C44.7532 133.759 44.3259 133.304 43.9117 133.251Z' fill='%23A05A07'/%3E%3Cpath d='M43.8769 133.449H43.8563C43.6339 133.398 43.3993 133.423 43.2606 133.615C43.215 133.676 43.1947 133.747 43.1924 133.818C43.1316 134.073 43.2403 134.323 43.4725 134.472C43.6112 134.56 43.7729 134.573 43.9376 134.552C44.1296 134.527 44.2555 134.358 44.3217 134.214C44.4931 133.828 44.1798 133.495 43.8771 133.453V133.449L43.8769 133.449Z' fill='%23A05A07'/%3E%3Cpath d='M31.165 93.9984C30.8494 93.7457 30.5792 93.5266 30.3418 93.3292V93.5189H26.6724V89.6742C26.5638 89.6286 26.45 89.6415 26.3545 89.6947C26.2026 89.5704 25.9828 89.5408 25.8111 89.7274C21.7705 94.1079 17.8537 98.66 13.1885 102.401C12.2135 103.184 11.224 103.949 10.365 104.866C9.09464 106.225 8.33449 107.998 8.3852 109.865C8.4027 110.497 8.56436 111.141 8.95357 111.636C9.26401 112.033 9.70857 112.323 9.96341 112.757C10.2206 113.195 10.2587 113.723 10.3518 114.22C10.4862 114.95 10.9506 115.912 11.7792 116.026H11.7867C11.0515 111.525 14.2663 112.881 28.9423 96.9366C29.7003 96.1157 30.5614 95.4106 31.2353 94.5115C31.3393 94.3727 31.3035 94.1048 31.1699 93.9961L31.1645 93.9984H31.165Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M31.1669 93.9984C30.8513 93.7457 30.581 93.5266 30.3437 93.3292V93.5189H26.6742V89.6742C26.5656 89.6286 26.4518 89.6415 26.3563 89.6947C26.2044 89.5704 25.9846 89.5408 25.8129 89.7274C24.6535 90.9854 23.5024 92.2558 22.343 93.5191C22.8128 93.9259 23.1155 94.6178 23.2094 95.181C23.3224 95.8662 23.1335 96.5703 22.8354 97.1842C22.5023 97.8769 22.0555 98.5083 21.5576 99.0919C20.8961 99.8675 20.156 100.569 19.4185 101.27C18.6483 102.002 17.9229 102.768 17.1831 103.53C16.4106 104.328 15.6101 105.089 14.7814 105.826C14.1351 106.402 13.483 107.004 12.7152 107.418C12.0315 107.787 11.1877 108.024 10.4525 107.643C9.81903 107.314 9.523 106.64 9.52069 105.948C8.7711 107.109 8.34919 108.458 8.38935 109.863C8.40685 110.494 8.56851 111.138 8.95772 111.634C9.26816 112.031 9.71271 112.321 9.96755 112.753C10.2255 113.19 10.2636 113.718 10.3568 114.215C10.4904 114.945 10.9555 115.908 11.7833 116.022H11.7908C11.0564 111.52 14.2713 112.877 28.9472 96.9314C29.7045 96.111 30.5658 95.4062 31.2402 94.5071C31.3435 94.3676 31.3084 94.1004 31.1743 93.9912L31.1669 93.9987V93.9984Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M31.1653 93.9984C30.8497 93.7457 30.5795 93.5266 30.3421 93.3292V93.5189H26.6727V89.6742C26.5641 89.6286 26.4503 89.6415 26.3548 89.6947C26.2029 89.5704 25.9831 89.5408 25.8114 89.7274C24.7712 90.8541 23.7384 91.9932 22.7003 93.1276C23.0583 93.4077 23.3165 93.8219 23.4931 94.2391C23.7732 94.8932 24.0085 95.6891 23.8512 96.4009C23.6568 97.2856 22.9649 98.0005 22.3942 98.6643C21.6794 99.496 20.9321 100.297 20.1542 101.07C19.3688 101.85 18.5402 102.583 17.7443 103.351C16.9795 104.09 16.267 104.884 15.4839 105.607C14.8049 106.233 14.0574 106.789 13.3199 107.344C12.646 107.852 11.8881 108.408 11.0291 108.532C10.529 108.602 9.92355 108.516 9.57449 108.114C9.26199 107.753 9.18296 107.253 9.20562 106.785C9.21102 106.66 9.22621 106.533 9.24346 106.409C8.6653 107.46 8.35178 108.642 8.38524 109.868C8.40275 110.499 8.5644 111.143 8.95284 111.639C9.26405 112.035 9.7086 112.326 9.96344 112.757C10.2206 113.194 10.2587 113.723 10.3519 114.22C10.4862 114.95 10.9506 115.912 11.7792 116.026H11.7867C11.5241 114.412 11.7661 113.553 12.8627 112.379C12.7283 112.156 12.6251 111.913 12.5623 111.661C12.11 109.835 13.5062 108.231 14.8219 107.177C15.2239 106.857 15.6376 106.553 16.0268 106.22C16.4639 105.844 16.8858 105.452 17.3023 105.053C18.1181 104.272 18.9467 103.509 19.7776 102.744C21.3535 101.292 22.6869 99.5663 24.47 98.3485C25.2904 97.7878 26.2199 97.3302 27.2176 97.2066C27.7003 97.1458 28.1775 97.1688 28.6365 97.2673C28.7382 97.1567 28.8414 97.048 28.9423 96.9342C29.7004 96.1134 30.5614 95.4083 31.2354 94.5092C31.3393 94.3704 31.3036 94.1024 31.17 93.9938L31.1646 93.9984H31.1653Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M31.1645 93.9984C30.8489 93.7457 30.5787 93.5266 30.3413 93.3292V93.5189H26.6719V89.6742C26.5633 89.6286 26.4495 89.6415 26.3532 89.6947C26.2021 89.5704 25.9823 89.5408 25.8106 89.7274C24.9493 90.6624 24.0926 91.6017 23.2344 92.5441C23.3451 92.645 23.4491 92.7536 23.5425 92.8725C24.0174 93.4659 24.2877 94.1807 24.6913 94.8173C24.906 95.1581 25.1611 95.4842 25.4919 95.7218C25.8857 96.005 26.356 96.1406 26.8184 96.2598C27.5075 96.4344 28.2601 96.6081 28.7701 97.124C28.8285 97.0632 28.8838 96.9996 28.9423 96.9389C29.6996 96.1185 30.5609 95.4137 31.2353 94.5146C31.3385 94.375 31.3035 94.1078 31.1694 93.9987H31.1648L31.1645 93.9984Z' fill='%23A05A07'/%3E%3Cpath opacity='0.58' d='M12.2171 113.184C12.1512 113.112 12.0912 113.031 12.0351 112.943C11.7375 112.472 11.649 111.939 11.674 111.392C11.702 110.719 11.8613 109.974 11.6186 109.322C11.5504 109.14 10.5001 109.716 10.3786 109.782C10.025 109.972 9.66149 110.183 9.26997 110.282C8.98166 110.356 8.67662 110.363 8.41406 110.231C8.47404 110.74 8.63879 111.237 8.95129 111.636C9.2625 112.033 9.70705 112.323 9.96189 112.758C10.219 113.195 10.2571 113.722 10.3503 114.22C10.4847 114.95 10.9491 115.913 11.7777 116.026H11.7852C11.5857 114.798 11.6788 114.008 12.2168 113.182L12.2171 113.184Z' fill='%23A05A07'/%3E%3Cpath d='M51.0198 102.124L50.5675 101.699C50.5675 101.699 50.2087 101.54 49.918 101.759C49.6251 101.98 45.9176 107.123 45.8676 107.59C45.8167 108.058 46.2288 108.563 46.2288 108.563L47.729 108.351L51.1405 105.749L51.0221 102.126L51.0198 102.124Z' fill='%23A05A07'/%3E%3Cpath d='M59.9169 117.053H64.208C63.887 115.888 63.4932 114.754 62.8566 113.714C57.8661 105.536 28.9089 87.7782 25.6333 85.0905C25.1202 84.6709 19.6752 81.2404 18.9863 81.238C18.8324 81.238 18.7207 81.3063 18.6555 81.4043C18.4736 81.3922 18.2838 81.4756 18.211 81.698C17.8673 82.7339 17.2838 83.7764 16.6729 84.6786C16.2716 85.2697 15.7259 85.8306 15.5058 86.5178C15.0893 86.5451 14.9557 87.2198 15.4276 87.3511C16.8776 87.7503 22.9031 91.8304 24.0399 92.7599C33.7153 100.684 55.457 111.263 59.9172 118.673V117.053L59.9169 117.053ZM30.0098 91.7663C29.7624 92.711 27.8177 93.0145 28.0779 91.4386C28.141 91.0591 28.4133 90.6653 28.8049 90.569C29.2852 90.4529 29.8536 90.6905 30.0196 91.1752C30.0855 91.3704 30.0749 91.5773 30.0098 91.7639V91.7663ZM36.8511 98.2912C36.7077 98.112 36.5983 97.8997 36.5535 97.6749C36.1393 95.9245 38.6265 96.2097 38.6242 97.5534C38.6242 98.3723 37.4215 99.0065 36.8539 98.2909H36.8508L36.8511 98.2912ZM45.0263 104.182C44.5514 103.581 44.9429 102.561 45.7411 102.455C46.1782 102.396 46.8519 102.611 47.0439 103.053C47.5894 104.324 45.7715 105.122 45.0286 104.182H45.0263Z' fill='%23D58500'/%3E%3Cpath d='M20.9411 90.0917C21.2742 89.1112 21.6907 88.1621 22.1582 87.2372C22.681 86.2122 23.2342 85.1885 23.9163 84.2589C23.9665 84.1907 24.0195 84.1202 24.0726 84.0517C22.2514 82.8998 19.4659 81.2382 18.9863 81.2351C18.8324 81.2351 18.7207 81.3033 18.6556 81.4022C18.4736 81.3893 18.2838 81.4727 18.211 81.6951C17.8673 82.7309 17.2838 83.7742 16.6729 84.6765C16.2716 85.2675 15.7259 85.8284 15.5058 86.5149C15.0893 86.543 14.9557 87.2177 15.4276 87.3489C16.2812 87.5834 18.7183 89.0919 20.8119 90.4835C20.8551 90.3522 20.8976 90.2209 20.9409 90.0919L20.9411 90.0917Z' fill='%23C77500'/%3E%3Cpath d='M62.8573 113.714C61.4688 111.437 58.2202 108.419 54.1873 105.188C54.0105 105.448 53.8414 105.713 53.6743 105.979C53.1698 106.79 52.6361 107.58 52.121 108.383C51.6793 109.071 51.2706 109.787 50.957 110.543C55.2123 113.524 58.6043 116.363 60.0162 118.838C60.8366 120.279 61.3419 121.896 61.5893 123.53C61.8397 125.182 61.0134 126.159 60.5892 126.885H61.216C61.329 126.733 61.4353 126.573 61.5241 126.404C61.6706 126.121 61.7259 125.834 61.754 125.518C61.7738 125.288 61.789 125.053 61.8626 124.833C62.0212 124.348 62.3064 123.916 62.5062 123.446C62.7414 122.898 62.9487 122.34 63.1427 121.779C63.3173 121.274 63.491 120.776 63.7034 120.284C63.9181 119.784 64.1428 119.278 64.2566 118.743C64.3325 118.387 64.3673 118.02 64.3727 117.654C64.019 116.28 63.6048 114.93 62.8596 113.71L62.8573 113.713V113.714Z' fill='%23D58500'/%3E%3Cpath d='M63.7237 119.437C62.6637 119.791 61.9079 118.98 61.527 118.07C60.9792 116.755 60.9784 115.251 61.1681 113.86C61.2191 113.493 61.2896 113.13 61.3329 112.763C61.3602 112.526 61.3882 112.288 61.4436 112.056C61.4564 111.998 61.4716 111.937 61.4891 111.879C59.6854 109.782 56.8598 107.297 53.5644 104.69C53.3922 106.19 52.996 107.666 52.4148 109.063C52.1468 109.704 51.8441 110.328 51.5156 110.937C55.5084 113.773 58.6681 116.474 60.0172 118.838C60.8376 120.278 60.4232 121.423 60.6736 123.055C60.9514 124.876 60.6129 126.23 60.434 127.071C60.5774 127.005 60.9311 126.975 61.1208 127.035C61.2696 126.849 61.416 126.616 61.5244 126.404C61.6709 126.121 61.727 125.833 61.7543 125.517C61.7749 125.287 61.79 125.052 61.8629 124.832C62.0222 124.347 62.3074 123.916 62.5072 123.446C62.7425 122.897 62.9497 122.339 63.1438 121.778C63.3183 121.274 63.4921 120.776 63.7044 120.283C63.8509 119.944 63.9997 119.603 64.1158 119.255C63.9951 119.328 63.8661 119.389 63.7273 119.434L63.7243 119.437L63.7237 119.437Z' fill='%23C77500'/%3E%3Cpath d='M60.5519 112.376C60.5246 111.798 57.6936 107.009 52.6249 103.882L48.8164 109.126C51.6552 110.5 53.7052 113.125 54.3951 116.201C55.8899 116.08 57.3118 116.601 58.4993 117.517C60.3401 114.622 60.5625 112.596 60.5496 112.376H60.5519ZM54.8396 111.26C54.8191 111.262 54.7964 111.268 54.7737 111.268C53.6174 111.363 53.4527 109.992 53.9657 109.383C54.289 108.999 54.8929 108.957 55.2922 109.252C56.388 110.065 55.6307 111.235 54.8368 111.258L54.8399 111.26L54.8396 111.26Z' fill='%23D58500'/%3E%3Cpath d='M51.5239 109.219C52.1445 107.693 53.1173 106.193 54.3951 105.102C53.8396 104.677 53.2486 104.266 52.6248 103.882L48.8164 109.126C49.6419 109.525 50.4 110.03 51.0768 110.621C51.1929 110.143 51.3396 109.671 51.5239 109.219Z' fill='%23C77500'/%3E%3Cpath d='M53.593 103.75C53.5248 103.644 51.6969 101.89 51.0724 101.653C50.6938 101.509 50.234 101.517 49.9161 101.757C50.0649 101.671 50.2979 101.747 50.3934 101.905C51.1059 103.078 46.3149 108.19 46.1131 108.125C45.9136 108.059 45.8703 107.799 45.8626 107.59C45.7033 108.112 46.0196 108.66 46.3831 109.065C47.2012 109.972 48.2694 110.429 48.5168 110.437C49.7264 110.472 53.3806 105.69 53.6486 104.303C53.6844 104.116 53.6942 103.912 53.5909 103.752L53.593 103.75Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M53.593 103.75C53.5248 103.644 51.6969 101.89 51.0724 101.653C50.6938 101.509 50.234 101.517 49.9161 101.757C50.0649 101.671 50.2979 101.747 50.3934 101.905C50.5172 102.11 50.4744 102.434 50.3174 102.83C50.8652 102.858 51.222 103.29 51.2925 103.815C51.4011 104.649 51.0019 105.45 50.5095 106.092C50.1027 106.622 49.4463 107.352 48.6862 107.13C48.2924 107.016 47.9639 106.769 47.7976 106.432C46.9409 107.415 46.1882 108.148 46.1131 108.122C45.9136 108.057 45.8703 107.797 45.8626 107.587C45.7033 108.11 46.0196 108.658 46.3831 109.062C47.2012 109.969 48.2694 110.426 48.5168 110.434C49.7264 110.469 53.3806 105.687 53.6486 104.3C53.6844 104.114 53.6942 103.909 53.5909 103.75H53.593Z' fill='%23C77500'/%3E%3Cpath d='M11.3788 98.813C11.2499 99.2843 11.1062 99.7513 10.9412 100.214C10.9471 100.24 13.1053 108.088 13.1138 108.12C11.9789 111.407 8.98641 106.907 8.63968 110.369C8.49578 111.866 8.46464 113.404 7.95496 114.836C7.39071 116.434 6.31498 117.844 5.90491 119.496L5.90286 119.499C4.97694 122.578 4.01704 125.742 2.34385 128.516C2.34385 128.516 2.34385 128.518 2.34179 128.518C2.24372 128.688 2.13432 128.854 2.01848 129.013C0.577738 131.087 -2.06796 129.895 -4.09767 130.171C-7.22808 130.135 -10.403 129.937 -13.2698 128.689L-13.2719 128.692C-13.4663 128.548 -13.6354 128.404 -13.813 128.22H-13.815V128.218C-13.8573 128.176 -13.9018 128.131 -13.9481 128.085V128.083H-13.9502C-14.2102 127.787 -14.4488 127.479 -14.6709 127.155C-14.6709 127.153 -14.673 127.153 -14.673 127.153C-20.4146 119.572 -16.0648 110.935 -14.5863 102.059C-13.6827 96.7701 -13.3381 91.1238 -12.6822 85.7438C-12.6808 85.7425 -12.6808 85.7411 -12.6822 85.7397C-12.0415 79.8472 -8.15554 74.3757 -3.05798 71.3624V71.3603C-2.98178 71.3181 -2.90585 71.2759 -2.82965 71.2334C-2.82965 71.2314 -2.8276 71.2314 -2.8276 71.2314C-2.74522 71.1214 -2.62038 71.018 -2.45563 70.9207C-0.152035 71.1575 2.16212 71.7089 4.31564 72.5753V72.5774C4.98337 72.8435 5.63232 73.1586 6.25577 73.5071C12.1385 76.4885 14.7365 83.5978 12.896 89.8012C12.894 89.8012 12.8813 89.8076 12.8749 89.8076L12.8729 89.8097H12.8708C12.8371 89.9788 12.799 90.15 12.765 90.3168L12.7629 90.3188C12.34 92.3313 12.2023 94.3826 11.8859 96.4118C11.8873 96.4132 11.8873 96.4146 11.8859 96.4159C11.759 97.226 11.5894 98.024 11.3788 98.8125V98.813Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.4' d='M13.3763 84.0701C13.34 83.3591 13.2255 82.6541 13.0721 81.9588H13.07C13.016 81.7171 12.9524 81.4715 12.8819 81.2339H12.8839L12.886 81.236C12.6695 80.4995 12.3871 79.7803 12.0321 79.0995H12.0301C11.9284 78.9002 11.8195 78.7069 11.7026 78.5162C11.7026 78.5162 11.7026 78.5141 11.7006 78.5141C11.6921 78.5015 11.6857 78.4886 11.6774 78.476C11.6774 78.476 11.6774 78.4739 11.6754 78.4739C10.5929 76.7194 9.07496 75.2684 7.3472 74.1584C7.34583 74.1556 7.34446 74.1543 7.34308 74.1543C5.60889 73.0443 3.6788 72.2474 1.69414 71.7091C0.335764 71.3353 -1.06688 71.079 -2.45229 70.9209C-2.61703 71.0182 -2.74188 71.1217 -2.82425 71.2316C-2.82425 71.2316 -2.82631 71.2316 -2.82631 71.2337C-2.9025 71.2759 -2.97844 71.3181 -3.05463 71.3626H-3.05669C-6.26201 73.2587 -8.93371 76.0802 -10.6795 79.3638C-10.7928 79.5775 -10.8985 79.7893 -11.0028 80.0043C-11.002 80.0061 -11.0043 80.0107 -11.0049 80.0107C-11.87 81.8129 -12.461 83.7522 -12.6786 85.74C-12.6772 85.7413 -12.6772 85.7427 -12.6786 85.7441C-13.0217 88.547 -13.2706 91.3711 -13.5661 94.1829H-13.5641C-13.5708 94.6043 -13.5811 95.0226 -13.6083 95.4445C-13.98 104.966 -19.8916 114.773 -16.3938 124.125C-16.3853 124.125 -16.3791 124.123 -16.3707 124.123C-15.9454 125.048 -15.4414 125.932 -14.8934 126.801C-14.8934 126.803 -14.8913 126.803 -14.8913 126.803C-14.8205 126.919 -14.7428 127.036 -14.6694 127.153C-14.6694 127.153 -14.6673 127.153 -14.6673 127.156C-14.4413 127.479 -14.2025 127.787 -13.9445 128.079V128.081H-13.9425V128.083C-13.9002 128.128 -13.8537 128.176 -13.8114 128.218V128.22H-13.8094C-10.975 130.052 -7.51896 130.156 -4.24003 130.169C-2.05227 129.886 0.52445 130.999 2.02183 129.013C2.13457 128.88 2.24423 128.733 2.34513 128.59C3.52151 126.877 4.11614 124.651 4.87705 122.791C4.88349 122.774 4.88967 122.76 4.8961 122.743C5.13241 123.438 5.4758 124.107 5.84287 124.74C5.59138 122.568 5.44878 120.262 6.3227 118.205H6.32476C6.932 116.824 7.85302 115.559 8.18251 114.067C8.35394 113.416 8.43143 112.74 8.50171 112.07L8.50376 112.068C8.42345 109.041 9.17484 106.094 10.0274 103.209C10.6969 100.962 11.4262 98.7126 11.8893 96.4167C11.8906 96.4153 11.8906 96.414 11.8893 96.4126C12.1989 92.2772 13.6206 88.2502 13.3771 84.0706L13.3763 84.0701ZM-9.04233 119.395C-13.9927 114.861 -11.1961 109.138 -8.43973 104.95C1.29283 89.9584 8.65409 115.836 -9.04233 119.395Z' fill='%23C2C2AC'/%3E%3Cpath d='M10.9403 100.214H10.9383C10.9486 100.235 13.1026 108.088 13.1129 108.12C11.978 111.407 8.98553 106.907 8.63879 110.369C8.65475 114.634 7.13962 115.905 5.90403 119.496L5.90197 119.499C5.50401 121.216 5.63941 123.002 5.84276 124.738C5.48264 124.103 5.12998 123.44 4.89599 122.741C4.10959 124.792 3.377 127.301 2.0176 129.013C-0.557827 131.484 -4.28698 129.75 -7.45034 130C-6.83538 127.39 -6.42326 123.305 -4.65431 121.308C-4.21053 120.984 -4.87827 120.456 -4.34774 120.502C-0.864929 120.68 2.91597 124.186 3.08921 120.346C2.81867 117.315 5.39898 115.128 5.76682 112.305C5.81728 105.071 0.801058 87.7125 -15.4492 105.77C-14.53 101.988 -13.6059 98.0315 -13.5683 94.1824H-13.5704C-13.2774 91.3712 -13.0231 88.5489 -12.6828 85.7436C-12.6814 85.7422 -12.6814 85.7408 -12.6828 85.7395C-12.1378 79.9235 -8.15025 74.36 -3.0586 71.3621V71.3601C-2.98241 71.3179 -2.90647 71.2756 -2.83028 71.2332C-2.83028 71.2311 -2.82822 71.2311 -2.82822 71.2311C-2.74585 71.1212 -2.621 71.0177 -2.45625 70.9204C-1.06442 71.0895 0.332824 71.3348 1.69017 71.7086C3.27481 72.1315 4.81722 72.7215 6.25514 73.5072C6.62118 73.7103 6.98594 73.9242 7.33937 74.1538C7.34074 74.1538 7.34211 74.1552 7.34348 74.1579C9.07845 75.2787 10.6245 76.7382 11.6971 78.5136C11.6992 78.5136 11.6992 78.5157 11.6992 78.5157C11.8153 78.7079 11.9306 78.9062 12.0351 79.1031L12.031 79.1051C12.5422 80.0784 12.892 81.1274 13.1278 82.199L13.1237 82.2011C13.6882 84.8885 13.3827 87.6652 12.7644 90.3165L12.7623 90.3186C12.1046 93.6029 12.0992 97.0399 10.9406 100.213L10.9403 100.214Z' fill='%23C2C2AC'/%3E%3Cpath d='M8.8837 108.433C8.78742 109.073 8.70453 109.715 8.64275 110.361C8.64275 110.361 8.6407 110.361 8.64275 110.363C8.47441 111.077 8.28855 112.284 8.17349 113.021C7.66844 113.203 7.19917 111.935 6.59065 112.096C4.28216 112.726 0.55893 113.333 -1.38094 113.577C-1.38094 113.577 -4.07966 118.461 -5.26737 117.7C-6.46151 116.937 -2.97433 112.576 0.0497699 111.493C1.00503 111.153 3.65305 108.943 3.95731 108.805C5.3283 108.189 7.68852 107.694 8.8837 108.433Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M53.5919 103.75C53.5237 103.644 51.695 101.89 51.0713 101.653C50.6927 101.509 50.2329 101.517 49.915 101.757C50.0638 101.671 50.296 101.747 50.3923 101.905C50.4347 101.977 50.4577 102.065 50.4628 102.163C50.965 102.188 51.5486 102.338 51.8793 102.739C52.2003 103.131 52.3772 103.686 52.4348 104.184C52.4979 104.745 52.397 105.303 52.1648 105.816C51.9684 106.25 51.7028 106.647 51.4075 107.019C51.1244 107.373 50.8188 107.723 50.478 108.027C50.1668 108.302 49.8087 108.57 49.3966 108.673C49.1925 108.724 49.0156 108.698 48.813 108.648C48.5536 108.583 48.351 108.616 48.1036 108.711C47.7175 108.863 47.328 108.84 46.9898 108.583C46.7478 108.398 46.548 108.141 46.4646 107.847C46.2675 108.035 46.139 108.136 46.1089 108.126C45.9094 108.06 45.8662 107.799 45.8584 107.59C45.6999 108.113 46.0155 108.661 46.3789 109.065C47.197 109.972 48.2652 110.429 48.5126 110.437C49.723 110.472 53.3772 105.69 53.6452 104.304C53.6802 104.116 53.69 103.912 53.5868 103.753L53.5922 103.751L53.5919 103.75Z' fill='%23C77500'/%3E%3Cpath d='M0.259649 89.8302H4.9016L-5.34451 72.7284C-5.76383 72.5894 -17.5403 76.8889 -21.5938 87.7003C-13.8152 85.8436 -3.29137 91.108 0.259649 94.8011V89.8302Z' fill='%239EA58E'/%3E%3Cpath d='M0.313499 94.8796C0.616476 94.6672 2.56896 92.9621 2.85675 92.7299C3.03617 92.5834 3.21275 92.4339 3.38702 92.28C4.0285 91.7116 4.62956 91.0956 5.17245 90.4307L-5.56351 72.5108C-5.98284 72.3718 -17.7593 76.6714 -21.8125 87.4828C-13.8242 85.5782 -2.94201 91.179 0.313499 94.8796Z' fill='%239EA58E'/%3E%3Cpath opacity='0.4' d='M-5.56505 72.5106C-5.86803 72.4097 -12.1312 74.6376 -17.1016 79.9828C-17.0738 79.9854 -17.046 79.9877 -17.0182 79.9928C-12.9168 80.493 -8.24962 83.1001 -4.37812 91.2997C-2.31984 92.4949 -0.663115 93.7727 0.311712 94.8791C0.614689 94.6675 2.56717 92.9624 2.85495 92.7294C3.03437 92.583 3.21122 92.4342 3.38523 92.2802C4.02671 91.7119 4.62776 91.0951 5.17065 90.431L-5.56531 72.5106H-5.56505Z' fill='%23949984'/%3E%3Cpath d='M3.38467 92.2802C4.02614 91.7118 4.6272 91.0958 5.17009 90.4309L-5.56587 72.511C-5.82586 72.4253 -10.4681 74.0519 -14.918 77.8866C-7.73535 80.3596 -0.999858 86.4701 2.87937 92.7095C3.05106 92.5708 3.22044 92.4264 3.38698 92.2802H3.38467Z' fill='%23949984'/%3E%3Cpath opacity='0.7' d='M50.7471 78.5748C50.848 78.5696 50.9513 78.5495 51.0529 78.5091C52.0347 78.1403 52.8255 76.2256 52.3557 75.2683C53.3277 74.4827 53.8657 73.1135 53.6662 71.9693C53.8461 72.0097 54.0379 72.0527 54.2397 72.1006C54.2624 72.0954 54.2822 72.0905 54.3028 72.0854C54.346 72.0728 54.3862 72.055 54.4243 72.0349C54.9973 71.7368 55.2575 70.6861 55.1739 70.0065C56.202 69.4559 57.3333 68.3722 57.828 66.3008C57.8355 66.3008 57.8584 66.2933 57.8963 66.2781C58.0178 66.2377 58.303 66.1291 58.6513 65.9345C57.5807 65.8763 56.5047 65.8511 55.449 65.7805C55.0781 65.7553 54.7069 65.7224 54.3383 65.6794C50.5672 65.2322 46.5363 62.7263 46.5363 62.7263C46.5242 62.7338 45.83 63.3073 44.6781 64.2193C44.9733 64.6235 45.3116 64.8863 45.6501 64.7169C45.6629 64.712 45.6758 64.7043 45.6858 64.6968C45.7435 64.8003 45.9765 67.0133 47.0571 68.4607C46.7286 68.8852 46.4864 69.5671 46.5721 70.0497C46.5775 70.0824 46.585 70.1105 46.5927 70.138V70.1429C46.7163 70.5571 46.9637 70.5193 47.3606 70.6001V70.6253C47.3606 70.6531 47.3652 70.6835 47.3673 70.7136C46.5016 71.5118 46.2738 72.8885 46.4028 74.033C44.9406 75.1949 45.0892 76.1651 45.1651 76.9052C44.7386 77.9688 44.5262 78.9666 44.7105 80.0827C44.7311 80.1988 44.7507 80.3126 44.7764 80.4263V80.4338C44.7862 80.4717 44.7962 80.5097 44.8037 80.5499C44.7939 80.5476 44.7862 80.5453 44.7764 80.5401C44.4047 80.9893 43.887 82.114 43.9879 82.4471L44.0031 82.4545C44.0031 82.4545 43.9879 82.4599 43.9782 82.4599C43.9704 82.4599 43.963 82.4622 43.9555 82.4653C43.6626 82.5436 43.4273 82.7279 43.2355 82.9578C42.7279 83.5869 42.4123 84.6781 42.1953 85.587C43.4353 85.7311 44.5998 85.8223 45.6979 85.8701C46.2998 85.2691 46.7057 84.5566 46.7564 83.7714V83.6044C46.7693 83.6098 46.7814 83.6142 46.7966 83.6219C47.3475 83.4275 48.0471 81.7986 48.0471 81.7986C49.3903 81.2552 50.4791 80.083 50.7438 78.5753H50.7469L50.7471 78.5748Z' fill='%232B6B40'/%3E%3Cg opacity='0.4'%3E%3Cpath d='M73.6751 105.512C72.7335 104.891 71.7689 104.299 70.8016 103.729C69.7712 103.117 68.8795 102.443 68.0411 101.73C68.0411 101.73 67.4652 99.4421 68.0411 96.2141C68.0411 96.2141 69.7938 102.668 73.6751 105.512V105.512Z' fill='%238D9280'/%3E%3C/g%3E%3Cpath opacity='0.5' d='M16.3812 64.4663C16.3052 64.2894 16.3258 64.0974 16.3485 63.908C16.2877 63.9888 16.2226 64.067 16.149 64.1404L14.9471 65.4895C14.8789 65.679 14.9798 65.8988 15.1718 65.9644C15.7379 66.1616 16.3281 65.5425 16.7554 64.8859C16.5992 64.7772 16.4602 64.6485 16.3814 64.4665L16.3812 64.4663Z' fill='%2334381B'/%3E%3Cpath d='M82.9929 141.686L82.7205 144.961C82.7205 144.961 71.3552 138.32 73.4845 135.705C75.6136 133.093 82.9929 141.686 82.9929 141.686Z' fill='%23474C2F'/%3E%3Cpath d='M82.7568 144.493L82.7166 144.963C82.7166 144.963 71.3513 138.322 73.4806 135.707C73.5792 135.586 73.6901 135.488 73.8114 135.412C71.887 137.774 80.9912 143.43 82.7544 144.493H82.7568Z' fill='%23676D54'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.4'%3E%3Cpath d='M70.5696 156.166C70.5696 156.166 70.037 153.812 67.6202 153.648C65.2033 153.481 58.4979 159.402 56.3112 158.2C54.1237 157 58.2127 154.313 58.2127 154.313C58.2127 154.313 60.7889 152.125 54.3536 153.997C47.919 155.869 54.3536 150.907 54.3536 150.907C54.3536 150.907 57.2582 149.051 50.914 151.143C44.5698 153.234 52.798 147.05 52.798 147.05C52.798 147.05 49.5253 147.05 48.8181 146.456C48.111 145.865 55.4121 142.301 55.4121 142.301C55.4121 142.301 60.339 142.066 65.0115 143.036C67.0245 145.795 68.7744 148.523 69.0323 151.354C69.1659 152.845 70.5022 154.674 70.5673 156.17L70.5696 156.167V156.166Z' fill='%238D9280'/%3E%3C/g%3E%3Cpath d='M84.6808 140.166C84.6633 140.246 84.62 140.345 84.5541 140.453C84.542 140.472 84.5315 140.489 84.5214 140.506C84.5062 140.529 84.4887 140.555 84.4712 140.58C84.4486 140.613 84.4226 140.645 84.3976 140.681C84.3466 140.749 84.289 140.82 84.2262 140.896C84.1927 140.933 84.1603 140.971 84.1276 141.009C84.1049 141.034 84.082 141.06 84.057 141.088C84.0344 141.11 84.0115 141.135 83.9888 141.161C83.7536 141.411 83.4714 141.689 83.1528 141.982C83.1072 142.022 83.0647 142.065 83.0192 142.106C82.9759 142.143 82.9334 142.184 82.8879 142.224C82.8423 142.267 82.7944 142.307 82.746 142.351C82.6353 142.449 82.5213 142.55 82.4052 142.651C82.3476 142.701 82.2891 142.752 82.2284 142.802C81.6327 143.313 80.9833 143.841 80.3421 144.351C80.226 144.442 80.1099 144.535 79.993 144.626C79.7912 144.786 79.5894 144.94 79.395 145.094C79.291 145.172 79.1901 145.253 79.0892 145.329C78.8267 145.531 78.5739 145.725 78.3342 145.905C78.319 145.917 78.3039 145.927 78.2887 145.94C77.4577 146.569 76.8036 147.044 76.5532 147.228C76.5411 147.256 76.5282 147.281 76.5153 147.304C76.3817 147.549 76.2605 147.756 76.1465 147.936C76.1266 147.968 76.1063 147.996 76.0865 148.027C76.0432 148.09 76.0031 148.148 75.9621 148.206C75.9501 148.224 75.9372 148.242 75.9251 148.257C75.8872 148.308 75.8492 148.358 75.8082 148.406C75.7833 148.439 75.758 148.469 75.73 148.502C75.73 148.502 75.73 148.504 75.7253 148.507C75.6996 148.538 75.6744 148.565 75.6494 148.593C75.6213 148.626 75.594 148.654 75.566 148.684C75.541 148.711 75.513 148.742 75.4849 148.767C75.3794 148.876 75.2656 148.985 75.1366 149.103C75.0934 149.144 75.0455 149.186 74.9999 149.23C74.9317 149.29 74.8612 149.353 74.7883 149.419C74.7505 149.452 74.7124 149.487 74.6723 149.52C74.5531 149.626 74.4249 149.737 74.283 149.863C74.2328 149.909 74.1798 149.952 74.1237 149.994C74.1062 150.007 74.0887 150.022 74.0715 150.035C74.0509 150.053 74.0282 150.068 74.0055 150.083C73.9023 150.156 73.7932 150.227 73.6799 150.293C73.6238 150.326 73.5685 150.357 73.5108 150.386C73.4524 150.417 73.3947 150.447 73.334 150.475C73.283 150.5 73.2331 150.523 73.1821 150.545L73.1311 150.568C73.0809 150.591 73.0279 150.614 72.9749 150.634C72.8814 150.672 72.7882 150.707 72.6917 150.743C72.6114 150.77 72.5331 150.798 72.4497 150.823C72.2402 150.891 72.0224 150.952 71.8003 151.01H71.7928C71.7223 151.028 71.6494 151.045 71.5758 151.063C71.5637 151.066 71.5532 151.068 71.5408 151.071C71.399 151.104 71.2577 151.134 71.1135 151.164C70.8813 151.212 70.6414 151.258 70.3987 151.298C70.2468 151.324 70.0959 151.349 69.9418 151.374C69.9312 151.374 69.9212 151.376 69.9114 151.379C69.6686 151.417 69.4244 151.452 69.1762 151.488C69.1337 151.496 69.0928 151.501 69.048 151.505C68.9237 151.524 68.7999 151.539 68.6763 151.556C68.5123 151.579 68.3486 151.602 68.1839 151.621C68.1262 151.629 68.0655 151.637 68.007 151.647C67.5524 151.708 67.1033 151.771 66.6739 151.842C66.5882 151.854 66.5024 151.87 66.419 151.885C65.9266 151.971 65.4592 152.069 65.0373 152.19H65.0326C64.0879 152.461 63.3602 152.21 62.7996 151.617C62.4436 151.24 63.242 150.096 63.0091 149.49C62.9864 149.431 62.408 148.787 62.3885 148.724C62.0471 147.762 61.3071 147.805 61.1812 146.605C61.1606 146.398 61.141 146.188 61.1228 145.978C61.0674 145.269 61.037 144.562 61.0273 143.884C61.0219 143.583 61.0195 143.293 61.0195 143.01C61.0195 142.823 61.0195 142.641 61.0242 142.464C61.0499 140.717 61.1683 139.44 61.1683 139.44C62.4263 139.09 63.7497 138.738 65.0275 138.468C66.7295 138.107 68.3533 137.885 69.6341 137.993C70.3837 138.057 71.1367 138.077 71.887 138.057C72.0304 138.054 72.1769 138.049 72.321 138.041C72.6541 138.028 72.988 138.006 73.3211 137.976L73.69 137.609L74.5155 136.791L75.5969 135.72L75.6424 135.671L78.1025 133.234C78.1025 133.234 84.9817 138.756 84.6738 140.168L84.6813 140.166H84.6808Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M84.6807 140.166C84.6624 140.247 84.6199 140.345 84.554 140.454C84.5419 140.471 84.5314 140.489 84.5213 140.506C84.5061 140.529 84.4886 140.555 84.4703 140.58C84.4477 140.613 84.4225 140.646 84.3975 140.681C84.3465 140.749 84.2889 140.819 84.2261 140.895C84.1926 140.933 84.1602 140.971 84.1275 141.009C84.1048 141.034 84.0819 141.059 84.0569 141.087C84.0343 141.11 84.0114 141.135 83.9887 141.161C83.7535 141.411 83.4713 141.688 83.1527 141.982C83.1071 142.022 83.0646 142.065 83.0191 142.106C82.9758 142.143 82.9326 142.184 82.8878 142.224C82.8422 142.267 82.7943 142.307 82.7459 142.351C82.6352 142.449 82.5212 142.55 82.4051 142.651C82.3467 142.701 82.289 142.752 82.2283 142.803C81.6318 143.313 80.9832 143.841 80.3419 144.351C80.2259 144.442 80.109 144.535 79.9929 144.626C79.7911 144.785 79.5893 144.939 79.3949 145.094C79.2909 145.172 79.19 145.253 79.0891 145.329C78.8266 145.531 78.5738 145.725 78.3341 145.905C78.3189 145.917 78.3037 145.927 78.2886 145.94C77.4576 146.569 76.8035 147.044 76.5531 147.228C76.541 147.256 76.5281 147.281 76.5152 147.304C76.3816 147.549 76.2604 147.756 76.1464 147.935C76.1265 147.969 76.1062 147.996 76.0864 148.027C76.0431 148.09 76.003 148.148 75.962 148.206C75.9499 148.224 75.9371 148.241 75.9242 148.257C75.8871 148.308 75.8491 148.358 75.8081 148.406C75.7832 148.439 75.7579 148.469 75.7299 148.502C75.7299 148.502 75.7299 148.504 75.7252 148.507C75.6995 148.538 75.6743 148.565 75.6493 148.593C75.6212 148.626 75.5932 148.654 75.5659 148.684C75.5409 148.711 75.5129 148.742 75.4848 148.767C75.3793 148.876 75.2655 148.984 75.1365 149.103C75.0933 149.144 75.0454 149.186 74.9998 149.229C74.9316 149.29 74.8611 149.353 74.7882 149.418C74.7504 149.452 74.7123 149.487 74.6721 149.52C74.553 149.626 74.424 149.737 74.2829 149.863C74.232 149.908 74.1797 149.952 74.1236 149.995C74.1061 150.007 74.0886 150.022 74.0714 150.035C74.0508 150.053 74.0281 150.068 74.0054 150.083C73.9014 150.157 73.7931 150.227 73.6798 150.293C73.6237 150.326 73.5684 150.356 73.5107 150.387C73.4523 150.416 73.3946 150.447 73.3339 150.475C73.2829 150.5 73.2329 150.523 73.182 150.545L73.131 150.568C73.0808 150.591 73.0278 150.614 72.9748 150.634C72.8813 150.672 72.7881 150.707 72.6916 150.743C72.6113 150.771 72.533 150.798 72.4496 150.823C71.596 149.792 70.8357 148.848 70.1612 147.979C63.6332 139.58 65.0372 138.471 65.0372 138.471C66.7392 138.109 68.3629 137.887 69.6438 137.996C70.3934 138.059 71.1464 138.079 71.8967 138.059C72.0401 138.056 72.1873 138.052 72.3307 138.044C72.6646 138.031 72.9977 138.009 73.3308 137.978L73.6996 137.612L74.5259 136.794L75.6066 135.722L75.6521 135.675L78.1122 133.237C78.1122 133.237 84.9913 138.759 84.6835 140.171L84.6812 140.166L84.6807 140.166Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M84.6799 140.166C84.6624 140.246 84.6192 140.345 84.554 140.454C84.5412 140.471 84.5314 140.489 84.5206 140.507C84.5054 140.529 84.4879 140.554 84.4704 140.58C84.4477 140.613 84.4225 140.646 84.3968 140.681C84.3466 140.749 84.2881 140.82 84.2253 140.896C84.1926 140.934 84.1594 140.972 84.1267 141.009C84.1041 141.035 84.0812 141.06 84.0562 141.088C84.0336 141.11 84.0107 141.136 83.988 141.161C83.7535 141.411 83.4706 141.689 83.1527 141.982C83.1071 142.022 83.0639 142.065 83.0183 142.105C82.9751 142.143 82.9326 142.184 82.887 142.225C82.8415 142.267 82.7936 142.308 82.746 142.35C82.6345 142.449 82.5207 142.55 82.4046 142.651C82.347 142.702 82.2886 142.753 82.2278 142.803C81.6321 143.313 80.9835 143.841 80.3415 144.351C80.2254 144.442 80.1093 144.536 79.9932 144.627C79.7906 144.786 79.5888 144.942 79.3945 145.094C79.2912 145.172 79.1895 145.253 79.0886 145.329C78.8261 145.531 78.5733 145.726 78.3336 145.905C78.3185 145.917 78.3033 145.927 78.2881 145.94C77.4572 146.569 76.8031 147.044 76.5534 147.229C76.5405 147.256 76.5276 147.282 76.5155 147.305C76.3812 147.55 76.2599 147.757 76.1467 147.936C76.1261 147.969 76.1065 147.997 76.0859 148.027C76.0427 148.09 76.0025 148.149 75.9621 148.206C75.9492 148.224 75.9364 148.242 75.9243 148.257C75.8864 148.307 75.8483 148.358 75.8082 148.406C75.7824 148.439 75.7572 148.469 75.7299 148.502C75.7299 148.502 75.7299 148.505 75.7245 148.507C75.6995 148.537 75.6735 148.565 75.6486 148.593C75.6236 148.623 75.5955 148.653 75.5652 148.684C75.5402 148.712 75.5121 148.742 75.4848 148.767C75.3785 148.876 75.2648 148.984 75.1358 149.103C75.0902 149.144 75.0454 149.187 74.9999 149.229C74.9317 149.29 74.8611 149.354 74.7875 149.419C74.7497 149.452 74.7116 149.487 74.6714 149.52C74.553 149.626 74.424 149.738 74.2822 149.864C74.232 149.909 74.179 149.952 74.1237 149.995C74.1054 150.008 74.0879 150.023 74.0706 150.035C74.05 150.053 74.0274 150.068 74.0047 150.084C73.9015 150.157 73.7931 150.227 73.6791 150.293C73.6238 150.326 73.5676 150.356 73.51 150.387C73.4515 150.417 73.3939 150.447 73.3331 150.475C73.2822 150.5 73.2322 150.523 73.1813 150.546L73.1311 150.569C73.0801 150.591 73.0271 150.614 72.974 150.634C72.8806 150.672 72.7874 150.708 72.6917 150.743C72.6106 150.77 72.5323 150.798 72.4489 150.823C72.4239 150.831 72.3979 150.839 72.373 150.846C72.3048 150.867 72.2394 150.889 72.1689 150.909C72.0474 150.945 71.9238 150.977 71.8 151.01H71.7925C71.722 151.028 71.6484 151.046 71.5755 151.063C71.5626 151.066 71.5529 151.069 71.5397 151.071C71.3987 151.104 71.2566 151.134 71.1124 151.164C70.8802 151.213 70.6403 151.258 70.3976 151.298C70.2465 151.323 70.0949 151.349 69.9407 151.374C69.9309 151.374 69.9201 151.377 69.9103 151.379C69.6683 151.417 69.4233 151.453 69.1759 151.488C69.1327 151.496 69.0925 151.5 69.0469 151.506C68.9231 151.523 68.7996 151.538 68.6752 151.556C68.5113 151.578 68.3475 151.601 68.1836 151.622C68.1251 151.629 68.0644 151.637 68.006 151.647C67.5514 151.707 67.1022 151.77 66.6728 151.842C66.5871 151.854 66.5014 151.869 66.418 151.884L66.991 149.753C67.4919 149.53 67.9918 149.288 68.4963 149.015C69.0441 148.717 69.5973 148.378 70.1559 147.982C70.6581 147.623 71.1636 147.216 71.6736 146.744C75.6869 143.035 72.7496 139.059 71.8914 138.061C72.0347 138.059 72.1812 138.054 72.3254 138.046C72.6584 138.034 72.9923 138.011 73.3254 137.981L73.6943 137.614L74.5198 136.796L75.6012 135.725L75.6468 135.677L78.1069 133.239C78.1069 133.239 84.986 138.762 84.6781 140.174L84.6804 140.166L84.6799 140.166Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M84.6807 140.166C84.491 141.032 80.6218 144.14 78.2832 145.936C78.2202 140.229 74.5234 136.789 74.5234 136.789L75.6494 135.672L78.1095 133.235C78.1095 133.235 84.9886 138.756 84.6807 140.169V140.166Z' fill='%23CEB79B'/%3E%3Cpath d='M84.6809 140.166C84.5239 140.883 82.3925 142.72 80.3368 144.346C79.7185 139.117 75.0078 136.319 75.0078 136.319L75.6498 135.67L78.1091 133.232C78.1091 133.232 84.989 138.754 84.6812 140.166L84.6809 140.166Z' fill='%23CEB79B'/%3E%3Cpath d='M84.0159 143.073C83.3618 143.515 82.7358 144.005 82.1674 144.586C80.3766 140.882 77.1162 135.338 73.2773 136.035C74.6105 134.227 75.6713 132.645 76.5653 131.216L84.0182 143.073L84.0159 143.073Z' fill='%23676D54'/%3E%3Cpath d='M105.246 129.342C98.9974 136.222 89.0012 138.06 82.6778 144.976C82.578 144.774 82.4835 144.57 82.3774 144.372C81.2778 142.197 80.0347 140.052 78.4128 138.218C77.1669 136.836 75.444 135.391 73.457 135.725C79.0203 128.964 80.9614 121.452 86.936 115.253C91.6811 111.171 100.862 110.775 106.311 110.944C109.122 111.036 108.778 112.041 108.91 113.879C109.423 121.578 107.736 126.24 105.261 129.342H105.246L105.246 129.342Z' fill='%23979E87'/%3E%3Cpath opacity='0.5' d='M105.248 129.342C105.207 129.392 105.167 129.443 105.126 129.493L105.114 129.508C104.634 130.166 104.096 130.741 103.521 131.262C103.455 131.295 103.389 131.325 103.323 131.353C102.877 131.555 102.424 131.714 101.977 131.83C97.8155 132.909 93.9865 130.201 95.3577 123.597C96.3079 119.02 100.631 113.446 106.303 110.945C107.748 111.061 108.668 111.348 108.725 111.872C108.801 112.564 108.86 113.231 108.902 113.88C109.415 121.579 107.728 126.24 105.253 129.342H105.248Z' fill='%23AAB09E'/%3E%3Cpath d='M87.5841 128.447C87.0708 132.466 87.1987 136.584 88.1501 140.527C86.1933 141.837 84.3311 143.294 82.677 144.973C80.95 141.685 77.8451 135.254 73.4492 135.722C77.1907 130.916 79.5726 125.615 82.8263 120.485C85.4586 116.159 89.1211 112.618 94.7821 111.782C90.5163 116.269 88.3537 122.384 87.5843 128.447L87.5841 128.447Z' fill='%238D9280'/%3E%3Cg opacity='0.14'%3E%3Cpath d='M79.885 125.704C79.8675 126.853 79.8776 128.007 79.9002 129.159C79.9481 131.468 80.0693 133.797 80.4861 136.073C80.9103 138.4 81.5013 140.691 82.1987 142.949C82.3951 143.586 82.6 144.22 82.8095 144.851C82.767 144.894 82.7238 144.937 82.6806 144.98C80.8905 141.277 77.2841 135.027 73.4453 135.724C76.7255 131.273 78.3874 128.22 79.8904 125.469C79.8904 125.547 79.885 125.626 79.885 125.706V125.704Z' fill='%23474C2F'/%3E%3C/g%3E%3Cg opacity='0.14'%3E%3Cpath d='M91.7277 112.622C91.5236 112.785 91.3467 112.975 91.2353 113.209C91.1441 113.401 91.104 113.612 91.0311 113.811C90.9096 114.135 90.6267 114.349 90.4097 114.606C90.1495 114.918 89.8916 115.231 89.6396 115.547C89.3513 115.902 89.0614 116.337 88.647 116.554C88.4701 116.648 88.2753 116.708 88.0907 116.786C87.7218 116.943 87.3615 117.196 87.2348 117.575C87.1491 117.837 87.1869 118.123 87.1589 118.398C87.0935 119.04 86.5905 119.505 86.227 120C85.9493 120.379 85.6283 120.753 85.3886 121.154C85.1791 121.503 84.8128 121.657 84.4774 121.877C84.1814 122.069 83.8961 122.319 83.7929 122.655C83.7474 122.801 83.7368 122.961 83.7139 123.115C83.6387 123.607 83.4089 123.959 83.128 124.347C82.8024 124.799 82.4922 125.267 82.1766 125.726C81.8427 126.209 81.5171 126.818 81.0376 127.176C80.8576 127.31 80.6581 127.426 80.5245 127.604C80.3196 127.874 80.3021 128.227 80.2012 128.541C80.1353 128.743 80.0221 128.927 79.9008 129.106C79.8022 129.25 79.6959 129.389 79.6048 129.528C79.2285 130.094 78.8521 130.66 78.4789 131.228C78.3067 131.489 78.1381 131.749 77.9658 132.006C77.8073 132.251 77.6806 132.483 77.4765 132.663C77.4029 132.729 77.3195 132.787 77.2209 132.835C76.9812 132.956 76.7207 133.04 76.5115 133.206C76.2543 133.413 76.095 133.739 76.0926 134.07C76.0926 134.219 76.1199 134.368 76.1153 134.517C76.1024 134.845 75.9256 135.144 75.7588 135.416C75.7413 135.444 75.4507 135.934 75.4311 135.934C75.3976 135.921 75.3652 135.909 75.3325 135.896C75.3119 135.889 75.2947 135.881 75.2741 135.876L75.2543 135.868C75.2414 135.863 75.2262 135.858 75.2133 135.856C75.2056 135.853 75.1981 135.851 75.1907 135.848C75.186 135.848 75.1829 135.845 75.1786 135.843C75.1528 135.835 75.1307 135.828 75.108 135.82C75.1026 135.82 75.1006 135.818 75.0952 135.815C75.0625 135.807 75.0321 135.797 75.0017 135.79C74.9433 135.775 74.8856 135.759 74.8295 135.747C74.8151 135.744 74.7999 135.74 74.787 135.737C74.7719 135.734 74.759 135.729 74.7438 135.729C74.7134 135.722 74.6861 135.717 74.6558 135.712C74.6254 135.706 74.5973 135.702 74.5669 135.697C74.5397 135.691 74.5093 135.689 74.4812 135.684H74.466C74.3978 135.676 74.3294 135.672 74.2642 135.664C74.2264 135.661 74.1906 135.659 74.1556 135.659H74.0493C74.0037 135.659 73.9582 135.659 73.9157 135.661H73.8498C73.8498 135.661 73.84 135.666 73.8369 135.666C73.812 135.666 73.7867 135.669 73.7618 135.672C73.7466 135.672 73.7337 135.674 73.7185 135.676C73.6905 135.676 73.6601 135.682 73.6328 135.687C73.597 135.691 73.5623 135.697 73.5288 135.702H73.5213C73.4987 135.704 73.4758 135.709 73.4531 135.712C73.5571 135.573 73.658 135.434 73.7566 135.298C73.7718 135.275 73.7893 135.254 73.8045 135.235C73.875 135.138 73.9432 135.043 74.0117 134.946C74.0725 134.863 74.1332 134.777 74.1937 134.693C74.5268 134.229 74.8403 133.782 75.1376 133.347C75.1809 133.284 75.2241 133.224 75.2643 133.163C75.7665 132.426 76.2242 131.731 76.643 131.069C76.7014 130.978 76.7591 130.887 76.8144 130.799C76.8955 130.67 76.9738 130.544 77.052 130.419C77.1179 130.314 77.1833 130.208 77.2472 130.104C77.3504 129.935 77.4513 129.768 77.5499 129.604C77.6052 129.512 77.6585 129.422 77.7115 129.331C77.7875 129.205 77.8603 129.081 77.9339 128.957C78.1509 128.586 78.3605 128.224 78.56 127.874C78.6663 127.689 78.7672 127.505 78.8681 127.325C79.0449 127.012 79.214 126.704 79.3811 126.401C79.4364 126.3 79.4918 126.196 79.5479 126.095C79.664 125.881 79.7801 125.668 79.8962 125.456C80.8159 123.777 81.6741 122.208 82.8086 120.508C82.816 120.495 82.8238 120.485 82.8305 120.475C82.8639 120.427 82.8943 120.376 82.9247 120.328C83.6114 119.267 84.4401 118.092 85.5161 116.703C85.9251 116.176 86.3992 115.686 86.9274 115.239C88.2356 114.127 89.88 113.255 91.7313 112.609L91.7282 112.622H91.7277Z' fill='%23474C2F'/%3E%3C/g%3E%3Cpath opacity='0.14' d='M105.245 129.341C105.195 129.399 105.154 129.45 105.124 129.492L105.112 129.508C104.631 130.165 104.094 130.741 103.518 131.261C102.381 132.284 101.076 133.095 99.684 133.898C99.6134 133.939 99.5429 133.979 99.4724 134.019C98.3714 134.651 97.2522 135.264 96.1306 135.876C95.944 135.977 95.7574 136.081 95.57 136.182C95.3834 136.283 95.1967 136.386 95.0093 136.488C94.6556 136.682 94.2999 136.876 93.9462 137.071C93.7619 137.172 93.5753 137.275 93.3907 137.379C93.0249 137.583 92.6584 137.788 92.2949 137.996C92.1129 138.1 91.9307 138.205 91.7464 138.309C91.5649 138.415 91.3829 138.518 91.2037 138.627C91.0217 138.733 90.8426 138.839 90.6603 138.948C89.8098 139.455 88.9704 139.981 88.1526 140.529C88.0311 140.612 87.9075 140.694 87.7868 140.776C87.6653 140.858 87.5464 140.941 87.428 141.025C87.3801 141.057 87.3294 141.093 87.2815 141.128C87.2589 141.143 87.2336 141.161 87.211 141.179C87.16 141.211 87.1124 141.247 87.0645 141.282C86.8241 141.451 86.5873 141.626 86.352 141.8C86.2336 141.888 86.1167 141.977 86.0006 142.065C85.9932 142.07 85.9854 142.078 85.9757 142.083C85.867 142.166 85.7587 142.25 85.6523 142.335C85.5363 142.426 85.4225 142.517 85.3064 142.611C85.2031 142.694 85.0992 142.778 84.9959 142.864C84.9854 142.871 84.9753 142.882 84.9625 142.889C84.8495 142.983 84.7378 143.076 84.6248 143.172C84.5079 143.268 84.3949 143.369 84.278 143.47C84.1725 143.563 84.0664 143.657 83.9601 143.753C83.9472 143.763 83.9351 143.774 83.9251 143.786C83.9122 143.798 83.897 143.811 83.8842 143.823C83.8767 143.831 83.869 143.836 83.8615 143.844C83.8417 143.862 83.819 143.882 83.7984 143.902C83.7073 143.983 83.6193 144.069 83.5284 144.152C83.5078 144.17 83.4906 144.185 83.4731 144.203C83.4525 144.223 83.4298 144.243 83.41 144.264C83.331 144.339 83.2507 144.415 83.1724 144.491C83.1269 144.536 83.0782 144.579 83.0337 144.625C83.0131 144.645 82.9958 144.663 82.9752 144.683C82.9199 144.738 82.8646 144.794 82.8082 144.85C82.7657 144.893 82.7224 144.935 82.68 144.979C82.6617 144.941 82.6421 144.903 82.6246 144.865C82.6064 144.827 82.5889 144.789 82.5685 144.753C82.523 144.66 82.4774 144.567 82.4298 144.471C82.4146 144.441 82.3994 144.413 82.3842 144.382C82.3842 144.382 82.3842 144.377 82.3796 144.375C82.3461 144.306 82.3114 144.238 82.2756 144.167C82.255 144.13 82.2354 144.089 82.2148 144.049C82.2982 143.966 82.3819 143.884 82.4653 143.804C82.8766 143.405 83.306 143.023 83.7508 142.657C85.0665 141.575 86.5059 140.638 87.9812 139.785C88.0973 139.716 88.2134 139.651 88.3318 139.583C90.2083 138.515 92.141 137.552 94.0348 136.513C95.0145 135.978 95.9721 135.404 96.9464 134.859C97.9768 134.283 99.0149 133.717 100.028 133.103C100.689 132.701 101.346 132.285 101.975 131.833C102.308 131.595 102.631 131.346 102.947 131.085C103.788 130.39 105.405 128.372 106.044 127.49C106.286 127.154 107.637 124.019 108.256 120.72C108.574 119.01 108.675 114.213 108.9 113.882C109.413 121.579 107.726 126.242 105.251 129.344L105.245 129.342L105.245 129.341Z' fill='%23474C2F'/%3E%3Cg opacity='0.14'%3E%3Cpath d='M78.0233 133.838C78.0233 134.195 77.829 134.685 77.4277 134.766C77.0256 134.849 76.3411 134.672 76.5687 134.235C76.649 134.079 76.8639 133.887 76.9679 133.745C77.084 133.584 77.1038 133.273 77.2858 133.182C77.6395 133.124 78.0287 133.424 78.0257 133.836L78.0233 133.839V133.838Z' fill='%23474C2F'/%3E%3C/g%3E%3Cg opacity='0.14'%3E%3Cpath d='M92.023 114.17C91.7499 113.981 91.7453 113.7 91.803 113.349C91.8387 113.132 92.0153 113.182 92.1567 113.016C92.4321 112.692 92.8563 112.126 93.2857 112.351C94.5058 112.985 93.3258 115.076 92.0254 114.173L92.023 114.17Z' fill='%23474C2F'/%3E%3C/g%3E%3Cg opacity='0.14'%3E%3Cpath d='M87.6335 118.612C87.5068 118.467 87.7975 118.409 87.8026 118.225C87.8124 117.738 88.138 117.335 88.4392 116.985C89.8658 116.969 88.649 119.786 87.6335 118.612Z' fill='%23474C2F'/%3E%3C/g%3E%3Cg opacity='0.14'%3E%3Cpath d='M84.785 122.008C84.9345 121.915 85.3328 121.968 85.505 122.084C86.3815 122.67 85.108 124.196 84.5451 124.004C84.4236 123.964 84.1458 123.894 84.1407 123.666C84.136 123.426 84.429 123.226 84.5353 123.019C84.6136 122.865 84.697 122.713 84.75 122.549C84.787 122.436 84.8282 122.256 84.9291 122.17C84.9369 122.19 84.7621 122.029 84.785 122.014V122.008V122.008Z' fill='%23474C2F'/%3E%3C/g%3E%3Cg opacity='0.14'%3E%3Cpath d='M81.723 127.492C82.0865 127.566 82.5563 127.987 82.3969 128.437C82.2376 128.882 81.6268 129.493 81.0965 129.342C80.6442 129.213 80.9781 128.521 81.1094 128.21C81.1701 128.063 81.3817 127.536 81.6095 127.553C81.6142 127.559 81.7127 127.492 81.7202 127.492H81.723Z' fill='%23474C2F'/%3E%3C/g%3E%3Cpath d='M77.7018 133.388C78.0349 133.906 77.6312 135.27 76.6183 134.605C75.7647 134.045 77.2222 132.638 77.7018 133.388Z' fill='%23676D54'/%3E%3Cpath d='M77.4558 133.196C76.8929 133.328 76.2692 134.199 76.8952 134.611C77.0242 134.697 77.1426 134.748 77.2517 134.773C77.0772 134.813 76.8648 134.773 76.6174 134.609C75.883 134.126 76.8648 133.014 77.4558 133.196Z' fill='%23474C2F'/%3E%3Cpath d='M82.1286 127.929C82.2023 128.101 82.1968 128.31 82.1189 128.508C81.9649 128.894 81.1286 129.627 80.8184 129.131C80.1012 127.992 81.8692 126.833 82.1286 127.929Z' fill='%23676D54'/%3E%3Cpath d='M81.6814 127.492C81.1813 127.694 80.7094 128.389 81.1434 129.076C81.2042 129.172 81.2822 129.22 81.3733 129.235C81.1563 129.331 80.946 129.331 80.8224 129.131C80.295 128.295 81.1107 127.446 81.6837 127.492H81.6814Z' fill='%23474C2F'/%3E%3Cpath d='M85.1342 121.968C85.2958 121.99 85.4498 122.169 85.4899 122.349C85.6114 122.892 85.1143 123.708 84.5506 123.867C84.3336 123.928 84.0788 123.802 84.008 123.504C83.8541 122.842 84.3617 121.854 85.1342 121.965V121.968V121.968Z' fill='%23676D54'/%3E%3Cpath d='M85.1268 121.967C84.541 122.121 84.1899 122.922 84.3217 123.488C84.3664 123.677 84.4856 123.798 84.6221 123.843C84.5994 123.853 84.5734 123.861 84.5507 123.868C84.3337 123.929 84.0789 123.803 84.0081 123.505C83.8542 122.843 84.3587 121.863 85.1266 121.967L85.1268 121.967Z' fill='%23474C2F'/%3E%3Cpath d='M88.2592 116.981C88.729 116.859 89.0446 117.568 88.8708 117.951C88.7517 118.325 88.2721 118.714 87.9815 118.727C87.7742 118.737 87.5822 118.598 87.4762 118.416C87.4489 118.378 87.426 118.332 87.4108 118.284C87.2818 117.832 87.4486 117.423 87.784 117.216C87.9228 117.105 88.0844 117.024 88.259 116.979L88.2592 116.981Z' fill='%23676D54'/%3E%3Cpath d='M88.259 116.981C88.3676 116.953 88.4685 116.971 88.557 117.019C88.5465 117.019 88.5365 117.019 88.529 117.024C88.3552 117.069 88.1905 117.15 88.0548 117.262C87.7187 117.466 87.5539 117.878 87.6808 118.327C87.6929 118.376 87.7158 118.418 87.7462 118.458C87.8121 118.572 87.9109 118.669 88.027 118.722C88.0118 118.722 87.9967 118.726 87.9815 118.726C87.7742 118.737 87.5822 118.598 87.4762 118.416C87.4489 118.378 87.426 118.332 87.4108 118.285C87.2818 117.832 87.4486 117.423 87.784 117.216C87.9228 117.105 88.0844 117.024 88.259 116.979V116.981V116.981Z' fill='%23474C2F'/%3E%3Cpath d='M92.9447 112.305C93.4523 112.222 93.5609 112.636 93.4469 113.113C93.0507 114.776 91.7047 114.404 91.707 113.669C91.707 113.156 92.1364 112.442 92.947 112.307L92.9447 112.305Z' fill='%23676D54'/%3E%3Cpath d='M92.9428 112.305C93.0947 112.28 93.2108 112.3 93.2965 112.353C93.2715 112.353 93.2443 112.358 93.2162 112.363C92.4059 112.497 91.9786 113.212 91.9762 113.725C91.9762 113.982 92.1379 114.192 92.3678 114.291C92.0066 114.285 91.7031 114.018 91.7031 113.669C91.7031 113.156 92.1325 112.442 92.9431 112.307L92.9428 112.305Z' fill='%23474C2F'/%3E%3Cpath d='M62.6881 142.802C62.5766 142.971 62.4629 143.123 62.3542 143.254C62.1501 143.507 61.9627 143.686 61.8618 143.756C61.7586 143.827 61.39 143.769 60.8792 143.698C60.4527 143.64 59.9278 143.575 59.3747 143.572H59.3193C57.7403 143.567 55.907 143.752 55.1672 143.86C55.1338 143.865 55.1042 143.868 55.0784 143.873C55.0056 143.883 54.9448 143.893 54.9016 143.903C54.4645 143.994 54.0251 144.254 53.6063 144.522C53.3589 144.681 53.1162 144.843 52.8863 144.974C52.7527 145.05 52.6389 145.12 52.5403 145.183C52.4979 145.211 52.4569 145.236 52.4196 145.262C52.2778 145.358 52.1668 145.439 52.0608 145.512C52.051 145.52 52.0402 145.527 52.0281 145.535C51.9825 145.567 51.9369 145.598 51.8893 145.628C51.8764 145.636 51.8636 145.643 51.8515 145.651C51.7802 145.694 51.7097 145.734 51.6263 145.774C51.6013 145.787 51.5761 145.8 51.548 145.81C51.4242 145.866 51.278 145.924 51.0882 145.985C51.0556 145.995 51.0208 146.005 50.985 146.017C50.7019 146.106 50.3384 146.202 49.8408 146.321C47.6389 146.846 47.4976 145.734 47.8232 145.113C47.8309 145.101 47.8384 145.088 47.8459 145.073C47.8536 145.06 47.8634 145.048 47.8708 145.033C48.1841 144.565 49.2145 143.815 49.8818 143.345C49.9121 143.324 49.9394 143.305 49.9675 143.284C50.1822 143.135 50.3484 143.019 50.4244 142.961C50.6519 142.792 52.0687 141.746 53.0711 141.046C53.1416 140.998 53.2099 140.95 53.276 140.905C53.3368 140.861 53.3975 140.821 53.4529 140.783C53.4755 140.768 53.4953 140.753 53.5159 140.741C53.5713 140.703 53.6246 140.667 53.6753 140.634C53.8416 140.526 53.9682 140.45 54.0333 140.42C54.0992 140.389 54.1852 140.361 54.2882 140.334C54.3088 140.327 54.3314 140.321 54.352 140.316L54.4174 140.301C54.4704 140.288 54.526 140.276 54.5845 140.263C54.6679 140.245 54.7582 140.228 54.8524 140.212C55.064 140.175 55.2918 140.142 55.5217 140.116C55.8723 140.074 56.226 140.043 56.5143 140.028C57.0242 140.002 57.5825 139.952 58.1435 139.889C58.969 139.793 59.7976 139.669 60.4918 139.556C61.4965 139.392 62.2142 139.25 62.2142 139.25C63.866 140.238 63.3401 141.794 62.6786 142.804L62.6891 142.802H62.6881Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M61.9509 141.758C60.8847 142.855 60.8846 143.481 60.8772 143.698C60.8749 143.784 60.8695 143.807 60.7989 143.769C60.5742 143.647 59.9832 143.602 59.2586 143.6C57.8008 143.594 55.7961 143.767 55.0784 143.873C55.0056 143.882 54.9448 143.892 54.9016 143.903C54.4645 143.993 54.0251 144.254 53.6063 144.521C53.3589 144.681 53.1162 144.842 52.8863 144.974C52.7527 145.05 52.6389 145.12 52.5403 145.183C52.4979 145.211 52.4569 145.236 52.4196 145.262C52.2778 145.358 52.1668 145.439 52.0608 145.512C52.051 145.519 52.0402 145.527 52.0281 145.535C51.9825 145.567 51.937 145.598 51.8893 145.628C51.8765 145.635 51.8636 145.643 51.8515 145.651C51.7802 145.694 51.7097 145.734 51.6263 145.774C51.6013 145.787 51.5761 145.8 51.548 145.81C51.4242 145.865 51.278 145.924 51.0883 145.984C51.0556 145.994 51.0208 146.004 50.985 146.017C50.7019 146.106 50.3384 146.201 49.8408 146.321C47.6389 146.846 47.4976 145.734 47.8232 145.113C47.8309 145.101 47.8384 145.088 47.8459 145.072C48.1061 144.656 49.1942 143.839 49.8818 143.345C49.9121 143.324 49.9394 143.305 49.9675 143.284C49.8635 143.647 50.0457 144.082 50.7019 144.226C51.5024 144.403 53.3689 142.943 53.806 142.187C54.2431 141.432 53.0709 141.045 53.0709 141.045C53.1414 140.998 53.2096 140.95 53.2758 140.904C53.3365 140.861 53.3973 140.821 53.4526 140.783C53.4753 140.768 53.4951 140.753 53.5157 140.74C53.571 140.703 53.6243 140.667 53.675 140.634C53.8413 140.526 53.968 140.45 54.0331 140.419C54.099 140.389 54.1849 140.361 54.2879 140.334C54.3085 140.326 54.3312 140.321 54.3518 140.315L54.4171 140.3C54.4702 140.288 54.5258 140.275 54.5842 140.262C54.6676 140.245 54.758 140.227 54.8522 140.212C55.0638 140.174 55.2916 140.142 55.5214 140.116C55.5214 140.116 57.6801 143.193 61.9439 141.758H61.9514H61.9509Z' fill='%23CEB79B'/%3E%3Cpath d='M48.1119 145.865C48.7941 145.992 49.6781 145.428 49.8343 145.312C50.4861 144.822 49.7408 144.259 49.4078 143.761C50.2734 144.42 50.536 145.082 50.2431 145.325C49.781 145.709 48.4911 146.199 48.1094 145.868L48.1119 145.865Z' fill='%23CEB79B'/%3E%3Cpath d='M60.7997 142.851C60.7997 142.851 60.1958 143.179 59.3224 143.571C59.3018 143.578 59.2823 143.588 59.2617 143.596C57.8039 143.591 55.7992 143.763 55.0823 143.869C55.0087 143.879 54.9479 143.889 54.9055 143.899C54.4684 143.991 54.029 144.251 53.6094 144.518C53.6094 144.518 54.0663 143.46 54.5443 143.462C56.0641 143.472 60.7974 142.848 60.7974 142.848L60.7997 142.851V142.851Z' fill='%23CEB79B'/%3E%3Cpath d='M63.9619 144.213C63.8937 144.958 63.5271 145.68 63.0826 145.88C63.0628 145.89 63.0424 145.897 63.0195 145.905H63.0097C61.8223 146.307 57.6048 148.077 56.0773 148.537C55.198 148.803 54.5187 149.177 53.9907 149.489C53.6023 149.722 53.2965 149.924 53.0543 150.033C52.4828 150.283 50.4932 151.564 48.5691 151.99C46.647 152.418 46.682 151.066 46.8967 150.424C46.899 150.414 46.9044 150.401 46.9095 150.391C46.9118 150.382 46.9172 150.371 46.9216 150.361C46.927 150.348 46.9345 150.338 46.9422 150.328C46.9597 150.298 46.9801 150.268 47.0053 150.234C47.0181 150.217 47.0333 150.197 47.0485 150.179V150.176C47.0637 150.159 47.0789 150.141 47.0941 150.123C47.1268 150.086 47.1646 150.048 47.2027 150.007C47.2148 149.992 47.2331 149.977 47.2483 149.962C47.7505 149.466 48.68 148.8 49.4708 148.282C49.9504 147.969 50.3797 147.708 50.6294 147.58C51.2562 147.254 52.8975 146.107 54.0342 145.465C54.3856 145.266 54.6883 145.117 54.8978 145.053C55.848 144.771 61.3051 142.47 61.3051 142.47C63.4548 141.85 64.0633 143.057 63.9549 144.215L63.9624 144.212L63.9619 144.213Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M64.0327 144.172C63.9871 144.902 63.5706 145.668 63.0826 145.88C63.0627 145.889 63.0424 145.897 63.0195 145.905H63.0097C61.8223 146.307 57.6048 148.077 56.0773 148.537C55.198 148.802 54.5187 149.176 53.9907 149.489C53.6023 149.722 53.2965 149.924 53.0542 150.032C52.4828 150.283 50.4932 151.564 48.5691 151.99C46.647 152.417 46.682 151.066 46.8967 150.424C46.899 150.414 46.9044 150.401 46.9095 150.391C46.9118 150.381 46.9172 150.371 46.9216 150.361C46.927 150.348 46.9345 150.338 46.9422 150.328C46.9597 150.298 46.9801 150.267 47.0053 150.235C47.0181 150.216 47.0333 150.197 47.0485 150.179V150.176C47.0637 150.159 47.0789 150.141 47.0941 150.123C47.1268 150.085 47.1646 150.047 47.2027 150.007C47.2148 149.992 47.2331 149.977 47.2483 149.962C47.7505 149.466 48.68 148.8 49.4708 148.282C49.4708 148.282 49.9277 149.196 51.0642 148.931C52.2009 148.663 54.6502 147.198 54.7336 146.766C54.8119 146.362 54.688 145.48 54.0363 145.465C53.9907 145.465 53.9408 145.465 53.8875 145.475C54.2965 145.246 54.6554 145.083 54.9027 145.054C55.0286 145.039 55.2389 144.988 55.5113 144.91C55.5113 144.91 59.9084 146.564 63.9588 144.215C63.9815 144.202 64.0044 144.19 64.0293 144.174L64.0324 144.172L64.0327 144.172Z' fill='%23CEB79B'/%3E%3Cpath d='M47.4221 151.359C48.1444 151.493 49.0786 150.897 49.2454 150.773C49.9345 150.253 49.1468 149.659 48.7954 149.131C49.7129 149.831 49.9906 150.528 49.6794 150.785C49.1924 151.192 47.8234 151.71 47.4219 151.361V151.359L47.4221 151.359Z' fill='%23CEB79B'/%3E%3Cpath d='M63.4962 144.978L63.0104 145.908C61.8237 146.307 57.6063 148.077 56.078 148.537C55.1994 148.803 54.5201 149.177 53.9922 149.489C54.028 149.444 55.0659 147.943 55.644 147.853C57.9015 147.499 63.3824 145.018 63.4962 144.978Z' fill='%23CEB79B'/%3E%3Cpath d='M66.1102 147.922C65.9454 148.372 65.7915 148.715 65.7284 148.834C65.7238 148.841 65.7207 148.849 65.7155 148.856C65.428 149.347 63.0614 149.432 61.6476 150.014C60.2332 150.595 58.3569 151.711 57.6343 152.07C57.3383 152.216 56.9171 152.522 56.3132 152.906C55.4368 153.464 54.1765 154.181 52.3813 154.798C49.3507 155.836 49.8985 153.845 50.2748 153.325C50.2923 153.302 50.315 153.274 50.3454 153.244C50.3531 153.237 50.3582 153.229 50.368 153.222C50.444 153.148 50.5554 153.055 50.6944 152.946C50.7142 152.931 50.7346 152.914 50.7552 152.898C50.7879 152.873 50.8206 152.847 50.853 152.822C50.8908 152.792 50.932 152.762 50.9745 152.731C51.0255 152.693 51.0808 152.655 51.1361 152.612C51.1915 152.572 51.2499 152.53 51.3076 152.489C51.3076 152.489 51.313 152.486 51.315 152.484C51.3984 152.42 51.4873 152.36 51.5776 152.297C51.6739 152.228 51.7779 152.158 51.8788 152.087C51.9668 152.024 52.0579 151.961 52.1511 151.9C52.1967 151.867 52.2446 151.837 52.2922 151.804C52.3635 151.756 52.434 151.709 52.5069 151.658C52.5251 151.648 52.5403 151.635 52.5576 151.625C53.7649 150.809 55.0782 149.968 55.5101 149.695C55.8911 149.455 56.1361 149.276 56.391 149.096C56.687 148.886 56.9921 148.679 57.5277 148.374C57.7401 148.255 58.0003 148.111 58.2827 147.955C59.543 147.265 61.2785 146.351 61.2785 146.351C67.8194 141.538 66.8572 145.857 66.1045 147.924L66.1099 147.921L66.1102 147.922Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M65.8247 147.958C65.8368 148.37 65.7912 148.695 65.7284 148.832C65.7238 148.84 65.7207 148.847 65.7155 148.855C65.428 149.345 63.0613 149.431 61.6476 150.012C60.2331 150.592 58.3568 151.709 57.6343 152.067C57.3383 152.214 56.9171 152.519 56.3133 152.903C55.4368 153.462 54.1765 154.18 52.3813 154.796C49.3507 155.834 49.8985 153.844 50.2748 153.323C50.2923 153.3 50.315 153.272 50.3454 153.242C50.3531 153.234 50.3582 153.227 50.368 153.219C50.444 153.146 50.5554 153.053 50.6944 152.944C50.7142 152.929 50.7346 152.911 50.7552 152.896C50.7879 152.871 50.8205 152.846 50.853 152.82C50.8908 152.79 50.932 152.76 50.9745 152.73C51.0254 152.692 51.0808 152.654 51.1361 152.61C51.1915 152.57 51.2499 152.53 51.3076 152.487C51.3076 152.487 51.313 152.484 51.3151 152.481C51.3985 152.421 51.4872 152.358 51.5776 152.295C51.6739 152.227 51.7779 152.156 51.8788 152.085C51.9668 152.024 52.0579 151.961 52.1511 151.898C52.1967 151.865 52.2446 151.835 52.2922 151.802C52.3635 151.754 52.434 151.706 52.5069 151.656C52.5251 151.645 52.5403 151.633 52.5576 151.622C52.5576 151.622 52.7548 152.982 53.7322 152.737C54.7096 152.492 57.0677 151.304 57.3303 150.632C57.4593 150.304 57.1035 149.445 56.391 149.094C56.687 148.885 56.992 148.678 57.5277 148.372C57.7401 148.253 58.0003 148.109 58.2827 147.952C59.0635 148.339 61.8165 149.372 65.8213 147.184L65.791 147.591C65.8038 147.72 65.8136 147.842 65.8167 147.958H65.8242L65.8247 147.958Z' fill='%23CEB79B'/%3E%3Cpath d='M50.582 154.647C51.2513 154.781 52.1278 154.24 52.2841 154.124C52.9307 153.649 52.2081 153.089 51.8848 152.593C52.7263 153.253 52.976 153.907 52.6854 154.139C52.2264 154.51 50.9506 154.975 50.582 154.644V154.647Z' fill='%23CEB79B'/%3E%3Cpath d='M66.1086 147.923C65.9447 148.373 65.7907 148.716 65.7277 148.835C65.7223 148.842 65.7202 148.85 65.7148 148.857C65.4273 149.348 63.0606 149.433 61.6461 150.014C60.2316 150.595 58.3553 151.712 57.6328 152.07C57.3375 152.216 56.9156 152.522 56.3125 152.906C56.3429 152.856 57.3095 151.211 57.6706 151.138C58.0349 151.064 59.7065 150.375 60.0623 150.163C60.4211 149.953 64.4617 148.246 64.4617 148.246C64.4617 148.246 65.1742 148.059 65.8206 147.958C65.9161 147.943 66.0126 147.93 66.1058 147.92L66.1081 147.922L66.1086 147.923Z' fill='%23CEB79B'/%3E%3Cpath d='M67.0987 150.804C67.0835 150.889 67.0609 150.968 67.0328 151.041C66.9896 151.157 66.9319 151.261 66.8614 151.349C66.7528 151.486 66.6066 151.585 66.4266 151.63C66.404 151.638 66.3787 151.642 66.3561 151.645C65.9872 151.711 65.5275 151.91 65.0381 152.186C64.9038 152.259 64.7702 152.34 64.6337 152.423C64.1967 152.691 63.7475 153.001 63.3256 153.317C62.6033 153.856 61.9566 154.401 61.5857 154.755C61.4186 154.913 61.3079 155.033 61.2701 155.096C61.1844 155.238 60.8459 155.51 60.3764 155.848C59.5122 156.467 58.1994 157.298 57.2017 157.889C56.0902 158.547 55.345 158.059 55.2363 157.395C55.1939 157.134 55.2492 156.849 55.4183 156.591C55.4889 156.485 55.5777 156.371 55.6809 156.252C55.6961 156.235 55.7113 156.217 55.7264 156.202C55.7872 156.133 55.8554 156.063 55.9259 155.992L55.9844 155.934C56.0518 155.866 56.1203 155.798 56.196 155.729C56.2318 155.696 56.2696 155.661 56.3074 155.625L56.4204 155.522C56.4964 155.452 56.5775 155.38 56.658 155.312C56.7371 155.244 56.8174 155.176 56.8956 155.105C56.8956 155.105 56.8987 155.102 56.901 155.1C56.9793 155.032 57.0604 154.963 57.1386 154.895L57.1584 154.88C57.767 154.367 58.3657 153.887 58.679 153.572C59.0455 153.2 59.4417 152.809 59.818 152.455C59.9244 152.356 60.0276 152.261 60.1285 152.17C60.1619 152.139 60.1967 152.109 60.2294 152.082C60.2477 152.066 60.2628 152.051 60.278 152.038C60.3107 152.008 60.3463 151.98 60.3789 151.95C60.4593 151.882 60.5352 151.816 60.6088 151.755C60.6848 151.692 60.8032 151.584 60.9496 151.445C61.2629 151.149 61.7023 150.712 62.1515 150.282C62.9876 149.484 64.2049 148.469 64.2049 148.469C64.7982 147.973 65.5313 147.355 66.0943 147.312C66.7788 147.262 66.8166 149.219 67.0032 149.75V149.757C67.0161 149.792 67.0259 149.828 67.0359 149.863C67.0738 149.989 67.1018 150.116 67.117 150.24C67.1193 150.262 67.1224 150.285 67.1245 150.308V150.313C67.1397 150.485 67.1319 150.651 67.1039 150.803H67.0992L67.0987 150.804Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M67.1283 150.722C67.1185 150.751 67.1108 150.775 67.101 150.801C67.0859 150.887 67.0632 150.965 67.0351 151.038C66.9927 151.155 66.9342 151.258 66.8637 151.347C66.6261 151.784 66.4243 151.877 66.4243 151.877C66.0382 151.946 65.6693 152.019 65.3233 152.107C65.2271 152.107 65.1313 152.132 65.0381 152.182C64.9038 152.256 64.7702 152.337 64.6337 152.42C64.1966 152.688 63.7475 152.999 63.3256 153.315C62.6033 153.853 61.9566 154.398 61.5857 154.752C61.4186 154.911 61.3079 155.029 61.2701 155.093C61.1844 155.234 60.8459 155.507 60.3764 155.846C59.512 156.464 58.1994 157.296 57.2017 157.887C56.0902 158.543 55.3457 158.056 55.2363 157.391C55.1939 157.131 55.2492 156.846 55.4183 156.588C55.4888 156.482 55.5777 156.368 55.6809 156.249C55.6961 156.232 55.7113 156.214 55.7264 156.199C55.7872 156.131 55.8554 156.06 55.9259 155.989C55.9465 155.969 55.9638 155.951 55.9844 155.931C56.0518 155.863 56.1203 155.794 56.196 155.726C56.2317 155.693 56.2696 155.658 56.3074 155.623L56.4204 155.519C56.4964 155.448 56.5775 155.378 56.658 155.309C56.7363 155.241 56.8174 155.173 56.8956 155.102L56.901 155.097C56.9793 155.028 57.0596 154.96 57.1386 154.893L57.1584 154.877C57.1584 154.877 57.9513 155.642 58.4893 155.254C59.0273 154.864 60.5555 153.667 60.5251 153.247C60.4948 152.829 60.2778 152.553 59.818 152.452C59.9244 152.354 60.0276 152.257 60.1285 152.166C60.1619 152.137 60.1967 152.106 60.2301 152.078C60.2477 152.063 60.2628 152.048 60.278 152.035C60.3107 152.005 60.3462 151.977 60.3789 151.947C60.4592 151.879 60.5352 151.813 60.6088 151.753C60.6847 151.689 60.8032 151.58 60.9496 151.441C60.9746 151.454 61.0006 151.464 61.0307 151.474C61.0307 151.474 64.046 151.316 66.2982 150.158C66.5432 150.035 66.7785 149.896 67.0009 149.746V149.754C67.013 149.79 67.0236 149.824 67.0336 149.86C67.0663 149.976 67.0943 150.103 67.1139 150.236C67.1245 150.295 67.1322 150.353 67.1373 150.413C67.1373 150.428 67.1397 150.444 67.142 150.457V150.502C67.142 150.502 67.1474 150.507 67.1474 150.51C67.1528 150.596 67.1474 150.671 67.1322 150.721H67.1291L67.1283 150.722Z' fill='%23CEB79B'/%3E%3Cpath d='M55.8906 157.636C56.4894 157.631 57.1458 157.005 57.2595 156.878C57.7314 156.353 57.0068 156.002 56.6405 155.633C57.4843 156.05 57.8174 156.566 57.6109 156.821C57.2825 157.222 56.2693 157.853 55.8906 157.636Z' fill='%23CEB79B'/%3E%3Cpath d='M63.3258 153.317C62.6035 153.855 61.9569 154.403 61.5859 154.754C61.6361 154.673 62.3615 153.491 62.3615 152.907C62.3615 152.324 63.3487 152.953 63.3237 153.317H63.3258Z' fill='%23CEB79B'/%3E%3Cpath d='M66.4288 151.628C66.4288 151.704 66.4288 151.788 66.4234 151.879C66.0373 151.947 65.6684 152.02 65.3224 152.109C65.2269 152.109 65.1304 152.134 65.0372 152.185C64.9036 152.258 64.7692 152.339 64.6328 152.422C64.6328 152.422 66.4007 149.621 66.4288 151.626V151.629V151.628Z' fill='%23CEB79B'/%3E%3Cpath d='M75.1847 149.05C74.9419 149.276 74.6513 149.528 74.275 149.861C73.9169 150.177 73.4698 150.43 72.957 150.635C72.957 150.635 74.7857 146.994 72.957 143.463C74.0709 144.622 75.2629 146.002 75.1819 149.05H75.185H75.1847Z' fill='%23C4AD94'/%3E%3Cpath d='M75.1919 139.959C75.1798 140.388 72.8942 138.511 72.3281 138.039C72.6612 138.026 72.9951 138.003 73.3282 137.973L73.697 137.607C74.9573 138.082 75.2047 139.466 75.1919 139.959Z' fill='%23C4AD94'/%3E%3Cpath d='M11.7834 72.5771C5.81195 70.3299 3.86719 67.3315 3.86719 67.3315C3.86719 67.3315 5.41424 65.8933 8.17423 64.4137C11.0351 62.8785 15.1942 61.2959 20.2812 61.2167C20.2843 61.2172 20.2848 61.2143 20.2848 61.2143C21.4789 61.1948 22.7271 61.2589 24.0232 61.4275C36.1404 62.9949 17.7547 74.8246 11.7832 72.5774L11.7834 72.5771Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.4' d='M11.7834 72.5771C5.81195 70.3299 3.86719 67.3315 3.86719 67.3315C3.86719 67.3315 5.41424 65.8933 8.17423 64.4137C11.0351 62.8785 15.1942 61.2959 20.2812 61.2167C20.2843 61.2172 20.2848 61.2143 20.2848 61.2143C21.4789 61.1948 22.7271 61.2589 24.0232 61.4275C36.1404 62.9949 17.7547 74.8246 11.7832 72.5774L11.7834 72.5771Z' fill='%233B754B'/%3E%3Cpath d='M20.2827 61.217C18.7151 61.58 16.4841 62.6351 13.4461 64.4677C10.3278 66.3476 8.64814 64.9369 8.17578 64.4141C11.0367 62.8789 15.1957 61.2963 20.2827 61.217Z' fill='%23459562'/%3E%3Cpath opacity='0.3' d='M49.9688 39.2689C50.0613 39.1469 50.1264 39.0818 50.1264 39.0818C50.1179 39.1323 50.1118 39.1828 50.1053 39.233L49.9688 39.2689Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M50.3097 41.1862C50.2994 41.2745 50.296 41.3527 50.286 41.4379C50.286 41.4446 50.286 41.4516 50.2827 41.4583C50.269 41.6318 50.2487 41.7916 50.2247 41.9445C50.2214 41.9819 50.218 42.0261 50.2111 42.0635C50.2008 42.1417 50.1874 42.2164 50.1805 42.2879C50.1738 42.3219 50.1702 42.3525 50.1635 42.3832V42.4002C50.1601 42.4035 50.1601 42.4105 50.1601 42.4105C50.1601 42.4208 50.1601 42.4241 50.1568 42.4341C50.1501 42.4751 50.1365 42.526 50.1262 42.5837C50.0888 42.7232 50.0446 42.8898 49.9866 43.0633C49.922 43.2674 49.8471 43.4782 49.7825 43.6684C49.9287 44.0968 50.0783 44.5084 50.2278 44.9061C50.1632 44.9877 50.1053 45.0693 50.051 45.1542C50 45.2325 49.9558 45.3071 49.9151 45.3854C49.8438 45.5146 49.7858 45.6472 49.7485 45.7731C49.7418 45.7867 49.7382 45.8003 49.7315 45.8173C49.6296 46.1574 49.3712 46.5381 49.0684 46.8511C48.742 47.1809 48.3647 47.4293 48.0347 47.4903C47.8648 47.5175 47.7083 47.497 47.5824 47.402C47.5824 47.3986 47.579 47.3986 47.579 47.3986C47.5757 47.3986 47.5688 47.3919 47.5654 47.3883C47.5621 47.3816 47.5587 47.3816 47.5551 47.378C47.5551 47.3747 47.5518 47.3747 47.5518 47.3747C47.4871 47.3067 47.4158 47.1469 47.3409 46.9191C47.3173 46.8478 47.2933 46.7762 47.273 46.6912V46.6879H47.2696C47.2287 46.5247 47.1847 46.3412 47.1371 46.1337V46.1303C47.0861 45.8855 47.0351 45.6168 46.9875 45.3244C46.9263 44.9504 46.8686 44.5424 46.821 44.1138V44.1071C46.8073 44.0018 46.7903 43.8826 46.7836 43.7704C46.7836 43.7637 46.7803 43.7567 46.7803 43.75C46.753 43.5256 46.736 43.2944 46.7157 43.0666C46.685 42.6756 46.6647 42.2879 46.6511 41.907V41.8866C46.6408 41.4583 46.6408 41.0467 46.6647 40.666V40.6183C46.675 40.4891 46.6784 40.3632 46.692 40.2477C46.692 40.241 46.692 40.2374 46.6987 40.234C46.702 40.1627 46.709 40.0981 46.7157 40.0368C46.7293 39.8906 46.7497 39.7511 46.777 39.6255V39.6221C46.7872 39.5575 46.8006 39.4929 46.8143 39.4317C46.8246 39.3943 46.8279 39.3568 46.838 39.3228V39.3161C46.8516 39.2718 46.8616 39.2278 46.8822 39.1902V39.1869C46.9196 39.0509 46.9638 38.9251 47.0148 38.8195C47.0284 38.7856 47.0488 38.7516 47.0691 38.7176C47.2153 38.4728 47.4058 38.3369 47.6437 38.3503C47.8205 38.3606 47.9973 38.3945 48.1775 38.4455H48.1842C48.3441 38.4828 48.5003 38.5374 48.6602 38.6154C48.8847 38.714 49.0988 38.8329 49.3096 38.9894C49.3369 39.0064 49.3676 39.0234 49.3912 39.0473C49.4015 39.0507 49.4082 39.0576 49.4185 39.0643C49.4422 39.078 49.4595 39.0916 49.4798 39.112C49.4968 39.1256 49.5171 39.1392 49.5341 39.1529C49.5511 39.1665 49.5714 39.1802 49.5884 39.1902L49.5918 39.1936C49.6801 39.2752 49.7653 39.3465 49.8502 39.4317C49.9285 39.5099 50.0067 39.5915 50.0814 39.6698C50.0814 39.8772 50.095 40.0914 50.1223 40.3089C50.1596 40.598 50.2242 40.8904 50.3094 41.1862H50.3097Z' fill='%23A05A07'/%3E%3Cpath d='M45.3619 66.4422C45.3447 66.573 46.7241 65.6926 46.5303 63.2873C46.5303 60.594 44.8203 61.1639 44.8203 61.1639C44.8203 61.1639 45.9318 62.4523 45.3619 66.4422Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M21.1068 45.2737C20.5727 47.5261 20.2012 51.2315 23.0258 50.5399C25.8504 49.8482 23.2122 45.0178 23.2122 45.0178L21.1068 45.2737Z' fill='%23A05A07'/%3E%3Cpath d='M26.715 60.6445C26.715 60.6445 24.5259 60.452 24.3305 62.8668C24.1385 65.2816 26.715 65.9583 26.8416 65.9887C26.9683 66.0191 26.7119 60.6445 26.7119 60.6445H26.715Z' fill='%23B4B296'/%3E%3Cpath d='M44.7966 76.2892C43.3798 76.1343 41.8173 75.8763 40.1845 75.5386C39.8561 75.4683 39.5276 75.3978 39.1945 75.3229C37.6415 74.9803 36.0368 74.5723 34.4182 74.1172C34.0007 73.9998 33.5878 73.8827 33.1703 73.756C33.161 73.756 33.1515 73.7514 33.1422 73.7468C29.2058 72.5879 25.2929 71.1757 22.0976 69.787C21.8631 69.6837 21.6003 69.5429 21.5439 69.2943C21.5063 69.102 22.623 67.2159 22.7965 67.1266C25.4803 65.6346 26.4937 57.9681 26.8737 51.7891C27.0755 48.4672 27.0943 45.5818 27.0943 44.3105V43.6209H27.0989C28.8678 41.8519 33.6673 44.7705 35.5349 45.5352C36.4217 45.8964 43.9896 48.7303 44.8293 49.6688C44.8857 49.7298 44.9137 49.7813 44.9091 49.8238C44.6839 51.9914 44.5618 53.8446 44.5384 55.4632C44.5196 56.6643 44.5572 57.7294 44.6463 58.6958C44.7637 59.9345 44.9606 61.0089 45.2514 61.9752C45.5282 62.9323 45.8849 63.791 46.3213 64.6073L46.3259 64.6119C46.4386 64.8276 46.5604 65.0436 46.6919 65.2547C47.119 65.9819 47.6163 66.6903 48.17 67.427C48.1746 67.4363 48.1842 67.4458 48.1934 67.4599C48.794 68.2528 49.4602 69.0832 50.1969 70.0029C50.2813 70.1062 50.3658 70.214 50.4502 70.3221C51.5105 71.6545 52.083 72.7336 52.2426 73.5969C52.7306 76.1914 49.5212 76.8061 44.7966 76.29V76.2892Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M50.4516 70.3194C45.7495 64.4202 43.6129 62.3246 44.9103 49.822C44.9862 49.0997 36.481 45.9173 35.5363 45.532C33.669 44.7692 28.8654 41.845 27.0996 43.6189C27.089 43.6289 27.1799 49.2444 26.6257 55.0141C26.8759 55.4043 27.1142 55.7997 27.3191 56.2151C27.7457 57.0816 28.0644 58.0194 28.3429 58.9442C28.5053 59.4864 28.6544 60.0339 28.7589 60.5886C28.8222 60.9207 28.8698 61.2677 28.8317 61.6046C28.7715 62.1367 28.4623 62.5321 27.887 62.494C27.1323 62.4433 26.4504 61.9949 25.9165 61.488C25.8426 61.417 25.7667 61.3436 25.6928 61.2651C25.0575 64.1185 24.1349 66.3838 22.7977 67.121C22.6278 67.2149 21.5078 69.1 21.5479 69.2902C21.6017 69.5409 21.8645 69.6805 22.1011 69.7842C34.8907 75.3387 59.163 81.2427 50.4519 70.3188L50.4516 70.3194Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M50.4522 70.3194C45.75 64.4202 43.6134 62.3246 44.9108 49.822C44.9867 49.0997 36.4815 45.9173 35.5368 45.532C33.6695 44.7692 28.866 41.845 27.1001 43.6189C27.0916 43.6266 27.1549 47.6886 26.8342 52.4497C26.925 52.5689 27.0115 52.6929 27.0916 52.8196C27.4695 53.405 27.7609 54.041 28.0173 54.6897C28.2654 55.3132 28.468 55.9515 28.7012 56.5827C28.8554 56.9982 29.0222 57.4088 29.1792 57.8242C29.6184 58.9898 30.0511 60.2038 30.1883 61.4479C30.2864 62.3321 30.2135 63.4927 29.1316 63.6575C28.2978 63.7841 27.4767 63.4549 26.7979 62.9885C26.3387 62.6744 25.9209 62.3017 25.5461 61.8888C24.918 64.4457 24.0335 66.4424 22.7977 67.1241C22.6278 67.218 21.5078 69.1031 21.5479 69.2933C21.6017 69.544 21.8645 69.6835 22.1011 69.7873C34.8907 75.3418 59.163 81.2458 50.4519 70.3219L50.4522 70.3194Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M52.2472 73.5943C51.7406 75.7686 47.4783 75.8847 41.9982 74.9264C41.9519 72.6359 35.0298 72.7626 34.4218 70.5398C32.6212 63.9598 30.107 59.0939 26.8749 51.7898C26.8579 51.7517 26.8412 51.7138 26.8242 51.6757C27.0312 48.6908 27.086 45.9635 27.0986 44.3083V44.2746C27.1007 44.0298 27.1027 43.8122 27.1007 43.6182C27.1048 43.0122 27.1007 42.666 27.1027 42.6639C28.8676 40.8885 33.6722 43.8143 35.5382 44.5765C36.4839 44.9608 44.9891 48.144 44.9132 48.866C44.8856 49.1384 44.8584 49.4064 44.8329 49.6682C44.6197 51.9205 44.5248 53.8205 44.5415 55.4607C44.4295 63.1659 46.5637 65.4438 50.4522 70.3223C51.512 71.6523 52.084 72.7329 52.2467 73.5943H52.2472Z' fill='%23CEB79B'/%3E%3Cpath d='M25.4882 60.8797C25.4882 60.8797 24.5435 60.682 24.3504 63.0819C24.1584 65.4841 25.5358 66.3659 25.5188 66.2367C24.9489 62.2481 25.4882 60.8799 25.4882 60.8799V60.8797Z' fill='%23BBB99D'/%3E%3Cpath d='M18.4544 67.3091C19.0191 69.8253 18.2157 72.5063 19.3198 74.9363C19.345 74.9921 19.3736 75.0477 19.4011 75.101C18.7319 75.3391 18.0786 75.5953 17.4453 75.8715C17.7673 76.1855 18.1146 76.4769 18.4744 76.7405C19.5458 77.5336 20.7289 78.1341 21.9503 78.6639C22.9563 79.0997 24.0403 79.2922 25.1348 79.2441C26.1966 79.196 27.2384 78.9679 28.2644 78.702C29.2091 78.4562 30.1623 78.2204 31.0741 77.8682C31.8646 77.5642 32.6299 77.1917 33.3519 76.7456C34.7399 75.8841 35.9665 74.7589 36.8888 73.4057C37.6868 72.2376 38.2461 70.9325 38.5787 69.5617C38.1576 69.8354 37.7395 70.1141 37.3089 70.3752C35.5461 71.4344 33.6124 72.3616 31.5426 72.5874C29.6954 72.7876 27.7195 72.4201 26.245 71.2445C24.95 70.213 23.9726 68.7864 23.2706 67.3016C22.9509 66.6252 22.6721 65.9106 22.4726 65.178C21.5755 65.7456 20.3765 66.3006 18.7573 66.7441C18.5326 66.8048 18.4459 66.9773 18.4618 67.1418C18.4492 67.1925 18.4459 67.2507 18.4618 67.3143L18.4544 67.3091Z' fill='%23C2C2AC'/%3E%3Cpath d='M21.0042 66.4828C22.1265 68.8046 21.9543 71.5978 23.5822 73.7133C23.6195 73.7616 23.6599 73.8095 23.6988 73.8551C23.1013 74.2394 22.5234 74.6371 21.9695 75.0503C22.3543 75.283 22.759 75.4876 23.1693 75.6624C24.393 76.1911 25.6816 76.5067 26.9914 76.7446C28.0699 76.9402 29.1693 76.881 30.2242 76.5852C31.2472 76.2969 32.2099 75.8377 33.1484 75.3453C34.0123 74.8909 34.887 74.4446 35.6948 73.8942C36.3954 73.4183 37.056 72.8815 37.6575 72.2831C38.8131 71.1283 39.7516 69.7537 40.3421 68.2262C40.8533 66.9072 41.1012 65.5092 41.1131 64.0986C40.7653 64.461 40.4217 64.8273 40.0616 65.1795C38.5861 66.612 36.9139 67.9549 34.9498 68.6453C33.1966 69.2605 31.189 69.3521 29.4857 68.5426C27.9899 67.8329 26.7136 66.666 25.6924 65.3797C25.227 64.7936 24.7933 64.1611 24.4324 63.4934C23.688 64.2502 22.6465 65.0634 21.1707 65.8637C20.9656 65.9741 20.9205 66.1615 20.9735 66.3183C20.9728 66.3705 20.9828 66.4279 21.0127 66.4861L21.0044 66.4828H21.0042Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.4' d='M21.0042 66.4828C22.1265 68.8046 21.9543 71.5978 23.5822 73.7133C23.6195 73.7616 23.6599 73.8095 23.6988 73.8551C23.1013 74.2394 22.5234 74.6371 21.9695 75.0503C22.3543 75.283 22.759 75.4876 23.1693 75.6624C24.393 76.1911 25.6816 76.5067 26.9914 76.7446C28.0699 76.9402 29.1693 76.881 30.2242 76.5852C31.2472 76.2969 32.2099 75.8377 33.1484 75.3453C34.0123 74.8909 34.887 74.4446 35.6948 73.8942C36.3954 73.4183 37.056 72.8815 37.6575 72.2831C38.8131 71.1283 39.7516 69.7537 40.3421 68.2262C40.8533 66.9072 41.1012 65.5092 41.1131 64.0986C40.7653 64.461 40.4217 64.8273 40.0616 65.1795C38.5861 66.612 36.9139 67.9549 34.9498 68.6453C33.1966 69.2605 31.189 69.3521 29.4857 68.5426C27.9899 67.8329 26.7136 66.666 25.6924 65.3797C25.227 64.7936 24.7933 64.1611 24.4324 63.4934C23.688 64.2502 22.6465 65.0634 21.1707 65.8637C20.9656 65.9741 20.9205 66.1615 20.9735 66.3183C20.9728 66.3705 20.9828 66.4279 21.0127 66.4861L21.0044 66.4828H21.0042Z' fill='%23C2C2AC'/%3E%3Cpath d='M21.661 65.6316C20.8831 66.0344 19.9288 66.4172 18.7499 66.739C18.5252 66.7997 18.4384 66.9722 18.4544 67.1367C18.4418 67.1874 18.4384 67.2456 18.4544 67.3092C19.0191 69.8254 18.2157 72.5063 19.3198 74.9363C19.345 74.9922 19.3736 75.0478 19.4011 75.1011C18.7319 75.3392 18.0786 75.5953 17.4453 75.8715C17.7673 76.1856 18.1146 76.477 18.4744 76.7405C19.5458 77.5336 20.7289 78.1342 21.9503 78.6639C22.9563 79.0997 24.0403 79.2923 25.1348 79.2441C25.3248 79.2364 25.5127 79.2212 25.7006 79.2012C25.7734 74.6627 22.8981 67.4891 21.6664 65.6319H21.661V65.6316Z' fill='%23BBB99D'/%3E%3Cpath opacity='0.3' d='M64.1211 76.9457C64.2624 77.0343 64.3965 77.1282 64.5265 77.2319C64.3566 76.8088 64.2174 76.5655 64.1211 76.9457Z' fill='%239EA58E'/%3E%3Cpath d='M46.6748 65.3278C46.6236 65.5216 46.561 65.7152 46.4897 65.9033C45.9736 67.2712 44.9934 68.46 43.7282 69.1977C43.0785 69.5738 42.3745 69.8446 41.6277 69.9247C40.9008 70.0045 40.1627 69.9473 39.4446 69.7934C39.4217 69.7906 39.399 69.7846 39.3761 69.7792C38.6036 69.6083 37.8483 69.3403 37.1361 68.9841C36.3752 68.608 35.6596 68.1351 35.0155 67.585C34.9442 67.5251 34.8788 67.4651 34.8047 67.4028C37.7742 66.3111 40.0456 65.268 41.7469 64.339C43.4996 63.3815 44.6479 62.5492 45.3234 61.9109C45.3293 61.9054 45.3375 61.8995 45.3435 61.8941C45.5031 61.7459 45.597 61.5461 45.6596 61.3384C45.7594 61.0135 46.0076 61.3811 46.6117 62.0851C46.6117 62.0851 46.6177 62.1078 46.6202 62.1194C46.6576 62.2306 46.6915 62.3446 46.717 62.4612C46.9451 63.4018 46.9253 64.3964 46.6743 65.3283L46.6748 65.3278Z' fill='%23CCD1C0'/%3E%3Cpath d='M20.4113 76.8816C20.4063 76.8816 20.4062 76.8766 20.4062 76.8766V76.8716C20.4062 76.8766 20.4113 76.8766 20.4113 76.8816Z' fill='%233E8E5B'/%3E%3Cpath d='M85.2272 81.2627V81.2673C78.0395 80.5213 71.3253 83.8571 64.7803 86.3203C64.7757 86.3203 64.7662 86.325 64.7569 86.325C63.1617 86.9631 61.5384 87.4604 59.901 87.8265C59.6665 87.8779 59.4318 87.9297 59.1973 87.9765C59.1831 87.9812 59.1738 87.9858 59.1597 87.9858C58.9015 88.0373 58.6482 88.0844 58.3903 88.1266C58.1228 88.1735 57.8554 88.2157 57.5833 88.2579C57.3158 88.3001 57.0438 88.3377 56.7763 88.3704C56.5042 88.4033 56.2321 88.436 55.9647 88.4643C55.6128 88.5019 55.2563 88.5346 54.9044 88.5629C50.3533 88.9006 45.732 88.4267 41.1762 87.5165C41.1482 87.5165 41.1201 87.5119 41.0918 87.5024C40.9556 87.4743 40.8244 87.446 40.6931 87.4179H40.6885C40.6416 87.4087 40.5945 87.3991 40.543 87.3899C40.4913 87.3806 40.4444 87.3665 40.3976 87.3569C40.1489 87.3052 39.9049 87.2537 39.6609 87.202C39.6374 87.1927 39.6186 87.1878 39.5998 87.1878C39.5481 87.1737 39.5013 87.1644 39.4544 87.1551C39.1401 87.0848 38.8255 87.0097 38.5112 86.9394C38.4222 86.9206 38.3329 86.9018 38.2438 86.8784C38.0703 86.8362 37.8965 86.794 37.723 86.7518C37.4414 86.6861 37.1647 86.6156 36.8831 86.5453C36.8597 86.5407 36.8409 86.536 36.8221 86.5312C36.3858 86.4233 35.9541 86.3105 35.5224 86.1981C35.4848 86.1888 35.4472 86.1793 35.4099 86.1651C33.3362 85.6114 31.2859 84.997 29.2778 84.3681H29.2637L29.1792 84.34C27.1243 83.5753 24.9051 83.0733 22.8499 82.238C22.8453 82.2334 22.8407 82.2334 22.8358 82.2334C22.7184 82.1819 22.6013 82.1397 22.4885 82.0879C22.4744 82.0833 22.4651 82.0787 22.4509 82.0738C21.9724 81.8627 21.5078 81.6328 21.0576 81.3793C21.0483 81.3746 21.0434 81.37 21.0341 81.3651C21.02 81.3371 21.0061 81.3136 20.9965 81.2853C20.9263 81.1352 20.8745 80.9898 20.8372 80.8302V80.8256C20.7528 80.4737 20.7294 80.0937 20.7106 79.7231V79.6855C20.6918 79.4368 20.673 79.1928 20.6308 78.9537C20.5556 78.2687 20.4807 77.5837 20.4102 76.8938V76.8892C20.7059 78.1606 21.9256 78.4234 23.6335 78.0761C23.6477 78.0761 23.6662 78.0715 23.6804 78.0669C23.8492 78.0342 24.0181 77.9917 24.1965 77.9495C24.2667 77.9307 24.3373 77.9119 24.4122 77.8885C24.5434 77.8509 24.6796 77.8087 24.8109 77.7665C25.0876 77.6867 25.3785 77.5881 25.6743 77.4802C27.9498 76.6452 30.657 75.2188 33.1717 73.7549C33.7113 73.4406 34.2415 73.1263 34.7576 72.8167C35.0861 72.6197 35.4192 72.4179 35.7476 72.2161C37.0988 71.3857 38.3094 70.6114 39.2526 70.0108C39.3558 69.9452 39.459 69.8796 39.5576 69.8186C40.177 69.4198 40.6601 69.1148 40.9559 68.9459C40.9559 68.9459 40.9701 68.9271 40.9747 68.9271C41.0496 68.8895 41.1201 68.8381 41.1953 68.791C41.688 68.4813 42.2839 68.0918 42.8983 67.6601C42.9218 67.6413 42.9498 67.6226 42.9735 67.6087C44.0526 66.8534 45.1785 65.9712 45.9152 65.1408C46.0326 65.0096 46.1358 64.878 46.2295 64.7467C46.2671 64.6999 46.2998 64.6528 46.3281 64.6106C46.6566 64.132 46.8067 63.6862 46.6893 63.3155C46.6751 63.264 46.6939 63.2169 46.7361 63.1654C46.7503 63.1466 46.7688 63.1279 46.7925 63.1091C46.8067 63.0998 46.8159 63.0903 46.8301 63.0856C46.9287 63.02 47.0788 62.9636 47.2618 62.9168C47.3369 62.898 47.4165 62.8792 47.5058 62.8653C47.9843 62.7713 48.6178 62.7245 49.2325 62.7479C49.3872 62.7525 49.5376 62.7621 49.683 62.776C50.0349 62.8089 50.3726 62.865 50.6496 62.9495C50.6918 62.9587 50.734 62.9729 50.7762 62.9917C50.8231 63.0058 50.8653 63.0197 50.9075 63.0432C50.9544 63.0573 50.9966 63.0808 51.0342 63.0995C51.0764 63.1276 51.1047 63.1464 51.1328 63.1605C51.4002 63.3436 51.6769 63.5124 51.9632 63.672C53.4647 64.512 55.1255 65.0561 56.5845 65.1782H56.6221C58.7664 65.319 61.22 65.258 63.6693 65.4598C66.2404 65.6755 68.8117 66.1823 70.9979 67.5196C71.6548 67.9137 72.2881 68.3454 72.9028 68.8005C74.526 69.9874 76.0368 71.3481 77.5287 72.6946C77.5617 72.7181 77.5898 72.7415 77.6178 72.7744C77.815 72.9479 78.0119 73.1263 78.2091 73.3047C79.1239 74.1351 80.0249 74.9751 80.8929 75.8523L80.9351 75.8946L80.9444 75.9038C80.9536 75.9085 80.9632 75.918 80.9724 75.9272C81.0193 75.9741 81.0661 76.0163 81.1086 76.0634C81.2352 76.1901 81.3619 76.3213 81.4839 76.4529C81.8312 76.8094 82.1642 77.1754 82.4878 77.5415C82.7648 77.8558 83.032 78.1701 83.2948 78.4939C83.3604 78.5737 83.4215 78.6535 83.4825 78.7379C83.5857 78.8646 83.6796 78.9912 83.778 79.1225C83.8156 79.1743 83.8531 79.2257 83.8858 79.2726C83.9188 79.3194 83.9515 79.3617 83.9795 79.3992C84.0171 79.4556 84.0593 79.5117 84.0969 79.5635C84.2895 79.8309 84.4676 80.0937 84.6413 80.3517C84.735 80.483 84.8195 80.6191 84.9088 80.755C84.9181 80.7738 84.9322 80.7926 84.9415 80.8114C85.0213 80.9381 85.1011 81.0554 85.1714 81.1726L85.2231 81.2477V81.2619H85.2277L85.2272 81.2627Z' fill='%233E8E5B'/%3E%3Cpath opacity='0.4' d='M20.4113 76.8816C20.4063 76.8816 20.4062 76.8766 20.4062 76.8766V76.8716C20.4062 76.8766 20.4113 76.8766 20.4113 76.8816Z' fill='%233B754B'/%3E%3Cpath opacity='0.4' d='M85.2272 81.2627V81.2673C78.0395 80.5213 71.3253 83.8571 64.7803 86.3203C64.7757 86.3203 64.7662 86.325 64.7569 86.325C63.1617 86.9631 61.5384 87.4604 59.901 87.8265C59.6665 87.8779 59.4318 87.9297 59.1973 87.9765C59.1831 87.9812 59.1738 87.9858 59.1597 87.9858C58.9015 88.0373 58.6482 88.0844 58.3903 88.1266C58.1228 88.1735 57.8554 88.2157 57.5833 88.2579C57.3158 88.3001 57.0438 88.3377 56.7763 88.3704C56.5042 88.4033 56.2321 88.436 55.9647 88.4643C55.6128 88.5019 55.2563 88.5346 54.9044 88.5629C50.3533 88.9006 45.732 88.4267 41.1762 87.5165C41.1482 87.5165 41.1201 87.5119 41.0918 87.5024C40.9556 87.4743 40.8244 87.446 40.6931 87.4179H40.6885C40.6416 87.4087 40.5945 87.3991 40.543 87.3899C40.4913 87.3806 40.4444 87.3665 40.3976 87.3569C40.1489 87.3052 39.9049 87.2537 39.6609 87.202C39.6374 87.1927 39.6186 87.1878 39.5998 87.1878C39.5481 87.1737 39.5013 87.1644 39.4544 87.1551C39.1401 87.0848 38.8255 87.0097 38.5112 86.9394C38.4222 86.9206 38.3329 86.9018 38.2438 86.8784C38.0703 86.8362 37.8965 86.794 37.723 86.7518C37.4414 86.6861 37.1647 86.6156 36.8831 86.5453C36.8597 86.5407 36.8409 86.536 36.8221 86.5312C36.3858 86.4233 35.9541 86.3105 35.5224 86.1981C35.4848 86.1888 35.4472 86.1793 35.4099 86.1651C33.3362 85.6114 31.2859 84.997 29.2778 84.3681H29.2637L29.1792 84.34C27.1243 83.5753 24.9051 83.0733 22.8499 82.238C22.8453 82.2334 22.8407 82.2334 22.8358 82.2334C22.7184 82.1819 22.6013 82.1397 22.4885 82.0879C22.4744 82.0833 22.4651 82.0787 22.4509 82.0738C21.9724 81.8627 21.5078 81.6328 21.0576 81.3793C21.0483 81.3746 21.0434 81.37 21.0341 81.3651C21.02 81.3371 21.0061 81.3136 20.9965 81.2853C20.9263 81.1352 20.8745 80.9898 20.8372 80.8302V80.8256C20.7528 80.4737 20.7294 80.0937 20.7106 79.7231V79.6855C20.6918 79.4368 20.673 79.1928 20.6308 78.9537C20.5556 78.2687 20.4807 77.5837 20.4102 76.8938V76.8892C20.7059 78.1606 21.9256 78.4234 23.6335 78.0761C23.6477 78.0761 23.6662 78.0715 23.6804 78.0669C23.8492 78.0342 24.0181 77.9917 24.1965 77.9495C24.2667 77.9307 24.3373 77.9119 24.4122 77.8885C24.5434 77.8509 24.6796 77.8087 24.8109 77.7665C25.0876 77.6867 25.3785 77.5881 25.6743 77.4802C27.9498 76.6452 30.657 75.2188 33.1717 73.7549C33.7113 73.4406 34.2415 73.1263 34.7576 72.8167C35.0861 72.6197 35.4192 72.4179 35.7476 72.2161C37.0988 71.3857 38.3094 70.6114 39.2526 70.0108C39.3558 69.9452 39.459 69.8796 39.5576 69.8186C40.177 69.4198 40.6601 69.1148 40.9559 68.9459C40.9559 68.9459 40.9701 68.9271 40.9747 68.9271C41.0496 68.8895 41.1201 68.8381 41.1953 68.791C41.688 68.4813 42.2839 68.0918 42.8983 67.6601C42.9218 67.6413 42.9498 67.6226 42.9735 67.6087C44.0526 66.8534 45.1785 65.9712 45.9152 65.1408C46.0326 65.0096 46.1358 64.878 46.2295 64.7467C46.2671 64.6999 46.2998 64.6528 46.3281 64.6106C46.6566 64.132 46.8067 63.6862 46.6893 63.3155C46.6751 63.264 46.6939 63.2169 46.7361 63.1654C46.7503 63.1466 46.7688 63.1279 46.7925 63.1091C46.8067 63.0998 46.8159 63.0903 46.8301 63.0856C46.9287 63.02 47.0788 62.9636 47.2618 62.9168C47.3369 62.898 47.4165 62.8792 47.5058 62.8653C47.9843 62.7713 48.6178 62.7245 49.2325 62.7479C49.3872 62.7525 49.5376 62.7621 49.683 62.776C50.0349 62.8089 50.3726 62.865 50.6496 62.9495C50.6918 62.9587 50.734 62.9729 50.7762 62.9917C50.8231 63.0058 50.8653 63.0197 50.9075 63.0432C50.9544 63.0573 50.9966 63.0808 51.0342 63.0995C51.0764 63.1276 51.1047 63.1464 51.1328 63.1605C51.4002 63.3436 51.6769 63.5124 51.9632 63.672C53.4647 64.512 55.1255 65.0561 56.5845 65.1782H56.6221C58.7664 65.319 61.22 65.258 63.6693 65.4598C66.2404 65.6755 68.8117 66.1823 70.9979 67.5196C71.6548 67.9137 72.2881 68.3454 72.9028 68.8005C74.526 69.9874 76.0368 71.3481 77.5287 72.6946C77.5617 72.7181 77.5898 72.7415 77.6178 72.7744C77.815 72.9479 78.0119 73.1263 78.2091 73.3047C79.1239 74.1351 80.0249 74.9751 80.8929 75.8523L80.9351 75.8946L80.9444 75.9038C80.9536 75.9085 80.9632 75.918 80.9724 75.9272C81.0193 75.9741 81.0661 76.0163 81.1086 76.0634C81.2352 76.1901 81.3619 76.3213 81.4839 76.4529C81.8312 76.8094 82.1642 77.1754 82.4878 77.5415C82.7648 77.8558 83.032 78.1701 83.2948 78.4939C83.3604 78.5737 83.4215 78.6535 83.4825 78.7379C83.5857 78.8646 83.6796 78.9912 83.778 79.1225C83.8156 79.1743 83.8531 79.2257 83.8858 79.2726C83.9188 79.3194 83.9515 79.3617 83.9795 79.3992C84.0171 79.4556 84.0593 79.5117 84.0969 79.5635C84.2895 79.8309 84.4676 80.0937 84.6413 80.3517C84.735 80.483 84.8195 80.6191 84.9088 80.755C84.9181 80.7738 84.9322 80.7926 84.9415 80.8114C85.0213 80.9381 85.1011 81.0554 85.1714 81.1726L85.2231 81.2477V81.2619H85.2277L85.2272 81.2627Z' fill='%233B754B'/%3E%3Cpath opacity='0.4' d='M20.4113 76.886C20.4079 76.8827 20.4062 76.8793 20.4062 76.876C20.4062 76.876 20.4063 76.881 20.4113 76.881V76.886Z' fill='%233B754B'/%3E%3Cpath opacity='0.4' d='M51.9812 63.6542L51.967 63.6684C51.967 63.6684 51.967 63.673 51.9624 63.673C50.9536 65.1228 49.64 66.3802 48.1949 67.4593C48.1856 67.4686 48.1761 67.4735 48.1668 67.4781C47.6837 67.8392 47.1815 68.1772 46.6749 68.4962C45.0091 69.5426 43.2217 70.4057 41.392 71.1516C40.5147 71.5035 39.6325 71.8461 38.7599 72.2073C38.5066 72.3105 38.2579 72.4137 38.0093 72.5216C36.8128 73.0424 35.6213 73.5914 34.4202 74.1168C34.4014 74.1261 34.3826 74.131 34.3638 74.1402C33.2191 74.6329 32.079 75.1302 30.9623 75.6886C29.9067 76.2139 28.8464 76.8052 27.955 77.5746C27.237 78.194 26.6318 78.9307 26.2704 79.7984C25.9139 80.6664 25.8671 81.6377 25.7685 82.562C25.7497 82.7731 25.7263 82.9891 25.7121 83.2143C25.7121 83.1767 25.4024 83.0594 25.0037 82.9281V82.9234C24.5205 82.7638 23.9058 82.5716 23.5352 82.4542C23.5117 82.4495 23.4834 82.44 23.46 82.4307C23.3426 82.3932 23.2582 82.3651 23.2255 82.3556C23.1081 82.3134 22.9815 82.2758 22.8502 82.2382C22.8455 82.2336 22.8409 82.2336 22.836 82.2336C22.3153 82.0789 21.7286 81.9193 21.3111 81.6142C21.2735 81.5908 21.2359 81.5627 21.1984 81.5344C21.1469 81.4876 21.0998 81.4358 21.0576 81.3795C21.0388 81.3514 21.0153 81.3185 20.9965 81.2858C20.9497 81.2106 20.9121 81.1262 20.8841 81.0371C20.6918 80.5398 20.6871 79.8924 20.6354 79.4561C20.5414 78.6022 20.4992 77.7481 20.4102 76.8943C20.4148 76.9411 20.4243 76.9882 20.4336 77.0305C20.518 77.5373 20.762 77.8467 21.1232 77.9922C21.1608 78.0109 21.203 78.0251 21.2452 78.039C21.5783 78.1986 21.9912 78.2642 22.4558 78.2501C22.5122 78.2455 22.5732 78.2455 22.6339 78.2408C23.1125 78.2079 23.6428 78.1046 24.1965 77.9499C24.2667 77.9311 24.3373 77.9124 24.4122 77.8889C24.5434 77.8514 24.6796 77.8091 24.8109 77.7669C25.0688 77.6825 25.327 77.5885 25.5896 77.4902C27.6352 76.7208 29.6948 75.5807 30.5677 75.1771C30.6709 75.1161 30.7929 75.0597 30.8962 74.9987C31.5999 74.628 32.2895 74.2339 32.984 73.8398C33.0358 73.8118 33.0919 73.7788 33.1436 73.7459C33.6832 73.4408 34.2227 73.1312 34.7576 72.8169C35.0861 72.6199 35.4192 72.4181 35.7476 72.2163C36.9299 71.5079 38.0983 70.7807 39.2572 70.0394C39.3697 69.9691 39.4825 69.8939 39.5949 69.8236C39.7684 69.7109 39.9468 69.5984 40.1203 69.4859C40.3175 69.3546 40.5191 69.2326 40.7162 69.0965C40.796 69.045 40.8758 68.9932 40.9556 68.9464C40.9556 68.9464 40.9698 68.9276 40.9744 68.9276C41.0493 68.89 41.1199 68.8385 41.195 68.7914C41.2702 68.7399 41.3405 68.6882 41.4156 68.6413C41.7487 68.4161 42.0867 68.2004 42.4244 67.9705C42.5418 67.9003 42.6589 67.8205 42.7763 67.7407C42.8185 67.7126 42.8561 67.6843 42.8983 67.6609C42.9218 67.6421 42.9498 67.6233 42.9735 67.6094C44.1512 66.8116 45.221 65.9485 45.9152 65.1415C46.0326 65.0103 46.1358 64.8787 46.2295 64.7474C46.2625 64.7006 46.2952 64.6535 46.3235 64.6066C46.6378 64.1281 46.7832 63.6872 46.6895 63.3165C46.6754 63.265 46.6942 63.2179 46.7364 63.1664C46.7505 63.1476 46.7691 63.1288 46.7928 63.11C46.8069 63.1008 46.8162 63.0912 46.8303 63.0866C46.9289 63.021 47.079 62.9646 47.262 62.9177C47.3372 62.899 47.4167 62.8802 47.5061 62.8663C47.9846 62.7723 48.6181 62.7255 49.2328 62.7489C49.3828 62.7535 49.5332 62.763 49.6832 62.7769C50.0351 62.8099 50.3729 62.866 50.6498 62.9504C50.6921 62.9597 50.7343 62.9739 50.7765 62.9927C50.8233 63.0068 50.8656 63.0207 50.9078 63.0441C50.9546 63.0583 50.9968 63.0817 51.0344 63.1005C51.0766 63.1286 51.1049 63.1474 51.133 63.1615C51.1423 63.1662 51.1472 63.1708 51.1564 63.1757C51.1799 63.1898 51.2082 63.2086 51.2362 63.2225C51.2877 63.2506 51.3348 63.2835 51.3863 63.3116C51.5693 63.4194 51.7662 63.5322 51.9822 63.6542H51.9812Z' fill='%233B754B'/%3E%3Cpath d='M60.1766 79.7603C56.9108 77.5517 63.3287 74.6849 61.5785 72.0258C59.1447 68.0418 51.6382 80.3477 56.5512 83.9072C59.2273 85.1184 65.4626 81.7612 60.1792 79.7665V79.7605H60.1764L60.1766 79.7603Z' fill='%233E8E5B'/%3E%3Cpath d='M36.0493 80.6181C35.5906 80.8887 35.1146 81.1255 34.5874 81.2449C34.0631 81.3703 33.5274 81.4218 32.9943 81.3162C32.4442 81.205 31.8032 80.96 31.2446 81.1453C30.9852 81.2308 30.6402 81.4274 30.6258 81.7296C30.6145 81.9405 30.7231 82.1371 30.8626 82.2939C31.2019 82.6641 31.6748 82.8666 32.1677 82.9719C32.7719 83.106 33.3961 83.1287 34.0116 83.1686C34.5444 83.2059 35.0688 83.3055 35.6047 83.3341C36.1291 83.3655 36.6735 83.3426 37.1806 83.2028C37.6766 83.0661 38.2296 82.8038 38.4916 82.3451C39.1099 81.2735 37.7109 79.6322 36.0464 80.6094V80.6153L36.049 80.6181H36.0493Z' fill='%233E8E5B'/%3E%3Cpath d='M81.5081 76.4543C77.1908 76.7679 73.0297 78.0019 68.8434 78.985C66.6458 79.6777 61.4165 80.4527 61.784 76.7051H61.7866C62.3854 73.0001 66.3923 71.5241 69.0027 69.3353V69.3412C69.2308 69.1531 70.4764 68.033 70.9979 67.52C71.6474 67.8876 72.286 68.3038 72.9102 68.7512C75.5549 70.6491 77.9689 73.1486 80.2543 75.2605C80.4656 75.4458 81.1748 76.1153 81.3146 76.2548C81.3802 76.3205 81.4427 76.389 81.5084 76.4543H81.5081Z' fill='%233B754B'/%3E%3Cpath d='M63.667 65.4623L62.5046 66.7046C62.2937 66.9072 44.3818 86.4544 39.6084 78.7055C37.6023 75.4484 45.1286 71.8487 48.3517 70.7058C50.9711 69.7768 55.7446 67.8277 56.6196 65.1802C58.7654 65.3197 61.219 65.2569 63.667 65.4623Z' fill='%233B754B'/%3E%3Cpath d='M85.2384 81.2773C82.5031 81.0006 79.8474 81.3007 77.2437 81.9201C77.2295 81.9247 77.2107 81.9293 77.1919 81.9342C77.0138 81.9765 76.84 82.0187 76.6619 82.0655C76.4696 82.1124 76.282 82.1641 76.0941 82.2156C76.0284 82.2344 75.9628 82.2532 75.8969 82.272C72.6877 83.168 69.5583 84.4772 66.457 85.6922C66.3726 85.7203 66.2881 85.7579 66.2037 85.7862C65.7298 85.9738 65.2559 86.1569 64.7869 86.3304C64.7776 86.3304 64.7727 86.3396 64.7635 86.3396C62.9899 87.048 61.1743 87.5783 59.3256 87.9536C59.288 87.9629 59.2412 87.9724 59.1989 87.977C59.1848 87.9817 59.1755 87.9863 59.1614 87.9863C58.9032 88.0378 58.6499 88.0849 58.392 88.1271C58.1245 88.174 57.857 88.2162 57.585 88.2584C57.3175 88.3006 57.0454 88.3382 56.778 88.3709C56.5059 88.4038 56.2338 88.4365 55.9664 88.4648C53.644 88.7181 51.2933 88.7464 48.9474 88.6056C48.9145 88.6056 48.8864 88.601 48.8538 88.5964C46.2732 88.4321 43.7021 88.0568 41.1779 87.5173C41.1499 87.5173 41.1218 87.5127 41.0935 87.5031C40.9573 87.4751 40.826 87.4468 40.6948 87.4187H40.6901C40.6433 87.4094 40.5962 87.3999 40.5447 87.3906C40.4929 87.3814 40.4461 87.3672 40.3992 87.3577C40.1506 87.306 39.9066 87.2545 39.6625 87.2027C39.6391 87.1935 39.6203 87.1886 39.6015 87.1886C39.5498 87.1744 39.5029 87.1651 39.4561 87.1559C39.1418 87.0856 38.8272 87.0104 38.5129 86.9402C38.4239 86.9167 38.3299 86.8979 38.2408 86.8745C37.7857 86.7713 37.3352 86.6588 36.885 86.5461C36.8616 86.5414 36.8428 86.5368 36.824 86.5319C36.3877 86.4241 35.956 86.3113 35.5243 86.1988C35.4868 86.1895 35.4492 86.18 35.4118 86.1659C34.281 85.8704 33.1597 85.5561 32.0384 85.2227C31.086 84.946 30.1429 84.6551 29.1953 84.3547C29.2187 84.3593 29.2375 84.364 29.2656 84.3689H29.2797C31.0299 84.7161 32.822 84.9365 34.6095 84.8286C35.7262 84.6551 36.7584 84.5565 37.7296 84.5143C37.814 84.505 37.8985 84.505 37.9829 84.5001C38.8087 84.4721 39.5876 84.486 40.3287 84.5236C40.3944 84.5236 40.4554 84.5282 40.521 84.5328C46.7659 84.9081 50.5707 87.3011 58.9269 84.9081C66.8138 82.6233 74.0533 77.5561 82.489 77.542H82.5078C82.7799 77.847 83.0427 78.166 83.296 78.4944C83.3616 78.5742 83.4226 78.654 83.4836 78.7384C83.5869 78.8651 83.6808 78.9917 83.7791 79.123C83.8167 79.1748 83.8543 79.2262 83.887 79.2731C83.9199 79.3199 83.9526 79.3622 83.9807 79.3997C84.0183 79.4561 84.0605 79.5122 84.0981 79.564C84.2906 79.8314 84.4688 80.0942 84.6425 80.3522C84.7457 80.5069 84.849 80.6618 84.9427 80.8119C85.0225 80.9386 85.1023 81.0559 85.1725 81.1731L85.2243 81.2482V81.2624H85.2289V81.267H85.2335L85.2382 81.2763L85.2384 81.2773Z' fill='%233B754B'/%3E%3Cpath d='M80.9468 75.9043C75.4577 76.6026 72.2856 75.3029 72.9099 68.751C75.5545 70.6489 77.9686 73.1484 80.2541 75.2602C80.465 75.4455 80.9265 75.8844 80.9468 75.9043Z' fill='%232B6B40'/%3E%3Cpath d='M25.0068 82.9289C25.1921 82.2223 25.5942 81.4384 25.3718 80.703C25.3231 80.5437 25.2518 80.3897 25.2405 80.2271C25.2179 79.9421 25.3659 79.6741 25.474 79.4121C25.7276 78.7794 25.648 78.1211 25.6766 77.4743C25.0325 77.5368 24.3313 77.9217 23.6819 78.0671C23.1403 78.1896 22.5729 78.2864 22.0146 78.2437C21.1482 78.1868 20.5069 77.7306 20.4102 76.856C20.5409 78.0982 20.675 79.3408 20.8091 80.5805C20.8403 80.8541 20.8745 81.1447 21.037 81.3669C21.2251 81.6235 21.55 81.7458 21.8519 81.8573C22.9295 82.2447 23.9753 82.6122 24.9955 82.9628C24.9955 82.9487 25.0014 82.9374 25.0068 82.9229V82.9284V82.9289Z' fill='%232B6B40'/%3E%3Cpath d='M24.6128 63.2083C24.5822 63.3326 24.5549 63.4592 24.5348 63.5885C24.349 64.744 24.5389 65.9451 25.0383 67.0015C25.6643 68.3244 26.7334 69.4266 28.056 70.0627C28.7325 70.387 29.4545 70.5999 30.2072 70.6202C30.9619 70.6432 31.7177 70.5188 32.4395 70.2959C34.0028 69.8145 35.4541 68.9174 36.6098 67.7593C36.6752 67.6934 36.7385 67.6275 36.8052 67.5591C30.1207 65.6967 26.7874 63.7833 25.5663 62.661C24.9351 62.0808 25.2664 62.3063 24.6131 63.2031V63.2083H24.6128Z' fill='%23CCD1C0'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.33'%3E%3Cpath d='M48.1667 67.0275C48.1808 67.112 48.1901 67.2152 48.1808 67.3326C48.1808 67.3606 48.1809 67.3936 48.1716 67.4263C48.1716 67.4404 48.1716 67.4592 48.167 67.478C48.1106 67.9987 47.8619 68.6933 47.5054 69.2655C47.0645 69.9739 46.4685 70.4995 45.8773 70.2882C45.9993 70.7291 46.0181 71.2126 45.9429 71.6957C45.8255 72.4886 45.4548 73.2768 44.8919 73.8446C45.2391 74.4405 45.164 75.4774 44.7982 76.289C44.756 76.3781 44.7137 76.4625 44.6669 76.5423C44.4041 77.0069 44.0383 77.3539 43.602 77.4479C43.5644 78.0109 43.4097 78.5411 43.1749 79.0243C42.9121 79.5685 42.5368 80.0519 42.0866 80.4506C41.8145 80.6851 41.5095 80.8965 41.1856 81.07C41.1856 81.07 41.4626 83.0217 40.1066 83.0922C40.0878 83.0876 40.0785 83.0829 40.0643 83.0781C40.0785 83.1015 40.0924 83.1295 40.1066 83.1532C40.2942 83.5005 40.3552 84.0024 40.3272 84.5232C40.2945 85.0534 40.1725 85.5976 39.9894 86.0247C39.9848 86.0247 39.7361 86.7799 39.6 87.1882C39.5482 87.174 39.5014 87.1648 39.4545 87.1555C39.1402 87.0852 38.8257 87.01 38.5114 86.9398C38.4223 86.921 38.333 86.9022 38.2439 86.8788L38.2393 86.8741C38.1173 86.1562 38.0236 85.5932 38.0187 85.5932C37.8591 85.5042 37.7044 85.4432 37.5731 85.4197C37.6575 85.1289 37.7093 84.8238 37.728 84.5142C37.7515 84.0403 37.6905 83.5617 37.5121 83.1208L37.4979 83.0927C37.4323 82.9192 37.343 82.7501 37.2305 82.5954H37.2773C37.4791 82.2577 37.5214 81.8587 37.5118 81.4507C37.5072 81.174 37.4838 80.8877 37.465 80.6203C37.4838 80.5827 37.526 80.5029 37.5824 80.3997C37.6856 80.2074 37.8405 79.9304 37.9906 79.649C38.1736 79.3113 38.3425 78.9733 38.4128 78.781C38.7271 77.9553 38.7317 77.0075 38.4877 76.1583C38.6239 76.088 38.741 75.9987 38.8396 75.8908C38.9335 75.7968 39.0133 75.6844 39.079 75.567C39.1212 75.4872 39.1634 75.4074 39.1963 75.3229C39.2996 75.065 39.3559 74.7788 39.3701 74.4879C39.4123 73.6621 39.1402 72.78 38.699 72.3156C38.7178 72.2826 38.7412 72.2499 38.76 72.2077C39.0978 71.5696 39.2666 70.2794 39.2666 70.2794V70.1855C39.2666 70.1386 39.262 70.0915 39.2574 70.04C39.2574 70.0308 39.2573 70.0212 39.2527 70.012C39.2527 69.9322 39.2481 69.8524 39.2386 69.768C39.2386 69.7633 39.2432 69.7587 39.2432 69.7492C39.2432 69.7069 39.2102 69.5849 39.1727 69.4349C39.1024 69.1486 38.985 68.7733 38.9474 68.6935C38.9943 68.6559 39.0414 68.6232 39.0882 68.5903C39.5245 68.5385 39.7356 68.182 39.8061 67.7411V67.7364C39.8061 67.7364 39.8061 67.7318 39.8108 67.7272C39.8623 67.3565 39.82 66.9295 39.7263 66.5683C39.6983 66.4509 39.6607 66.3384 39.6185 66.2352C39.9657 65.9443 40.5709 65.6066 40.8242 65.2359C40.965 65.039 41.0917 64.8372 41.2042 64.6261C41.3308 64.3821 41.4387 64.1242 41.528 63.866C41.6969 63.3828 41.8096 62.8806 41.8752 62.3645C42.049 61.7171 42.6542 61.5294 43.1373 61.1258C44.0053 60.4032 44.254 59.5352 44.6481 58.6956C44.7655 59.9342 44.9624 61.0087 45.2533 61.975C45.2767 61.9516 45.3001 61.9328 45.3236 61.9094C45.3282 61.9047 45.3377 61.9001 45.3424 61.8952C45.5019 61.7451 45.5956 61.548 45.6567 61.3369C45.7599 61.0131 46.0085 61.3791 46.6091 62.0829C46.6091 62.0829 46.6184 62.1063 46.6184 62.1204C46.6559 62.2283 46.6886 62.3457 46.7169 62.4631C46.7638 62.6695 46.8014 62.876 46.8294 63.087C46.928 63.0214 47.0781 62.965 47.2611 62.9182C47.3363 62.8994 47.4158 62.8806 47.5051 62.8667C47.9837 62.7727 48.6172 62.7259 49.2319 62.7493C49.3819 62.7539 49.5323 62.7635 49.6823 62.7774C50.0342 62.8103 50.372 62.8664 50.6489 62.9509C50.6911 62.9601 50.7334 62.9743 50.7756 62.9931C50.8224 63.0072 50.8646 63.0211 50.9069 63.0446C51.268 64.485 49.0301 66.4931 48.167 67.0278L48.1667 67.0275Z' fill='%238D9280'/%3E%3C/g%3E%3Cpath d='M26.0671 63.4364C25.7525 63.0817 25.6258 62.97 25.441 62.3746C25.1391 61.4041 24.8405 61.1302 25.4884 60.8795C24.8129 60.7629 24.4402 61.8299 24.2904 63.6974C24.0983 66.0996 25.0829 66.3073 25.2129 66.3403C25.2562 66.3503 25.2562 65.7804 25.2382 65.01C24.9669 64.9062 26.2642 63.6593 26.0688 63.4364H26.0668H26.0671Z' fill='%23CCD1C0'/%3E%3Cpath opacity='0.7' d='M38.5275 68.9962C38.517 68.971 38.5085 68.9455 38.5 68.9159C38.5106 68.9074 38.5232 68.8989 38.5337 68.8907C38.6774 68.7852 38.8187 68.6817 38.9603 68.5761C38.9616 68.5748 38.963 68.5741 38.9644 68.5741V68.572C38.9814 68.6101 38.9981 68.648 39.013 68.6861C39.0321 68.7262 39.0467 68.7664 39.0617 68.8086C39.0637 68.8106 39.0637 68.8127 39.0658 68.8171C39.0743 68.8382 39.0828 68.8614 39.089 68.8845C39.091 68.8866 39.091 68.891 39.091 68.893C39.0975 68.9077 39.1016 68.9206 39.1057 68.9352C39.1098 68.9437 39.1121 68.9522 39.1142 68.9605C39.1162 68.9646 39.1163 68.969 39.1183 68.9731C39.1268 69.0027 39.1374 69.0323 39.1435 69.0616C39.1456 69.0657 39.1477 69.0681 39.1477 69.0722L39.1793 69.1924C39.1899 69.2367 39.2004 69.2789 39.2089 69.3232V69.3296C39.213 69.3443 39.2154 69.3592 39.2195 69.3759H39.2174C38.8859 69.3548 38.6771 69.3654 38.527 69.0001V68.996L38.5275 68.9962Z' fill='%232B6B40'/%3E%3Cpath opacity='0.7' d='M38.7398 72.123C39.3857 72.7668 39.5504 74.1664 39.2191 75.0763C39.2044 75.1206 39.1875 75.1628 39.1684 75.205C39.1514 75.2452 39.1326 75.2854 39.1115 75.3232C39.0968 75.3569 39.0778 75.3886 39.0587 75.4202C39.0356 75.4604 39.008 75.5006 38.9807 75.5363C38.9617 75.5616 38.9426 75.587 38.9239 75.6082C38.9048 75.6293 38.8858 75.6483 38.867 75.6674C38.8479 75.6864 38.8268 75.7075 38.8057 75.7242C38.7846 75.7412 38.7614 75.758 38.7383 75.775C38.677 75.8213 38.6116 75.8573 38.5398 75.8846C38.5545 75.9353 38.5673 75.9837 38.58 76.0344C38.5905 76.0808 38.6011 76.123 38.6116 76.1696C38.6137 76.1842 38.6201 76.2033 38.6222 76.2182C38.6412 76.3258 38.6623 76.4357 38.6749 76.5454C38.6791 76.5897 38.6855 76.6339 38.6896 76.6785C38.6961 76.7439 38.7002 76.8116 38.7022 76.8769C38.7043 76.991 38.7064 77.1027 38.7022 77.2126C38.7002 77.2463 38.6981 77.2801 38.6981 77.3117V77.3349C38.694 77.3645 38.6896 77.3982 38.6896 77.4278C38.6876 77.4615 38.6832 77.4911 38.6791 77.5228C38.6749 77.5565 38.6726 77.5882 38.6664 77.6219V77.6283C38.6538 77.7169 38.6389 77.8057 38.6222 77.8922C38.6201 77.9153 38.6137 77.9385 38.6096 77.9576C38.6054 77.9746 38.6011 77.9913 38.599 78.0062C38.597 78.0127 38.5926 78.0168 38.5926 78.0209V78.0314C38.5841 78.0695 38.5735 78.1074 38.563 78.1455V78.1519C38.5483 78.2026 38.5334 78.2533 38.5166 78.2997V78.3082C38.5102 78.3252 38.504 78.3463 38.4976 78.363C38.4891 78.3841 38.485 78.4011 38.4765 78.4222L38.4639 78.4518L38.4597 78.4644C38.4513 78.4855 38.4451 78.5025 38.4366 78.5236C38.426 78.5488 38.4196 78.5723 38.407 78.5954V78.6019C38.3859 78.6505 38.3648 78.6989 38.3457 78.7432C38.3267 78.7813 38.3099 78.8191 38.2929 78.8552C38.2824 78.8742 38.2739 78.8933 38.2654 78.91C38.2569 78.929 38.2464 78.9458 38.2358 78.9648C38.2167 79.0006 38.1977 79.0367 38.1789 79.0704C38.1774 79.0719 38.1776 79.0727 38.1766 79.074C38.1686 79.0881 38.1617 79.1028 38.1534 79.1167C38.1408 79.1358 38.1303 79.1569 38.1197 79.1759C38.0965 79.2096 38.0775 79.2434 38.0564 79.2773C38.0142 79.3448 37.9699 79.4081 37.9256 79.4714C37.8813 79.5368 37.8327 79.5981 37.7863 79.6593C37.7863 79.6573 37.7843 79.6573 37.7843 79.6552C37.7843 79.6532 37.7822 79.6511 37.7822 79.6488V79.6403C37.7441 79.5283 37.7125 79.4145 37.6808 79.2982C37.6386 79.1419 37.6049 78.9857 37.5794 78.8317C37.4759 78.2428 37.4844 77.6685 37.5709 77.0839C37.6237 76.7356 37.704 76.383 37.8051 76.0221C37.7524 75.7623 37.687 75.4774 37.6806 75.1587C37.6721 74.6668 37.8031 74.0989 38.3328 73.432C38.4469 73.2863 38.5841 73.1321 38.7424 72.9761C38.5988 72.3091 38.5671 71.5534 38.7172 70.8589C38.7529 70.6985 38.7951 70.5443 38.8502 70.3945C38.9493 70.118 39.0845 69.8583 39.2598 69.6282C39.2618 69.6302 39.2618 69.6346 39.2618 69.6367C39.2639 69.6642 39.2683 69.6915 39.2703 69.7211V69.7232C39.2745 69.7589 39.2768 69.797 39.2809 69.8328C39.283 69.856 39.283 69.8815 39.285 69.9067C39.2871 69.9489 39.2891 69.9891 39.2891 70.0313V70.0524C39.2912 70.0776 39.2912 70.101 39.2912 70.1263H39.2997C39.2997 70.8354 39.1138 71.5469 38.7403 72.1233L38.7398 72.123Z' fill='%232B6B40'/%3E%3Cpath opacity='0.7' d='M40.0367 67.7722C40.0347 67.7828 40.0326 67.7933 40.0283 67.8039C39.9479 68.112 39.794 68.3632 39.5448 68.4708C39.3906 68.4708 39.2429 68.4708 39.1016 68.4688C39.1036 68.4688 39.1057 68.4667 39.1057 68.4667C39.378 68.2641 39.6483 68.0636 39.9122 67.8651C39.9544 67.8335 39.9945 67.8039 40.0347 67.7743L40.0367 67.7722Z' fill='%232B6B40'/%3E%3Cpath d='M46.9617 41.1929C46.8255 41.9685 46.5827 49.3475 46.1173 50.9036C45.7119 52.2568 41.6842 58.0811 35.7734 58.5032C29.8627 58.0811 24.7952 52.9717 24.3741 50.2704C24.1661 48.9426 23.9182 43.5434 23.7409 42.2486C23.6734 42.1546 23.7859 40.4642 23.7409 39.2932C23.952 37.6043 24.0575 32.7539 25.2187 30.6382C25.8995 29.399 27.4911 27.9868 28.6037 27.5966C30.7189 26.8516 33.4325 27.7106 36.5495 27.9361C37.5957 28.0121 38.65 28.0272 39.6982 27.9614C43.0485 27.7536 43.6838 27.0321 45.6957 31.2712C46.1137 32.9487 46.7511 38.6597 46.7511 38.6597L46.9622 41.1929H46.9617Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M45.8863 47.3841C46.3361 48.657 46.1165 50.9032 46.1165 50.9032L35.9836 53.2254L32.8172 46.6811C32.8172 46.6811 32.8172 45.7923 33.4504 45.8134C34.0837 45.8366 34.5058 46.9406 35.456 46.9154C36.4058 46.8922 36.2877 46.3516 37.0856 45.9887C37.8836 45.6255 38.2551 45.8157 38.2805 46.0373C38.3058 46.259 37.9513 46.6515 37.9513 46.6515C37.9513 46.6515 41.1525 49.9559 42.5279 48.7922C45.2722 46.47 44.6811 42.6704 44.6389 41.1926C44.6008 39.8267 43.5941 39.0836 43.5835 39.0815C44.4278 37.815 43.6237 36.5336 42.5281 36.7594C41.0737 37.0593 38.306 38.0258 37.6728 38.4483C36.6174 37.3929 36.4063 36.9704 34.7174 37.3929C34.4536 37.4582 34.2299 37.7728 33.9658 38.0176C33.9593 38.5221 33.7949 39.0625 33.3598 39.3157C32.7855 39.6494 32.0637 39.0962 31.5571 38.847C28.3886 37.2891 26.0621 37.1815 25.8511 37.1815C24.8039 37.1815 24.5846 44.7812 28.8064 50.2697C28.3843 52.3808 24.939 47.7682 24.521 47.8737C23.9848 46.7128 23.6049 45.4883 23.3938 44.247C23.1024 42.5414 24.0924 40.5928 23.0898 39.1384C22.448 38.2011 20.6029 37.9962 20.9957 36.5483C21.4665 32.4845 21.4539 29.428 26.8918 27.492C29.2582 26.6518 31.1116 27.6377 35.0276 27.9584C35.8804 28.0258 36.7376 28.0258 37.5904 27.9669C40.265 27.7705 45.9754 26.8121 46.4061 33.4745C46.4187 33.6393 46.6213 33.8228 46.7165 34.0761C46.7989 34.1963 46.7461 34.3358 46.8221 34.471L46.8241 34.4751L46.8895 37.2806C46.7798 37.2595 46.898 43.1767 45.8869 47.3839L45.8863 47.3841Z' fill='%23CEB79B'/%3E%3Cpath d='M21.2089 41.4043C20.9999 41.1953 20.8099 40.9736 20.6411 40.7435C20.6326 40.1103 20.7525 39.4853 20.7867 38.8711C20.9978 35.0714 20.6938 33.9779 21.2089 31.4825C21.7134 29.0358 22.6234 26.8256 24.2889 24.9658C24.4261 24.8116 24.5674 24.6639 24.7131 24.5205C24.7466 25.372 26.2156 25.806 25.8529 27.0496C25.8315 27.123 26.0851 26.9755 26.064 27.0496C25.4341 29.2739 24.5391 32.1804 24.164 34.4381C23.6876 37.3075 23.8155 39.2935 23.8155 39.2935C23.8155 39.2935 21.7425 40.2832 21.2087 41.4045L21.2089 41.4043Z' fill='%23CE8000'/%3E%3Cpath d='M23.9793 45.2127C23.9119 45.4152 23.8357 45.6011 23.745 45.772C23.6817 45.8966 23.6099 46.0127 23.5319 46.1203C23.5333 46.1217 23.5333 46.1224 23.5319 46.1224C23.4938 46.1687 23.458 46.2153 23.4199 46.2596L23.4179 46.2637C23.3988 46.2869 23.3777 46.308 23.3587 46.3291C23.3587 46.3311 23.3566 46.3332 23.3546 46.3355C23.3144 46.3736 23.2742 46.4135 23.232 46.4495C23.2109 46.4706 23.1877 46.4897 23.1646 46.5044C23.1435 46.5214 23.1203 46.5381 23.0992 46.553C23.0294 46.6017 22.9556 46.6439 22.8796 46.6797C22.8711 46.6861 22.8626 46.6902 22.8521 46.6943C22.8521 46.6943 22.85 46.6943 22.85 46.6964H22.848C22.8466 46.6964 22.8452 46.6971 22.8438 46.6985C22.8418 46.6985 22.8397 46.6985 22.8374 46.7005C22.8333 46.7005 22.8289 46.7026 22.8248 46.7046L22.8227 46.7067C22.8163 46.7088 22.8101 46.7108 22.8016 46.7152C22.7975 46.7172 22.7931 46.7172 22.789 46.7193C22.7615 46.7299 22.7362 46.7404 22.7066 46.7489C22.6011 46.7847 22.4935 46.7976 22.3941 46.7911C22.3877 46.7932 22.3836 46.7911 22.3772 46.7911H22.3751C22.2464 46.7785 22.1197 46.7363 22.0013 46.6665C21.955 46.639 21.9128 46.6073 21.8706 46.5757C21.8474 46.5587 21.8263 46.5399 21.8031 46.5208V46.5188C21.7694 46.4892 21.7334 46.4555 21.6996 46.4217C21.6806 46.4006 21.6615 46.3795 21.6427 46.3564C21.6343 46.3499 21.6281 46.3417 21.6196 46.3332C21.6175 46.3332 21.6196 46.3311 21.6196 46.3311C21.6155 46.327 21.6111 46.3226 21.609 46.3185C21.5709 46.2763 21.5372 46.232 21.5035 46.1854V46.1834C21.4106 46.0588 21.3241 45.9195 21.2438 45.7697C21.2438 45.7697 21.2396 45.755 21.2332 45.7316C21.2311 45.7231 21.2291 45.7126 21.2268 45.702C21.2162 45.6703 21.2057 45.6281 21.1887 45.5733C21.1655 45.4909 21.138 45.3898 21.1107 45.2734C21.1065 45.2544 21.1001 45.2333 21.096 45.2121C21.0919 45.1995 21.0896 45.1869 21.0855 45.1741V45.172C21.001 44.8343 20.9101 44.4227 20.8975 44.1799C20.887 43.9835 21.0538 43.7261 21.1107 43.5719C21.157 43.4388 21.2057 43.1835 21.1529 43.0633C21.1488 43.0527 21.1423 43.0442 21.1359 43.0357C21.0661 42.9448 20.8108 43.0252 20.7117 43.0398C20.5724 43.063 20.4646 42.9217 20.3951 42.664C20.3719 42.5775 20.3508 42.4761 20.3359 42.3621C20.3359 42.36 20.3359 42.3556 20.3338 42.3474C20.203 41.3911 20.0107 39.6664 20.4162 38.4779C20.4175 38.4779 20.4182 38.4773 20.4182 38.4759C20.4182 38.4718 20.4203 38.4695 20.4203 38.4653C20.4223 38.4589 20.4244 38.4548 20.4267 38.4483C20.4731 38.3217 20.5238 38.2012 20.583 38.0895C20.6442 37.9734 20.7372 37.8954 20.8363 37.8318C20.8996 37.7896 20.965 37.7559 21.0262 37.7199C21.0453 37.7093 21.0643 37.6967 21.0831 37.6882C21.0978 37.6776 21.1148 37.6671 21.1295 37.6565L21.1928 37.6184C21.3447 37.5255 21.4927 37.4455 21.6657 37.3335C21.8386 37.2238 22.0224 37.152 22.2124 37.1731C22.2399 37.1752 22.2693 37.1816 22.2968 37.1878C22.301 37.1898 22.3053 37.1898 22.3115 37.1919C22.3367 37.196 22.3602 37.2045 22.3854 37.213C22.4086 37.2194 22.4297 37.2277 22.4528 37.2382C22.4654 37.2447 22.478 37.2509 22.493 37.2573C22.5352 37.2784 22.5774 37.3016 22.6196 37.3312C22.6407 37.3458 22.6619 37.3608 22.683 37.3775C22.7061 37.3945 22.7272 37.4112 22.7483 37.4303C22.7694 37.4493 22.7906 37.4684 22.8117 37.4895C22.8961 37.5675 22.9785 37.6625 23.0565 37.7724C23.0987 37.8316 23.1409 37.8949 23.1811 37.9603C23.198 37.9855 23.2127 38.0089 23.2274 38.0342C23.2992 38.1523 23.3667 38.2854 23.4323 38.4226C23.4598 38.4818 23.4892 38.5428 23.5167 38.6061C23.5232 38.6188 23.5293 38.6314 23.5337 38.6442V38.6463C23.5569 38.697 23.578 38.7477 23.597 38.8005V38.8025C23.6498 38.9313 23.6985 39.0664 23.7427 39.208C23.7469 39.2144 23.7492 39.2226 23.7512 39.2311V39.2332C23.7533 39.2396 23.7577 39.2458 23.7577 39.2543C23.7662 39.2734 23.7703 39.2924 23.7767 39.3112C23.8295 39.4736 23.8758 39.6427 23.9224 39.8178C23.933 39.8559 23.9415 39.8937 23.9499 39.9339C23.9646 39.9908 23.9796 40.052 23.9922 40.1112C24.0048 40.1599 24.0153 40.2103 24.0259 40.259C24.0344 40.3076 24.0449 40.354 24.0511 40.4003C24.3803 42.0174 24.412 43.9045 23.9793 45.2114V45.2127Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M23.4182 46.2633C23.2465 46.4602 23.0501 46.6113 22.8233 46.7073C22.7857 46.7238 22.7463 46.7402 22.7051 46.7521C22.5919 46.7894 22.4804 46.8031 22.3741 46.7928C22.2441 46.7814 22.1187 46.739 21.9996 46.6679C21.9553 46.6422 21.912 46.6115 21.8685 46.5786C21.6358 46.3958 21.4266 46.1124 21.2422 45.7683C21.2422 45.7683 21.235 45.7428 21.2235 45.7054C21.2139 45.673 21.0386 45.2277 21.0234 45.1741C21.338 45.3528 22.587 45.9477 22.7278 45.6655C23.1644 44.7896 23.4352 42.1423 23.4007 41.0931C23.3608 39.8789 22.3198 37.7501 21.1292 37.6605C21.3035 37.5508 21.4706 37.4631 21.6657 37.3356C21.8382 37.2262 22.022 37.1539 22.2122 37.1758C22.6735 37.2221 23.0943 37.7012 23.4339 38.4242C23.6591 38.9007 23.8483 39.4809 23.9927 40.1136C24.0048 40.1626 24.0154 40.214 24.0257 40.2632C24.4875 42.4196 24.4254 45.1082 23.4176 46.2627L23.4182 46.2633Z' fill='%23CEB79B'/%3E%3Cpath d='M22.8704 41.4836C22.8388 41.14 22.8807 40.8324 22.7263 40.47C22.3154 39.5147 21.9792 39.3026 21.2824 39.0714C20.8912 38.943 20.7563 40.2331 20.8994 40.8659C21.086 41.6878 21.6243 40.0946 21.9272 40.2118C22.4856 40.4298 21.8642 42.1174 21.7913 42.5784C21.7123 43.0822 21.9939 43.6073 22.1939 44.0452C22.3368 44.3561 22.5744 44.3445 22.7167 44.0642C22.7638 43.9716 22.7952 43.8632 22.8179 43.7461C22.6637 43.4711 22.2295 43.3411 22.2778 42.9334C22.3296 42.4958 22.6557 41.6996 22.8704 41.4836Z' fill='%23CEB79B'/%3E%3Cpath d='M22.2183 46.8121C22.1714 47.2044 21.9681 48.5146 21.3652 48.2132C20.6591 47.8618 22.4533 45.6023 22.4533 45.6023C22.4533 45.6023 21.5627 43.9628 20.1798 46.1768C18.3705 49.0696 21.2458 50.5441 22.1434 49.1268C22.5982 48.4058 22.8304 47.2065 22.9164 46.6788C22.7431 46.7354 22.5717 46.7817 22.2201 46.8116H22.218L22.2183 46.8121Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M22.2188 46.8122C22.172 47.2045 21.9686 48.5147 21.3658 48.2133C20.6597 47.8622 22.4538 45.6024 22.4538 45.6024C22.4538 45.6024 22.382 45.4716 22.2484 45.3313C22.0317 45.7082 21.7923 46.0678 21.5408 46.4163C21.2445 46.8297 20.9513 47.3268 20.549 47.6192C20.273 47.8202 19.9137 47.9585 19.6009 47.753C19.4601 49.548 21.4293 50.2538 22.1408 49.1248C22.5967 48.4035 22.8279 47.2045 22.9138 46.6768C22.7416 46.7334 22.5692 46.7798 22.2186 46.8096V46.8122H22.2188Z' fill='%23474C2F'/%3E%3Cpath d='M22.2203 46.8125C22.1735 47.2048 21.9701 48.5148 21.3673 48.2136C20.6612 47.8625 22.4554 45.6027 22.4554 45.6027C22.4554 45.6027 22.424 45.5456 22.3637 45.467C22.0579 45.6465 21.8445 46.0434 21.6507 46.3433C21.3724 46.7721 21.1155 47.2514 21.0203 47.7781C20.9307 48.2757 20.8841 48.8698 21.1415 49.3252C21.1881 49.4083 21.2622 49.5337 21.3521 49.6541C21.6615 49.6019 21.9472 49.4328 22.1403 49.1254C22.5962 48.4041 22.8273 47.2051 22.9133 46.6774C22.7401 46.7343 22.5686 46.7806 22.218 46.8102L22.2203 46.8125Z' fill='%23474C2F'/%3E%3Cpath opacity='0.69' d='M20.3047 47.0218C20.7101 46.9435 21.0916 46.6874 21.3716 46.3556C21.6244 46.058 21.9145 45.6099 22.0278 45.1473C21.6355 44.9043 20.9935 44.8765 20.1832 46.1721C20.0107 46.4485 19.8828 46.7085 19.7891 46.959C19.9481 47.0421 20.1386 47.0522 20.3047 47.0192V47.0218Z' fill='%23949984'/%3E%3Cpath opacity='0.4' d='M22.8732 41.4842H22.8711V41.4821C22.6137 41.2772 22.0057 43.5384 21.824 43.1033C21.8219 43.1013 21.8219 43.0969 21.8198 43.0948V43.0928C21.6615 42.7254 21.4273 42.4595 20.9987 42.4595C20.8046 42.4595 20.5173 42.6243 20.3951 42.6642C20.3719 42.5777 20.3508 42.4763 20.3359 42.3622C20.3359 42.3602 20.3359 42.3558 20.3338 42.3476C20.203 41.3913 20.0107 39.6666 20.4162 38.4781C20.4175 38.4781 20.4182 38.4774 20.4182 38.4761L20.4203 38.474C20.4203 38.474 20.5701 38.3643 20.8152 38.3262C21.1488 38.2755 21.6574 38.3515 22.2127 39.0061C22.466 39.3036 22.6307 39.6141 22.7383 39.9117C23.0382 40.7519 22.8734 41.4845 22.8734 41.4845L22.8732 41.4842Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M46.8364 35.0219V35.0083C46.7615 34.8212 46.6629 34.539 46.5439 34.1923V34.1856C46.5406 34.1753 46.5337 34.1686 46.5303 34.1583V34.1447H46.527V34.131C46.4557 33.9202 46.3807 33.6821 46.2925 33.434C46.1599 33.0226 46.0204 32.5804 45.8708 32.1247V32.1214L45.8675 32.1181H45.8641C45.7859 31.8766 45.7146 31.6421 45.633 31.404C45.633 31.404 45.6296 31.4006 45.6296 31.3973C45.6263 31.3803 45.616 31.3564 45.6126 31.3394C45.6093 31.336 45.6093 31.3327 45.6093 31.3291V31.3257C45.6059 31.3224 45.6059 31.319 45.6059 31.3154C45.6026 31.2951 45.5992 31.2815 45.5923 31.2575C45.5277 31.057 45.4631 30.8632 45.4018 30.676C45.4018 30.6727 45.3951 30.6657 45.3951 30.6624V30.6557C45.2592 30.2443 45.1367 29.86 45.0211 29.5303V29.5269C44.8579 29.044 44.7354 28.6903 44.6674 28.5681V28.5647C44.6538 28.541 44.6437 28.5274 44.6401 28.5274C44.5788 28.5137 44.5176 28.5104 44.453 28.5001C44.4156 28.5001 44.3714 28.4934 44.3341 28.4934H44.3307C44.2288 28.4934 44.1302 28.4934 44.0179 28.5104H44.0113C43.933 28.5104 43.8481 28.524 43.7631 28.5307H43.7598C43.7394 28.5341 43.7224 28.5374 43.7018 28.541C43.6882 28.5444 43.6746 28.5444 43.6609 28.5477C43.195 28.636 42.6884 28.7995 42.1852 29.0103H42.1785C42.0866 29.0476 41.988 29.0919 41.8997 29.1328L41.8963 29.1362H41.893L41.8896 29.1328C41.7128 29.2111 41.5393 29.296 41.3694 29.3879C41.0803 29.5308 40.8016 29.6906 40.5534 29.8402C40.5534 29.8435 40.5501 29.8435 40.5501 29.8435C40.5467 29.8469 40.5434 29.8502 40.5364 29.8502L40.5297 29.8569C40.4718 29.8909 40.4175 29.9282 40.3665 29.9622C40.227 30.0505 40.1047 30.1357 39.9959 30.2173C39.9822 30.2276 39.9686 30.241 39.9585 30.2546C39.9552 30.2546 39.9552 30.258 39.9552 30.258C39.6391 30.639 41.0059 31.6148 41.3017 32.8048C41.339 32.9341 41.356 33.0633 41.363 33.1958C41.3663 33.4679 41.3087 33.7434 41.1588 34.0324C41.0706 34.1853 40.9617 34.3419 40.8188 34.495L40.8155 34.4984C40.7066 34.6209 40.574 34.7398 40.4175 34.8621C40.183 35.0456 39.836 35.2734 39.4483 35.5082L39.4416 35.5149C39.2205 35.6508 38.9827 35.7937 38.7479 35.9365C38.4555 36.1134 38.1664 36.2869 37.908 36.4465H37.9046C37.8707 36.4668 37.8434 36.4907 37.8094 36.5077C37.5509 36.6676 37.3231 36.8171 37.1532 36.943C37.0783 36.9973 37.0137 37.0553 36.956 37.1165C36.8711 37.2118 36.7995 37.3103 36.7385 37.4192C36.7352 37.4329 36.7249 37.4499 36.7216 37.4702V37.4735C36.7182 37.4972 36.7079 37.5075 36.7012 37.5245V37.5312C36.6469 37.7147 36.6093 37.8916 36.5959 38.0617C36.5653 38.4324 36.5653 38.7555 36.6878 39.1158C36.7694 39.3776 36.868 39.6361 36.9089 39.9082C36.9089 39.9185 36.9156 39.9319 36.9156 39.9421C36.9736 40.3741 36.936 40.8058 36.9089 41.2377C36.9089 41.2411 36.9056 41.2411 36.9056 41.248V41.2753C36.892 41.4725 36.8783 41.6733 36.8683 41.8805C36.8683 42.03 36.8683 42.1762 36.8786 42.3258C36.8922 42.3531 36.9432 42.4517 37.0078 42.5979V42.6012C37.2289 43.0569 37.6199 43.9274 37.6742 44.1519C37.8205 44.7367 37.3581 44.9169 36.9193 45.1108L36.9159 45.1141H36.9092C36.7187 45.1957 36.5352 45.2876 36.4093 45.4132C36.2801 45.5458 36.1542 45.6477 36.0319 45.726H36.0286C35.5356 46.0287 35.0154 45.9198 34.0869 45.2057C33.5394 44.7808 32.9919 44.8078 32.6691 44.886H32.6624C32.5265 44.92 32.4279 44.9676 32.3973 44.9913C32.2341 45.4096 32.3906 45.9842 32.717 46.576C32.717 46.5793 32.7203 46.5793 32.7203 46.5827C32.7849 46.7119 32.8732 46.8478 32.9618 46.977C32.9651 46.9804 32.9651 46.9837 32.9685 46.9873C32.9752 46.994 32.9751 46.9976 32.9787 47.0043V47.0076C32.9787 47.0099 32.9799 47.0133 32.9821 47.0179C33.0637 47.1302 33.1486 47.2524 33.2372 47.3683L33.2405 47.3716C33.2405 47.3783 33.2472 47.3819 33.2508 47.392C33.482 47.6911 33.7371 47.9802 33.9922 48.2183C34.2439 48.4564 34.4988 48.6602 34.7199 48.7895C34.7812 48.8507 34.9034 48.9254 35.0803 49.0106H35.0836C35.417 49.1671 35.9336 49.3573 36.539 49.5751C36.7262 49.6397 36.9301 49.7043 37.1306 49.7756H37.1409C37.3007 49.8335 37.4606 49.8845 37.6238 49.9388H37.6271C37.797 49.9967 37.9672 50.0544 38.1337 50.1054H38.144C38.4364 50.2039 38.7222 50.2958 39.0076 50.3911C39.9428 50.6902 40.8201 50.9692 41.4049 51.1698C41.5988 51.2411 41.762 51.2956 41.8775 51.3433C42.0068 51.3942 42.0884 51.4316 42.1121 51.4588C42.2073 51.2923 42.4181 51.2344 42.6902 51.2447H42.7039C43.0269 51.255 43.4416 51.3433 43.8396 51.4215H43.8429C43.8463 51.4215 43.8496 51.4215 43.8532 51.4249C44.1456 51.4895 44.4347 51.5404 44.6659 51.5507H44.6795C44.7032 51.5541 44.7271 51.5541 44.7508 51.5541H44.7541C44.7778 51.5541 44.8085 51.5541 44.8291 51.5507H44.8527C45.0499 51.5371 45.2064 51.4691 45.2744 51.3229C45.3117 51.248 45.3457 51.17 45.3797 51.0748V51.0714C45.4952 50.7517 45.6008 50.3404 45.6891 49.8644C45.73 49.6502 45.7673 49.4258 45.8013 49.191C45.8013 49.1843 45.8013 49.174 45.8046 49.1707C45.876 48.7151 45.9339 48.2288 45.9882 47.7323V47.7256C46.0392 47.253 46.0834 46.77 46.1208 46.3008V46.2771C46.148 45.978 46.1717 45.6889 46.1921 45.4135C46.1887 45.4101 46.1887 45.4068 46.1921 45.4068C46.1954 45.3115 46.2024 45.2196 46.2091 45.1314V45.1077C46.2091 45.1043 46.2124 45.1077 46.2124 45.1077V45.0974C46.2227 44.9818 46.226 44.8696 46.2361 44.7607V44.7504C46.2428 44.6245 46.2497 44.5022 46.2564 44.3867V44.373C46.2631 44.2677 46.2734 44.1689 46.2801 44.0772C46.2971 43.7611 46.3174 43.5027 46.3311 43.3053C46.3617 42.8733 46.4093 41.646 46.457 40.5103C46.4603 40.4253 46.4603 40.3471 46.4672 40.2655V40.1635C46.4672 40.1432 46.4672 40.1262 46.4706 40.1056V40.0886C46.4706 40.0649 46.4706 40.041 46.4773 40.024C46.4773 39.9831 46.4806 39.9458 46.4806 39.9151V39.7689C46.4909 39.6567 46.4909 39.5547 46.4943 39.4459V39.4392C46.4976 39.3406 46.5046 39.242 46.5046 39.1534V39.1398C46.5046 39.1295 46.5079 39.1261 46.5079 39.1161V39.0618C46.5079 39.0312 46.5146 39.0075 46.5146 38.9802V38.9189C46.5316 38.5076 46.5349 38.2355 46.5349 38.2355L46.5586 38.0723L46.562 38.0587L46.5653 38.0417L46.6266 37.6167L46.6299 37.6064L46.6333 37.5927L46.6366 37.5894C46.6366 37.5872 46.6355 37.5849 46.6333 37.5827V37.5793L46.64 37.5487V37.5351L46.8575 36.0253L46.8608 36.0117V35.988L46.9628 35.2842C46.9458 35.2842 46.8981 35.189 46.8369 35.0225L46.8364 35.0219ZM40.226 38.1843L40.2293 38.1809H40.2327C40.2327 38.1809 40.236 38.1809 40.2394 38.1776H40.253C40.9058 38.0993 41.5892 38.062 42.222 38.1639C42.579 38.2252 42.2083 38.2625 41.6575 38.2829C41.6552 38.2806 41.653 38.2795 41.6508 38.2795C41.6508 38.2795 41.6474 38.2795 41.6474 38.2829C40.7702 38.3101 39.461 38.2895 39.869 38.2285C39.9812 38.2149 40.0934 38.2013 40.2056 38.1876C40.2123 38.1843 40.2159 38.1843 40.2193 38.1843H40.226Z' fill='%23CEB79B'/%3E%3Cpath d='M33.3588 46.575C32.9768 46.3299 32.4563 46.1554 32.4099 45.7289C32.3824 45.4792 32.5989 44.8325 32.8627 44.6737C33.0602 44.5558 32.8743 44.2675 32.6748 44.388C32.2717 44.6307 32.0171 45.3319 32.0406 45.7289C32.0712 46.2756 32.6928 46.5523 33.1742 46.8633C33.3696 46.9881 33.5541 46.6998 33.3611 46.5773L33.3588 46.575Z' fill='%23CEB79B'/%3E%3Cpath d='M37.3434 46.5777C37.1504 46.7002 37.3349 46.9883 37.5303 46.8637C38.0117 46.5527 38.6333 46.276 38.664 45.7293C38.6871 45.3323 38.4328 44.6311 38.0297 44.3884C37.8302 44.2682 37.6443 44.5562 37.8418 44.6741C38.1056 44.8329 38.3221 45.4796 38.2946 45.7293C38.2482 46.1558 37.7277 46.3303 37.3457 46.5754L37.3434 46.5777Z' fill='%23CEB79B'/%3E%3Cpath d='M42.969 27.6825C42.8297 28.0584 42.6333 28.3855 42.3885 28.6664C42.378 28.679 42.3674 28.6896 42.3569 28.7022C41.7849 29.348 40.9573 29.7661 39.999 30.0132C39.7035 30.0935 39.3953 30.1568 39.0764 30.2011C38.8231 30.2412 38.5654 30.2708 38.3036 30.2896C38.1327 30.3066 37.9595 30.3172 37.7844 30.3254C36.5813 30.3802 35.3251 30.2917 34.1768 30.146C33.8053 30.0973 33.4401 30.0446 33.098 29.9877C31.5548 29.7365 30.0749 29.1982 28.7008 28.4445C28.6882 28.4381 28.6756 28.4298 28.6627 28.4234C28.099 28.1088 27.4511 27.8007 26.8008 27.5073C26.7903 27.5031 26.7818 27.5008 26.7712 27.4946C26.7692 27.4946 26.7648 27.4946 26.7627 27.4926C26.4863 27.368 26.2096 27.2457 25.9395 27.1273C25.3992 26.8887 24.8862 26.6629 24.4556 26.456C24.426 26.4413 24.3963 26.4264 24.3691 26.4138C24.3248 26.3926 24.2805 26.3695 24.2383 26.3484C24.5001 25.9641 24.7809 25.6052 25.0826 25.276C25.4329 24.8917 25.7961 24.5393 26.1655 24.2226C30.0731 23.3783 35.1542 24.704 38.7029 25.9514C39.0259 26.0655 39.3361 26.1795 39.6316 26.2892L39.7521 26.3334C40.2209 26.5108 40.6492 26.6797 41.0315 26.8359C41.0379 26.838 41.0461 26.8423 41.0526 26.8444C41.0842 26.857 41.1138 26.8676 41.1455 26.8825C41.7705 27.1379 42.2601 27.3554 42.5705 27.4967C42.8279 27.6148 42.9675 27.6825 42.9675 27.6825H42.9695H42.969Z' fill='%23CE8000'/%3E%3Cpath opacity='0.4' d='M27.3292 35.4936C27.3292 35.4936 28.1473 37.728 29.6382 38.0884C31.1292 38.449 32.6363 39.7621 33.3604 39.3165C34.0845 38.8712 33.9664 38.0184 33.9664 38.0184C33.9664 38.0184 34.0845 36.7601 35.3513 36.7601C36.1124 36.7601 36.4067 33.5937 33.6624 34.2269C31.9084 34.6316 29.9765 34.2853 28.9697 34.0449C27.9627 33.8048 27.1184 35.0712 27.3295 35.4934L27.3292 35.4936Z' fill='%23CEB79B'/%3E%3Cpath d='M30.849 38.3115C30.5674 38.1884 30.1924 38.1802 29.8915 38.1501C29.5769 38.1171 29.156 38.0214 28.8415 38.1447C28.7753 38.1447 28.7128 38.1694 28.6636 38.235C28.3238 38.6922 28.6989 39.4091 29.1058 39.6995C29.596 40.047 30.3427 39.9759 30.8079 39.6227C31.2218 39.3079 31.394 38.547 30.8524 38.3117L30.849 38.3115Z' fill='%233E875B'/%3E%3Cpath d='M30.8485 38.3115C30.5669 38.1884 30.1919 38.1802 29.891 38.1501C29.5764 38.1171 29.1545 38.0214 28.8397 38.1447C28.7748 38.1447 28.711 38.1694 28.6618 38.235C28.5501 38.3856 28.5171 38.5635 28.5364 38.7442C28.6345 38.7414 28.7359 38.7442 28.8317 38.7442C29.0894 38.7524 29.3494 38.7496 29.6057 38.7578C29.9432 38.7715 30.4905 38.8399 30.438 39.2997C30.3991 39.65 29.902 39.7895 29.6227 39.8526C29.5818 39.8608 29.5406 39.8691 29.4997 39.8773C29.9432 39.9921 30.4573 39.8884 30.8074 39.6199C31.2213 39.3051 31.3935 38.5442 30.8506 38.3089L30.8483 38.3117L30.8485 38.3115Z' fill='%233B754B'/%3E%3Cpath d='M32.7643 39.1984C32.5336 39.1201 30.1603 36.8026 26.888 38.3165C26.6329 38.4341 26.8319 38.8236 27.087 38.7034C29.9837 37.3658 32.5143 39.5755 32.6245 39.6123C32.8909 39.7029 33.0286 39.2892 32.7643 39.1984Z' fill='%23676D54'/%3E%3Cpath d='M39.6191 39.5281C40.0331 39.915 40.752 40.0604 41.2619 39.7695C41.6872 39.5281 42.124 38.8693 41.838 38.3918C41.7969 38.3231 41.7374 38.293 41.6733 38.2848C41.3806 38.1339 40.9633 38.1859 40.6537 38.1859C40.36 38.1859 39.9919 38.1584 39.7059 38.249C39.1548 38.4248 39.2474 39.1821 39.6189 39.5281H39.6191Z' fill='%233E875B'/%3E%3Cpath d='M41.8368 38.3938C41.7956 38.3253 41.7351 38.2949 41.672 38.2867C41.3783 38.1359 40.9611 38.1879 40.6511 38.1879C40.3574 38.1879 39.9893 38.1603 39.7046 38.2509C39.3721 38.3552 39.276 38.6736 39.3309 38.9838C39.8853 38.8932 40.6511 38.7943 40.6753 39.3022C40.689 39.5987 40.3302 39.7385 40.0993 39.8098C40.0913 39.8098 40.0856 39.8127 40.0776 39.8152C40.4594 39.9663 40.9088 39.9717 41.2607 39.7712C41.6859 39.5298 42.1215 38.8713 41.8368 38.3938Z' fill='%233B754B'/%3E%3Cpath d='M37.7096 38.9952C37.9531 38.9349 40.6372 36.6102 43.8198 38.6549C44.0703 38.8142 43.8198 39.2258 43.573 39.0665C40.7551 37.2579 37.9235 39.4426 37.8056 39.4727C37.5222 39.5442 37.4262 39.0665 37.7096 38.9952Z' fill='%23676D54'/%3E%3Cpath d='M37.0535 40.7708C37.0661 40.5757 37.0787 40.3731 37.0862 40.1755C37.0998 39.8259 37.0586 39.4964 36.9554 39.1391C36.8182 38.6678 36.8233 38.2521 36.9734 37.7099C36.9904 37.6492 36.9809 37.5908 36.9448 37.5452C36.9067 37.4945 36.8414 37.4641 36.7749 37.4641C36.6864 37.4641 36.6156 37.5174 36.5924 37.6034C36.4869 37.9885 36.4405 38.3002 36.4457 38.6145C36.4488 38.8552 36.5121 39.0884 36.5723 39.3165C36.6282 39.5293 36.6895 39.7497 36.6969 39.9729C36.7116 40.3224 36.6895 40.6748 36.6663 41.0169C36.6357 41.5109 36.603 42.0203 36.6789 42.5298C36.6915 42.6211 36.7549 42.6767 36.8437 42.6767C36.907 42.6767 36.9724 42.6464 37.0136 42.5982C37.0537 42.5524 37.0694 42.4942 37.0589 42.4309C36.9775 41.8862 37.0136 41.3186 37.0514 40.7711L37.0535 40.7708Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.3' d='M44.288 28.6781C44.2816 28.6846 44.2775 28.6887 44.2733 28.6951C44.2563 28.7098 44.2437 28.7247 44.2291 28.7415C44.2249 28.7435 44.2226 28.7456 44.2206 28.7499C44.0412 28.9273 43.505 29.4128 42.709 29.7611C42.6457 29.7863 42.5528 29.8244 42.4472 29.8666C42.2743 29.9299 42.0905 29.9848 41.8984 30.029C41.7888 30.0543 41.6724 30.0777 41.5522 30.0965C41.3769 30.1261 41.1913 30.1513 41.0013 30.1745C40.5877 30.2208 40.1442 30.2504 39.7073 30.2674C39.4772 30.2759 39.2471 30.2821 39.0275 30.2864C38.7722 30.2906 38.5294 30.2906 38.3034 30.2885C38.1325 30.3055 37.9592 30.3161 37.7842 30.3243C36.581 30.3791 35.3249 30.2906 34.1765 30.1449C33.8051 30.0962 33.4398 30.0434 33.0977 29.9866C31.5545 29.7353 30.0747 29.1971 28.7006 28.4434C28.4684 28.3548 28.2318 28.2704 27.9955 28.186C27.985 28.1818 27.9744 28.1795 27.9639 28.1754C27.9703 28.1713 27.9744 28.1669 27.9785 28.1648C27.9744 28.1648 27.9659 28.169 27.9574 28.1733C27.9574 28.1733 27.9469 28.1775 27.9258 28.1839C27.8478 28.2135 27.6176 28.2936 27.3178 28.3929C27.3157 28.3929 27.3136 28.395 27.3136 28.395C26.4755 28.6714 25.0885 29.0936 24.7974 28.9482C24.5758 28.8362 24.0015 28.4923 23.8476 27.9432C23.7356 27.5483 23.8434 27.0461 24.4556 26.4548C24.6074 26.305 24.7912 26.1508 25.0087 25.9925C27.3309 24.3036 29.8641 24.7261 31.9751 25.9925C34.0862 27.259 36.3154 29.0493 39.3637 28.5257C39.9145 28.4308 44.8523 25.9333 44.8523 26.6258C44.8523 27.4701 44.9915 27.9852 44.2885 28.6776L44.288 28.6781Z' fill='%23C77500'/%3E%3Cpath d='M50.2166 39.7888C50.2187 39.9133 50.2187 40.0356 50.2166 40.1581C49.7242 40.6645 49.5036 43.8312 49.3576 44.3506C47.8762 44.3113 48.3347 46.8355 46.9637 47.1034C46.8146 43.9347 46.4785 40.2621 46.3554 37.0038C46.1999 34.3347 45.9291 31.2977 44.6099 29.1156C44.6099 29.1135 44.6078 29.1135 44.6078 29.1115C44.4135 28.8116 44.2892 28.6788 44.2892 28.6788C44.2578 28.7166 44.2233 28.7527 44.1857 28.7864H44.1836C42.5344 30.5574 39.0721 30.3023 36.9976 30.2598C37.7949 29.589 40.7636 26.5621 39.5139 24.8621L40.3371 24.4294L38.0235 23.2852C40.595 23.5573 38.1287 21.767 36.7969 21.1445C43.2654 21.334 48.1341 26.8148 48.842 33.1014C49.32 35.2987 49.084 37.8028 49.9739 38.2288C49.9754 38.2327 49.9739 38.2402 49.978 38.2414C50.1507 38.7321 50.202 39.2564 50.2166 39.7888Z' fill='%23C77500'/%3E%3Cpath d='M50.3503 40.0908C50.357 40.2574 50.357 40.4206 50.3503 40.5838C50.34 40.7913 50.3266 40.9918 50.3129 41.1856C50.3026 41.2739 50.2993 41.3522 50.2893 41.4374C50.2893 41.4441 50.2893 41.451 50.2859 41.4577C50.2723 41.6312 50.2519 41.7911 50.228 41.944C50.2246 41.9813 50.2213 42.0256 50.2144 42.0629C50.2041 42.1411 50.1907 42.2158 50.1837 42.2874C50.177 42.3213 50.1734 42.352 50.1667 42.3826V42.3996C50.1634 42.4029 50.1634 42.4099 50.1634 42.4099C50.1634 42.4202 50.1634 42.4235 50.16 42.4336C50.1533 42.4745 50.1397 42.5255 50.1294 42.5831C50.0921 42.7226 50.0478 42.8892 49.9899 43.0627C49.9253 43.2668 49.8504 43.4776 49.7858 43.6679C49.7008 43.9093 49.6293 44.1098 49.6089 44.1984C49.5783 44.3413 49.5206 44.5691 49.4627 44.7969C49.4457 44.8682 49.4254 44.9398 49.4084 45.0077C49.4051 45.0144 49.4051 45.0213 49.4017 45.028C49.3814 45.1163 49.3574 45.2015 49.3371 45.2798V45.2831C49.3304 45.3035 49.3268 45.3241 49.3201 45.3411C49.3168 45.3547 49.3168 45.3614 49.3134 45.3717C49.3101 45.382 49.3101 45.392 49.3067 45.4023V45.409C49.3 45.4294 49.2931 45.4533 49.2864 45.4736C49.2864 45.477 49.283 45.4803 49.283 45.4839C49.2694 45.5249 49.2594 45.5622 49.2491 45.5962C49.2457 45.6131 49.2387 45.6301 49.2354 45.6438C49.2321 45.6505 49.2321 45.6574 49.2287 45.6608C49.2117 45.705 49.2014 45.7424 49.1914 45.773C49.1914 45.7866 49.188 45.7933 49.188 45.8003C49.1847 45.8106 49.1777 45.8206 49.1777 45.824C49.1744 45.8343 49.1744 45.8443 49.1744 45.8443C49.1744 45.8443 49.171 45.8476 49.171 45.851C49.1677 45.8543 49.1677 45.8577 49.1644 45.8577C49.1234 45.9326 49.0794 45.9972 49.0385 46.0652C49.0385 46.0685 49.0351 46.0685 49.0351 46.0719C49.0182 46.0955 49.0012 46.1195 48.9875 46.1398C48.9842 46.1465 48.9808 46.1535 48.9739 46.1568L48.9672 46.1635C48.9468 46.1941 48.9263 46.2248 48.9026 46.2554L48.8923 46.2657C48.882 46.2827 48.8686 46.2963 48.8583 46.31L48.8174 46.3609C48.7764 46.4086 48.7391 46.4492 48.6948 46.4935C48.6845 46.5038 48.6712 46.5138 48.6539 46.5344L48.6266 46.5617C48.6233 46.5651 48.6163 46.5651 48.6096 46.572C48.6074 46.5742 48.6052 46.5754 48.6029 46.5754C48.5996 46.582 48.5963 46.5857 48.5927 46.5857C48.5654 46.6093 48.5314 46.6333 48.5044 46.6606C48.501 46.6606 48.4977 46.6606 48.4941 46.6639C48.4907 46.6673 48.4874 46.6673 48.4838 46.6706C48.4464 46.6979 48.4089 46.7249 48.3648 46.7489H48.3615C48.3548 46.7522 48.3478 46.7592 48.3378 46.7658C48.3345 46.7658 48.3311 46.7692 48.3275 46.7692V46.7725L48.3072 46.7828C48.3005 46.7828 48.2902 46.7862 48.2835 46.7895C48.2698 46.7962 48.2598 46.7998 48.2495 46.8065C48.2019 46.8268 48.1543 46.8438 48.1067 46.8541C48.0693 46.8608 48.0284 46.8678 47.9911 46.8711C47.9808 46.8711 47.9774 46.8745 47.9674 46.8745H47.9301C47.9064 46.8812 47.8824 46.8812 47.8655 46.8812C47.8518 46.8812 47.8315 46.8812 47.8178 46.8745H47.7872C47.7839 46.8745 47.7805 46.8745 47.7769 46.8711H47.7532C47.7329 46.8711 47.7159 46.8644 47.6989 46.8608C47.6922 46.8608 47.6886 46.8575 47.6819 46.8575C47.6683 46.8541 47.6582 46.8472 47.6446 46.8438H47.6379C47.6312 46.8438 47.6209 46.8405 47.6142 46.8371H47.6109C47.6075 46.8371 47.5972 46.8338 47.5939 46.8338V46.8305H47.5905C47.5735 46.8271 47.5566 46.8202 47.5396 46.8135C47.5226 46.8068 47.5056 46.7998 47.492 46.7931H47.4816L47.4613 46.7828C47.4591 46.7828 47.4569 46.7817 47.4546 46.7795C47.441 46.7761 47.424 46.7692 47.4103 46.7592C47.4081 46.7592 47.4047 46.758 47.4001 46.7558L47.3388 46.7252C47.3184 46.7149 47.2979 46.7015 47.2775 46.6878H47.2742C47.2469 46.6742 47.2199 46.6572 47.1959 46.6402C47.155 46.6129 47.1143 46.5823 47.0734 46.5519C47.0497 46.5316 47.0258 46.511 46.9985 46.4873C46.9748 46.467 46.9542 46.4464 46.9305 46.4227L46.9272 46.4194C46.8999 46.3957 46.8796 46.3751 46.8559 46.3514C46.7913 46.2801 46.73 46.2019 46.679 46.1203C46.6654 46.1033 46.6553 46.093 46.645 46.0726C46.6417 46.0726 46.6417 46.0693 46.6417 46.0693C46.6077 46.0217 46.5771 45.9707 46.5465 45.9164C46.5362 45.8994 46.5261 45.8791 46.5158 45.8585C46.4988 45.8278 46.4818 45.7972 46.4682 45.7666C46.4409 45.7122 46.4172 45.6613 46.3933 45.6067C46.3696 45.5524 46.3457 45.4945 46.322 45.4368C46.3084 45.4028 46.2947 45.3655 46.2847 45.3279V45.3246C46.271 45.2873 46.2574 45.2533 46.2438 45.2124C46.2404 45.2057 46.2371 45.1987 46.2371 45.192C46.2304 45.1683 46.2234 45.1477 46.2167 45.1241C46.2134 45.1207 46.2134 45.1174 46.2134 45.1138V45.0968C46.1997 45.0628 46.1897 45.0255 46.1761 44.9915V44.9848C46.1761 44.9815 46.1761 44.9745 46.1727 44.9712V44.9678C46.1624 44.9338 46.1557 44.9032 46.149 44.8692C46.1387 44.8283 46.1287 44.791 46.1184 44.7503C46.1014 44.672 46.0844 44.5871 46.0708 44.5055C46.0298 44.3014 46.0062 44.0941 45.9858 43.8764C45.9825 43.8491 45.9791 43.8185 45.9791 43.7881V43.7711C45.9758 43.7677 45.9758 43.7608 45.9758 43.7541C45.9724 43.7474 45.9724 43.7405 45.9724 43.7338V43.7201C45.9724 43.7168 45.9758 43.7168 45.9758 43.7168C45.9724 43.7134 45.9758 43.7134 45.9758 43.7134L45.9724 43.7101C45.9724 43.6998 45.9657 43.6864 45.9724 43.6728C45.9657 43.6388 45.9657 43.6081 45.9657 43.5742V43.5299C45.9624 43.5129 45.9624 43.4959 45.959 43.4789C45.9421 43.2068 45.9421 42.9247 45.9524 42.6423C45.9557 42.5471 45.959 42.4485 45.966 42.3533C45.9693 42.3159 45.9727 42.275 45.9727 42.2377C45.9727 42.1967 45.976 42.1561 45.983 42.1151C45.9863 42.1151 45.9863 42.1118 45.983 42.1085L45.9796 42.1051C45.9796 42.1051 45.983 42.1051 45.983 42.1018C45.9863 42.0984 45.9863 42.0951 45.983 42.0915C45.983 42.0915 45.9796 42.0915 45.9796 42.0881C45.9796 42.0778 45.983 42.0711 45.983 42.0608C45.9863 42.0335 45.9897 42.0029 45.9897 41.9759C45.993 41.918 46 41.8637 46.01 41.806V41.7924C46.01 41.772 46.0134 41.7514 46.0167 41.7311V41.7108C46.0201 41.7005 46.0201 41.6904 46.0234 41.6768C46.0201 41.6701 46.0201 41.6631 46.0234 41.6598C46.0234 41.6531 46.0234 41.6495 46.0267 41.6461C46.0267 41.6258 46.0301 41.6052 46.037 41.5882V41.5815C46.0507 41.449 46.071 41.3164 46.088 41.1872C46.1153 41.0137 46.1459 40.8438 46.1832 40.6736V40.6669C46.1899 40.6227 46.1969 40.575 46.2069 40.531C46.2172 40.4867 46.2239 40.4461 46.2376 40.4018V40.3882C46.2376 40.3848 46.2443 40.3779 46.2443 40.3745V40.3642H46.2476C46.2476 40.3472 46.251 40.3269 46.2579 40.3099C46.2579 40.2963 46.2613 40.2793 46.2646 40.2726V40.2659C46.2646 40.2637 46.2657 40.2614 46.2679 40.2592C46.2646 40.2558 46.2679 40.2489 46.2713 40.2489C46.2746 40.2422 46.2746 40.2319 46.278 40.2252C46.278 40.2219 46.2813 40.2219 46.2813 40.2185C46.2847 40.1982 46.288 40.1776 46.295 40.1539C46.3017 40.113 46.312 40.069 46.3256 40.028C46.3256 40.0247 46.3256 40.0177 46.3323 40.0144L46.329 40.011C46.329 40.0088 46.3301 40.0077 46.3323 40.0077C46.3459 39.9567 46.3596 39.9024 46.3732 39.8478C46.3869 39.7935 46.4039 39.7426 46.4208 39.6913C46.4445 39.6064 46.4685 39.5248 46.4958 39.4465V39.4398C46.4958 39.4365 46.4991 39.4332 46.4991 39.4296C46.5025 39.4262 46.5025 39.4193 46.5058 39.4193C46.5058 39.4148 46.5069 39.4114 46.5091 39.409C46.5091 39.3987 46.5091 39.3953 46.5158 39.3886C46.5261 39.3513 46.5395 39.3173 46.5498 39.2833L46.5702 39.2221C46.5735 39.2154 46.5735 39.2084 46.5768 39.2017H46.5802V39.1914C46.5835 39.1881 46.5835 39.1847 46.5835 39.1745L46.5869 39.1711C46.5902 39.1678 46.5936 39.1608 46.5936 39.1575C46.5969 39.1508 46.5969 39.1438 46.5969 39.1371C46.5969 39.1338 46.6003 39.1338 46.6003 39.1338C46.6003 39.1304 46.6036 39.1304 46.6036 39.1304C46.6036 39.1304 46.6036 39.1271 46.6069 39.1271V39.1134C46.6114 39.109 46.6136 39.1056 46.6136 39.1031L46.617 39.0998C46.5151 38.9263 46.5117 38.9196 46.617 39.0931C46.6273 39.0728 46.634 39.0558 46.6407 39.0352C46.678 38.9366 46.7156 38.8414 46.7563 38.7531V38.7464C46.7585 38.7441 46.7596 38.7419 46.7596 38.7397C46.7629 38.7363 46.7663 38.7294 46.7663 38.726C46.773 38.7157 46.7766 38.709 46.7799 38.7024C46.7833 38.699 46.7866 38.6957 46.7866 38.6921V38.6818C46.79 38.6751 46.79 38.6681 46.7933 38.6614C46.7967 38.6581 46.7967 38.6547 46.8 38.6547C46.8034 38.6514 46.8034 38.648 46.8067 38.648C46.8067 38.6447 46.81 38.6447 46.81 38.6447V38.638C46.8134 38.6313 46.8167 38.6244 46.8167 38.6177V38.6143C46.8304 38.587 46.8404 38.56 46.8577 38.5327C46.8713 38.5021 46.8814 38.4748 46.8986 38.4511C46.9189 38.4068 46.9429 38.3592 46.9666 38.3186C46.9902 38.2743 47.0142 38.2303 47.0379 38.1893C47.0615 38.1484 47.0821 38.1111 47.1092 38.0738C47.1228 38.0501 47.1365 38.0295 47.1501 38.0058C47.1807 37.9649 47.2114 37.9208 47.2384 37.8799C47.2487 37.8663 47.2587 37.8526 47.2724 37.839C47.2827 37.8253 47.2927 37.8084 47.3064 37.7947C47.313 37.7844 47.3233 37.771 47.33 37.7607C47.3537 37.7301 47.381 37.6995 47.4083 37.6688C47.415 37.6585 47.4253 37.6485 47.432 37.6416C47.4556 37.6143 47.4762 37.5906 47.5033 37.5666C47.51 37.56 47.5169 37.5497 47.527 37.543C47.5542 37.5157 47.5779 37.4953 47.6052 37.4717C47.6289 37.4513 47.6562 37.4274 47.6868 37.4104C47.6935 37.4037 47.7005 37.3934 47.7105 37.3901C47.7241 37.3764 47.7411 37.3664 47.7548 37.3594C47.7854 37.3391 47.8127 37.3221 47.8431 37.3085C47.8533 37.3018 47.8634 37.2948 47.8737 37.2915C47.9077 37.2711 47.9416 37.2575 47.9756 37.2438C48.0199 37.2269 48.0639 37.2132 48.1115 37.2029C48.1422 37.1996 48.1728 37.1926 48.2034 37.1893H48.2068C48.2544 37.1859 48.2951 37.1859 48.3394 37.1893H48.346C48.387 37.1926 48.4276 37.1996 48.465 37.2096C48.5059 37.2233 48.5466 37.2369 48.5839 37.2505H48.5872C48.5906 37.2505 48.5939 37.2505 48.5975 37.2539C48.6452 37.2742 48.6894 37.2982 48.7335 37.3218C48.7401 37.3252 48.7471 37.3285 48.7504 37.3321C48.7607 37.3355 48.7708 37.3424 48.7811 37.3491C48.822 37.3728 48.8627 37.3968 48.9 37.4204C48.9103 37.4238 48.9203 37.4307 48.9306 37.4341V37.4374C48.9329 37.4352 48.934 37.4352 48.934 37.4374L48.9543 37.4477C48.9746 37.458 48.9952 37.4681 49.0122 37.4817C49.0326 37.492 49.0532 37.502 49.0701 37.5123L49.0735 37.5157C49.1687 37.5666 49.257 37.6143 49.3489 37.6722H49.3523C49.3693 37.6789 49.3863 37.6925 49.3999 37.7028C49.4202 37.7095 49.4408 37.7232 49.4612 37.7334C49.4715 37.7368 49.4782 37.7437 49.4884 37.7471C49.5294 37.7708 49.5734 37.7914 49.6143 37.8184C49.638 37.832 49.6653 37.849 49.6892 37.866C49.7129 37.8797 49.7369 37.8933 49.7572 37.9103C49.8251 37.9613 49.8864 38.0225 49.9307 38.1041C49.9613 38.162 49.9886 38.2197 50.0156 38.2776C50.0429 38.3389 50.0699 38.4002 50.0905 38.4648C50.0939 38.4681 50.0972 38.4715 50.0972 38.4751C50.0972 38.4787 50.1006 38.4818 50.1006 38.4818V38.492C50.1006 38.4887 50.1006 38.492 50.1006 38.4954H50.1073C50.1309 38.5634 50.1515 38.6313 50.1685 38.7029C50.1889 38.7742 50.2059 38.8424 50.2229 38.917C50.2978 39.2434 50.3317 39.6005 50.3454 39.9645C50.3487 40.0054 50.3487 40.0461 50.3487 40.0937L50.3503 40.0908Z' fill='%23E8D4BA'/%3E%3Cpath d='M48.8038 45.5254C49.0172 45.436 49.2113 45.3467 49.3353 45.2836C49.3289 45.3055 49.3245 45.3228 49.3178 45.3423C49.3135 45.3642 49.307 45.3838 49.3027 45.4033V45.4077C49.2764 45.4991 49.2525 45.5799 49.2329 45.6451C49.2154 45.6996 49.2025 45.7431 49.1914 45.7758C49.1894 45.7866 49.1871 45.7933 49.185 45.8021C49.1806 45.8129 49.1786 45.8196 49.1786 45.826C49.1742 45.8368 49.1721 45.8435 49.1721 45.8435C49.1701 45.8479 49.1678 45.8523 49.1634 45.8567C49.0805 46.0026 48.9912 46.1377 48.8998 46.2574C48.8715 46.2922 48.8432 46.3293 48.8148 46.362C48.7757 46.4078 48.7363 46.4513 48.6928 46.4927V46.4948C48.6797 46.5079 48.6666 46.5187 48.6493 46.5339L48.6231 46.5602C48.5839 46.5972 48.5425 46.632 48.5011 46.6626C48.4552 46.6953 48.4097 46.7257 48.3615 46.7519C48.342 46.7627 48.3245 46.7715 48.3049 46.7803L48.246 46.8065C48.1546 46.848 48.0586 46.8719 47.9628 46.8806C47.9149 46.885 47.867 46.885 47.8168 46.8786C47.795 46.8765 47.7734 46.8742 47.7494 46.8698C47.7036 46.8655 47.6557 46.8546 47.6099 46.8395C47.5664 46.8286 47.5249 46.8111 47.4858 46.796C47.4771 46.7916 47.4663 46.7872 47.4575 46.7828C47.4561 46.7828 47.4547 46.7821 47.4531 46.7808C47.4379 46.7764 47.4227 46.77 47.4073 46.7612C47.4052 46.7612 47.4029 46.7591 47.3986 46.7568C47.355 46.7373 47.3116 46.7154 47.2701 46.6894C47.2439 46.6742 47.2179 46.6567 47.1939 46.6415C47.1525 46.6152 47.111 46.5849 47.0719 46.5522C47.0456 46.5326 47.0217 46.5107 46.9978 46.4891C46.9476 46.4456 46.902 46.3998 46.8562 46.3496C46.7908 46.2798 46.7298 46.2016 46.6775 46.1208C46.6273 46.0554 46.5838 45.9879 46.5447 45.9159C46.5164 45.868 46.4901 45.8157 46.4641 45.7655C46.4379 45.7133 46.414 45.661 46.39 45.6064C46.3661 45.5519 46.3421 45.4952 46.3203 45.4386C46.2091 45.1555 46.1264 44.8396 46.0675 44.5039C46.0283 44.3014 46.0021 44.0921 45.9825 43.8766C45.8736 42.7417 45.9869 41.4497 46.2526 40.306C46.2634 40.2558 46.2744 40.2059 46.2873 40.1557C46.3264 39.9966 46.3702 39.8399 46.4157 39.6872C46.4832 39.4584 46.5573 39.2406 46.6379 39.0336C46.6925 38.8941 46.7468 38.7636 46.8057 38.6372C46.834 38.5742 46.8644 38.5108 46.8951 38.4498C46.9409 38.3584 46.9887 38.2712 47.0366 38.1883C47.0606 38.1468 47.0824 38.1077 47.1084 38.0707C47.1216 38.0488 47.1347 38.0272 47.1499 38.0053C47.1782 37.9618 47.2088 37.9183 47.2392 37.8768C47.2611 37.8485 47.2807 37.8202 47.3023 37.7919C47.335 37.7484 47.3697 37.7069 47.4068 37.6655C47.4155 37.6567 47.4243 37.648 47.4307 37.6392C47.4547 37.613 47.4786 37.587 47.5025 37.563L47.5244 37.5412C47.5767 37.491 47.6289 37.4454 47.6835 37.406C47.7074 37.3864 47.7314 37.3713 47.7553 37.3558C47.7836 37.3363 47.812 37.3187 47.8426 37.3036C47.9296 37.2557 48.0192 37.2207 48.1106 37.2011C48.1409 37.1967 48.1716 37.1903 48.2019 37.188C48.2498 37.1815 48.2977 37.1815 48.3435 37.1859C48.4264 37.1947 48.5047 37.2163 48.5832 37.249C48.5896 37.249 48.594 37.251 48.5984 37.2534C48.6398 37.2686 48.6812 37.2904 48.7204 37.3123C48.7423 37.3231 48.7618 37.3342 48.7814 37.3471C48.9883 37.4735 49.1647 37.5628 49.35 37.6717C48.0843 37.7674 47.2608 40.0005 47.2106 41.2227C47.1671 42.2814 47.1365 44.863 47.5942 45.7452C47.6923 45.9326 48.3023 45.7344 48.8033 45.5251L48.8038 45.5254Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M50.2242 38.914C50.1197 38.9403 50.0193 38.975 49.9259 39.0165C49.7581 39.0839 49.6034 39.1755 49.4641 39.2824C49.1132 39.548 48.8497 39.912 48.6625 40.3107C48.4818 40.6943 48.3727 41.1079 48.3271 41.4979C48.314 41.6091 48.3052 41.7157 48.3009 41.8205C48.29 42.1363 48.2877 42.5394 48.3073 42.9729C48.3204 43.2169 48.3377 43.4718 48.3639 43.7246C48.4162 44.2015 48.4991 44.6788 48.6298 45.086C48.68 45.2451 48.7367 45.3931 48.8041 45.5262C48.8499 45.622 48.8999 45.7092 48.9544 45.7877C48.9936 45.8423 49.0677 45.8639 49.1634 45.8575C49.122 45.9293 49.0785 45.9991 49.035 46.0665C49.0131 46.1013 48.9915 46.1339 48.9676 46.1646C48.9197 46.2343 48.8674 46.3018 48.8152 46.3628C48.776 46.4086 48.7367 46.4521 48.6931 46.4936V46.4956C48.68 46.5087 48.6669 46.5196 48.6496 46.5347L48.6234 46.561C48.6146 46.5697 48.6038 46.5762 48.593 46.5849C48.5626 46.6112 48.532 46.6351 48.5016 46.6591C48.4952 46.6634 48.4908 46.6678 48.4841 46.6722C48.445 46.7005 48.4036 46.7288 48.3621 46.7507C48.3446 46.7615 48.3251 46.7726 48.3055 46.7811L48.2465 46.8073C48.227 46.7986 48.2074 46.7922 48.1876 46.7855C48.1114 46.7615 48.0352 46.7353 47.9631 46.7026C47.8434 46.6547 47.7322 46.5957 47.6254 46.5283C47.619 46.5262 47.6123 46.5219 47.6079 46.5175C47.5186 46.4609 47.4313 46.3978 47.3507 46.3301C47.1873 46.195 47.0413 46.0382 46.9106 45.8639C46.8452 45.7769 46.7821 45.6832 46.7255 45.5851C46.6035 45.3802 46.499 45.1581 46.4161 44.9208C46.3659 44.79 46.3224 44.6528 46.2876 44.5133C45.9849 43.3848 46.0261 42.0146 46.3095 40.7661C46.3095 40.764 46.3095 40.7617 46.3116 40.7573C46.3136 40.7509 46.3136 40.7422 46.318 40.7334C46.318 40.7247 46.3201 40.7159 46.3244 40.7051C46.3244 40.6963 46.3265 40.6855 46.3309 40.6747V40.6727C46.3636 40.5375 46.3983 40.4026 46.4354 40.2695C46.4506 40.2217 46.4637 40.1694 46.4812 40.1192C46.4856 40.1017 46.492 40.0845 46.4987 40.067C46.5401 39.9274 46.588 39.7926 46.6359 39.6574C46.6511 39.6203 46.6663 39.5812 46.6794 39.5442C46.6815 39.5421 46.6815 39.5398 46.6838 39.5377C46.6838 39.5333 46.6858 39.529 46.6882 39.5269C46.6882 39.5225 46.6902 39.5182 46.6925 39.5161C46.6925 39.514 46.6946 39.5117 46.6946 39.5097C46.6967 39.5009 46.701 39.4945 46.7033 39.4878C46.736 39.4072 46.7687 39.3287 46.8014 39.2525L46.8341 39.1807C46.8385 39.1676 46.8449 39.1567 46.8516 39.1459V39.1439C46.856 39.1351 46.858 39.1264 46.8624 39.1199C46.978 38.8695 47.1065 38.6363 47.2437 38.4249C47.6205 37.8367 48.0803 37.4097 48.5835 37.2506C48.5849 37.2492 48.5863 37.2485 48.5879 37.2485C48.5922 37.2506 48.5943 37.2506 48.5987 37.255C48.6445 37.2725 48.6901 37.2964 48.7338 37.3204C48.749 37.3291 48.7665 37.3379 48.7817 37.3466H48.7838C48.9907 37.473 49.1673 37.5623 49.3524 37.6712C49.3676 37.68 49.3851 37.6908 49.4003 37.7016C49.4198 37.7103 49.4417 37.7235 49.4613 37.7343C49.5331 37.7734 49.6137 37.8128 49.6878 37.8627C49.7836 37.9217 49.8708 37.9979 49.9295 38.1044C49.9905 38.2156 50.0451 38.3377 50.093 38.4638C50.095 38.4702 50.0973 38.4769 50.0994 38.4813C50.0994 38.4857 50.1015 38.4877 50.1015 38.4921C50.1015 38.4935 50.1021 38.4942 50.1035 38.4942C50.1514 38.6293 50.1905 38.7686 50.2232 38.9145L50.2242 38.914Z' fill='%23CEB79B'/%3E%3Cpath d='M48.0923 42.9901C48.1407 43.4009 47.6783 43.5335 47.5123 43.811C47.5355 43.9291 47.5682 44.038 47.6176 44.1312C47.7666 44.4131 48.0194 44.4239 48.1733 44.1101C48.3891 43.6684 48.6923 43.1379 48.6117 42.6305C48.5373 42.1664 47.8889 40.468 48.484 40.2461C48.8068 40.1271 49.368 41.7303 49.5721 40.9014C49.7289 40.2633 49.5948 38.9636 49.1778 39.0947C48.4354 39.3302 48.0766 39.5451 47.633 40.5091C47.4662 40.8749 47.5087 41.1846 47.4727 41.5311C47.6994 41.7478 48.0403 42.5492 48.0923 42.9901Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M50.3475 40.0909C50.3542 40.2574 50.3542 40.4206 50.3475 40.5838C50.3372 40.7913 50.3238 40.9918 50.3101 41.1857C50.2998 41.274 50.2965 41.3522 50.2865 41.4374C50.2865 41.4441 50.2865 41.4511 50.2831 41.4577C50.2695 41.6312 50.2491 41.7911 50.2252 41.944C50.2218 41.9813 50.2185 42.0256 50.2116 42.0629C50.2013 42.1412 50.1879 42.2158 50.1809 42.2874C50.1742 42.3214 50.1706 42.352 50.1639 42.3826V42.3996C50.1606 42.403 50.1606 42.4099 50.1606 42.4099C50.1606 42.4202 50.1606 42.4236 50.1572 42.4336C50.1505 42.4745 50.1369 42.5255 50.1266 42.5832C50.0893 42.7227 50.045 42.8892 49.9871 43.0627C49.8988 42.8792 49.7423 42.7839 49.5757 42.7533C49.5348 42.7466 49.4941 42.7397 49.4532 42.7363C49.3137 42.7296 49.1744 42.7567 49.0452 42.8076H49.0316C49.0146 42.811 49.0009 42.8213 48.9873 42.828C48.8002 42.9029 48.6406 43.0251 48.5793 43.1441V43.1508C48.5759 43.1508 48.5759 43.1541 48.5759 43.1611C48.5759 43.1611 48.5759 43.1644 48.5726 43.1644C48.5113 43.2833 48.4197 43.1747 48.3075 42.9706C48.1749 42.7291 48.0217 42.3448 47.8722 42.032C47.7226 41.709 47.5797 41.4608 47.4742 41.5321H47.4709V41.5254C47.4675 41.5118 47.4539 41.4372 47.4402 41.3213C47.4299 41.1988 47.4199 41.0186 47.4299 40.8078C47.4333 40.8044 47.4333 40.8011 47.4333 40.7941C47.4503 40.6036 47.4809 40.3861 47.5522 40.1583C47.6065 39.9678 47.6881 39.7773 47.8004 39.5802C47.8989 39.3966 48.0248 39.2095 48.1914 39.0293C48.3479 38.8525 48.5075 38.7165 48.6606 38.6144C48.8341 38.4918 49.0007 38.4172 49.1572 38.3729C49.1708 38.3696 49.1878 38.3662 49.2015 38.3662C49.2354 38.3559 49.2694 38.3492 49.3 38.3459C49.4905 38.3152 49.6571 38.3289 49.7863 38.3595C49.8985 38.3935 49.9868 38.4308 50.0414 38.4581H50.0447C50.0754 38.4784 50.0957 38.4854 50.0957 38.4854L50.0991 38.4887C50.0991 38.4854 50.0991 38.4887 50.0991 38.4921H50.1058C50.1294 38.56 50.15 38.628 50.167 38.6996C50.1873 38.7709 50.2043 38.8391 50.2213 38.9137C50.2962 39.2401 50.3302 39.5972 50.3439 39.9611C50.3472 40.0021 50.3472 40.0427 50.3472 40.0904L50.3475 40.0909Z' fill='%23CEB79B'/%3E%3Cpath d='M47.7104 44.53C47.7104 44.53 47.6008 45.1172 48.2314 45.266C48.8621 45.4148 48.9185 44.53 48.9185 44.53H47.7104Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.3' d='M44.4704 27.5093C44.4557 27.8831 44.3986 28.2736 44.2868 28.6787C44.2783 28.6914 44.2678 28.6999 44.2572 28.7125C44.2487 28.723 44.2402 28.7336 44.2276 28.7421C43.8307 29.1833 43.3094 29.5189 42.7076 29.7617C42.6443 29.7869 42.5513 29.825 42.4458 29.8672C42.2728 29.9305 42.089 29.9854 41.897 30.0297C41.7874 30.0549 41.671 30.0783 41.5508 30.0971C41.8211 29.6875 42.7117 28.2774 42.9292 26.8462C43.1022 25.7084 42.7055 23.7642 41.9032 22.5229C42.245 22.7003 42.5892 22.8967 42.9292 23.114C42.9439 23.1225 42.9588 23.133 42.9756 23.1436C43.1951 23.2849 43.4127 23.437 43.6299 23.5995C43.9043 24.4206 44.5188 26.308 44.4701 27.5091L44.4704 27.5093Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M41.0012 30.1748C40.5875 30.2211 40.144 30.2507 39.7072 30.2677C39.477 30.2762 39.2469 30.2824 39.0273 30.2867C39.4158 29.645 41.0921 26.8647 41.0519 25.1485C41.0267 24.0952 41.0519 23.2485 40.6488 21.9609C40.8177 22.0263 40.9865 22.0961 41.1574 22.17C41.8962 23.2488 42.0015 24.3011 42.1073 25.1485C42.3184 26.8374 41.5248 29.2862 41.0012 30.1748Z' fill='%23A05A07'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.6'%3E%3Cpath d='M47.1494 51.9612C47.0775 52.7254 46.9931 53.4918 46.8389 54.2411C46.8114 54.4607 46.7882 54.6676 46.7671 54.8638C46.7586 54.9292 46.746 54.9989 46.7228 55.0769C46.7017 55.1549 46.6742 55.2417 46.6404 55.3323C46.5941 55.4504 46.537 55.5791 46.4716 55.7187C46.4651 55.7313 46.459 55.7439 46.4525 55.7588C46.3681 55.9297 46.2687 56.1115 46.157 56.3076C46.138 56.3372 46.1212 56.3668 46.1043 56.3962C46.1001 56.4047 46.0958 56.4152 46.0896 56.4237C45.6865 57.1795 45.1649 57.8675 44.6414 58.5538C44.6223 58.5814 44.6012 58.6086 44.5801 58.6341C44.5399 58.689 44.4998 58.7438 44.4576 58.7989C44.4535 58.8159 44.4511 58.8326 44.447 58.8496C44.4385 58.8959 44.428 58.9404 44.4174 58.9847C44.4027 59.0439 44.3878 59.1029 44.3711 59.1621C44.3394 59.2676 44.3057 59.3711 44.2676 59.4702C44.2506 59.5145 44.2339 59.5567 44.2148 59.5989C44.1958 59.6476 44.1726 59.6939 44.1515 59.7402C44.1283 59.7909 44.1028 59.8393 44.0776 59.888C44.0524 59.9366 44.0249 59.985 43.9973 60.0337C43.9698 60.08 43.9425 60.1287 43.9129 60.175C43.8833 60.2213 43.8537 60.2679 43.822 60.3122C43.7839 60.3691 43.7461 60.4242 43.7059 60.4769C43.6617 60.5338 43.6174 60.591 43.5708 60.6438L43.5456 60.6754C43.5391 60.686 43.5286 60.6965 43.5203 60.7071C43.5139 60.7176 43.5057 60.7261 43.4972 60.7346C43.4846 60.7472 43.474 60.7622 43.4614 60.7748C43.4233 60.817 43.3854 60.8592 43.3453 60.8973C43.299 60.946 43.2503 60.9943 43.204 61.0386C43.1576 61.0829 43.111 61.1251 43.0626 61.1673C42.9085 61.3066 42.7545 61.4271 42.6129 61.5282C42.5537 61.5684 42.4989 61.6062 42.4461 61.6402C42.4186 61.6592 42.3934 61.676 42.3702 61.6909C42.3195 61.7246 42.2711 61.7542 42.2266 61.7795L42.2245 61.7815C42.043 61.9398 41.8973 62.1257 41.8276 62.381C41.8235 62.3895 41.8191 62.398 41.8191 62.4063V62.4127C41.7939 62.6217 41.7599 62.8222 41.72 63.0122C41.7135 63.0398 41.7094 63.0691 41.7009 63.0966C41.7009 63.1008 41.6989 63.1072 41.6968 63.1113C41.6904 63.143 41.6842 63.1726 41.6778 63.2022C41.6651 63.2719 41.6461 63.3394 41.6291 63.4091C41.608 63.4895 41.5848 63.5675 41.5617 63.6455C41.547 63.6941 41.5341 63.7996 41.4983 63.8354C41.4899 63.8565 41.4837 63.8797 41.4731 63.9052C41.4605 63.9453 41.4456 63.9832 41.4309 64.0213C41.4224 64.0444 41.4119 64.0656 41.4034 64.0887C41.3949 64.1057 41.3887 64.1245 41.3802 64.1435C41.3717 64.1647 41.3632 64.1816 41.355 64.2028C41.3508 64.2092 41.3465 64.2174 41.3444 64.2239C41.3423 64.2303 41.338 64.2365 41.3359 64.2429C41.3063 64.3127 41.2767 64.3822 41.243 64.4519C41.2304 64.4772 41.2198 64.5006 41.2072 64.5238C41.2031 64.5343 41.1967 64.5449 41.1925 64.5513C41.1799 64.5765 41.1673 64.602 41.1524 64.6272C41.1418 64.6483 41.1292 64.6715 41.1187 64.6906C41.1166 64.6926 41.1166 64.6947 41.1145 64.697C41.0893 64.7433 41.0618 64.7899 41.0365 64.8362C41.0219 64.8615 41.0069 64.887 40.9902 64.9122L40.9691 64.9438C40.9585 64.9608 40.948 64.9776 40.9374 64.9966C40.9037 65.0494 40.8677 65.1001 40.8298 65.1508C40.8234 65.1593 40.8193 65.1678 40.8128 65.176C40.8087 65.1802 40.8064 65.1866 40.8023 65.1907C40.8023 65.1928 40.8002 65.1971 40.7982 65.1992C40.7791 65.2244 40.7601 65.252 40.7413 65.2772C40.7372 65.2813 40.7349 65.2836 40.7328 65.2878L40.7202 65.3068C40.7076 65.3238 40.697 65.3385 40.6844 65.3531C40.6803 65.3616 40.6718 65.3722 40.6654 65.3807C40.6442 65.4103 40.6231 65.4376 40.5979 65.4651C40.5853 65.4821 40.5727 65.4947 40.5598 65.5094C40.5408 65.5326 40.5217 65.5537 40.5029 65.5748C40.4628 65.6211 40.4226 65.6656 40.3827 65.7099C40.3786 65.712 40.3763 65.7163 40.3722 65.7205C40.3595 65.7351 40.349 65.7501 40.3341 65.7627C40.3276 65.7691 40.3215 65.7753 40.315 65.7838L40.22 65.8788C40.1186 65.9823 40.0154 66.0772 39.9075 66.1658C39.9328 66.2227 39.9539 66.2819 39.9708 66.3452C40.106 66.7864 40.1438 67.3352 40.0383 67.7723C40.0362 67.7829 40.0342 67.7934 40.0298 67.804C40.0298 67.8053 40.0291 67.806 40.0277 67.806C39.9896 67.8251 39.9518 67.8462 39.9137 67.8652C39.5505 68.0426 39.1644 68.1672 38.761 68.2009H38.7546C38.4547 68.2241 38.1466 68.1988 37.832 68.1124C37.5069 68.0215 37.3802 67.7154 37.416 67.2469C37.416 67.2299 37.4181 67.2132 37.4201 67.1962C37.4201 67.1898 37.4201 67.1815 37.4222 67.1751V67.1666C37.4497 66.9113 37.5172 66.6134 37.6227 66.2801C37.6459 66.2126 37.6691 66.1429 37.6945 66.0731C37.779 65.8283 37.8804 65.5686 37.9985 65.2921C38.1231 64.9987 38.2668 64.6885 38.4251 64.3634C38.4251 64.3613 38.4271 64.3613 38.4271 64.3593C38.5473 64.1145 38.6784 63.8588 38.8135 63.5994C40.1202 61.1189 42.1172 58.0876 43.8418 55.74C43.8776 55.6893 43.9137 55.6409 43.9494 55.5923C45.4334 53.5826 46.6958 52.1048 47.1097 51.9697C47.1244 51.9656 47.1372 51.9612 47.1499 51.9612H47.1494Z' fill='%238D9280'/%3E%3C/g%3E%3Cpath d='M33.2422 45.8368C33.2422 45.8368 33.818 45.6257 34.3936 46.2589C34.7774 46.6811 35.1612 46.9398 35.449 46.9161C35.7368 46.8924 36.1206 46.6811 36.3126 46.47C36.6161 46.1361 37.0802 45.8368 37.464 45.8368' stroke='%23CEB79B' stroke-width='1.5' stroke-miterlimit='10' stroke-linecap='round'/%3E%3Cpath d='M47.5931 46.8039C47.5944 47.0093 47.5895 47.2193 47.5846 47.4245C47.5826 47.4265 47.5826 47.4286 47.5846 47.4309C47.5826 47.433 47.5826 47.435 47.5846 47.4374C47.1715 51.2654 47.4242 55.5356 44.6419 58.5538C44.1566 59.8336 43.4997 61.089 42.2291 61.7774C42.2291 61.7794 42.2271 61.7794 42.2271 61.7794C41.8124 62.0798 41.7833 62.6276 41.7014 63.0966C41.5393 63.8444 41.2425 64.5664 40.802 65.1907C39.4611 67.3341 36.8953 67.338 34.6527 67.1285C31.3418 67.2698 29.5608 64.9971 28.8158 62.018C27.5707 62.3468 26.9058 60.306 26.4007 59.3752C23.4284 60.7436 22.8415 49.5386 22.7148 47.6358C22.7308 47.3349 22.764 47.008 22.7867 46.7132C23.3548 43.1573 23.4222 39.6331 23.9836 36.0548C24.1249 35.3103 23.787 33.7362 23.7347 32.9854C23.7883 32.9305 23.8482 32.8721 23.8951 32.8101C24.3121 32.3184 24.5154 31.609 24.8303 31.0959C24.5523 33.4745 23.5241 35.9163 24.4272 38.269C24.1945 38.4281 23.969 38.8603 23.7496 39.2318V39.2338C23.7409 39.2477 23.7324 39.266 23.7221 39.2802C23.7293 39.275 23.7494 39.2606 23.7558 39.2549H23.7579C23.7787 39.2367 24.378 38.8137 24.4166 38.7841C24.4125 39.1177 24.4125 39.447 24.4125 39.7741C24.2869 39.8802 24.1206 40.2928 24.0938 40.454C24.11 40.4419 24.4024 40.2383 24.4169 40.2259C24.6884 42.3501 24.2825 47.3776 26.9078 47.9481C26.6798 48.9762 26.9078 49.4259 27.7522 50.2702C27.9002 48.6982 28.8426 47.19 31.7632 47.3148C31.4973 47.5069 31.13 47.9481 31.341 48.3702C31.4947 48.1867 32.6284 46.9655 33.2812 47.3972C35.5727 48.2518 38.8611 46.3006 39.5742 48.3702C39.7927 48.1434 40.0849 47.6469 39.5888 47.3169C41.0754 47.2983 43.1362 47.7818 43.0256 50.0591C44.509 49.3224 44.9405 48.4863 44.7145 47.3148C46.4739 47.2016 45.8455 41.6587 45.9938 40.2262C46.0849 40.2905 46.225 40.3909 46.3169 40.4542C46.2798 40.264 46.1238 39.8861 45.9982 39.7744C45.9982 39.4472 45.9982 39.118 45.9941 38.7844C46.0221 38.8045 46.4736 39.1309 46.5071 39.1497V39.1517C46.5552 39.1849 46.6422 39.2467 46.6886 39.2804C46.4878 38.943 46.2347 38.4413 45.9835 38.2693C46.8911 35.8053 45.8527 33.5221 45.5801 31.0962C45.8957 31.6123 46.0968 32.3171 46.5156 32.8103C46.5614 32.8724 46.6229 32.9305 46.6759 32.9856C46.5375 34.2071 46.2504 35.5744 46.5156 36.7917C47.0471 39.9278 47.0224 43.1277 47.5753 46.2723C47.5767 46.2737 47.5767 46.275 47.5753 46.2764C47.5903 46.4515 47.5882 46.6268 47.5944 46.8041L47.5931 46.8039Z' fill='%23CE8000'/%3E%3Cpath opacity='0.3' d='M47.6057 46.9308C47.5939 47.086 47.5856 47.2432 47.5699 47.3972C47.2204 50.1682 47.2708 53.1028 46.4535 55.759C45.913 56.8268 45.1809 57.8286 44.4583 58.7988C44.3451 59.4091 44.0773 59.9821 43.7067 60.4772C43.309 61.0036 42.779 61.4504 42.2247 61.7817C41.6638 62.2186 41.8046 63.0402 41.5619 63.6457C41.3964 64.1901 41.1369 64.724 40.802 65.1909C40.5523 65.5544 40.2439 65.8785 39.9049 66.1598C38.6724 67.1648 37.5926 67.3681 36.0502 67.1689C34.6153 66.9671 32.9877 67.2878 31.6909 66.6075C31.4914 66.4927 31.3099 66.34 31.1336 66.1915C29.925 65.0846 29.2959 63.493 28.8029 61.9823C27.6675 62.651 26.5341 59.4802 26.4154 59.3772C23.3712 60.4653 22.8714 49.7088 22.7148 47.6358C22.7308 47.3349 22.764 47.008 22.7867 46.7132C23.3548 43.1573 23.4222 39.6331 23.9836 36.0548C24.1252 35.5116 23.8233 33.9162 23.779 33.3547C24.0971 32.6855 24.4235 32.1845 24.5855 31.6934C24.7651 32.6039 24.3618 33.4667 24.2225 34.3723C23.8063 35.6102 24.1394 37.0891 24.4272 38.2693C24.1945 38.4284 23.969 38.8606 23.7496 39.232V39.2341C23.7409 39.248 23.7324 39.2663 23.7221 39.2804C23.7293 39.2753 23.7494 39.2609 23.7558 39.2552H23.7579C23.7787 39.2369 24.378 38.814 24.4166 38.7844C24.4125 39.118 24.4125 39.4472 24.4125 39.7744C24.2869 39.8804 24.1206 40.2931 24.0938 40.4542C24.11 40.4421 24.4024 40.2385 24.4169 40.2262C24.518 42.417 24.6279 45.1999 25.6411 47.1902C24.7131 49.395 24.6933 52.3503 25.715 54.7034C26.2406 55.8877 26.8528 56.8607 27.6235 57.9079C27.8214 57.5128 27.6284 56.6723 27.7627 56.1305C31.923 61.1248 37.3933 62.4739 37.9926 54.3636C39.3363 55.9812 40.661 55.0946 41.2816 53.422C42.7754 54.4194 42.808 49.8254 42.8544 48.9571C42.9599 49.257 43.0253 49.62 43.0253 50.0591C44.5088 49.3224 44.9402 48.4863 44.7142 47.3148C44.7103 47.3642 45.3266 47.132 45.4257 46.9284C45.5227 46.8049 45.5789 46.6486 45.6368 46.5019C45.9238 45.5204 45.9348 44.4789 45.983 43.4577C45.9809 43.4557 45.9809 43.4536 45.983 43.4513C46.009 42.4064 46.0105 41.2782 46.0105 40.2277C46.1006 40.2923 46.2419 40.3906 46.3315 40.4558C46.289 40.2596 46.1457 39.8959 46.0149 39.7759C46.0149 39.4495 46.0147 39.1185 46.0108 38.7859C46.0306 38.8001 46.469 39.1144 46.4878 39.128H46.4898C46.5521 39.1736 46.6425 39.2382 46.705 39.2822C46.6955 39.2693 46.6904 39.2542 46.6798 39.24C46.6363 39.1553 46.5792 39.0747 46.5362 38.9908H46.5341C46.3591 38.6871 46.1879 38.4039 46 38.2708C46.8898 35.8414 45.8934 33.5535 45.5966 31.1461C45.6005 31.1338 45.5845 31.0599 45.618 31.1083C45.8442 31.5451 46.0201 32.0381 46.2934 32.4636C46.3609 32.5879 46.4525 32.7117 46.5362 32.8224C46.5789 32.8839 46.6366 32.9406 46.6924 32.9913C46.6113 33.6425 46.4857 34.6987 46.4054 35.3556C46.4041 36.3804 46.6407 37.3967 46.7707 38.4039C46.9424 39.4506 47.0389 40.5204 47.0134 41.6211C46.9859 43.4358 47.6806 45.1461 47.5856 46.9449C47.5913 46.94 47.5993 46.9359 47.6067 46.9302L47.6057 46.9308Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M47.5945 46.8041C47.4457 49.5921 47.0732 52.3354 46.7247 55.0771C46.2585 56.444 45.3022 57.6276 44.4574 58.8009C44.2342 60.0694 43.3139 61.141 42.2302 61.7773C42.2302 61.7794 42.2282 61.7794 42.2282 61.7794C41.8076 62.0752 41.7998 62.6417 41.7025 63.0966C41.5404 63.8444 41.2436 64.5664 40.8031 65.1907C40.5514 65.5515 40.2479 65.88 39.906 66.1575H39.904C38.6813 67.1671 37.5854 67.3666 36.0513 67.1686C34.6169 66.9668 32.988 67.2878 31.692 66.6072C31.4943 66.4929 31.313 66.35 31.1367 66.1977C35.5055 64.492 38.8687 60.6429 39.6082 55.9845C40.0767 58.2459 39.0674 60.7544 38.3708 62.651C40.7241 59.6388 43.2712 56.4054 43.5515 52.4443C44.211 53.4052 43.6833 54.9265 43.9186 55.7649C45.0759 50.6195 46.1769 45.5345 46.0255 40.2089C46.1146 40.2707 46.2562 40.3752 46.3442 40.437C46.2963 40.2421 46.1597 39.8807 46.0276 39.7595C46.0302 39.4323 46.0289 39.1025 46.0255 38.7674C46.1596 38.8647 46.5517 39.1466 46.6799 39.2382V39.2402C46.6812 39.2428 46.718 39.2657 46.72 39.2678C46.6588 39.1679 46.6029 39.0678 46.5427 38.9702C46.5447 38.9682 46.5427 38.9682 46.5427 38.9682C46.3741 38.6732 46.1998 38.3864 46.015 38.2567C46.8426 35.7899 45.8744 33.5221 45.58 31.0962C45.8955 31.6123 46.0966 32.3171 46.5154 32.8103C46.5612 32.8723 46.6227 32.9305 46.6758 32.9856C46.5373 34.207 46.2503 35.5744 46.5154 36.7917C47.0469 39.9278 47.0222 43.1277 47.5752 46.2723C47.5765 46.2737 47.5765 46.275 47.5752 46.2764C47.5901 46.4514 47.5883 46.6267 47.5945 46.8041Z' fill='%23A05A07'/%3E%3Cpath d='M38.9418 63.7964C38.9323 63.5001 38.471 63.5001 38.4806 63.7964C38.5058 64.4832 38.1892 65.1394 37.7207 65.6261C37.3258 66.0367 36.7613 66.2241 36.2336 66.4141C36.812 65.8287 37.1613 65.1749 37.1793 64.3059C37.1834 64.0093 36.7234 64.0093 36.718 64.3059C36.7 65.1623 36.3054 65.7425 35.6868 66.3C35.4989 66.4697 35.7069 66.7284 35.9095 66.6826C35.8969 66.8321 36.0086 66.9891 36.1883 66.9232C36.8977 66.6571 37.5994 66.4215 38.139 65.864C38.654 65.3293 38.9751 64.5388 38.9475 63.7987L38.9424 63.7962L38.9418 63.7964Z' fill='%23995A07'/%3E%3Cpath d='M34.9076 66.1152C34.177 66.1481 33.5186 65.0711 33.4879 64.4224C33.4753 64.1259 33.012 64.1259 33.0266 64.4224C33.0573 65.1015 33.5512 66.0215 34.2277 66.4014C33.9618 66.2951 33.683 66.2493 33.4246 66.1152C33.0498 65.9226 32.7437 65.6387 32.4652 65.3272C31.9375 64.7318 31.434 63.8574 31.5576 63.0313C31.6008 62.74 31.1576 62.6159 31.1123 62.9098C30.973 63.8373 31.4057 64.7115 31.9555 65.4312C32.2163 65.7733 32.5182 66.0647 32.8676 66.3183C33.0524 66.4501 33.2635 66.5664 33.4735 66.6503C33.656 66.7214 33.8661 66.7415 34.0434 66.8225C34.2916 66.9314 34.5099 66.6019 34.3294 66.4575C34.5119 66.5438 34.7052 66.5893 34.9047 66.579C35.2013 66.5664 35.2013 66.1051 34.9047 66.118L34.9078 66.1154L34.9076 66.1152Z' fill='%23995A07'/%3E%3Cpath d='M36.494 51.4066C36.3421 51.5891 35.8502 51.5154 35.6432 51.5028C35.3518 51.4876 35.0373 51.4573 34.7639 51.3484C34.4926 51.2421 34.3755 51.6779 34.6447 51.7842C35.0066 51.9286 35.4373 51.9489 35.8226 51.9641C36.1246 51.9742 36.5985 51.9845 36.8137 51.726C36.9985 51.5031 36.6816 51.1834 36.494 51.4066Z' fill='%23995A07'/%3E%3Cpath d='M38.939 49.3921C38.5004 49.6725 37.8069 49.6964 37.3045 49.759C36.7502 49.8287 36.1875 49.8073 35.6302 49.8012C34.4693 49.7837 33.3115 49.7129 32.1698 49.5003C31.8859 49.4465 31.7639 49.882 32.0496 49.9358C33.3009 50.169 34.5643 50.2372 35.8362 50.2576C36.4197 50.2663 36.994 50.2625 37.5727 50.1801C38.0891 50.1052 38.7148 50.0758 39.1674 49.7855C39.4104 49.6287 39.1854 49.2382 38.939 49.3947V49.3921Z' fill='%23995A07'/%3E%3Cpath d='M39.6097 67.1375L39.6077 67.1395C39.6056 67.1416 39.6056 67.1436 39.6035 67.1457C39.4802 67.304 39.3181 67.46 39.1433 67.6942C39.135 67.7087 39.1247 67.721 39.1124 67.7354C39.0426 67.8278 38.9726 67.9347 38.9008 68.0559L38.9028 68.058C38.9234 68.0868 38.942 68.1156 38.9605 68.1442C38.9873 68.1854 39.012 68.2284 39.0365 68.2716C39.057 68.3066 39.0756 68.3434 39.0938 68.3784C39.1 68.3846 39.1021 68.3908 39.1042 68.399C39.1042 68.399 39.1083 68.4011 39.1062 68.4032C39.1062 68.4032 39.1083 68.4032 39.1083 68.4052C39.1247 68.4382 39.1412 68.4709 39.1577 68.5059V68.5079C39.1721 68.5388 39.1845 68.5694 39.1968 68.6003C39.2009 68.6065 39.203 68.6106 39.205 68.6168C39.2195 68.6518 39.2339 68.6886 39.2462 68.7236L39.2524 68.736C39.2545 68.738 39.2545 68.7401 39.2565 68.7442V68.7483L39.2792 68.8099C39.2812 68.8119 39.2812 68.816 39.2812 68.8181V68.8202C39.2874 68.8325 39.2915 68.8469 39.2957 68.8593C39.2977 68.8655 39.2998 68.8737 39.3018 68.8799C39.3018 68.8819 39.3039 68.8819 39.3039 68.884V68.8861C39.306 68.8902 39.306 68.8943 39.308 68.8964C39.3163 68.9252 39.3266 68.954 39.3327 68.9826L39.3348 68.9929H39.3369L39.3677 69.11C39.378 69.1533 39.3883 69.1942 39.3966 69.2374V69.2436C39.4007 69.258 39.4027 69.2724 39.4069 69.2889L39.4192 69.3566C39.4233 69.3793 39.4295 69.4019 39.4316 69.4264V69.4305L39.4439 69.5229C39.4453 69.5243 39.446 69.5256 39.446 69.527V69.5332C39.4481 69.5353 39.4481 69.5394 39.4481 69.5414C39.4501 69.5682 39.4542 69.595 39.4563 69.6236V69.6256C39.4604 69.6606 39.4625 69.6974 39.4666 69.7324C39.4686 69.7551 39.4686 69.7798 39.4707 69.8043C39.4728 69.8454 39.4748 69.8843 39.4748 69.9255V69.9461C39.4769 69.9708 39.4769 69.9935 39.4769 70.0179C39.4769 70.7104 39.2962 71.4049 38.9324 71.9658C39.559 72.5923 39.7214 73.9463 39.4071 74.8359C39.3927 74.8792 39.3762 74.9201 39.3577 74.9613C39.3412 75.0004 39.3227 75.0393 39.3021 75.0764C39.2877 75.1093 39.2691 75.1399 39.2506 75.1708C39.228 75.21 39.2012 75.2488 39.1747 75.2838C39.1561 75.3085 39.1376 75.3333 39.1191 75.3536C39.1005 75.3742 39.082 75.3927 39.0637 75.4112C39.0452 75.4298 39.0246 75.4504 39.0043 75.4666C38.9837 75.4831 38.961 75.4995 38.9386 75.516C38.8792 75.5613 38.8153 75.5961 38.7456 75.6228C38.7435 75.6228 38.7414 75.6249 38.7394 75.6249C39.0187 76.6234 38.9139 77.5213 38.6161 78.2608C38.5811 78.3471 38.5443 78.4312 38.5051 78.5136C38.4948 78.5321 38.4866 78.5507 38.4784 78.5671C38.4701 78.5857 38.4598 78.6021 38.4495 78.6207C38.431 78.6557 38.4125 78.6904 38.3942 78.7234C38.3926 78.7249 38.3929 78.7257 38.3921 78.727C38.3844 78.7406 38.3777 78.7551 38.3697 78.7687C38.3574 78.7872 38.3471 78.8078 38.3368 78.8264C38.3141 78.8593 38.2956 78.892 38.2753 78.9249C38.2341 78.9906 38.1911 79.0524 38.1479 79.1139C38.1046 79.1775 38.0575 79.2372 38.0122 79.2966C37.9321 79.3952 37.8518 79.4856 37.7656 79.5721C37.7532 79.5865 37.7409 79.5989 37.7285 79.6112L37.7265 79.6133C37.7265 79.6133 37.7285 79.6133 37.7265 79.6153C37.6994 79.6434 37.6706 79.6673 37.6425 79.6936C37.622 79.7131 37.6016 79.7337 37.5805 79.753C37.5682 79.7654 37.5537 79.7778 37.5414 79.7881C37.5043 79.8231 37.4675 79.8537 37.4284 79.8825C37.4037 79.9052 37.3769 79.9237 37.3524 79.942C37.3401 79.9523 37.3277 79.9626 37.3154 79.9708C37.301 79.979 37.2886 79.9894 37.2763 79.9997C37.268 80.0058 37.2598 80.012 37.2536 80.0161C37.2522 80.0175 37.2509 80.0182 37.2495 80.0182C37.2454 80.0223 37.2412 80.0244 37.2371 80.0285C37.2103 80.0491 37.1815 80.0655 37.155 80.0841L37.1179 80.1088C37.1015 80.1211 37.0829 80.1314 37.0665 80.1397C37.0459 80.15 37.0294 80.1623 37.009 80.1726C37.0008 80.1768 36.9905 80.1829 36.9823 80.187C36.974 80.1932 36.9637 80.1973 36.9555 80.2015C36.9226 80.22 36.8899 80.2365 36.859 80.2509C36.8054 80.2777 36.7522 80.3003 36.7007 80.3206C36.6391 80.3433 36.5794 80.3618 36.522 80.378C36.4891 80.3863 36.4584 80.3925 36.4255 80.3986H36.4193C36.4173 80.3986 36.4152 80.4007 36.4131 80.4007C36.3884 80.4048 36.3637 80.4089 36.3393 80.411H36.3269C36.3207 80.411 36.3166 80.4131 36.3084 80.4131C36.2878 80.4151 36.2672 80.4151 36.2468 80.4151C36.1954 80.4151 36.1483 80.411 36.105 80.4028C36.0988 80.4028 36.0927 80.4007 36.0865 80.3986C36.035 80.3863 35.9858 80.378 35.9385 80.3739H35.9364C35.8605 80.3636 35.7884 80.3636 35.7228 80.3698H35.7042C35.6836 80.3719 35.661 80.3739 35.6386 80.378C35.618 80.3801 35.5995 80.3822 35.5791 80.3863C35.5729 80.3863 35.5668 80.3883 35.5606 80.3883C35.5523 80.3883 35.5441 80.3904 35.5359 80.3925C35.5091 80.3986 35.4823 80.4028 35.4558 80.4089L35.4394 80.4131H35.4373L35.429 80.4151H35.427C35.4126 80.4172 35.4002 80.4192 35.3879 80.4234C35.3529 80.4295 35.3181 80.4357 35.2831 80.4398C35.281 80.4398 35.279 80.4419 35.2769 80.4419C35.2687 80.4419 35.2604 80.4439 35.2522 80.4439C35.2295 80.4481 35.209 80.4501 35.1886 80.4501C35.1742 80.4522 35.1618 80.4522 35.1495 80.4522C35.1165 80.4522 35.0818 80.4522 35.0447 80.4439C35.0324 80.4419 35.02 80.4398 35.0077 80.4357C34.983 80.4295 34.9582 80.4234 34.9338 80.4131C34.9008 80.4007 34.8681 80.3863 34.8331 80.3678L34.7716 80.3307C34.7428 80.3121 34.714 80.2916 34.6833 80.2671C34.6239 80.2197 34.56 80.1623 34.4903 80.0905C34.4308 80.029 34.3711 79.9672 34.3116 79.9036C34.3075 79.8975 34.3013 79.8933 34.2972 79.8872C34.2828 79.8707 34.2684 79.8563 34.2539 79.8398C34.2169 79.7966 34.1801 79.7577 34.143 79.7165C34.1389 79.7144 34.1368 79.7083 34.1368 79.7083C34.0977 79.6671 34.063 79.6241 34.0279 79.5829L34.0259 79.5808C33.9499 79.4925 33.8799 79.4063 33.8122 79.3157C33.7731 79.2642 33.7322 79.2109 33.6931 79.1553C33.6151 79.0485 33.5409 78.9396 33.4732 78.8266C33.0848 78.2083 32.8096 77.5097 32.6678 76.6262C32.6595 76.5789 32.6533 76.5297 32.6472 76.4803C32.6389 76.4226 32.6328 76.3673 32.6245 76.3099V76.3058C32.6184 76.2463 32.6122 76.1866 32.606 76.1251C32.6019 76.088 32.5978 76.0491 32.5957 76.01C32.5916 75.9667 32.5875 75.9238 32.5854 75.8805C32.5833 75.8393 32.5792 75.7943 32.5772 75.751C32.5772 75.749 32.5751 75.749 32.5751 75.7469C32.5627 75.7263 32.5504 75.7037 32.538 75.6813C32.5318 75.671 32.5257 75.6586 32.5195 75.6463C32.5133 75.636 32.5071 75.6236 32.501 75.6133C32.4824 75.5804 32.4639 75.5477 32.4454 75.5127C32.4412 75.5044 32.4371 75.4962 32.433 75.49C32.4248 75.4756 32.4165 75.4612 32.4104 75.4468C32.3959 75.4221 32.3815 75.3953 32.3692 75.3688C32.3609 75.3564 32.3527 75.3379 32.3465 75.3235C32.3383 75.3091 32.3321 75.2905 32.3239 75.2761C32.3094 75.2452 32.295 75.2146 32.2786 75.1796C32.2662 75.1487 32.2518 75.1139 32.2374 75.0789C32.2147 75.0274 32.1962 74.9742 32.1758 74.9186C32.1717 74.9083 32.1676 74.8959 32.1635 74.8836C32.1635 74.8774 32.1614 74.8712 32.1573 74.863C32.1388 74.7994 32.1182 74.7335 32.102 74.6637C32.0999 74.6514 32.0958 74.639 32.0937 74.6266C32.0773 74.5425 32.0628 74.4562 32.0525 74.3656C32.0505 74.3615 32.0505 74.3574 32.0505 74.3533C32.0464 74.3121 32.0423 74.2712 32.0402 74.23C32.0381 74.1826 32.0361 74.1355 32.0361 74.0881V74.0531C32.0402 73.6709 32.1326 73.2333 32.371 72.7362C32.3854 72.7033 32.3998 72.6726 32.4183 72.6397C32.4348 72.6067 32.4513 72.5761 32.4698 72.5431C32.4863 72.5102 32.5069 72.4775 32.5254 72.4425C32.546 72.4095 32.5645 72.3769 32.5849 72.3439C32.5643 72.3007 32.5437 72.2556 32.5234 72.2124C32.5192 72.2041 32.5151 72.1918 32.511 72.1815C32.4842 72.1241 32.4595 72.0664 32.4371 72.0069C32.4309 71.9925 32.4268 71.9781 32.4206 71.9637C32.4103 71.939 32.4001 71.9122 32.3898 71.8878L32.3836 71.8692C32.3671 71.8198 32.3486 71.7748 32.3342 71.7295C32.3156 71.678 32.2992 71.6267 32.2827 71.5711C32.2724 71.5444 32.2641 71.5176 32.2559 71.4911C32.2518 71.4767 32.2477 71.4643 32.2435 71.452L32.2188 71.3657C32.2085 71.3328 32.2003 71.3001 32.1921 71.2692C32.1879 71.263 32.1879 71.2589 32.1879 71.2527V71.2486C32.1797 71.2218 32.1756 71.1951 32.1674 71.1665C32.1612 71.1397 32.1529 71.1132 32.1488 71.0864C31.9946 70.396 31.9743 69.6871 32.1632 69.0709C32.1653 69.0668 32.1653 69.0626 32.1674 69.0585C32.2044 68.9393 32.2495 68.8243 32.301 68.7133C32.3023 68.712 32.303 68.7106 32.303 68.7092C32.303 68.7078 32.3037 68.7065 32.3051 68.7051C32.3071 68.703 32.3092 68.701 32.3092 68.6989C32.3133 68.6907 32.3154 68.6845 32.3216 68.6763V68.6742C32.3257 68.668 32.3277 68.6598 32.3318 68.6536C32.3339 68.6516 32.336 68.6474 32.336 68.6474C32.3566 68.6063 32.3792 68.5653 32.4016 68.5262C32.3872 68.485 32.3707 68.4441 32.3584 68.405V68.4029C32.2804 68.1831 32.2289 68.0062 32.2021 67.8482C32.1836 67.7475 32.1753 67.6531 32.1753 67.5606V67.5524C32.1753 67.4868 32.1795 67.4229 32.1898 67.3552C32.1959 67.2875 32.2083 67.2175 32.2248 67.1457C32.2248 67.1436 32.2268 67.1395 32.2268 67.1375H39.6089H39.6097Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M39.0549 72.0894C39.0176 72.0451 38.98 72.0011 38.9393 71.9602C39.303 71.399 39.4835 70.7089 39.4835 70.0185H39.4732V69.9063C39.4732 69.896 39.4732 69.8859 39.4698 69.8757V69.7974C39.4665 69.7771 39.4665 69.7498 39.4631 69.7328C39.4598 69.6988 39.4598 69.6615 39.4528 69.6239C39.4528 69.5933 39.4495 69.5696 39.4461 69.5423C39.4461 69.539 39.4461 69.5356 39.4428 69.532V69.5217C39.4428 69.5114 39.4394 69.5047 39.4394 69.498C39.4361 69.4877 39.4361 69.4777 39.4328 69.4707C39.4328 69.4571 39.4328 69.4471 39.4294 69.4368V69.4265C39.4294 69.4028 39.4227 69.3788 39.4191 69.3552C39.4124 69.3348 39.4088 69.3109 39.4021 69.2872C39.4021 69.2736 39.3988 69.2566 39.3954 69.2429V69.2362C39.3851 69.1953 39.3751 69.1513 39.3648 69.1104C39.3545 69.0694 39.3445 69.0321 39.3342 68.9914C39.3342 68.9892 39.333 68.9858 39.3308 68.9811C39.3241 68.9539 39.3138 68.9232 39.3071 68.8962C39.3038 68.8928 39.3038 68.8895 39.3038 68.8825C39.3004 68.8759 39.2971 68.8656 39.2935 68.8589C39.2901 68.8452 39.2868 68.8316 39.2798 68.8179C39.2798 68.8146 39.2798 68.8112 39.2765 68.8112C39.2732 68.7876 39.2629 68.7636 39.2562 68.7433C39.2528 68.7399 39.2528 68.7366 39.2528 68.7366C39.2461 68.723 39.2425 68.7093 39.2358 68.6993C39.2222 68.6653 39.2085 68.6347 39.1949 68.6007C39.1916 68.5904 39.1882 68.5837 39.1846 68.5734C39.1743 68.5531 39.1643 68.5291 39.154 68.5088C39.154 68.5088 39.154 68.5054 39.1506 68.5054C39.1439 68.4918 39.1403 68.4782 39.1336 68.4681C39.1303 68.4614 39.1303 68.4578 39.1269 68.4545C39.1236 68.4408 39.1167 68.4308 39.11 68.4205C39.11 68.4183 39.1088 68.4148 39.1066 68.4102V68.4035C39.1066 68.4002 39.1033 68.4002 39.1033 68.4002C39.0999 68.3968 39.0999 68.3935 39.0966 68.3899C39.0966 68.3865 39.0932 68.3832 39.0932 68.3796L39.0865 68.3729C39.0865 68.3695 39.0832 68.3662 39.0832 68.3626C39.0832 68.3592 39.0832 68.3559 39.0765 68.3523C39.0629 68.3286 39.0492 68.3013 39.0356 68.2774C39.0219 68.2537 39.0119 68.2331 38.9982 68.2094C38.9949 68.1991 38.9879 68.1857 38.9779 68.1754L38.9576 68.1448H38.9542C38.9372 68.1142 38.9202 68.0869 38.8999 68.0599C38.8999 68.0599 38.8999 68.0565 38.9032 68.0565C38.9269 68.0156 38.9475 67.9816 38.9679 67.9476C38.9916 67.9103 39.0155 67.8797 39.0358 67.8457C39.0528 67.8253 39.0665 67.8048 39.0767 67.7844C39.0904 67.7674 39.1004 67.7504 39.1107 67.7368C39.1277 67.7198 39.138 67.7028 39.1517 67.6858C39.1856 67.6382 39.2196 67.5975 39.2536 67.5566C39.3249 67.4683 39.3931 67.3934 39.4541 67.3255C39.4914 67.2845 39.5254 67.2439 39.5561 67.2065C39.5561 67.2065 39.5594 67.2065 39.5594 67.2032C39.5764 67.1828 39.5934 67.1659 39.607 67.1453H32.2249C32.2079 67.2166 32.1976 67.2881 32.1909 67.3561C32.1842 67.4274 32.1773 67.4956 32.1773 67.5636V67.6588C32.1773 67.6825 32.1773 67.7098 32.184 67.7337C32.1873 67.7643 32.1907 67.7916 32.1976 67.8256C32.1976 67.829 32.1976 67.8393 32.201 67.8493V67.8526L32.2113 67.9239V67.9342C32.218 67.9579 32.2249 67.9852 32.2283 68.0091C32.235 68.0228 32.2385 68.0364 32.2385 68.0465C32.2385 68.0532 32.2419 68.0568 32.2452 68.0635C32.2622 68.1214 32.2792 68.1824 32.3032 68.247C32.3168 68.298 32.3338 68.3489 32.3541 68.4035V68.4102C32.3541 68.4102 32.3608 68.4305 32.3644 68.4375C32.3747 68.4681 32.3848 68.4987 32.3984 68.5294C32.3917 68.543 32.3848 68.5531 32.3781 68.5667C32.3714 68.577 32.3644 68.587 32.3577 68.6007L32.3374 68.6416V68.6483C32.3374 68.6483 32.3341 68.6516 32.3341 68.655L32.3274 68.6653H32.324V68.6756C32.3173 68.6859 32.3137 68.6892 32.3104 68.6993C32.3104 68.7026 32.307 68.7026 32.307 68.706L32.3037 68.7093L32.3003 68.7127C32.297 68.7263 32.29 68.7363 32.2867 68.75C32.273 68.7773 32.2594 68.8112 32.2458 68.8383C32.2355 68.8689 32.2221 68.8995 32.2118 68.9266C32.2051 68.9502 32.1948 68.9742 32.1881 68.9979L32.1678 69.0591C32.1678 69.0625 32.1678 69.0658 32.1644 69.0694C32.3243 69.0797 32.4875 69.0898 32.6507 69.1137C33.1642 69.175 33.6811 69.3212 34.0721 69.6236C34.1164 69.6576 34.1571 69.6949 34.198 69.7325C34.2217 69.7529 34.2456 69.7735 34.2659 69.7971C34.6842 70.2358 34.7658 70.6438 34.6333 70.9565C34.4088 71.4734 33.5995 71.7249 32.7971 71.4055C32.5863 71.3205 32.3652 71.2116 32.151 71.0858C32.1544 71.113 32.1613 71.1401 32.168 71.1674C32.1783 71.1946 32.1817 71.2217 32.1884 71.249V71.2523C32.1884 71.259 32.1884 71.2626 32.1917 71.2693C32.202 71.2999 32.2087 71.3339 32.219 71.3645C32.2257 71.3782 32.2293 71.3952 32.236 71.4088C32.236 71.4258 32.2393 71.4394 32.2463 71.4531C32.2496 71.4634 32.253 71.4768 32.2566 71.4904C32.2669 71.5177 32.2736 71.5447 32.2839 71.572C32.3008 71.6263 32.3178 71.6773 32.3348 71.7285C32.3485 71.7728 32.3688 71.8204 32.3858 71.868C32.3858 71.8747 32.3891 71.8817 32.3891 71.8884C32.3994 71.9121 32.4095 71.9393 32.4231 71.9633C32.4265 71.9769 32.4334 71.9906 32.4368 72.0076C32.4435 72.0178 32.4471 72.0279 32.4537 72.0382C32.4674 72.0722 32.481 72.1061 32.4947 72.1401C32.4947 72.1435 32.498 72.1468 32.498 72.1504C32.5047 72.1607 32.5083 72.1708 32.5117 72.1811C32.515 72.1913 32.522 72.2047 32.5253 72.2117C32.5456 72.256 32.5626 72.3 32.5832 72.3442C32.5696 72.3679 32.5526 72.3952 32.5389 72.4225H32.5356L32.5253 72.4428C32.5083 72.4768 32.488 72.5108 32.471 72.5414C32.454 72.5754 32.437 72.606 32.42 72.64C32.3997 72.6706 32.3861 72.7046 32.3724 72.7353C32.4267 72.7353 32.4846 72.7386 32.5356 72.742C33.0285 72.7759 33.644 72.8815 34.0011 73.2622C34.0044 73.2655 34.0078 73.2655 34.0078 73.2689C34.0247 73.2859 34.0384 73.3029 34.052 73.3198C34.2152 73.5204 34.2392 73.7994 34.1506 74.0373C34.1167 74.1358 34.0623 74.2277 33.9941 74.3024C33.9328 74.3704 33.8616 74.4249 33.78 74.4622C33.661 74.5202 33.5318 74.5505 33.4026 74.5575C33.0252 74.5881 32.6205 74.4419 32.3145 74.2514C32.3078 74.2481 32.3042 74.2447 32.2975 74.2411C32.2942 74.2411 32.2942 74.2378 32.2908 74.2378C32.2025 74.1835 32.1173 74.1222 32.0391 74.0542V74.2005C32.0391 74.2072 32.0391 74.2175 32.0424 74.2277C32.0424 74.2514 32.0424 74.2754 32.0458 74.299C32.0458 74.316 32.0491 74.3364 32.0524 74.3534V74.3704C32.0558 74.3806 32.0558 74.3873 32.0558 74.3976C32.0591 74.418 32.0591 74.4386 32.0625 74.4589C32.0692 74.4895 32.0761 74.5235 32.0795 74.5575C32.0828 74.5711 32.0862 74.5778 32.0862 74.5915C32.0895 74.5982 32.0929 74.6118 32.0929 74.6221V74.6254C32.0962 74.6391 32.0995 74.6491 32.1031 74.6628C32.1031 74.6695 32.1065 74.6764 32.1065 74.6831C32.1065 74.6898 32.1098 74.6934 32.1098 74.7001C32.1132 74.7274 32.1235 74.7511 32.1302 74.775C32.1369 74.7987 32.1438 74.826 32.1505 74.8463C32.1505 74.853 32.1539 74.8566 32.1572 74.8633C32.1606 74.87 32.1639 74.8769 32.1639 74.8836C32.1673 74.8939 32.1706 74.9073 32.1775 74.9176C32.1979 74.9719 32.2149 75.0265 32.2388 75.0775L32.2422 75.0808L32.2525 75.1114C32.2627 75.1351 32.2694 75.1591 32.2797 75.1794C32.2967 75.2134 32.3104 75.244 32.324 75.2746C32.3343 75.2883 32.3377 75.3086 32.3477 75.3223C32.3544 75.3359 32.3613 75.3562 32.368 75.3665C32.3817 75.3938 32.3953 75.4209 32.409 75.4448C32.4156 75.4584 32.426 75.4754 32.4326 75.4891C32.436 75.4958 32.4429 75.5027 32.4463 75.5128L32.4566 75.5331C32.4633 75.5434 32.4736 75.5568 32.4803 75.5704L32.5006 75.6113C32.5073 75.6216 32.5142 75.635 32.5209 75.6453C32.5209 75.652 32.5243 75.6556 32.5312 75.6623C32.5312 75.669 32.5346 75.6726 32.5379 75.6793C32.5516 75.703 32.5616 75.7236 32.5752 75.7439V75.7576C32.5786 75.7949 32.5819 75.8425 32.5855 75.8801C32.5855 75.921 32.5922 75.965 32.5958 76.0093C32.5958 76.0466 32.6025 76.0876 32.6061 76.1249C32.6095 76.1486 32.6095 76.1759 32.6128 76.1998C32.6162 76.2338 32.6195 76.2677 32.6231 76.3051V76.3084C32.6298 76.3457 32.6334 76.3833 32.6368 76.4173L32.6471 76.4786C32.6538 76.5295 32.6607 76.5772 32.6674 76.6248C32.6947 76.6111 32.7217 76.5975 32.7524 76.5875C33.0481 76.4649 33.3712 76.4515 33.6399 76.5602C33.8474 76.6384 34.0242 76.7947 34.1329 77.0294C34.3913 77.5837 34.398 78.6547 33.6399 78.8043C33.5889 78.8146 33.531 78.8213 33.4734 78.8246H33.47C33.504 78.879 33.5413 78.9369 33.5789 78.9912C33.6162 79.0491 33.6538 79.1001 33.6945 79.1544C33.7318 79.2087 33.7727 79.2633 33.8134 79.3142C33.8814 79.4061 33.9493 79.4911 34.0242 79.5794H34.0276C34.0616 79.6237 34.0989 79.6643 34.1365 79.7053C34.1365 79.7053 34.1398 79.712 34.1432 79.7156C34.1805 79.7565 34.2181 79.7938 34.252 79.8381C34.269 79.8551 34.2827 79.8687 34.2963 79.8857C34.2997 79.8924 34.3066 79.896 34.31 79.9027C34.3679 79.964 34.4255 80.0252 34.4901 80.0898V80.0932C34.5275 80.1272 34.5581 80.1611 34.5921 80.1884C34.6227 80.219 34.6533 80.2427 34.684 80.2667C34.7043 80.287 34.7283 80.304 34.7519 80.3176L34.7723 80.3279C34.7826 80.3382 34.796 80.3449 34.8096 80.3552C34.8163 80.3552 34.8232 80.3586 34.8333 80.3655C34.84 80.3722 34.8469 80.3758 34.8536 80.3792C34.8639 80.3825 34.874 80.3895 34.8809 80.3928L34.9319 80.4131C34.9455 80.4165 34.9592 80.4234 34.9692 80.4268C34.9828 80.4301 34.9965 80.4335 35.0065 80.4335C35.0202 80.4368 35.0302 80.4402 35.0438 80.4438C35.0812 80.4505 35.1151 80.4505 35.1494 80.4505C35.163 80.4505 35.1731 80.4505 35.1867 80.4471C35.2037 80.4471 35.214 80.4471 35.2276 80.4438H35.2513C35.2616 80.4438 35.2683 80.4404 35.275 80.4404C35.2784 80.4404 35.2817 80.4371 35.2817 80.4371C35.2884 80.4371 35.2953 80.4371 35.302 80.4337C35.3257 80.4304 35.3463 80.427 35.37 80.4234H35.3937L35.4243 80.4131H35.4379L35.4549 80.4065H35.4583C35.482 80.3998 35.5093 80.3962 35.5365 80.3928C35.5432 80.3895 35.5502 80.3861 35.5602 80.3861H35.5772L35.6385 80.3758C35.6588 80.3725 35.6827 80.3725 35.7031 80.3691H35.7234C35.7471 80.3691 35.7744 80.3658 35.7983 80.3658C35.8426 80.3658 35.8866 80.3691 35.9342 80.3725H35.9376C35.9852 80.3758 36.0328 80.3861 36.0838 80.3962C36.0905 80.3995 36.0974 80.4028 36.1041 80.4028C36.1108 80.4028 36.1178 80.4062 36.1278 80.4062C36.1415 80.4095 36.1551 80.4095 36.1721 80.4095C36.1824 80.4129 36.1958 80.4129 36.2061 80.4129H36.308C36.3147 80.4129 36.3183 80.4095 36.325 80.4095H36.3386C36.3523 80.4062 36.3659 80.4062 36.376 80.4062H36.3793C36.3896 80.4062 36.403 80.4028 36.4133 80.3995L36.4166 80.3962H36.4233C36.4573 80.3928 36.4879 80.3859 36.5219 80.3758C36.5356 80.3725 36.5526 80.3691 36.5695 80.3655L36.6205 80.3485C36.6442 80.3418 36.6715 80.3282 36.6988 80.3179C36.7497 80.2976 36.804 80.277 36.8586 80.2499C36.8892 80.2363 36.9199 80.2193 36.9539 80.199C36.9605 80.1956 36.9708 80.1923 36.9811 80.1853C36.9878 80.182 36.9981 80.175 37.0084 80.1717C37.0288 80.1614 37.0458 80.148 37.0663 80.1377C37.0833 80.131 37.1003 80.1207 37.1173 80.1071C37.1276 80.1004 37.141 80.0901 37.1546 80.0834C37.1683 80.0731 37.1819 80.0631 37.1956 80.0561C37.2092 80.0458 37.2229 80.0391 37.2365 80.0288C37.2398 80.0221 37.2432 80.0221 37.2468 80.0185C37.249 80.0185 37.2513 80.0174 37.2535 80.0152C37.2568 80.0118 37.2671 80.0049 37.2738 79.9982C37.2875 79.9879 37.3011 79.9779 37.3148 79.9709C37.3251 79.9606 37.3384 79.9506 37.3521 79.9403C37.3758 79.9233 37.403 79.9029 37.427 79.8824C37.4509 79.8618 37.478 79.8414 37.5019 79.8177C37.5122 79.8111 37.5292 79.7974 37.5392 79.7871C37.5529 79.7768 37.5665 79.7634 37.5802 79.7531C37.6278 79.7055 37.6754 79.6612 37.7264 79.6136V79.6103C37.74 79.5966 37.75 79.5866 37.7637 79.5693L37.7977 79.5354C37.8044 79.532 37.8043 79.5287 37.808 79.5251C37.8283 79.5047 37.8489 79.4808 37.8726 79.4571C37.8793 79.4504 37.8829 79.4435 37.8896 79.4368C37.9065 79.4164 37.9235 79.3925 37.9405 79.3722C37.9642 79.3485 37.9848 79.3212 38.0085 79.2906H38.0118C38.0255 79.2702 38.0425 79.2463 38.0628 79.2226C38.0901 79.1853 38.1171 79.1513 38.1444 79.1137C38.1614 79.09 38.1784 79.0661 38.1954 79.0388C38.2226 79.0015 38.2497 78.9639 38.2736 78.9232C38.294 78.8893 38.3109 78.8586 38.3349 78.8246C38.3452 78.8077 38.3552 78.7873 38.3689 78.7667C38.3756 78.7564 38.3792 78.7464 38.3859 78.7327C38.3859 78.7294 38.3892 78.7261 38.3925 78.7225C38.4095 78.6885 38.4299 78.6545 38.4469 78.6205C38.4572 78.6002 38.4672 78.5832 38.4775 78.5662C38.4842 78.5492 38.4945 78.5322 38.5048 78.5119C38.5184 78.4779 38.5354 78.4406 38.5557 78.403C38.5727 78.3621 38.5931 78.3147 38.6137 78.2671V78.2604C38.6273 78.2367 38.634 78.2161 38.6443 78.1891C38.651 78.1687 38.6579 78.1551 38.6646 78.1348L38.6713 78.1211L38.6816 78.0905C38.6919 78.0702 38.6953 78.0565 38.702 78.0362C38.7086 78.0192 38.7156 77.9989 38.7223 77.9819V77.9716C38.7393 77.9273 38.7529 77.8797 38.7666 77.8287V77.822C38.7769 77.7847 38.7869 77.7507 38.7939 77.7131V77.7028C38.7939 77.6961 38.8005 77.6925 38.8005 77.6858C38.8039 77.6722 38.8072 77.6552 38.8108 77.6382C38.8144 77.6212 38.8211 77.5973 38.8245 77.577C38.8381 77.509 38.8482 77.441 38.8585 77.3695L38.8688 77.3185V77.3118C38.8721 77.2812 38.8754 77.2506 38.8791 77.2166C38.8824 77.1859 38.8894 77.1587 38.8894 77.1247C38.8894 77.0941 38.8927 77.0634 38.8997 77.0328V76.9785C38.8997 76.9581 38.8997 76.9375 38.903 76.9139V76.5875C38.8997 76.5228 38.8963 76.4582 38.8894 76.3936C38.886 76.3527 38.8791 76.3087 38.8757 76.2644C38.8621 76.1591 38.8417 76.0502 38.8247 75.9483C38.8214 75.938 38.818 75.928 38.818 75.9177C38.8147 75.911 38.8147 75.904 38.8147 75.9007C38.8044 75.8531 38.7944 75.8124 38.7841 75.7681C38.7807 75.7614 38.7807 75.7545 38.7774 75.7478C38.7671 75.7105 38.7604 75.6729 38.7467 75.6322C38.7467 75.6289 38.7434 75.6255 38.7434 75.6219V75.6186C38.7774 75.6049 38.8114 75.5913 38.8453 75.5743C38.8793 75.5573 38.9066 75.537 38.9372 75.5164C38.9609 75.4994 38.9815 75.4824 39.0018 75.4654C39.0222 75.4484 39.0461 75.4281 39.0631 75.4111L39.0698 75.4044C39.0834 75.3874 39.1038 75.3704 39.1174 75.3534C39.1311 75.3398 39.1411 75.3261 39.1514 75.3125C39.1581 75.3022 39.1684 75.2922 39.1751 75.2819C39.1988 75.2479 39.2261 75.2106 39.25 75.1696C39.25 75.1663 39.2533 75.1663 39.2533 75.1629C39.2703 75.1356 39.2873 75.105 39.301 75.0746C39.3213 75.0407 39.3419 74.9997 39.3553 74.9624C39.3756 74.9215 39.3926 74.8775 39.4062 74.8365C39.5967 74.3163 39.6204 73.6329 39.4811 73.031C39.3962 72.6706 39.2533 72.3406 39.0562 72.0892L39.0549 72.0894ZM37.9055 74.915C37.8409 74.9387 37.7763 74.9593 37.7083 74.9763C37.7083 74.9785 37.7072 74.9785 37.705 74.9763C37.6983 74.9797 37.6913 74.983 37.6846 74.9797C37.1678 75.1089 36.6239 74.9899 36.457 74.6635C36.4367 74.6262 36.4231 74.5853 36.4128 74.541C36.3585 74.2519 36.5523 73.9562 36.7495 73.7623C37.0622 73.4666 37.8479 72.9667 38.3068 73.1162C38.3781 73.1399 38.4497 73.1742 38.511 73.2182C38.5212 73.2215 38.5313 73.2285 38.5416 73.2352C38.7115 73.3577 38.817 73.5479 38.7933 73.7793C38.7424 74.3709 38.3544 74.7451 37.9055 74.915ZM39.0242 70.1884C39.0309 70.2054 39.0345 70.2257 39.0379 70.2427L39.0446 70.28C39.0649 70.433 39.0036 70.5895 38.9153 70.729C38.8507 70.8343 38.7691 70.9262 38.6909 71.0011L38.6772 71.0147C38.4324 71.2528 38.174 71.416 37.9325 71.5043C37.5482 71.6572 37.2048 71.6268 37.028 71.4397C37.0213 71.4364 37.0177 71.433 37.0177 71.4294C36.8545 71.2559 36.8272 70.9568 37.0144 70.5521V70.5488C37.3611 69.7804 37.9189 69.6136 38.3642 69.7055C38.4221 69.7158 38.4765 69.7328 38.5308 69.7531C38.7313 69.828 38.8911 69.9536 38.9797 70.0932C38.99 70.1168 39.0034 70.1408 39.0137 70.1645C39.017 70.1712 39.0204 70.1781 39.024 70.1882L39.0242 70.1884ZM37.8069 78.4921C37.7287 78.5464 37.6404 78.5973 37.5485 78.6383C37.5348 78.6486 37.5212 78.6553 37.5042 78.662C37.273 78.7639 36.9943 78.8185 36.7492 78.7163C36.535 78.6177 36.4058 78.3659 36.4025 78.1381C36.4025 77.6145 36.9467 76.9005 37.6198 76.8019C37.6811 76.7916 37.7387 76.7882 37.8 76.7882C37.817 76.7882 37.834 76.7882 37.8476 76.7916C38.1537 76.8119 38.3678 77.05 38.3848 77.3491C38.4121 77.8354 38.1774 78.2334 37.8067 78.4916L37.8069 78.4921Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M39.0373 67.8442C38.9941 67.9098 38.949 67.9799 38.9037 68.0579C38.9243 68.0867 38.9429 68.1155 38.9593 68.1441H38.9614C38.9882 68.1853 39.0129 68.2283 39.0373 68.2715C39.0579 68.3065 39.0765 68.3433 39.0947 68.3783C39.1009 68.3845 39.103 68.3907 39.105 68.3989C39.105 68.3989 39.1092 68.401 39.1071 68.4031C39.1071 68.4031 39.1092 68.4031 39.1092 68.4051C39.1256 68.4381 39.1421 68.4708 39.1586 68.5058C39.175 68.5428 39.1915 68.5796 39.2059 68.6167C39.2245 68.6558 39.2389 68.6947 39.2533 68.7359C39.2554 68.7379 39.2554 68.74 39.2574 68.7441C39.2657 68.7647 39.2739 68.7874 39.2801 68.8098C39.2821 68.8118 39.2821 68.8159 39.2821 68.818C39.2883 68.8324 39.2924 68.8448 39.2965 68.8592C39.3007 68.8674 39.3027 68.8757 39.3048 68.8839C39.3069 68.888 39.3069 68.8921 39.3089 68.8963C39.3172 68.9251 39.3274 68.9539 39.3336 68.9825C39.3357 68.9866 39.3377 68.9887 39.3377 68.9928H39.3357C39.3192 68.9866 39.3007 68.9804 39.2842 68.9722C39.1076 68.9086 38.9246 68.8551 38.7398 68.8159C38.298 68.7215 37.8398 68.705 37.3981 68.818C37.4455 68.7768 37.4905 68.7379 37.54 68.7029C37.575 68.6782 37.5523 68.6249 37.5111 68.6352C37.0509 68.7338 36.5947 68.8345 36.229 69.1408C36.2495 69.034 36.2825 68.9313 36.3028 68.8224C36.3069 68.7935 36.2781 68.7629 36.2493 68.7812C36.0583 68.8942 35.9164 69.0566 35.8014 69.2435C35.2958 68.6744 34.5563 68.5184 33.8229 68.4937C33.4551 68.4813 33.0916 68.4545 32.7279 68.436C32.6107 68.4298 32.4936 68.4278 32.3724 68.4319C32.3683 68.4236 32.3662 68.4133 32.3641 68.4051L32.3621 68.4031C32.2841 68.1832 32.2347 68.0064 32.2058 67.8483C32.1626 67.6038 32.1749 67.3984 32.2285 67.1456C32.2305 67.1435 32.2305 67.1415 32.2305 67.1394H39.6147L39.6085 67.1456C39.4852 67.3018 39.3272 67.4558 39.1524 67.6859C39.14 67.7024 39.1277 67.7188 39.1133 67.7353C39.1019 67.7502 39.0906 67.768 39.0793 67.7837C39.0656 67.8038 39.0523 67.8241 39.0373 67.8442Z' fill='%23A05A07'/%3E%3Cpath d='M38.0285 83.5723C38.012 83.9236 37.9422 84.2812 37.8292 84.6346C37.7922 84.7558 37.7492 84.8771 37.6997 84.9963C37.6771 85.0498 37.6565 85.101 37.6341 85.1546C37.5739 85.2933 37.5077 85.4308 37.4362 85.5662C37.3703 85.6918 37.2984 85.8146 37.2241 85.9361C37.2179 85.9459 37.2127 85.9562 37.2066 85.9659C37.1311 86.0874 37.0508 86.2058 36.9677 86.3222C36.961 86.3315 36.955 86.3412 36.9484 86.3505C36.866 86.4651 36.7795 86.5755 36.6907 86.6839C36.6819 86.6947 36.6734 86.706 36.6644 86.7168C36.5772 86.8218 36.4871 86.9227 36.3949 87.0211C36.3826 87.0345 36.3705 87.0481 36.3579 87.0612C36.268 87.1554 36.1761 87.245 36.0827 87.332C36.0657 87.3477 36.049 87.364 36.0317 87.3794C35.9411 87.4618 35.8495 87.5393 35.756 87.6142C35.7339 87.6319 35.7117 87.6497 35.6893 87.6669C35.5998 87.7364 35.5094 87.8018 35.4183 87.8639C35.4054 87.8726 35.3931 87.8829 35.3802 87.8914L35.3823 87.8875C35.3158 87.9316 35.2499 87.9792 35.183 88.0188C35.3496 87.7375 35.3413 87.3634 35.2425 87.0244C35.0898 86.5006 33.7186 84.014 33.9134 82.5598L33.9142 82.5557C33.9263 82.4661 33.9441 82.3799 33.9688 82.2988C33.9915 82.2167 34.0244 82.1385 34.0653 82.0666C34.1045 81.9948 34.1516 81.9269 34.2092 81.8674C34.2422 81.8303 34.279 81.7935 34.3222 81.7606H34.3243C34.3243 81.7592 34.325 81.7585 34.3263 81.7585C34.349 81.74 34.3758 81.7214 34.4002 81.705C35.1521 81.22 36.1959 80.7209 37.0732 80.7989L37.0753 80.8009C37.0979 80.803 37.1185 80.8071 37.1368 80.8112C37.1389 80.8092 37.1389 80.8112 37.1389 80.8112C37.1553 80.8153 37.1718 80.8215 37.1862 80.8277C37.2006 80.8339 37.213 80.8421 37.2233 80.8524C37.2336 80.8607 37.2418 80.8689 37.2501 80.8792L37.2521 80.8812C37.3255 80.9798 37.2755 81.1533 37.2807 81.3173L37.2812 81.3235C37.282 81.3454 37.2838 81.3672 37.2871 81.3886C37.2892 81.403 37.2912 81.4174 37.2954 81.4319H37.2974V81.436C37.3056 81.4648 37.318 81.4934 37.3324 81.5201C37.3407 81.5346 37.3509 81.549 37.3633 81.5613C37.3633 81.5613 37.3654 81.5613 37.3654 81.5634C37.3777 81.5778 37.3901 81.5902 37.4045 81.6005C37.4189 81.6108 37.4333 81.6211 37.4498 81.6313V81.6334C37.4766 81.6643 37.5013 81.697 37.5237 81.7299C37.5251 81.7299 37.5257 81.7306 37.5257 81.732C37.5319 81.7402 37.5381 81.7485 37.5443 81.7588C37.5834 81.8141 37.6202 81.8738 37.6552 81.9312L37.6573 81.9333C37.6758 81.9662 37.6964 82.001 37.7129 82.036C37.7129 82.036 37.7149 82.036 37.7149 82.0381C37.7335 82.071 37.7499 82.1058 37.7664 82.1408L37.7685 82.1428C37.785 82.1778 37.7994 82.2126 37.8138 82.2476L37.8159 82.2497C37.8303 82.2847 37.8447 82.3215 37.857 82.3565L37.8591 82.3585C37.8714 82.3936 37.8838 82.4304 37.8962 82.4654C37.8962 82.4654 37.8962 82.4674 37.8982 82.4695C37.9085 82.5066 37.9188 82.5413 37.9291 82.5784C37.9332 82.5941 37.9358 82.61 37.9399 82.6257C37.9551 82.6847 37.9693 82.7439 37.9803 82.8039C37.9829 82.8178 37.9847 82.8322 37.9873 82.8461C38.0282 83.0829 38.0431 83.3256 38.0298 83.5728L38.0285 83.5723Z' fill='%23D58500'/%3E%3Cpath opacity='0.3' d='M37.4502 81.6326C37.0586 81.4056 37.5323 80.8408 37.0761 80.8014C36.1978 80.7227 35.155 81.2233 34.4031 81.7065C34.1115 81.8939 33.9614 82.1948 33.9141 82.5598C35.0287 82.4733 36.3384 82.9938 36.6241 84.1383C36.8831 85.1692 36.3806 86.0694 35.8877 86.9377C35.71 87.2509 35.5414 87.5714 35.3813 87.8919C37.3055 86.6144 38.9519 83.539 37.4502 81.6326Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M38.0289 83.5478V83.5725C38.0269 83.5931 38.0248 83.6158 38.0228 83.6361C38.0207 83.6773 38.0186 83.7182 38.0124 83.7573C38.0083 83.8047 38.0022 83.8497 37.996 83.8971C37.9919 83.9362 37.9857 83.973 37.9774 84.0122C37.9733 84.0513 37.9651 84.0922 37.9568 84.1313C37.8253 83.7759 37.6508 83.4368 37.4186 83.1493C37.3488 83.0631 37.2747 82.9807 37.1988 82.9048C37.0242 82.7261 36.835 82.5699 36.6317 82.4383C36.6008 82.4157 36.5702 82.3972 36.5372 82.3789C36.3544 82.2638 36.1632 82.1693 35.9639 82.0893C35.8098 82.0257 35.6517 81.9722 35.4913 81.931C35.1153 81.8283 34.725 81.7727 34.3304 81.7606H34.3242V81.7585H34.3263C34.3489 81.74 34.3757 81.7214 34.4002 81.705C35.1521 81.22 36.1959 80.7209 37.0731 80.7989C37.0979 80.8009 37.1185 80.805 37.1367 80.8112C37.1388 80.8092 37.1388 80.8112 37.1388 80.8112C37.1553 80.8153 37.1717 80.8215 37.1862 80.8277C37.2006 80.8339 37.2129 80.8421 37.2232 80.8524C37.2335 80.8606 37.2418 80.8689 37.25 80.8792L37.252 80.8812C37.2582 80.8915 37.2644 80.9018 37.2685 80.9142C37.2973 80.9798 37.2912 81.0684 37.285 81.1629C37.2788 81.2367 37.2726 81.3129 37.285 81.3847C37.285 81.3868 37.2871 81.3889 37.2871 81.3889C37.2891 81.4033 37.2912 81.4177 37.2953 81.4321V81.4362H37.2973C37.2994 81.4465 37.3015 81.4568 37.3056 81.4651C37.3077 81.4712 37.3097 81.4774 37.3118 81.4815C37.3179 81.4959 37.3241 81.5083 37.3324 81.5207C37.3406 81.5351 37.3509 81.5495 37.3633 81.5618L37.3653 81.5639C37.3777 81.5783 37.39 81.5907 37.4044 81.601C37.4188 81.6113 37.4333 81.6216 37.4497 81.6319V81.6339C37.4765 81.6648 37.5012 81.6975 37.5236 81.7304V81.7325H37.5257C37.5319 81.7407 37.538 81.749 37.5422 81.7593H37.5442C37.5833 81.8146 37.6201 81.8743 37.6552 81.9317V81.9338H37.6572C37.6757 81.9668 37.6963 82.0015 37.7128 82.0365C37.7142 82.0365 37.7142 82.0372 37.7128 82.0386H37.7149C37.7334 82.0715 37.7499 82.1063 37.7664 82.1413V82.1433H37.7684C37.7849 82.1783 37.7993 82.2131 37.8137 82.2481V82.2502H37.8158C37.8302 82.2852 37.8446 82.322 37.857 82.357V82.359H37.859C37.8714 82.3941 37.8837 82.4309 37.8961 82.4659V82.47H37.8982C37.9085 82.5071 37.9188 82.5418 37.929 82.5789C38.0132 82.8891 38.0462 83.2157 38.0297 83.5486L38.0289 83.5478Z' fill='%23A05A07'/%3E%3Cpath d='M36.9783 76.3662C36.6177 76.5214 36.2972 76.7904 36.028 77.1258C35.839 76.6499 35.6364 76.1961 35.2668 75.8138C34.9556 75.4931 34.4943 75.0936 34.0165 75.212C33.7352 75.2812 33.8531 75.7152 34.1347 75.6462C34.4428 75.5698 34.8107 75.9891 34.9996 76.1863C35.3602 76.5611 35.5173 77.052 35.7054 77.5253C35.7126 77.54 35.7198 77.555 35.7281 77.5696C35.2616 78.3761 35.0665 79.3898 35.2915 80.1641C35.3726 80.4429 35.804 80.3245 35.725 80.0457C35.4025 78.9259 36.1175 77.2242 37.2044 76.7557C37.4715 76.6422 37.2414 76.255 36.9783 76.3685V76.3662Z' fill='%23995A07'/%3E%3Cpath d='M37.6715 72.2728C37.1271 72.4355 36.4882 72.8227 36.0197 73.321C35.7023 72.7784 35.1074 72.2136 34.4891 72.263C34.2026 72.2877 34.2005 72.7364 34.4891 72.712C35.0067 72.67 35.4897 73.2497 35.7146 73.6984C35.5072 74.0016 35.3736 74.3347 35.3571 74.6724C35.3416 74.961 35.7906 74.961 35.805 74.6724C35.8297 74.1692 36.2416 73.755 36.5919 73.4368C36.9299 73.1285 37.349 72.835 37.7907 72.7045C38.0671 72.6232 37.9479 72.1889 37.6715 72.2705V72.2728Z' fill='%23995A07'/%3E%3Cpath d='M37.3529 69.2442C36.9215 69.5649 36.4282 69.7719 36.037 70.1395C35.7412 69.508 35.1371 68.8743 34.4508 68.8743C34.1622 68.8743 34.1622 69.3232 34.4508 69.3232C35.023 69.3232 35.5263 69.9989 35.7083 70.5194C35.4668 70.8623 35.3219 71.2569 35.2521 71.6762C35.2078 71.9596 35.6395 72.0806 35.6866 71.7946C35.7729 71.2644 35.9793 70.8401 36.3544 70.4504C36.6975 70.0952 37.1907 69.9201 37.583 69.629C37.8121 69.4589 37.5902 69.0691 37.356 69.2419L37.3529 69.2442Z' fill='%23995A07'/%3E%3Cpath d='M37.2329 83.3437C37.2103 82.7542 37.1075 81.9084 36.4862 81.6419C36.222 81.5284 35.9929 81.9158 36.2591 82.0291C36.7451 82.2363 36.7665 82.9686 36.7871 83.4202C36.8159 84.1898 36.6586 84.89 36.2928 85.566C36.1551 85.82 36.5446 86.0468 36.6802 85.793C37.0972 85.0184 37.2679 84.2194 37.2329 83.3414V83.344V83.3437Z' fill='%23995A07'/%3E%3Cpath d='M35.7982 81.52C35.6625 81.2637 35.2978 81.5249 35.4303 81.779C35.7879 82.4547 35.1006 82.995 34.6815 83.4362C34.4813 83.646 34.8265 83.9346 35.0236 83.7248C35.6309 83.0859 36.2811 82.4375 35.7982 81.5198V81.52Z' fill='%23995A07'/%3E%3Cpath d='M40.2 67.7291C40.1959 67.7394 40.1938 67.7497 40.1917 67.7599C40.1138 68.0598 39.9616 68.3003 39.7212 68.405C39.5732 68.405 39.4316 68.405 39.296 68.403H39.105C35.0677 68.3906 36.3396 68.3927 32.3597 68.403H32.3514C32.1749 68.405 31.9898 68.405 31.7926 68.405C31.7311 68.3783 31.6734 68.3414 31.624 68.2961C31.6055 68.2817 31.589 68.2652 31.5725 68.2467C31.5251 68.1973 31.4842 68.1399 31.4492 68.0763C31.4327 68.0475 31.4163 68.0148 31.4018 67.9818V67.9798C31.373 67.9162 31.3483 67.8462 31.328 67.7744C31.1861 67.267 31.2582 66.5849 31.4574 66.1164C31.4616 66.1081 31.4636 66.0999 31.4677 66.0916H31.4739C31.5787 66.0916 31.6814 66.0896 31.782 66.0896C32.2135 66.0855 32.5937 66.0834 32.9286 66.0793C33.212 66.0772 33.4627 66.0752 33.6887 66.0731C33.8491 66.0711 33.9948 66.0711 34.1304 66.069C34.4365 66.0669 34.6872 66.0628 34.8988 66.0628C35.2831 66.0587 35.5459 66.0566 35.8111 66.0566C35.9406 66.0566 36.068 66.0566 36.2116 66.0587C36.38 66.0587 36.5692 66.0608 36.8014 66.0628C36.8979 66.0628 37.0027 66.0649 37.1177 66.0649C37.1895 66.0669 37.2637 66.0669 37.3417 66.0669H37.3437C37.389 66.069 37.4361 66.069 37.4856 66.069C37.6192 66.0711 37.7631 66.0711 37.9211 66.0731C37.9867 66.0731 38.0568 66.0752 38.1286 66.0752C38.6321 66.0793 39.2566 66.0855 40.0455 66.0916L40.0476 66.0937C40.0558 66.1143 40.0641 66.1349 40.0703 66.1552L40.0723 66.1573C40.0744 66.1594 40.0764 66.1614 40.0744 66.1635C40.0991 66.2191 40.1197 66.2765 40.1359 66.338C40.2654 66.7674 40.3024 67.3036 40.1995 67.7291H40.2Z' fill='%2300C55E'/%3E%3Cpath d='M40.2022 67.7272C40.2001 67.7375 40.1981 67.7478 40.194 67.7581C40.116 68.058 39.9659 68.3026 39.7234 68.4073C39.5733 68.4073 39.4297 68.4073 39.292 68.4053H39.1051C35.0699 68.3929 36.3418 68.395 32.3619 68.4053H32.3516C32.1771 68.4073 31.992 68.4073 31.7948 68.4073L31.7928 68.4053C31.7312 68.3785 31.6736 68.3417 31.6241 68.2964C31.6056 68.282 31.5891 68.2655 31.5727 68.247C31.5253 68.1975 31.4844 68.1401 31.4494 68.0766C31.4329 68.0477 31.4164 68.015 31.402 67.9821V67.98C31.3732 67.9164 31.3485 67.8464 31.3281 67.7746C31.3734 67.7849 31.4205 67.7911 31.4638 67.7993C31.7063 67.8384 31.9529 67.8547 32.1992 67.8487H32.2033C32.645 67.8446 33.0909 67.779 33.5141 67.6783C33.9846 67.5694 34.4693 67.405 34.8887 67.1463C34.8928 67.1463 34.8948 67.1442 34.899 67.1401L34.901 67.138C34.9216 67.1298 34.9401 67.1174 34.9605 67.101C34.9811 67.0907 34.9996 67.0783 35.0179 67.0639C35.0756 67.0268 35.1288 66.9859 35.1824 66.9447C35.4207 66.7537 35.587 66.4865 35.7309 66.2214C35.7577 66.166 35.7845 66.1125 35.811 66.0569C35.9405 66.0569 36.0679 66.0569 36.2115 66.0589C36.3799 66.0589 36.5691 66.061 36.8012 66.0631C36.8978 66.0631 37.0025 66.0651 37.1176 66.0651C37.1894 66.0651 37.2636 66.0672 37.3416 66.0672H37.3436C37.3889 66.0692 37.436 66.0692 37.4855 66.0692C37.6191 66.0713 37.763 66.0713 37.921 66.0734C37.9866 66.0734 38.0567 66.0754 38.1285 66.0754C38.632 66.0795 39.2565 66.0857 40.0454 66.0919H40.0475V66.094L40.0722 66.1555C40.0743 66.1555 40.0722 66.1575 40.0722 66.1575C40.0743 66.1596 40.0763 66.1617 40.0743 66.1637C40.099 66.2193 40.1196 66.2767 40.1358 66.3382C40.2673 66.7676 40.3044 67.3017 40.2014 67.7272H40.2022Z' fill='%2306B253'/%3E%3Cpath d='M37.772 81.239C37.7637 81.2884 37.7555 81.3334 37.7472 81.3767C37.7452 81.387 37.7431 81.3973 37.7411 81.4055C37.7266 81.465 37.7122 81.5206 37.6937 81.57C37.6793 81.6132 37.6628 81.6521 37.6422 81.6851C37.6257 81.7159 37.6072 81.7386 37.5869 81.7589H37.5436C37.2888 81.7569 37.0792 81.7548 36.9027 81.7548C36.8205 81.7548 36.7464 81.7548 36.6767 81.7528C36.463 81.7528 36.3068 81.7507 36.1773 81.7507C36.0746 81.7507 35.9883 81.7486 35.8998 81.7507C35.7641 81.7507 35.6244 81.7507 35.421 81.7528C35.1806 81.7528 34.8519 81.7548 34.3342 81.7589H34.3095C34.2642 81.7116 34.2212 81.6397 34.1821 81.5453C34.1718 81.5226 34.1615 81.4979 34.1532 81.4735C34.1471 81.457 34.1409 81.4384 34.1347 81.422C34.1244 81.3911 34.1141 81.3584 34.1059 81.3254C34.0935 81.2904 34.0853 81.2516 34.075 81.2124C33.9537 80.7213 33.9064 80.0332 33.9949 79.5812H34.0258C34.5702 79.5709 34.936 79.5627 35.203 79.5586C35.3899 79.5565 35.5296 79.5544 35.6488 79.5544C35.846 79.5544 35.9899 79.5586 36.2015 79.5627C36.22 79.5627 36.2385 79.5647 36.2571 79.5647C36.2756 79.5647 36.2962 79.5647 36.3147 79.5668C36.4257 79.5689 36.5552 79.573 36.7153 79.5771C36.8386 79.5792 36.9804 79.5833 37.1487 79.5874C37.1982 79.5874 37.2473 79.5894 37.3009 79.5894C37.3565 79.5915 37.4139 79.5915 37.4754 79.5936C37.5534 79.5956 37.6358 79.5956 37.722 79.5977C37.722 79.6039 37.7241 79.608 37.7261 79.6142C37.7261 79.6142 37.7282 79.6142 37.7261 79.6162C37.7323 79.6451 37.7385 79.6757 37.7426 79.7086C37.7508 79.7642 37.7591 79.8237 37.7653 79.8852C37.7756 79.9467 37.7817 80.0106 37.7879 80.0762C37.8209 80.4644 37.8188 80.9002 37.7714 81.2392L37.772 81.239Z' fill='%2300C55E'/%3E%3Cpath d='M37.7715 81.2383C37.7632 81.2857 37.755 81.3328 37.7467 81.376C37.7447 81.3863 37.7426 81.3966 37.7406 81.4049C37.7262 81.4664 37.7117 81.5199 37.6932 81.5693C37.6788 81.6126 37.6623 81.6515 37.6417 81.6844C37.6252 81.7153 37.6067 81.7379 37.5882 81.7583H37.5429C37.288 81.7562 37.0785 81.7542 36.9019 81.7542C36.8198 81.7542 36.7457 81.7542 36.6759 81.7521C36.4623 81.7521 36.306 81.75 36.1765 81.75C36.0738 81.75 35.9876 81.748 35.899 81.75C35.7634 81.75 35.6236 81.75 35.4202 81.7521C35.1798 81.7521 34.8511 81.7542 34.3334 81.7583H34.3087C34.2634 81.7109 34.2204 81.6391 34.1813 81.5446C34.171 81.522 34.1607 81.4973 34.1525 81.4728C34.1463 81.4563 34.1401 81.4378 34.134 81.4213C34.1237 81.3904 34.1134 81.3577 34.1051 81.3248C34.0928 81.2898 34.0845 81.2509 34.0742 81.2118C34.6269 81.0864 35.1384 80.7948 35.5598 80.3878C35.5611 80.3878 35.5618 80.3871 35.5618 80.3858C35.5701 80.3796 35.5762 80.3734 35.5845 80.3652C35.8208 80.133 36.0386 79.8578 36.2007 79.5618C36.2193 79.5618 36.2378 79.5638 36.2563 79.5638C36.2749 79.5638 36.2955 79.5638 36.314 79.5659C36.4249 79.568 36.5544 79.5721 36.7145 79.5762C36.8378 79.5782 36.9797 79.5824 37.148 79.5865C37.1974 79.5865 37.2466 79.5885 37.3001 79.5885C37.3557 79.5885 37.4152 79.5906 37.4747 79.5927C37.5527 79.5947 37.635 79.5947 37.7213 79.5968H37.7233C37.7233 79.603 37.7254 79.6071 37.7254 79.6133C37.7254 79.6133 37.7274 79.6133 37.7254 79.6153C37.7316 79.6441 37.7377 79.6748 37.7419 79.7077C37.7522 79.7633 37.7583 79.8207 37.7666 79.8802C37.7748 79.9438 37.781 80.0097 37.7872 80.0753C37.8201 80.4635 37.8181 80.8993 37.7707 81.2383H37.7715Z' fill='%2306B253'/%3E%3Cpath d='M35.5644 30.2094C35.1906 30.1924 34.8212 30.1693 34.4773 30.142L34.4732 30.1399C32.9004 30.0153 31.368 29.5932 29.926 28.945C29.544 28.772 29.128 28.6052 28.6994 28.4446C28.4672 28.356 28.2306 28.2716 27.9943 28.1872C27.9838 28.1831 27.9732 28.1807 27.9627 28.1766C27.9691 28.1725 27.9732 28.1681 27.9773 28.1661C27.9732 28.1661 27.9647 28.1702 27.9562 28.1746C27.9562 28.1746 27.9457 28.1787 27.9246 28.1851C27.8211 28.2168 27.5889 28.2675 27.3166 28.3941C27.3145 28.3941 27.3124 28.3962 27.3124 28.3962C27.0993 28.4932 26.8607 28.6369 26.6455 28.8544C26.1178 29.3841 25.5456 30.6213 25.2184 31.4826C24.4922 33.3993 24.163 34.0158 23.9519 36.549C23.9519 36.549 23.6077 37.936 23.5297 38.6601C23.5297 38.6601 23.1076 37.8134 23.1076 37.8157C23.0759 37.746 22.8965 37.3936 22.9176 36.5892V36.5871L22.375 33.3236L23.7619 33.71C23.7619 33.71 22.9745 31.5124 23.3735 31.445C25.4887 31.0903 23.6438 27.852 23.6438 27.852L23.8464 27.9449L25.0686 28.5043C25.0686 28.5043 25.2269 27.7717 25.5646 27.4173C25.6596 27.3181 25.7862 27.2188 25.9384 27.1279C26.5865 26.7374 27.6715 26.4882 28.4358 26.9464C30.5342 28.1982 33.9921 30.1234 35.5646 30.2099L35.5644 30.2094Z' fill='%23C77500'/%3E%3Cpath d='M44.0949 35.1633C42.4534 34.8431 39.594 35.4066 37.8861 35.9023L37.9046 36.627L37.4289 36.0488C36.6533 36.3338 36.6454 36.6177 37.0325 37.2571C37.779 38.4904 37.6668 38.3758 38.0501 38.3218C40.4033 37.3238 43.0735 36.8203 44.4929 36.88C44.6334 36.6905 44.7361 35.2887 44.0949 35.1656V35.1633Z' fill='%23CE8000'/%3E%3Cpath opacity='0.6' d='M44.0961 35.1636C43.6668 35.08 43.1514 35.0571 42.5957 35.0771C42.6122 35.2208 42.6194 35.3626 42.6122 35.4859C42.59 36.0623 42.3746 36.6098 42.0469 37.1189C43.015 36.9346 43.8755 36.8541 44.4931 36.8806C44.6349 36.6909 44.7376 35.2892 44.0964 35.1659V35.1634L44.0961 35.1636Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M44.0822 35.1605C43.5025 35.0483 42.7694 35.0449 41.9925 35.1108C41.784 35.5096 41.4617 35.8779 41.1057 36.1734C40.9703 36.2857 40.6432 36.6139 40.42 36.4865C40.2588 36.3953 40.2295 36.2149 40.222 36.0398C39.9281 36.6141 39.2719 37.0206 38.719 37.4178C38.3826 37.6628 38.0564 38.0111 37.6914 38.2925C37.7923 38.3828 37.8634 38.3442 38.0376 38.3192C40.3922 37.3213 43.0623 36.8175 44.4804 36.8775C44.6223 36.688 44.725 35.2861 44.0825 35.1631V35.1605H44.0822Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M40.6194 37.3635C40.5694 37.3998 40.5198 37.4386 40.4727 37.477C41.2624 37.2595 42.0285 37.1004 42.7145 36.9992C42.7518 36.7197 42.7245 36.4267 42.6633 36.1763C42.4058 36.3866 42.0964 36.6388 41.7348 36.6648C41.7111 36.6674 41.6882 36.6522 41.6859 36.6322L41.6627 36.4283C41.4447 36.8203 41.0011 37.0852 40.6232 37.3655L40.6194 37.3635Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M43.1975 36.0671C43.2042 36.125 43.1764 36.3016 43.2415 36.2867C43.3053 36.2743 43.3699 36.2568 43.4309 36.2293C43.5828 36.1608 43.7164 36.0666 43.8335 35.9564C44.0194 35.7795 44.2016 35.5574 44.3437 35.3167C44.2742 35.2354 44.1885 35.179 44.0806 35.1582C43.7759 35.0984 43.4245 35.0699 43.0469 35.0645C43.095 35.3981 43.1679 35.7291 43.1975 36.065V36.0676V36.0671Z' fill='%23C77500'/%3E%3Cpath d='M32.7064 35.9694L32.3013 36.4196L32.3916 35.8512C30.8559 35.3724 27.6428 34.8401 26.2394 35.2823C26.1511 35.3089 25.8837 36.9282 26.3676 36.8894C26.3952 36.8876 26.4289 36.886 26.4644 36.8845C26.5388 36.8222 26.6276 36.765 26.7349 36.7223C27.4199 36.4582 28.0596 36.5434 28.0596 36.5434C28.0596 36.5434 27.8513 36.7398 27.5998 37.0158C29.3032 37.3185 31.9962 38.0547 32.761 38.3224C33.2117 38.4815 33.6413 37.7739 33.8027 37.1151C34.0128 36.2585 33.9044 36.3532 32.7046 35.9668L32.7064 35.9694Z' fill='%23CE8000'/%3E%3Cpath opacity='0.3' d='M32.7084 35.9742L32.3032 36.4241L32.3936 35.856C32.2839 35.8228 32.2623 35.8153 32.1351 35.7793C31.965 35.8915 31.826 35.9855 31.6746 36.0601C31.1176 36.3389 30.5194 36.5551 29.9085 36.679C29.1996 36.8241 28.4678 36.8931 27.7439 36.8676C27.6986 36.914 27.652 36.9673 27.6016 37.0208C29.3049 37.3233 32.0018 38.0597 32.7648 38.3274C33.2155 38.4865 33.6451 37.7791 33.8065 37.1202C34.0176 36.2637 33.909 36.3582 32.7084 35.9721V35.9742Z' fill='%23C77500'/%3E%3Cpath opacity='0.6' d='M33.2456 36.1416C33.0628 36.6935 32.7261 37.1759 32.2396 37.5533C32.044 37.7051 31.8468 37.8521 31.6406 37.9896C32.1343 38.1283 32.5367 38.2508 32.7635 38.3314C33.2142 38.4905 33.6438 37.7829 33.8052 37.1241C33.9795 36.4183 33.9355 36.3581 33.2425 36.1439L33.2456 36.1416Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M32.4219 49.8441C32.4219 49.8441 33.2374 49.2145 35.1371 49.0034C35.9925 48.9084 36.826 49.0034 37.4592 49.2145C38.0924 49.4256 39.0101 49.6292 38.9736 49.8441C38.937 50.0591 34.5038 49.848 32.4219 49.8441Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M36.8268 51.5372C36.8268 51.5372 36.72 52.3128 36.0119 52.5612C35.6929 52.6729 35.3647 52.6433 35.1022 52.5179C34.8396 52.3926 34.5098 51.6914 34.5039 51.5307C34.498 51.3701 36.2283 52.0919 36.8268 51.5372Z' fill='%23A05A07'/%3E%3Cpath d='M48.9558 44.7725C48.8958 44.9043 48.7942 45.015 48.667 45.0798C48.6117 45.1076 48.5514 45.1282 48.4891 45.1398C48.1287 45.1998 47.7846 44.9365 47.7176 44.5485C47.6646 44.2299 47.8147 43.9272 48.0688 43.7954C48.1241 43.7676 48.1843 43.747 48.249 43.7354C48.607 43.6731 48.9512 43.9387 49.0181 44.3267C49.0459 44.486 49.0204 44.6407 48.9558 44.7725Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M48.667 45.0799C48.6117 45.1077 48.5514 45.1283 48.4891 45.1399C48.1287 45.1999 47.7846 44.9365 47.7176 44.5486C47.6646 44.2299 47.8147 43.9272 48.0688 43.7954C48.0688 43.7954 47.6736 44.9481 48.667 45.0799Z' fill='%23474C2F'/%3E%3Cpath d='M48.9587 44.7727C47.7968 44.5647 48.2519 43.7356 48.2519 43.7356C48.6099 43.6733 48.9541 43.939 49.021 44.3269C49.0488 44.4862 49.0233 44.6409 48.9587 44.7727Z' fill='%23949984'/%3E%3Cpath d='M44.0988 35.1621C42.4573 34.8419 39.5979 35.4053 37.89 35.9011L37.9085 36.6257L37.4328 36.0476C36.6572 36.3325 36.6493 36.6165 37.0364 37.2559C37.7829 38.4892 37.6707 38.3746 38.054 38.3206C40.4072 37.3226 43.0774 36.8191 44.4968 36.8788C44.6373 36.6893 44.74 35.2874 44.0988 35.1644V35.1621Z' fill='%23CE8000'/%3E%3Cpath opacity='0.6' d='M44.1001 35.1624C43.6707 35.0787 43.1553 35.0558 42.5996 35.0759C42.6161 35.2196 42.6233 35.3614 42.6161 35.4847C42.5939 36.061 42.3785 36.6086 42.0508 37.1177C43.0189 36.9334 43.8794 36.8528 44.497 36.8794C44.6388 36.6896 44.7415 35.288 44.1003 35.1647V35.1621L44.1001 35.1624Z' fill='%23A05A07'/%3E%3Cpath opacity='0.3' d='M44.0861 35.1593C43.5064 35.0471 42.7733 35.0437 41.9964 35.1096C41.7879 35.5084 41.4656 35.8767 41.1096 36.1722C40.9742 36.2845 40.6471 36.6127 40.4239 36.4852C40.2628 36.3941 40.2334 36.2137 40.2259 36.0386C39.932 36.6129 39.2758 37.0194 38.7229 37.4166C38.3865 37.6616 38.0603 38.0099 37.6953 38.2913C37.7962 38.3816 37.8673 38.343 38.0415 38.318C40.3961 37.32 43.0662 36.8163 44.4843 36.8762C44.6262 36.6868 44.7289 35.2849 44.0864 35.1619V35.1593H44.0861Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M40.6233 37.3622C40.5734 37.3985 40.5237 37.4374 40.4766 37.4758C41.2663 37.2582 42.0324 37.0992 42.7184 36.998C42.7557 36.7184 42.7284 36.4255 42.6672 36.175C42.4097 36.3854 42.1003 36.6376 41.7387 36.6636C41.715 36.6662 41.6921 36.651 41.6898 36.6309L41.6666 36.4271C41.4486 36.8191 41.005 37.084 40.6272 37.3643L40.6233 37.3622Z' fill='%23C77500'/%3E%3Cpath opacity='0.3' d='M43.2014 36.0659C43.2081 36.1238 43.1803 36.3004 43.2454 36.2854C43.3092 36.2731 43.3738 36.2556 43.4348 36.228C43.5867 36.1596 43.7203 36.0653 43.8374 35.9552C44.0233 35.7783 44.2055 35.5562 44.3476 35.3155C44.2781 35.2342 44.1924 35.1778 44.0846 35.1569C43.7798 35.0972 43.4284 35.0686 43.0508 35.0632C43.0989 35.3968 43.1718 35.7279 43.2014 36.0638V36.0664V36.0659Z' fill='%23C77500'/%3E%3Cpath d='M32.7064 35.9686L32.3013 36.4189L32.3916 35.8505C30.8559 35.3717 27.6428 34.8394 26.2394 35.2816C26.1511 35.3081 25.8837 36.9275 26.3676 36.8886C26.3952 36.8868 26.4289 36.8853 26.4644 36.8838C26.5388 36.8215 26.6276 36.7643 26.7349 36.7216C27.4199 36.4575 28.0596 36.5427 28.0596 36.5427C28.0596 36.5427 27.8513 36.7391 27.5998 37.015C29.3032 37.3178 31.9962 38.054 32.761 38.3217C33.2117 38.4808 33.6413 37.7731 33.8027 37.1144C34.0128 36.2577 33.9044 36.3525 32.7046 35.9661L32.7064 35.9686Z' fill='%23CE8000'/%3E%3Cpath opacity='0.3' d='M32.7084 35.9734L32.3032 36.4234L32.3936 35.8553C32.2839 35.8221 32.2623 35.8146 32.1351 35.7786C31.965 35.8908 31.826 35.9848 31.6746 36.0594C31.1176 36.3382 30.5194 36.5544 29.9085 36.6782C29.1996 36.8234 28.4678 36.8924 27.7439 36.8669C27.6986 36.9132 27.652 36.9665 27.6016 37.0201C29.3049 37.3225 32.0018 38.059 32.7648 38.3267C33.2155 38.4858 33.6451 37.7784 33.8065 37.1194C34.0176 36.263 33.909 36.3575 32.7084 35.9714V35.9734Z' fill='%23C77500'/%3E%3Cpath opacity='0.6' d='M33.2456 36.1409C33.0628 36.6928 32.7261 37.1752 32.2396 37.5525C32.044 37.7044 31.8468 37.8514 31.6406 37.9888C32.1343 38.1276 32.5367 38.2501 32.7635 38.3307C33.2142 38.4898 33.6438 37.7821 33.8052 37.1234C33.9795 36.4176 33.9355 36.3574 33.2425 36.1432L33.2456 36.1409Z' fill='%23A05A07'/%3E%3Cpath d='M5.24409 92.6096C5.37022 92.4199 5.623 92.3319 5.82739 92.2606C6.09535 92.1671 6.36306 92.0891 6.62794 91.9882C7.46865 91.6618 8.31478 91.3439 9.18355 91.0989C9.58794 90.9851 9.99697 90.897 10.4037 90.7961C10.7399 90.7127 11.0784 90.6293 11.4243 90.599C11.7477 90.5709 12.0959 90.574 12.3909 90.7248L12.4092 90.7354C12.4167 90.73 12.4244 90.7248 12.429 90.7202C13.0831 90.2628 13.6819 89.7528 14.2374 89.1997C13.2123 82.778 2.34252 66.1233 2.34252 66.1233C-6.16861 65.9112 -15.0484 68.7175 -19.3945 73.6941C-7.92366 74.5554 0.615271 83.7834 4.71665 92.8063C4.88834 92.8472 5.08784 92.726 5.23945 92.6196C5.23945 92.6173 5.23946 92.6142 5.24203 92.6122L5.24434 92.6099L5.24409 92.6096Z' fill='%239EA58E'/%3E%3Cpath d='M12.3556 90.3586C13.0097 89.9012 13.6084 89.3905 14.1637 88.8373C13.1379 82.4164 2.2683 65.7617 2.2683 65.7617C-6.24283 65.5496 -15.1226 68.3559 -19.4688 73.3325C-7.86145 74.2038 0.763208 83.6867 4.80409 92.8113C7.49098 92.733 10.1429 91.8969 12.3525 90.3558L12.3556 90.3589V90.3586Z' fill='%239EA58E'/%3E%3Cpath opacity='0.4' d='M2.26779 65.7618C-3.03571 65.6305 -8.48078 66.6687 -12.8828 68.6745C-7.23078 70.7029 -0.944736 76.1289 -1.01784 83.5275C1.43454 86.4123 3.39939 89.6336 4.80589 92.8114C7.49304 92.7331 10.1452 91.897 12.3545 90.3559C13.0086 89.8982 13.6074 89.3885 14.1626 88.8354C13.1376 82.4137 2.26753 65.7595 2.26753 65.7595V65.7621L2.26779 65.7618Z' fill='%23949984'/%3E%3Cpath d='M2.26607 65.7619C-2.51462 65.6432 -7.41166 66.4767 -11.5586 68.1113C-5.56317 68.3589 6.38006 82.8052 8.59022 92.0284C8.60232 92.0762 8.61209 92.1239 8.62291 92.1725C9.94627 91.7604 11.2089 91.1519 12.3531 90.3559C13.0072 89.899 13.6059 89.3886 14.1612 88.8354C13.1361 82.4137 2.26582 65.7595 2.26582 65.7595V65.7621L2.26607 65.7619Z' fill='%23949984'/%3E%3Cpath d='M-13.9644 66.7116C-14.2143 66.7898 -14.0831 67.0122 -14.3281 67.093C-2.26623 67.4467 8.31579 77.7582 10.7705 92.8666L10.8336 92.8892L16.5564 92.8666V63.9683C9.33104 62.6043 -4.47613 63.7536 -13.9644 66.7141V66.7116Z' fill='%239EA58E'/%3E%3Cpath d='M17.5793 93.3925C20.8748 87.3397 25.2341 72.5698 21.1327 65.739C18.6553 61.6088 -1.82425 62.6169 -14.3281 66.7344C-2.16275 67.093 8.49496 77.5739 10.8336 92.8926C13.6927 93.385 15.7656 93.5088 17.5793 93.3948V93.3925Z' fill='%239EA58E'/%3E%3Cpath d='M1.30031 70.3641C0.668869 69.8109 -0.126538 69.5407 -0.939708 69.3865C-1.63936 69.2526 -2.36912 69.1818 -3.02836 68.8989C-3.68991 68.616 -4.14966 68.1159 -4.35919 67.4263C-4.55869 66.767 -4.86939 66.0723 -5.46015 65.6782C-5.98785 65.3245 -6.63216 65.2514 -7.2533 65.274C-8.09684 65.3044 -8.92777 65.4712 -9.74609 65.6581C-10.9508 65.9333 -12.1933 66.2694 -13.3398 66.7848C-7.72565 67.2041 -2.47518 69.7808 1.72478 73.9818C1.81565 73.8227 1.89648 73.6585 1.96727 73.4842C2.40924 72.3853 2.2149 71.1652 1.30571 70.3646H1.30056L1.30031 70.3641Z' fill='%23B1B7A5'/%3E%3Cpath opacity='0.4' d='M21.1327 65.7364C19.883 63.6524 14.0441 62.8768 6.96005 63.1496C7.06096 63.761 7.10112 64.3798 7.11116 65.0012C7.13175 66.105 7.0535 67.2142 6.85169 68.3028C6.51036 70.1418 5.84108 71.9503 4.73754 73.4711C4.22992 74.1682 3.64148 74.7896 3 75.3505C6.92685 79.8344 9.75866 85.8489 10.8316 92.8866C13.6907 93.379 15.7636 93.5028 17.5774 93.3896C20.8728 87.3367 25.2321 72.5666 21.1307 65.7359H21.133L21.1327 65.7364Z' fill='%23949984'/%3E%3Cpath d='M16.8793 84.3229C16.157 87.5006 14.9042 90.6133 12.9648 93.2075C14.783 93.4322 16.2528 93.4755 17.5836 93.3918C20.8798 87.339 25.2383 72.5714 21.137 65.7384C20.5308 64.7278 18.8462 64.0258 16.4652 63.6013C16.6724 64.5764 16.8415 65.5615 16.9934 66.5492C17.5131 69.9291 17.7733 73.3522 17.7332 76.775C17.7028 79.3087 17.4402 81.8553 16.8765 84.328L16.8796 84.3226L16.8793 84.3229Z' fill='%23949984'/%3E%3Cpath d='M14.1022 101.566C14.0039 102.364 12.5412 101.921 13.1057 102.49C15.8593 105.261 19.6734 106.504 22.4591 110.609C22.9665 111.357 23.4669 112.111 23.956 112.869C24.7468 114.096 25.6516 115.439 27.0686 115.781C28.0146 116.007 29.0088 115.73 29.9115 115.359C30.0441 115.304 30.1857 115.242 30.2727 115.125C30.3617 115.008 30.3823 114.852 30.396 114.706C30.7229 111.299 29.2191 107.964 27.263 105.161C26.0997 103.494 24.6899 101.892 22.8066 101.133C22.2787 100.92 21.7258 100.778 21.1728 100.649C20.0873 100.397 18.9951 100.184 17.8934 100.014C17.1348 99.8972 16.351 99.801 15.6127 100.009C14.8747 100.218 14.1936 100.803 14.0999 101.566H14.1022Z' fill='%2334381B'/%3E%3Cg style='mix-blend-mode:multiply' opacity='0.4'%3E%3Cpath d='M54.218 110.008C54.2365 110.645 53.6591 112.452 53.5235 112.622C54.2357 114.04 54.0828 116.412 52.6555 117.388C53.2413 119.762 50.0455 123.936 47.4194 122.986C47.4727 127.457 42.2083 127.409 42.0286 123.985C40.991 127.016 32.4789 127.381 31.5002 127.218C29.5366 130.656 19.838 131.689 15.7874 132.416H15.7827C13.4063 136.035 6.21312 141.573 0.299805 141.846C-10.4807 142.089 -14.7682 134.905 -14.9157 129.155C-15.1906 128.881 -15.4567 128.602 -15.7227 128.311C-15.204 128.824 -14.5383 129.49 -14.0196 130.009C-13.9877 129.657 -13.8595 128.588 -13.8178 128.222C-5.34167 127.364 5.70343 126.263 14.211 125.407C14.6341 124.804 15.1413 124.169 15.5951 123.661H15.5997V123.657C15.61 123.641 15.6224 123.629 15.6327 123.619C17.7556 121.394 16.5959 122.338 19.5363 120.893C28.0567 116.938 37.8431 112.389 46.5002 108.784C46.5705 108.755 46.6363 108.727 46.702 108.704C46.7532 108.675 46.8178 108.653 46.8709 108.633C46.9743 108.586 47.0953 108.547 47.1947 108.492C48.7268 108.09 51.536 106.269 52.9093 107V107.005C53.9724 107.597 54.3261 108.881 54.2182 110.008L54.218 110.008Z' fill='%238D9280'/%3E%3C/g%3E%3Cpath d='M31.1312 113.155C31.1384 113.254 31.1426 113.357 31.1444 113.464C31.1467 113.566 31.1444 113.672 31.1459 113.777C31.1392 114.112 31.1148 114.465 31.0726 114.835C31.0594 114.954 31.0447 115.078 31.0288 115.204C31.018 115.28 31.0097 115.359 30.9953 115.436C30.9729 115.592 30.9485 115.749 30.9212 115.908C30.9215 115.909 30.9197 115.909 30.9197 115.909C30.9021 116.016 30.8818 116.125 30.8607 116.233C30.8617 116.248 30.8574 116.263 30.8535 116.279C30.8424 116.345 30.8283 116.411 30.8162 116.479C30.7863 116.635 30.7546 116.789 30.7217 116.946C30.7219 116.947 30.7204 116.947 30.7204 116.947C30.6818 117.122 30.6434 117.297 30.6041 117.475C30.6043 117.476 30.6028 117.476 30.6028 117.476C30.5636 117.648 30.5243 117.816 30.4815 117.986C30.4784 117.998 30.4766 118.009 30.4723 118.022C30.4463 118.128 30.419 118.239 30.3907 118.344C30.352 118.498 30.3122 118.654 30.2697 118.807H30.2681C30.2215 118.985 30.1734 119.163 30.1229 119.338L30.047 119.603C29.9703 119.864 29.8933 120.125 29.8156 120.381C29.7888 120.465 29.7641 120.551 29.7358 120.636C29.6341 120.972 29.5278 121.3 29.4241 121.616C29.3731 121.777 29.3208 121.932 29.2691 122.081C29.2694 122.082 29.2678 122.083 29.2678 122.083C29.1916 122.309 29.1162 122.529 29.0426 122.74C28.995 122.881 28.9466 123.019 28.8987 123.151H28.8972C28.8531 123.283 28.8065 123.412 28.7623 123.534C28.7182 123.658 28.674 123.78 28.63 123.892C28.5911 124.006 28.5512 124.113 28.5133 124.212C28.5046 124.23 28.4979 124.252 28.4894 124.273C28.4776 124.304 28.4655 124.334 28.4554 124.363C28.4184 124.458 28.3841 124.549 28.3522 124.631C28.3285 124.694 28.3043 124.753 28.2845 124.807C28.1715 124.96 28.0752 125.061 28.0752 125.061L27.8369 125.103L27.7148 124.969L25.6172 122.644C25.6172 122.644 26.2206 111.254 29.4192 110.971L29.4238 110.97C29.4238 110.97 29.429 110.969 29.431 110.971L29.5108 110.964C29.5386 110.964 29.5677 110.962 29.5955 110.964C29.646 110.966 29.6969 110.971 29.7484 110.979C29.8017 110.987 29.8537 110.997 29.9059 111.01C30.0709 111.052 30.2154 111.116 30.3454 111.206C30.4419 111.274 30.5286 111.354 30.6053 111.445C30.6808 111.539 30.749 111.643 30.8108 111.757C30.9979 112.122 31.0988 112.597 31.1359 113.151L31.1307 113.151L31.1312 113.155Z' fill='%23474C2F'/%3E%3Cpath d='M31.1377 113.154L31.1326 113.154C31.1395 113.253 31.1439 113.356 31.1454 113.464C31.1478 113.565 31.1472 113.67 31.147 113.776C31.1403 114.111 31.1166 114.467 31.0739 114.834C31.0605 114.955 31.0458 115.078 31.0299 115.203C31.0193 115.281 31.0106 115.359 30.9967 115.437C30.974 115.593 30.9496 115.75 30.9223 115.909V115.91C30.9053 116.019 30.8847 116.126 30.8638 116.234C30.8669 116.25 30.861 116.265 30.8566 116.282C30.8456 116.346 30.8311 116.412 30.819 116.48C30.7894 116.636 30.758 116.792 30.7235 116.949C30.7238 116.95 30.722 116.95 30.722 116.95C30.6836 117.125 30.645 117.3 30.6059 117.478C30.6062 117.479 30.6044 117.48 30.6044 117.48C30.5655 117.651 30.5256 117.819 30.4831 117.989C30.48 118.001 30.4769 118.013 30.4741 118.025C30.4463 118.132 30.4203 118.242 30.391 118.349C30.3523 118.503 30.3122 118.657 30.27 118.81C30.27 118.81 30.2702 118.812 30.2687 118.814C30.2218 118.99 30.175 119.166 30.123 119.341L30.0468 119.607C29.9737 119.869 29.8965 120.128 29.8151 120.383C29.7899 120.467 29.7639 120.555 29.7353 120.637C29.6336 120.974 29.5273 121.302 29.4254 121.617C29.3742 121.779 29.3217 121.933 29.2704 122.084H29.2689C29.193 122.31 29.1178 122.531 29.0442 122.741L29.0447 122.745C28.9963 122.885 28.9482 123.023 28.9003 123.153H28.8985C28.8532 123.287 28.8081 123.414 28.7638 123.536C28.7198 123.66 28.6738 123.782 28.631 123.893C28.5922 124.007 28.5505 124.113 28.5144 124.213C28.5059 124.234 28.4995 124.256 28.4907 124.274C28.4789 124.306 28.4686 124.336 28.4562 124.365C28.4212 124.46 28.3865 124.549 28.3546 124.632C28.3314 124.696 28.3072 124.755 28.2871 124.809C28.1741 124.962 28.0778 125.063 28.0778 125.063L27.8395 125.105L27.7188 124.969C27.7733 124.828 27.8431 124.644 27.9262 124.429C29.0457 121.466 32.2209 112.107 29.4264 111.07C29.4169 111.065 29.0828 110.965 29.0614 110.961C29.0594 110.96 28.6977 110.853 28.6961 110.853C28.6663 110.839 28.6418 110.828 28.6241 110.817L28.9077 110.818L28.9142 110.804C29.2954 110.869 29.8774 111.001 29.9101 111.008C30.0731 111.05 30.2162 111.116 30.3464 111.208C30.4412 111.274 30.5295 111.353 30.6064 111.447C30.6847 111.537 30.7521 111.644 30.8121 111.758C31.0005 112.123 31.1032 112.598 31.1372 113.153V113.154L31.1377 113.154Z' fill='%23676D54'/%3E%3Cpath d='M46.9602 119.053C46.9602 119.053 48.9914 120.04 48.985 120.098C48.9374 120.542 48.9181 122.315 48.1186 122.048C47.4686 121.831 45.7449 120.992 45.6649 120.933C44.9673 120.405 44.5601 119.374 44.5601 119.374C44.5536 119.127 44.5688 118.921 44.5989 118.752C44.7354 118.03 45.1753 117.97 45.6389 118.141C45.7753 118.193 45.9117 118.262 46.044 118.34C46.5357 118.635 46.9602 119.053 46.9602 119.053Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M46.9602 119.053C46.9602 119.053 48.9914 120.04 48.985 120.098C48.9374 120.542 48.9181 122.315 48.1186 122.048C47.4686 121.831 45.7449 120.992 45.6649 120.933C44.9673 120.405 44.5601 119.374 44.5601 119.374C44.5536 119.127 44.5688 118.921 44.5989 118.752C44.7354 118.03 45.1753 117.97 45.6389 118.141C45.7753 118.193 45.9117 118.262 46.044 118.34C46.5357 118.635 46.9602 119.053 46.9602 119.053Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M46.9602 119.053C46.9602 119.053 48.9914 120.04 48.985 120.098C48.9374 120.542 48.9181 122.315 48.1186 122.048C47.4686 121.831 45.7449 120.992 45.6649 120.933C44.9673 120.405 44.5601 119.374 44.5601 119.374C44.5536 119.127 44.5688 118.921 44.5989 118.752C44.7354 118.03 45.1753 117.97 45.6389 118.141C45.7753 118.193 45.9117 118.262 46.044 118.34C46.5357 118.635 46.9602 119.053 46.9602 119.053Z' fill='%23CEB79B'/%3E%3Cpath d='M53.0886 110.148C53.0562 110.423 53.015 110.681 52.9586 110.904C52.9022 111.131 52.833 111.322 52.7462 111.456C52.7442 111.463 52.7398 111.469 52.7354 111.476C52.627 111.636 52.209 111.461 51.6154 111.066C51.0998 110.726 50.4522 110.224 49.761 109.634C49.057 109.036 48.3074 108.352 47.6054 107.659L47.5794 107.633C47.1462 107.206 46.7323 106.779 46.3577 106.368C46.3773 106.848 46.3945 107.349 46.4053 107.867C46.4118 108.14 46.4162 108.419 46.4182 108.699C46.4182 108.774 46.4203 108.848 46.4203 108.924C46.4247 109.314 46.4246 109.708 46.4223 110.102C46.4223 110.352 46.4203 110.601 46.4159 110.85C46.4072 111.383 46.392 111.913 46.3703 112.433C46.3639 112.646 46.3531 112.854 46.3423 113.062C46.3402 113.103 46.3379 113.144 46.3379 113.185C46.3358 113.194 46.3358 113.202 46.3358 113.211C46.3358 113.228 46.3338 113.248 46.3338 113.265C46.3098 113.683 46.2838 114.091 46.2494 114.483C46.2473 114.5 46.2473 114.52 46.245 114.537C46.1866 115.248 46.1085 115.91 46.0154 116.5V116.502C45.9178 117.108 45.8009 117.637 45.6622 118.059C45.6534 118.087 45.6449 118.116 45.6362 118.142C45.5626 118.352 45.4846 118.534 45.3978 118.683C45.3438 118.783 45.2851 118.87 45.2202 118.939C45.2202 118.941 45.2182 118.941 45.2182 118.943C45.1662 119.004 45.1098 119.052 45.0534 119.088C44.8758 119.201 44.711 119.294 44.5574 119.374C42.9542 120.202 42.4345 119.47 41.5809 119.955C41.568 119.962 41.5528 119.972 41.5376 119.981C41.3168 120.111 40.8552 120.397 40.2228 120.752C40.1448 120.798 40.0624 120.843 39.978 120.889C39.8827 120.943 39.7852 120.997 39.6832 121.049C39.6333 121.075 39.5813 121.103 39.5296 121.132C39.4256 121.186 39.3195 121.242 39.2088 121.298C38.8253 121.5 38.4052 121.704 37.9588 121.905C37.9025 121.931 37.8461 121.957 37.7876 121.981V121.983C37.5537 122.087 37.3112 122.191 37.0641 122.288C36.7953 122.397 36.5204 122.503 36.2388 122.605C36.126 122.646 36.0112 122.685 35.8964 122.721V122.723C35.7536 122.771 35.6104 122.819 35.4653 122.864C35.3353 122.905 35.2032 122.944 35.0709 122.983C34.9777 123.009 34.8845 123.035 34.7913 123.061C34.3169 123.189 33.8317 123.295 33.3465 123.371C33.2512 123.389 33.1537 123.402 33.0584 123.415C32.9264 123.434 32.7941 123.449 32.662 123.462C32.5472 123.475 32.4304 123.484 32.3153 123.493C32.3132 123.495 32.3109 123.495 32.3088 123.493C32.2113 123.501 32.114 123.506 32.0185 123.51C31.9904 123.512 31.9644 123.512 31.9361 123.512C31.8257 123.516 31.7173 123.518 31.6089 123.518C31.5482 123.518 31.4898 123.518 31.429 123.516C31.3791 123.516 31.3314 123.514 31.2818 123.512C31.0045 123.503 30.7294 123.482 30.4586 123.443C30.3826 123.432 30.309 123.421 30.2333 123.408C30.1618 123.397 30.0881 123.384 30.0166 123.369C29.9386 123.354 29.8606 123.338 29.7849 123.319C29.7828 123.319 29.7805 123.319 29.7785 123.317C29.6984 123.3 29.6204 123.28 29.5424 123.258C29.4709 123.239 29.3996 123.219 29.3301 123.198C29.3128 123.191 29.2953 123.187 29.2781 123.18C29.2153 123.161 29.1524 123.141 29.0917 123.118C29.0029 123.087 28.9141 123.055 28.8273 123.02C27.9066 122.652 27.4561 123.222 26.2776 123.8C26.0697 123.902 25.838 124.006 25.578 124.103C21.7868 125.524 16.5703 125.251 16.5703 125.251L17.6512 119.937L19.3064 111.816C19.3064 111.816 22.142 111.885 25.0884 111.859C25.1448 111.857 25.2011 111.857 25.2596 111.857C25.682 111.852 26.1067 111.846 26.5248 111.837C26.7219 111.833 26.9191 111.828 27.114 111.822C27.168 111.82 27.22 111.818 27.272 111.818C27.4149 111.813 27.558 111.807 27.6988 111.802C27.764 111.8 27.8268 111.798 27.8896 111.796C27.9436 111.794 27.9956 111.792 28.0499 111.79C28.0587 111.787 28.0672 111.787 28.078 111.787C28.1019 111.787 28.1279 111.785 28.1516 111.785C28.312 111.779 28.47 111.77 28.624 111.761C28.6368 111.761 28.65 111.759 28.6652 111.759C28.7627 111.753 28.8623 111.749 28.9576 111.742H28.9728C29.2588 111.725 29.5272 111.703 29.7764 111.681C29.9692 111.664 30.1489 111.645 30.3159 111.625C30.7904 111.567 31.1564 111.495 31.3667 111.406C32.9699 110.739 44.6833 102.31 45.2918 102.007C45.725 101.79 46.3273 101.976 46.375 102.007L46.377 102.009H46.3791C46.5719 102.134 47.0831 102.483 47.7439 102.945C47.7483 102.949 47.7527 102.951 47.7568 102.955C47.7676 102.96 47.7848 102.973 47.8067 102.99C47.9454 103.088 48.0927 103.189 48.2423 103.296C48.6994 103.618 49.2019 103.976 49.7023 104.344C49.8995 104.485 50.0943 104.628 50.2872 104.773C50.3435 104.814 50.3976 104.855 50.4539 104.897C50.6856 105.068 50.9111 105.237 51.1276 105.401C51.2012 105.458 51.2728 105.512 51.342 105.566C51.6216 105.78 51.8816 105.984 52.1132 106.17L52.1176 106.175C52.2085 106.248 52.2932 106.32 52.3732 106.385C52.4837 106.478 52.5856 106.567 52.6744 106.649C52.6852 106.658 52.696 106.669 52.7068 106.678C52.7416 106.71 52.7761 106.742 52.8065 106.771C52.8757 106.838 52.9344 106.899 52.9797 106.951C52.9949 106.968 53.0078 106.983 53.0186 106.998C53.0314 107.013 53.0425 107.029 53.051 107.042C53.0618 107.055 53.0706 107.068 53.077 107.08C53.0834 107.094 53.0899 107.104 53.0942 107.115C53.0986 107.124 53.1007 107.135 53.103 107.143C53.1702 107.54 53.2222 108.993 53.0878 110.148L53.0886 110.148Z' fill='%23E8D4BA'/%3E%3Cpath d='M53.0914 110.148C53.059 110.423 53.0178 110.68 52.9614 110.904C52.9051 111.131 52.8358 111.322 52.7491 111.456C51.3086 110.353 45.0781 105.039 45.0781 105.039C45.0781 105.039 45.9057 103.544 47.3333 104.725C48.6461 105.81 52.485 109.554 53.0914 110.148Z' fill='%23CEB79B'/%3E%3Cpath d='M53.3077 111.538C53.2688 111.854 53.0281 112.753 52.6621 113.615C52.5905 113.778 52.5169 113.943 52.4368 114.099C52.3936 114.187 52.348 114.272 52.3024 114.354V114.356C52.2244 114.495 52.1421 114.627 52.0597 114.748C51.9557 114.9 51.8453 115.034 51.7325 115.147C51.3253 115.554 49.2089 113.929 47.2785 111.834C46.9838 111.514 46.6957 111.184 46.4164 110.849C45.9441 110.281 45.5044 109.698 45.1296 109.127C44.0832 107.534 43.5352 106.031 44.1895 105.197C44.1895 105.197 45.7927 103.661 46.9928 104.463C47.0836 104.523 47.1987 104.612 47.3308 104.725V104.727C48.4896 105.715 51.0872 108.528 52.4433 110.227C52.4433 110.227 52.4433 110.229 52.4453 110.229C52.6469 110.482 52.8201 110.71 52.9589 110.903C53.1885 111.223 53.3185 111.451 53.3077 111.537V111.538Z' fill='%23E8D4BA'/%3E%3Cpath d='M52.663 113.616C52.4874 114.023 52.2838 114.424 52.0606 114.749C50.1867 113.261 45.293 109.156 45.293 109.156C45.293 109.156 46.6815 108.408 48.1091 109.589C49.346 110.611 51.8266 112.799 52.663 113.616Z' fill='%23CEB79B'/%3E%3Cpath d='M51.3775 117.622C51.2908 117.747 51.1979 117.86 51.1003 117.96C51.0939 117.966 51.0875 117.973 51.0808 117.977L51.0743 117.984C50.8879 118.17 50.6823 118.3 50.4612 118.354C50.2012 118.417 49.4928 117.958 48.6523 117.204C48.1303 116.736 47.5583 116.155 47.0123 115.51C46.9843 115.475 46.9539 115.44 46.9256 115.406C46.7956 115.252 46.6656 115.092 46.54 114.929C46.438 114.799 46.3384 114.669 46.2432 114.537C45.9919 114.192 45.7556 113.842 45.5435 113.486C45.4027 113.25 45.2727 113.012 45.1559 112.776C44.4974 111.439 44.2742 110.13 44.987 109.203C44.987 109.203 45.039 109.173 45.1278 109.127C45.3813 109 45.9379 108.742 46.4167 108.699C46.6355 108.679 46.8391 108.703 46.9907 108.805C47.0643 108.855 47.2008 108.971 47.3851 109.145C47.8703 109.598 48.6827 110.423 49.5167 111.294V111.296C50.3615 112.178 51.228 113.109 51.7956 113.755C52.0144 114.004 52.1876 114.21 52.3004 114.355V114.357C52.3828 114.465 52.4324 114.539 52.4391 114.571C52.4891 114.818 52.1119 116.584 51.3775 117.621V117.622Z' fill='%23E8D4BA'/%3E%3Cpath d='M51.3796 117.622C51.2928 117.747 51.1999 117.86 51.1023 117.96C50.9095 118.157 50.6951 118.297 50.4632 118.354C50.4284 118.363 50.3872 118.36 50.3396 118.354C49.6508 117.634 46.4782 115.14 45.5087 113.488C45.1795 112.927 45.5087 113.271 46.5919 113.271C48.5552 113.271 51.3796 117.622 51.3796 117.622Z' fill='%23CEB79B'/%3E%3Cpath d='M51.3987 118.687C51.1322 119.088 49.7955 121.961 49.3278 122.227C48.8881 122.459 48.147 122.114 47.8914 121.993L48.1254 119.688C48.0366 119.575 46.5222 118.902 45.9569 118.926C45.7101 118.882 45.4609 118.934 45.2205 118.938C45.0037 118.945 44.7937 118.917 44.5965 118.752V118.75C44.2781 118.516 42.6924 114.138 42.6924 114.138C41.7912 112.063 43.2384 112.312 45.1577 112.775C45.5389 112.868 45.9376 112.968 46.3425 113.061C46.4942 113.098 46.6481 113.13 46.7997 113.163C47.7398 113.36 50.1618 116.337 51.0761 117.983C51.2321 118.263 51.3446 118.505 51.3987 118.687Z' fill='%23E8D4BA'/%3E%3Cpath opacity='0.4' d='M52.3041 114.354V114.356C52.3865 114.465 52.4362 114.538 52.4428 114.571C52.4928 114.818 52.1157 116.583 51.3813 117.621C51.2945 117.747 51.2016 117.859 51.104 117.959C51.0953 117.967 51.0868 117.976 51.078 117.983C51.234 118.262 51.3468 118.505 51.4008 118.687C51.1344 119.087 49.7977 121.96 49.3299 122.226C48.8903 122.458 48.1492 122.114 47.8936 121.992L48.1276 119.687C48.0388 119.575 46.5244 118.901 45.9591 118.925C45.7122 118.882 45.4631 118.934 45.2227 118.938C45.2855 118.851 45.3439 118.767 45.4003 118.682C46.3123 117.346 46.7455 116.254 46.9298 115.405C47.2526 113.908 46.8019 113.163 46.8019 113.163C47.0294 112.686 47.1831 112.242 47.2807 111.835C47.7399 109.926 46.9947 108.804 46.9947 108.804C47.2784 108.405 47.4647 108.011 47.5818 107.632C48.0714 106.07 47.3674 104.787 47.3327 104.727V104.725C47.6274 103.167 46.4639 102.084 46.3818 102.008C46.6202 102.164 47.3479 102.663 48.2449 103.295C48.9338 103.78 49.7202 104.346 50.4567 104.896C51.0739 105.353 51.6547 105.797 52.1159 106.17C52.6943 106.642 53.082 107.002 53.106 107.143C53.1731 107.539 53.2251 108.993 53.0908 110.147C53.0583 110.423 53.0171 110.68 52.9608 110.903C53.1904 111.224 53.3204 111.452 53.3096 111.538C53.2707 111.855 53.03 112.754 52.664 113.616C52.5535 113.869 52.4344 114.123 52.3044 114.355L52.3041 114.354Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M51.4021 118.687C51.1356 119.088 49.7989 121.961 49.3311 122.227C49.3051 122.24 49.2771 122.253 49.2488 122.264C49.1924 122.286 49.1319 122.296 49.0668 122.301C49.0104 122.307 48.952 122.307 48.8936 122.303C48.848 122.298 48.8004 122.292 48.7548 122.286C48.7049 122.277 48.6529 122.268 48.6011 122.255C48.5427 122.24 48.4819 122.225 48.4256 122.208C48.3388 122.18 48.2567 122.151 48.1852 122.121C48.144 122.106 48.1071 122.09 48.0747 122.075C48.0443 122.062 48.014 122.049 47.988 122.036C47.9751 122.032 47.964 122.025 47.9532 122.021C47.9164 122.004 47.8948 121.993 47.8948 121.993L48.0443 120.524L48.1092 119.876L48.1288 119.688C48.1288 119.688 48.1267 119.688 48.1244 119.685C48.12 119.681 48.1115 119.677 48.0984 119.668C48.066 119.649 48.0075 119.614 47.9252 119.571C47.884 119.547 47.8364 119.523 47.7823 119.495C47.7802 119.495 47.7802 119.493 47.7779 119.493C47.5699 119.387 47.2839 119.254 46.9526 119.144C46.827 119.103 46.697 119.061 46.5606 119.029C46.5518 119.027 46.5454 119.025 46.539 119.023C46.3526 118.979 46.1578 118.943 45.9606 118.925C45.863 118.914 45.7657 118.91 45.6658 118.91H45.653C45.5273 118.91 45.4038 118.916 45.2782 118.936C45.2653 118.936 45.2522 118.938 45.2393 118.94C45.2329 118.94 45.2285 118.942 45.2221 118.942C45.1701 119.003 45.1137 119.051 45.0573 119.087C44.8797 119.2 44.715 119.293 44.5613 119.373C42.9581 120.201 42.4384 119.469 41.5848 119.954C41.5719 119.961 41.5567 119.971 41.5416 119.98C41.3207 120.11 40.8592 120.396 40.2267 120.751C40.1487 120.797 40.0663 120.842 39.9819 120.888C39.8866 120.942 39.7891 120.996 39.6871 121.048C39.6372 121.074 39.5852 121.102 39.5335 121.131C39.4295 121.185 39.3234 121.241 39.2127 121.297C38.8292 121.499 38.4091 121.703 37.9627 121.904C37.9063 121.93 37.85 121.956 37.7915 121.982C37.5576 122.086 37.3151 122.19 37.068 122.287C36.7992 122.396 36.5243 122.502 36.2427 122.604C36.1299 122.645 36.0151 122.686 35.9003 122.723C35.7575 122.771 35.6143 122.818 35.4692 122.864C35.3392 122.905 35.2071 122.944 35.0748 122.983C34.9816 123.009 34.8884 123.035 34.7952 123.061C34.3208 123.189 33.8356 123.295 33.3504 123.371C33.2551 123.388 33.1576 123.401 33.0623 123.414C32.9303 123.434 32.798 123.449 32.6659 123.462C32.5511 123.475 32.4343 123.483 32.3192 123.492C32.3171 123.494 32.3148 123.494 32.3128 123.492C32.2152 123.501 32.1179 123.505 32.0224 123.509C31.9943 123.511 31.9683 123.511 31.94 123.511C31.8296 123.516 31.7212 123.518 31.6128 123.518C31.5521 123.518 31.4937 123.518 31.4329 123.516C31.383 123.516 31.3354 123.514 31.2857 123.511C31.0084 123.503 30.7333 123.481 30.4625 123.442C30.3865 123.431 30.3129 123.42 30.2372 123.407C30.1657 123.397 30.092 123.383 30.0205 123.368C29.9425 123.353 29.8645 123.338 29.7888 123.318C29.7868 123.318 29.7844 123.318 29.7824 123.316C29.7023 123.299 29.6243 123.279 29.5463 123.258C29.4748 123.238 29.4035 123.219 29.334 123.197C29.3167 123.191 29.2992 123.186 29.282 123.18C29.2192 123.16 29.1563 123.141 29.0956 123.117C29.0068 123.087 28.918 123.054 28.8312 123.019C27.9105 122.651 27.46 123.221 26.2816 123.799C26.0736 123.901 25.8419 124.005 25.5819 124.103C21.7907 125.524 16.5742 125.251 16.5742 125.251L17.6551 119.937L19.3103 111.815C19.3103 111.815 22.1459 111.884 25.0923 111.858C25.1487 111.856 25.205 111.856 25.2635 111.856C25.6859 111.852 26.1106 111.845 26.5287 111.837C26.7258 111.832 26.923 111.828 27.1179 111.821C27.1719 111.819 27.2239 111.817 27.2759 111.817C27.4299 111.813 27.5835 111.808 27.7331 111.802C27.7872 111.8 27.8415 111.797 27.8935 111.795C27.9475 111.793 27.9995 111.791 28.0538 111.789C28.0626 111.787 28.0711 111.787 28.0819 111.787C28.1058 111.787 28.1318 111.785 28.1555 111.785C28.3159 111.778 28.4739 111.77 28.6279 111.761C28.6407 111.761 28.6539 111.759 28.6691 111.759C28.7666 111.754 28.8639 111.748 28.9571 111.744C28.9635 111.744 28.9679 111.744 28.9744 111.742H28.9764C29.2624 111.724 29.5309 111.703 29.7801 111.681C29.9729 111.664 30.1525 111.644 30.3196 111.625C29.5916 113.696 29.8992 117.045 30.9976 117.82C31.9444 118.489 33.7468 118.682 35.8437 118.613C36.1729 118.605 36.5089 118.587 36.851 118.563C39.1558 118.414 41.6906 118.004 43.7854 117.593H43.7875C43.8611 117.577 43.9327 117.562 44.0042 117.547C45.0138 117.328 45.7438 116.993 46.019 116.501V116.499C46.1511 116.263 46.2767 116.076 46.3982 115.931C46.5779 115.714 46.7426 115.591 46.9007 115.537C46.9398 115.524 46.9786 115.513 47.0175 115.509C47.0955 115.5 47.1691 115.507 47.2451 115.526C47.7519 115.66 48.1895 116.421 48.7074 116.86C48.9242 117.044 49.1558 117.17 49.4115 117.17C49.8859 117.17 50.1307 116.997 50.2455 116.776C50.2499 116.767 50.2542 116.76 50.2584 116.752C50.4164 116.962 50.566 117.166 50.7003 117.356C50.8584 117.577 50.9951 117.779 51.1055 117.959C51.3372 118.333 51.4587 118.602 51.4023 118.687L51.4021 118.687Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M37.0641 122.287C36.7953 122.396 36.5204 122.502 36.2388 122.604C36.126 122.645 36.0112 122.684 35.8964 122.721V122.723C35.7536 122.77 35.6104 122.818 35.4653 122.863C35.3353 122.905 35.2032 122.944 35.0709 122.983C34.9777 123.009 34.8845 123.035 34.7913 123.061C34.3169 123.189 33.8317 123.295 33.3465 123.371C33.2512 123.388 33.1537 123.401 33.0584 123.414C32.9264 123.433 32.7941 123.449 32.662 123.461C32.5472 123.475 32.4304 123.483 32.3153 123.492C32.3132 123.494 32.3109 123.494 32.3088 123.492C32.2113 123.501 32.114 123.505 32.0185 123.509C31.9904 123.511 31.9644 123.511 31.9361 123.511C31.8257 123.516 31.7173 123.518 31.6089 123.518C31.5482 123.518 31.4898 123.518 31.429 123.516C31.3791 123.516 31.3314 123.513 31.2818 123.511C31.0045 123.502 30.7294 123.481 30.4586 123.442C30.3826 123.431 30.309 123.42 30.2333 123.407C30.1618 123.396 30.0881 123.383 30.0166 123.368C29.9386 123.353 29.8606 123.338 29.7849 123.318C29.7828 123.318 29.7805 123.318 29.7785 123.316C29.6984 123.299 29.6204 123.279 29.5424 123.258C29.4709 123.238 29.3996 123.218 29.3301 123.197C29.3128 123.19 29.2953 123.186 29.2781 123.18C29.2153 123.16 29.1524 123.141 29.0917 123.117C29.0029 123.086 28.9141 123.054 28.8273 123.019C27.9066 122.651 27.4561 123.221 26.2776 123.799C26.0697 123.901 25.838 124.005 25.578 124.102C21.7868 125.524 16.5703 125.25 16.5703 125.25L17.6512 119.936L19.3064 111.815C19.3064 111.815 22.142 111.884 25.0884 111.858C25.1448 111.856 25.2011 111.856 25.2596 111.856C25.682 111.852 26.1067 111.845 26.5248 111.836C26.7219 111.832 26.9191 111.828 27.114 111.821C27.168 111.819 27.22 111.817 27.272 111.817C27.4149 111.812 27.558 111.806 27.6988 111.802H27.7292C27.7833 111.8 27.8376 111.797 27.8896 111.795C27.9436 111.793 27.9956 111.791 28.0499 111.789C28.0587 111.787 28.0672 111.787 28.078 111.787C28.1019 111.787 28.1279 111.785 28.1516 111.785C28.312 111.778 28.47 111.769 28.624 111.761C28.6368 111.761 28.65 111.759 28.6652 111.759C28.7627 111.754 28.86 111.748 28.9532 111.743C28.9553 111.741 28.9576 111.741 28.9576 111.741H28.9728C29.2588 111.724 29.5272 111.703 29.7764 111.681C29.7764 111.681 26.8084 119.081 30.3093 121.375C32.4733 122.794 34.5834 122.792 35.8789 122.584C36.4617 122.488 36.8797 122.354 37.0638 122.287L37.0641 122.287Z' fill='%23CEB79B'/%3E%3Cpath d='M29.7888 123.319C29.4639 123.243 29.1432 123.146 28.8312 123.02C27.9105 122.652 27.46 123.222 26.2815 123.8C26.0736 123.902 25.8419 124.006 25.5819 124.103C21.7907 125.525 16.5742 125.252 16.5742 125.252L17.6551 119.937L19.3103 111.816C19.3103 111.816 25.3608 111.965 28.9612 111.742L29.1497 111.755C29.1497 111.755 25.1116 119.069 29.7888 123.319Z' fill='%23CEB79B'/%3E%3Cpath d='M47.8924 118.687C47.6757 119.12 46.95 119.144 46.95 119.144C46.6489 119.043 46.3088 118.958 45.958 118.926C45.7196 118.902 45.4771 118.904 45.2367 118.941C45.2303 118.941 45.2259 118.943 45.2194 118.943C45.1674 119.004 45.1111 119.051 45.0547 119.088C45.0547 119.088 45.6071 117.647 46.0988 117.951C46.5927 118.254 45.6071 118.488 46.0988 118.588C46.5927 118.687 48.1092 118.254 47.8924 118.687Z' fill='%23CEB79B'/%3E%3Cpath d='M48.1069 119.876L48.1264 119.688C48.1264 119.688 48.0528 119.64 47.9228 119.571L47.9141 119.558C47.9141 119.558 48.0829 118.915 48.746 119.558C49.4089 120.203 48.1069 119.876 48.1069 119.876Z' fill='%23CEB79B'/%3E%3Cpath d='M50.2507 105.91C50.1164 106.63 49.8412 107.24 49.8412 107.24L48.4548 105.72C48.472 105.616 48.4851 105.514 48.4936 105.418C48.5436 104.961 48.5261 104.58 48.4697 104.266C48.2941 103.278 47.7461 102.945 47.7461 102.945C47.811 102.609 48.6342 103.025 49.6221 103.783C49.6937 103.839 49.7694 103.896 49.843 103.956C50.3825 104.387 50.3846 105.202 50.2502 105.91H50.2507Z' fill='%23949984'/%3E%3Cpath d='M48.4717 104.27C48.4717 104.27 48.4717 104.268 48.4697 104.266C48.2941 103.278 47.7461 102.945 47.7461 102.945C47.811 102.609 48.6342 103.025 49.6221 103.783C50.2677 104.909 48.4717 104.271 48.4717 104.271V104.27Z' fill='%239EA58E'/%3E%3Cpath d='M50.2491 105.91C50.1147 106.63 49.8396 107.24 49.8396 107.24L48.4531 105.72C48.4704 105.616 48.4835 105.514 48.492 105.418L48.4941 105.414C48.4941 105.414 49.3561 106.781 50.2488 105.91L50.2491 105.91Z' fill='%23676D54'/%3E%3Cpath opacity='0.4' d='M44.6445 108.722C44.6445 108.722 47.1275 107.334 47.0274 107.856C46.9275 108.377 46.6809 108.675 46.4209 108.699C46.161 108.723 44.6445 108.722 44.6445 108.722Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M44.6448 105.256C44.6448 105.256 47.0112 103.347 46.9111 103.868C46.8112 104.389 46.6377 104.799 46.3777 104.823C46.1177 104.847 44.6448 105.256 44.6448 105.256Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M44.4258 113.272C44.4258 113.272 46.2856 112.038 46.4756 112.533C46.5922 112.838 46.4189 113.248 46.159 113.272C45.899 113.295 44.4258 113.272 44.4258 113.272Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M51.3788 117.621C51.2921 117.747 51.1992 117.86 51.1016 117.959C51.0952 117.966 51.0888 117.972 51.0821 117.976L48.3828 114.12C48.3828 114.12 52.4577 115.544 51.7992 113.759C51.7992 113.757 51.7971 113.757 51.7971 113.754C52.0159 114.004 52.1892 114.209 52.3019 114.354V114.356C52.3843 114.465 52.434 114.538 52.4407 114.571C52.4906 114.818 52.1135 116.583 51.3791 117.621L51.3788 117.621Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M53.3088 111.538C53.27 111.855 53.0293 112.754 52.6632 113.616C52.5917 113.778 52.518 113.943 52.438 114.099L49.7344 110.975C49.7344 110.975 53.0921 111.515 52.4467 110.23C52.6483 110.484 52.8215 110.711 52.9603 110.904C53.1899 111.224 53.3196 111.452 53.3088 111.538Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.4' d='M53.0911 110.147C53.0587 110.422 53.0175 110.68 52.9611 110.903L50.5195 107.641C50.5195 107.641 53.4983 107.721 52.116 106.17C52.6944 106.642 53.0821 107.002 53.106 107.143C53.1732 107.539 53.2252 108.993 53.0908 110.147L53.0911 110.147Z' fill='%23CEB79B'/%3E%3Cpath d='M29.5652 111.014H29.5633C29.5157 111.047 28.7414 111.59 28.0971 112.597L28.0979 112.602C27.1946 114.073 26.9375 116.128 27.0211 118.292C27.0984 120.38 27.4904 122.567 27.9198 124.433C27.9555 124.588 27.9913 124.741 28.0281 124.892C28.0436 124.95 28.0562 125.009 28.0696 125.067L27.7995 125.115L27.0101 125.238H27.0085C26.4589 125.233 25.9179 125.263 25.377 125.315L25.3039 124.771L25.2735 124.55L24.5103 118.814L24.5049 118.784L23.8261 113.682L23.7476 113.107L23.7373 113.049L23.7162 112.861L23.6529 112.384L23.6439 112.334L23.4297 110.706C23.822 110.723 24.2313 110.741 24.6586 110.759C25.748 110.797 26.9436 110.82 28.2814 110.823L28.3628 110.824C28.4058 110.823 28.4495 110.825 28.4925 110.824C28.596 110.823 28.7036 110.825 28.8104 110.822C28.8269 110.827 28.8467 110.831 28.8652 110.839C28.8704 110.839 28.8773 110.839 28.8817 110.844C29.0269 110.882 29.2385 110.935 29.4143 110.98C29.4395 110.986 29.465 110.994 29.4882 110.998C29.5031 111.002 29.5191 111.006 29.534 111.011C29.5466 111.014 29.5556 111.016 29.5646 111.019L29.5657 111.014H29.5652Z' fill='%23676D54'/%3E%3Cpath d='M28.8957 110.825V110.829C28.891 110.834 28.8864 110.834 28.8815 110.839C28.8823 110.847 28.8808 110.842 28.8769 110.843C28.8692 110.855 28.8439 110.866 28.8393 110.881C28.8298 110.881 28.8205 110.9 28.8113 110.9C28.7734 110.932 28.7073 110.973 28.6751 111.022C28.6388 111.048 28.5961 111.096 28.5623 111.13C28.4995 111.184 28.4444 111.258 28.3793 111.317V111.322C28.2573 111.443 28.1585 111.567 28.0509 111.702C28.0509 111.706 28.0462 111.711 28.0416 111.716H28.037C28.021 111.741 27.9996 111.77 27.9855 111.791H27.9808C27.9808 111.796 27.9762 111.796 27.9762 111.8C27.9276 111.86 27.8951 111.905 27.8588 111.969C27.8557 111.969 27.8542 111.974 27.8542 111.983C27.8496 111.983 27.8449 111.992 27.8354 112.002C27.8354 112.011 27.8354 112.021 27.8261 112.021C27.7646 112.123 27.6907 112.234 27.6292 112.34C27.6292 112.34 27.6292 112.345 27.6246 112.354V112.359H27.6199C27.6199 112.363 27.6199 112.368 27.6153 112.368C27.606 112.391 27.5919 112.41 27.5777 112.434C27.5798 112.437 27.5659 112.458 27.5685 112.462C27.552 112.485 27.5337 112.513 27.5262 112.541H27.5216C27.4745 112.651 27.414 112.752 27.3715 112.86C27.0719 113.48 26.9097 114.165 26.7617 114.836C26.7571 114.892 26.7429 114.948 26.7383 115.005L26.7337 115.009C26.729 115.052 26.7195 115.089 26.7195 115.127C26.6508 115.516 26.6173 115.913 26.5882 116.309L26.5929 116.314C26.5633 116.731 26.5597 117.173 26.5599 117.595C26.6039 119.671 26.9558 121.761 27.4467 123.769C27.5067 123.997 27.5566 124.222 27.6202 124.445C27.6156 124.454 27.6202 124.454 27.6202 124.454L27.6248 124.458C27.6627 124.653 27.7252 124.838 27.7749 125.031V125.036H27.7795C27.7819 125.063 27.7883 125.089 27.7983 125.115L27.803 125.12C27.2076 125.203 26.5746 125.321 25.9872 125.434C24.9887 125.627 23.9974 125.89 23.022 126.162C14.447 128.297 6.94626 134.123 -1.92911 135.005C-1.93245 135.008 -1.93708 135.016 -1.93837 135.02C-6.81198 135.542 -12.8756 131.894 -16.2014 127.78V127.775C-16.5258 127.349 -17.0447 126.963 -17.2383 126.448C-17.2483 126.345 -17.239 126.241 -17.2102 126.133C-17.2149 126.129 -17.2148 126.119 -17.2056 126.115C-17.0527 125.574 -16.6151 124.955 -16.2156 124.426V124.421C-15.318 123.263 -14.2729 122.145 -13.2316 121.085H-13.227C-9.69142 117.58 -5.94141 113.897 -1.55379 111.42C3.92063 107.986 10.5233 109.081 16.4909 109.994L16.4956 109.998C18.986 110.384 21.4971 110.642 24.0306 110.73C25.6389 110.815 27.2735 110.83 28.896 110.824L28.8957 110.825Z' fill='%23949984'/%3E%3Cpath d='M28.9128 110.83C28.9079 110.832 28.903 110.83 28.8984 110.827H28.9007L28.9105 110.818L28.9128 110.83Z' fill='%239EA58E'/%3E%3Cpath opacity='0.14' d='M28.9079 110.819C28.8925 110.832 28.8562 110.864 28.8392 110.879C28.7864 110.922 28.721 110.967 28.6737 111.021C28.6379 111.055 28.5936 111.092 28.5614 111.13C28.5486 111.135 28.5391 111.158 28.5254 111.161C28.4863 111.219 28.4307 111.262 28.3805 111.318L28.3813 111.323C28.1882 111.518 28.0108 111.74 27.8615 111.968C27.8566 111.971 27.8536 111.971 27.8554 111.981C27.843 111.987 27.8384 112.015 27.8263 112.023C27.7449 112.157 27.6525 112.289 27.5838 112.434C26.5142 114.459 26.462 116.859 26.6465 119.101C19.5149 118.637 14.0649 114.022 13.8047 109.579C18.3807 110.388 23.7048 110.909 28.9095 110.827L28.9079 110.819Z' fill='%23474C2F'/%3E%3Cpath d='M23.3694 126.052C14.6372 128.16 7.10191 134.084 -1.92585 134.995L-1.93949 135.009C-6.34976 135.529 -12.7969 132.37 -17.1562 126.657C-16.8945 125.069 -15.099 122.778 -12.763 120.428C-10.4473 118.102 -7.60466 115.719 -5.20041 113.91C-3.75529 112.821 -2.47002 111.944 -1.55517 111.407C0.236687 117.086 10.2509 128.596 23.3697 126.052L23.3694 126.052Z' fill='%23979E87'/%3E%3Cpath d='M23.4485 126.038C23.4215 126.045 23.3981 126.048 23.3711 126.052C23.3945 126.045 23.4182 126.042 23.4416 126.035L23.4485 126.038Z' fill='%23979E87'/%3E%3Cpath d='M25.4986 112.904C25.1276 114.244 23.8295 113.709 23.7402 113.074C23.6073 112.155 25.8082 111.776 25.4986 112.904Z' fill='%23676D54'/%3E%3Cpath d='M25.5003 112.906C25.4113 113.235 25.264 113.449 25.0918 113.58C25.1652 113.467 25.227 113.326 25.273 113.157C25.5024 112.328 24.3687 112.315 23.8086 112.728C24.1703 112.081 25.7701 111.933 25.5003 112.906Z' fill='%23474C2F'/%3E%3Cpath d='M18.1576 113.061C18.2498 113.662 17.0407 113.927 16.6384 113.813C16.4342 113.754 16.2831 113.621 16.2206 113.444C15.662 112.492 17.9445 111.675 18.1545 113.062H18.1561L18.1576 113.061Z' fill='%23676D54'/%3E%3Cpath d='M16.2854 112.758C16.7279 112.217 18.0031 112.044 18.1571 113.065C18.1941 113.306 18.0217 113.494 17.773 113.624C17.8366 113.533 17.8688 113.432 17.85 113.314C17.7244 112.475 16.8417 112.442 16.2867 112.756H16.2852V112.758L16.2854 112.758Z' fill='%23474C2F'/%3E%3Cpath d='M9.52097 112.219C10.0819 111.456 11.1988 111.65 11.5386 112.223C11.6915 112.482 11.5679 112.792 11.3458 112.945C10.7656 113.343 9.7807 113.252 9.49652 112.787C9.40385 112.634 9.40359 112.378 9.52071 112.219H9.52097Z' fill='%23676D54'/%3E%3Cpath d='M11.5393 112.224C11.6924 112.484 11.5686 112.793 11.3467 112.946C11.3218 112.963 11.2953 112.979 11.27 112.994C11.3524 112.841 11.3648 112.657 11.2685 112.493C10.9781 112.003 10.1227 111.792 9.52734 112.213C10.0901 111.46 11.1998 111.652 11.5393 112.224Z' fill='%23474C2F'/%3E%3Cpath d='M6.13484 132.918C4.07579 133.775 1.94543 134.527 -0.274252 134.842C-0.825117 134.92 -1.37881 134.982 -1.93509 134.997V135.001H-1.93972V135.006L-1.94436 135.011C-6.52941 135.266 -10.8323 133.054 -14.1102 129.939V129.934C-14.3798 129.674 -14.647 129.419 -14.9172 129.155V129.151C-15.3602 128.718 -15.7896 128.247 -16.2028 127.781V127.776C-16.531 127.374 -16.9593 126.997 -17.2208 126.528C-17.2345 126.504 -17.2376 126.472 -17.2396 126.448C-17.2564 126.349 -17.2383 126.235 -17.2116 126.134C-17.2162 126.129 -17.2162 126.12 -17.2069 126.115C-17.0121 125.472 -16.6442 124.999 -16.2216 124.417V124.412C-15.8038 123.873 -15.3572 123.347 -14.8984 122.836C-14.8984 122.836 -14.8984 122.831 -14.8938 122.831C-14.4034 122.279 -13.8855 121.74 -13.3689 121.208V121.203H-13.3643C-13.322 121.161 -13.2798 121.119 -13.2376 121.072C-13.2376 121.072 -13.2376 121.077 -13.233 121.077C-13.5766 122.241 -8.48987 128.999 -4.66573 130.165C-1.88695 131.602 2.52358 132.648 6.12531 132.919H6.13458L6.13484 132.918Z' fill='%23949984'/%3E%3Cpath opacity='0.14' d='M6.14368 132.914V132.917H6.14062L6.14368 132.914Z' fill='%23474C2F'/%3E%3Cpath d='M3.41042 111.736C3.58546 111.61 3.77698 111.519 3.97236 111.47C4.39838 111.306 4.82286 111.427 5.03651 111.836C5.05813 111.88 5.07229 111.931 5.07589 111.981C5.11502 112.194 5.05582 112.457 4.87768 112.633C4.62954 112.884 3.9546 113.059 3.59267 112.919C3.17824 112.824 2.93936 112.077 3.41403 111.738H3.41223L3.41017 111.736L3.41042 111.736Z' fill='%23676D54'/%3E%3Cpath d='M3.4136 111.736C3.59224 111.611 3.78016 111.519 3.97528 111.47C4.4013 111.306 4.82577 111.427 5.03943 111.836C5.06131 111.882 5.0752 111.931 5.07881 111.981C5.11793 112.194 5.05873 112.457 4.8806 112.633C4.86721 112.646 4.85332 112.655 4.83864 112.67C4.89888 112.531 4.91046 112.381 4.88549 112.248C4.88292 112.195 4.86902 112.146 4.84611 112.103C4.63425 111.696 4.20772 111.572 3.78222 111.739C3.59019 111.788 3.39919 111.882 3.22106 112.009C3.21256 112.01 3.20252 112.021 3.19531 112.029C3.23495 111.92 3.30497 111.818 3.4172 111.738H3.4154L3.4136 111.736V111.736Z' fill='%23474C2F'/%3E%3Cpath d='M37.7874 121.98V121.982C37.5535 122.086 37.311 122.19 37.0639 122.288C36.7951 122.396 36.5202 122.502 36.2386 122.604C36.1258 122.645 36.011 122.686 35.8962 122.723V122.721C35.8898 122.675 35.8834 122.63 35.879 122.585C35.7881 121.933 35.7338 121.278 35.7209 120.622C35.7101 119.955 35.7382 119.277 35.8401 118.614C35.9289 118.033 36.0718 117.461 36.2906 116.918C36.4074 116.623 36.5462 116.337 36.7109 116.066C36.7457 116.008 36.7802 115.949 36.8193 115.895C36.8345 115.873 36.8409 115.858 36.8453 115.845C36.8345 115.934 36.8301 116.016 36.8214 116.105C36.7889 116.566 36.7758 117.032 36.7866 117.496C36.7954 117.851 36.8126 118.209 36.8474 118.564C36.9102 119.257 37.025 119.946 37.2222 120.611C37.3609 121.081 37.5385 121.551 37.7874 121.98V121.98Z' fill='%23CEB79B'/%3E%3Cpath opacity='0.14' d='M-1.93501 135.004C-6.17462 135.178 -10.8668 133.628 -15.875 128.125C-15.4534 128.142 -11.9837 131.196 -10.5133 132.032C-7.67173 133.642 -4.33977 134.49 -3.90139 134.494C-2.74972 134.502 0.0141258 134.384 1.20209 134.088C1.64793 133.978 2.09094 133.852 2.53472 133.709C3.37724 133.445 4.2146 133.132 5.04399 132.804C6.3169 132.303 7.57668 131.747 8.8357 131.205C10.0288 130.693 11.226 130.214 12.4158 129.693C14.7184 128.683 16.9973 127.59 19.306 126.616C19.4525 126.554 19.5958 126.494 19.739 126.434C21.5638 125.679 23.4174 125.008 25.2708 124.542C25.8973 124.386 26.5226 124.253 27.145 124.146C27.2709 124.124 27.397 124.102 27.525 124.084C27.5381 124.128 27.5479 124.173 27.5571 124.216C27.5777 124.294 27.5963 124.37 27.6179 124.444C27.6143 124.452 27.6194 124.453 27.6194 124.453C27.6272 124.486 27.6359 124.517 27.6439 124.551C27.6709 124.656 27.701 124.758 27.7276 124.861C27.735 124.903 27.7492 124.944 27.761 124.983C27.7731 125.023 27.7826 125.066 27.7934 125.107C27.7281 125.119 27.6606 125.129 27.5963 125.137C27.5126 125.151 27.4259 125.162 27.3407 125.177C27.3105 125.182 27.2835 125.187 27.2516 125.191L26.5906 125.307C26.5638 125.312 26.5386 125.316 26.5087 125.323C26.3748 125.348 26.2402 125.371 26.1089 125.4L25.869 125.443C25.7138 125.475 25.5609 125.509 25.4039 125.54C25.236 125.578 25.0705 125.613 24.9071 125.655C24.7459 125.693 24.5868 125.733 24.4275 125.771C24.4097 125.779 24.3943 125.779 24.3814 125.784C24.2357 125.822 24.09 125.858 23.9461 125.896C23.7858 125.938 23.6254 125.98 23.4668 126.023C23.3162 126.062 23.1698 126.103 23.0197 126.145C23.0068 126.149 22.9965 126.151 22.9873 126.156C22.8277 126.204 22.6696 126.249 22.5069 126.296C22.1895 126.391 21.8711 126.488 21.5504 126.591C21.4865 126.611 21.4204 126.63 21.3571 126.653C21.3236 126.66 21.2917 126.673 21.2621 126.683C21.1967 126.704 21.1311 126.725 21.0659 126.747C20.9087 126.798 20.7521 126.851 20.5938 126.905C20.4355 126.959 20.2744 127.017 20.1156 127.069C19.0514 127.44 17.9847 127.844 16.9216 128.27C16.6953 128.362 16.4726 128.451 16.2448 128.543C16.0201 128.633 15.7962 128.726 15.5686 128.818C15.3416 128.915 15.1174 129.007 14.8937 129.101C14.446 129.289 13.9974 129.482 13.5502 129.673C13.3232 129.77 13.0969 129.869 12.8719 129.968C12.4413 130.154 12.0099 130.346 11.5797 130.534C11.3535 130.635 11.1275 130.735 10.9007 130.834C10.6747 130.934 10.4484 131.035 10.2201 131.134C8.86092 131.735 7.4974 132.329 6.14263 132.897C6.05563 132.933 5.96888 132.971 5.88007 133.007C4.16209 133.721 2.50615 134.355 0.842222 134.698C-0.00286674 134.87 -0.854649 134.973 -1.71415 134.973L-1.73423 134.976C-1.79035 134.972 -1.85882 134.976 -1.94222 134.983L-1.93861 135.003L-1.93501 135.005V135.004Z' fill='%23474C2F'/%3E%3Cpath opacity='0.14' d='M3.23555 111.476C2.72176 111.665 1.1402 112.34 1.26917 112.872C2.37424 113.266 4.58337 112.987 5.75589 112.989C15.4169 113.01 17.6711 115.26 20.133 114.479C20.4156 114.39 19.4462 113.158 19.3131 113.078C17.72 112.134 15.6179 111.895 13.8194 111.593C11.1824 111.15 5.74688 110.553 3.23581 111.476H3.23555Z' fill='%23474C2F'/%3E%3Cpath opacity='0.63' d='M19.4802 114.632C19.8493 114.637 20.2815 114.564 20.4473 114.236C20.5477 114.032 20.5127 113.779 20.4005 113.583C20.2882 113.386 20.1109 113.234 19.924 113.105C19.5621 112.852 19.1556 112.662 18.7303 112.545C18.2443 112.413 17.6909 112.387 17.2729 112.666C15.5116 113.843 17.5578 114.613 19.4802 114.632Z' fill='%23676D54'/%3E%3Cpath opacity='0.63' d='M2.44382 112.099C2.35733 112.291 2.2173 112.448 2.23609 112.657C2.30353 113.397 5.36599 113.21 6.18791 112.708C6.50324 112.519 6.83248 112.228 6.8003 111.86C6.77919 111.635 6.61521 111.439 6.41675 111.331C6.21828 111.223 5.15336 111.08 4.92684 111.068C4.48769 111.045 4.04133 111.098 3.6184 111.225C3.13781 111.368 2.65413 111.64 2.44588 112.099H2.44382V112.099Z' fill='%23676D54'/%3E%3Cpath d='M14.989 105.661C15.9935 106.284 18.3619 107.524 19.0299 106.551C19.2588 106.214 19.093 105.759 18.9154 105.394C18.4389 104.4 17.9132 103.405 17.1284 102.631C16.542 102.055 15.8321 101.624 15.1291 101.2C14.0616 100.553 12.9876 99.9039 11.8241 99.4517C10.7283 99.0254 9.57485 98.7793 8.42549 98.5332C7.76188 98.3927 7.08463 98.2498 6.41406 98.3505C8.02573 101.04 9.73599 103.833 12.4036 105.473C14.6667 106.865 16.1126 106.026 14.9867 105.663L14.989 105.661Z' fill='%2334381B'/%3E%3Cpath d='M2.48166 82.6242C0.465854 85.1991 -1.53837 89.5971 2.96225 94.1801C3.02352 94.2408 3.0889 94.2714 3.15429 94.2807C4.56955 97.8727 7.22786 101.631 6.7205 103.358C6.46643 104.229 6.07594 105.108 6.96402 105.757C9.05859 107.292 11.7872 104.302 12.1208 101.722C15.6412 103.564 17.6431 103.027 19.8036 102.741C19.8993 102.997 19.9997 103.247 20.1024 103.491C20.5205 104.48 21.3591 106.347 22.7278 106.097C23.975 105.867 24.2903 103.854 24.4725 102.847C25.4746 103.636 26.6425 104.152 27.502 105.15C28.4645 106.265 31.3187 109.644 31.1833 107.395C31.1668 107.116 31.0291 106.858 30.8937 106.612C31.1063 106.95 31.3445 107.268 31.6014 107.57C32.0755 108.123 32.6477 107.842 32.5684 106.832C32.239 102.678 27.9623 91.5464 25.5377 87.971C23.7392 85.3209 21.3357 82.7836 18.2081 81.79C18.2454 80.984 17.9463 77.3828 20.6373 76.4643C20.8896 76.3776 20.6373 75.6887 20.5323 75.5155C20.7985 74.9788 20.9269 74.3651 21.0999 73.8027C21.2541 73.2989 21.4852 72.8278 21.7071 72.3524C21.7844 72.3336 21.8567 72.2798 21.901 72.1791C22.006 71.9472 22.0598 71.7246 22.0714 71.5114C22.1507 71.3006 22.2209 71.0826 22.2722 70.8602C22.3445 70.5392 21.9988 70.3564 21.7746 70.4594C20.6698 68.7373 13.3728 64.6979 8.79011 73.121C5.32815 79.4825 9.13556 74.1193 2.48115 82.6245L2.48166 82.6242Z' fill='%23676D54'/%3E%3Cpath d='M17.2462 70.1897C18.1338 71.094 20.3061 71.4338 19.9416 70.2062C19.3624 68.2522 15.3004 68.2053 17.2462 70.1897Z' fill='%23676D54'/%3E%3Cpath opacity='0.3' d='M32.5668 106.829C32.5549 106.667 32.5351 106.497 32.5114 106.315C32.4599 105.951 32.3886 105.547 32.3016 105.116C32.3016 105.113 32.3004 105.111 32.2978 105.108C32.2543 104.891 32.2028 104.665 32.1474 104.432C32.0921 104.202 32.0326 103.961 31.9693 103.715C31.906 103.47 31.8388 103.221 31.7675 102.968C31.7636 102.956 31.7595 102.944 31.7557 102.928C31.6962 102.718 31.6329 102.509 31.5698 102.295C31.4985 102.046 31.4195 101.793 31.3405 101.535C31.2691 101.306 31.1981 101.073 31.1188 100.831C31.0673 100.665 31.012 100.499 30.9566 100.333C30.8815 100.107 30.8063 99.8816 30.727 99.6519C30.4302 98.7894 30.1136 97.9069 29.7813 97.0325C29.6348 96.6487 29.4886 96.2649 29.338 95.8891C29.1442 95.3984 28.9504 94.9158 28.7524 94.4409C28.3725 94.4527 27.9887 94.3974 27.6208 94.3181C26.881 94.1559 26.1687 93.8552 25.5041 93.5031C24.8433 93.1548 24.226 92.7275 23.6324 92.2804C22.9243 91.7421 22.2674 91.1328 21.6856 90.4602C21.3968 90.1318 21.1317 89.7837 20.8825 89.4195C20.6253 89.0555 20.38 88.6835 20.2256 88.2642C19.9169 87.4413 19.9841 86.5192 20.1901 85.6806C20.2652 85.3799 20.3641 85.0831 20.4789 84.7943C20.5659 84.5726 20.657 84.359 20.8032 84.169C20.9932 83.9157 21.2424 83.7101 21.5155 83.5479C20.5183 82.7841 19.4183 82.171 18.2077 81.7872C18.2234 81.435 18.1799 80.5446 18.3462 79.5793V79.5714C18.4134 79.1837 18.5164 78.7801 18.6747 78.3921C19.015 77.5573 19.6044 76.8134 20.6372 76.4613C20.8905 76.3743 20.6372 75.6857 20.5342 75.5117C20.7994 74.9775 20.9299 74.3641 21.1 73.7983C21.2542 73.2959 21.4877 72.8251 21.7093 72.3501C21.7845 72.3303 21.8596 72.275 21.9032 72.1761C22.0061 71.9426 22.0615 71.721 22.0733 71.5073C22.1523 71.2976 22.2236 71.08 22.2751 70.8584C22.3068 70.7238 22.2594 70.6092 22.1801 70.5379C22.0733 70.4311 21.907 70.3956 21.7765 70.4548C21.6617 70.2767 21.4797 70.071 21.2385 69.8573C20.5579 69.2519 19.4183 68.5793 18.0414 68.2233C17.9941 68.2114 17.9464 68.1996 17.9029 68.1877C17.5073 68.0889 17.0918 68.0335 16.6684 67.9978L16.6722 67.9939C16.5773 67.9859 16.4823 67.9821 16.3834 67.9741C16.1934 67.9702 16.0035 67.9702 15.8138 67.9741C15.5288 67.9821 15.24 68.0096 14.9512 68.0611C14.9473 68.0611 14.9432 68.065 14.9393 68.0611C14.4883 68.1363 14.0294 68.2668 13.5704 68.4449C13.5032 68.4727 13.4399 68.4964 13.3766 68.5239C13.2816 68.5636 13.1827 68.6071 13.0877 68.6544C13.0404 68.6781 12.9889 68.7059 12.9413 68.7296C12.7673 68.8166 12.5971 68.9116 12.427 69.0184L12.2965 69.1016C12.0908 69.2321 11.8849 69.3785 11.683 69.5368C11.6712 69.5448 11.6632 69.5528 11.6514 69.5646C11.5446 69.6478 11.4377 69.7348 11.3348 69.8298C11.2913 69.8653 11.2516 69.9011 11.212 69.9366L10.9628 70.1739L10.8086 70.3281C10.6663 70.4666 10.5278 70.617 10.3931 70.7714C10.302 70.8782 10.2073 70.9889 10.1162 71.1037C9.94602 71.3094 9.78384 71.531 9.62167 71.7645C9.59799 71.8 9.57431 71.8397 9.54651 71.8793C9.46748 71.998 9.38434 72.1166 9.30506 72.2433C9.21805 72.3818 9.13104 72.5241 9.04378 72.6706C8.96064 72.8171 8.87363 72.9674 8.79048 73.1216C8.74312 73.2127 8.6955 73.2997 8.64814 73.3829C8.55701 73.553 8.47001 73.7152 8.39098 73.8655C8.18917 74.2493 8.01516 74.5778 7.87255 74.8627C7.78554 75.0368 7.70626 75.1951 7.63521 75.3377C7.60355 75.4049 7.57189 75.4723 7.54022 75.5356C7.50058 75.6146 7.46893 75.6898 7.4334 75.7573C7.3899 75.8561 7.34639 75.9472 7.31061 76.0304C7.27097 76.1215 7.23544 76.2005 7.20378 76.2718L7.16827 76.355C7.11292 76.4855 7.06941 76.5884 7.02977 76.6793C7.00995 76.7228 6.99425 76.7625 6.97829 76.798C6.93479 76.893 6.89129 76.9761 6.83594 77.067C6.81612 77.0986 6.7963 77.1342 6.77262 77.1658C6.74894 77.2055 6.72113 77.2448 6.69359 77.2886C6.66193 77.3241 6.63413 77.3638 6.60246 77.4073C6.5708 77.4546 6.53528 77.5023 6.49178 77.5537C6.32961 77.7674 6.10797 78.0444 5.79135 78.4439C5.73601 78.5111 5.68067 78.5824 5.62121 78.6575C5.5064 78.7999 5.37975 78.9582 5.24126 79.1325C5.17794 79.2115 5.11462 79.2946 5.04331 79.3816C4.94833 79.5003 4.84948 79.6231 4.74651 79.7536C4.73853 79.7654 4.73081 79.7773 4.71871 79.7853C4.65539 79.8643 4.59207 79.9474 4.52488 80.0306C4.46156 80.1176 4.39025 80.2046 4.31509 80.2957C4.17274 80.4738 4.01829 80.6677 3.85998 80.8695C3.85998 80.8721 3.8587 80.8747 3.85612 80.8775C3.72561 81.0476 3.58301 81.2258 3.4368 81.4116C3.32199 81.554 3.20332 81.7084 3.07667 81.8667C2.98168 81.9854 2.8867 82.1082 2.78785 82.2348C2.69286 82.3615 2.5899 82.4881 2.48307 82.6225H2.47922C1.38727 84.0192 0.303038 85.9462 0.247694 88.154C0.243833 88.3005 0.24769 88.447 0.251551 88.5973C0.259531 88.7873 0.275239 88.9731 0.298921 89.1631C0.322603 89.3531 0.354262 89.5469 0.393903 89.7407C0.413724 89.8357 0.437403 89.9307 0.461085 90.0296C0.488885 90.1284 0.512575 90.2234 0.544237 90.3222C0.572037 90.4211 0.603696 90.5202 0.639219 90.6149C0.674743 90.7138 0.710521 90.8129 0.749905 90.9117C0.801388 91.0502 0.860598 91.1887 0.92804 91.331C0.991364 91.4734 1.06653 91.6199 1.14556 91.7663C1.1574 91.7862 1.16924 91.8098 1.18108 91.8335C1.23256 91.9285 1.2879 92.0235 1.34324 92.1144C1.39859 92.2093 1.45805 92.3043 1.52138 92.3993C1.57672 92.4863 1.63207 92.5695 1.69153 92.6565C1.77854 92.7831 1.86965 92.9056 1.96464 93.0323C1.96464 93.0323 1.96464 93.0362 1.9685 93.0403C2.16234 93.2895 2.36801 93.5389 2.59762 93.7919L2.60148 93.7958C2.71629 93.9224 2.83496 94.0491 2.96161 94.1757C2.97757 94.1914 2.99327 94.2074 3.00897 94.2192C3.05247 94.2547 3.10396 94.2707 3.15132 94.2787C3.21851 94.445 3.28594 94.6151 3.35699 94.7812C3.78044 95.7822 4.28291 96.7913 4.77354 97.7566C4.85669 97.9188 4.93571 98.0771 5.015 98.2354C5.015 98.2393 5.01886 98.2393 5.01886 98.2434C5.16919 98.5322 5.31154 98.8172 5.45003 99.098C5.45003 99.098 5.45389 99.1019 5.45389 99.106C5.50125 99.201 5.54501 99.2918 5.59238 99.3829C5.6835 99.5688 5.77051 99.7469 5.84953 99.9251C5.89303 100.016 5.93654 100.103 5.97618 100.194C6.05521 100.368 6.12651 100.538 6.19781 100.705L6.20168 100.708C6.24518 100.811 6.28868 100.914 6.32446 101.013C6.36796 101.116 6.40349 101.215 6.43927 101.314C6.56978 101.67 6.66863 102.002 6.72423 102.311C6.73607 102.374 6.74791 102.43 6.75589 102.489C6.80325 102.818 6.79553 103.11 6.72036 103.36C6.65318 103.589 6.57802 103.823 6.51469 104.052C6.48689 104.163 6.45934 104.274 6.43952 104.385C6.42356 104.499 6.41172 104.61 6.41172 104.717C6.41172 104.764 6.41558 104.808 6.4197 104.855C6.42356 104.891 6.42769 104.927 6.43567 104.962C6.43953 105.002 6.45137 105.041 6.46347 105.081C6.47145 105.116 6.48328 105.148 6.49512 105.18C6.49899 105.188 6.49899 105.191 6.50311 105.199C6.51109 105.223 6.52293 105.247 6.53091 105.267C6.55459 105.306 6.57827 105.35 6.60607 105.389C6.63387 105.429 6.66142 105.468 6.69308 105.508L6.71676 105.532C6.74456 105.567 6.78008 105.599 6.8156 105.635C6.85911 105.674 6.91059 105.714 6.96207 105.753C7.00944 105.789 7.06092 105.821 7.10854 105.856H7.11241C7.21125 105.916 7.31422 105.971 7.41718 106.015C7.52015 106.058 7.62286 106.09 7.72582 106.118C7.78117 106.13 7.83265 106.141 7.88413 106.149C8.26793 106.209 8.65972 106.153 9.0394 106.015C9.11457 105.983 9.18973 105.955 9.26104 105.916C9.33234 105.884 9.4075 105.845 9.47855 105.805C9.51819 105.785 9.55758 105.762 9.59722 105.734C9.68422 105.682 9.77124 105.623 9.85438 105.564C9.95735 105.489 10.06 105.405 10.163 105.318C10.2619 105.227 10.361 105.136 10.4557 105.038C10.701 104.792 10.9226 104.519 11.1203 104.226C11.1994 104.112 11.2745 103.993 11.35 103.87V103.867C11.4213 103.748 11.4884 103.621 11.5556 103.495V103.491C11.6189 103.364 11.6784 103.237 11.7338 103.107C11.7891 102.976 11.8406 102.846 11.8841 102.711C11.9513 102.513 12.0107 102.316 12.0542 102.118C12.082 101.983 12.1057 101.853 12.1214 101.722C12.2442 101.785 12.3667 101.849 12.4854 101.908C12.7269 102.023 12.9562 102.13 13.1817 102.228C13.4072 102.323 13.6288 102.41 13.8425 102.486C14.0523 102.561 14.2618 102.628 14.4636 102.687C14.6654 102.747 14.8593 102.794 15.0531 102.838C15.3262 102.897 15.5911 102.945 15.8485 102.976C16.4975 103.055 17.0911 103.055 17.6607 103.012C17.906 102.992 18.1475 102.964 18.3848 102.937C18.8597 102.877 19.3264 102.802 19.8014 102.739V102.742H19.8052C19.9002 102.996 19.9991 103.249 20.102 103.49C20.1139 103.518 20.1257 103.546 20.1375 103.577C20.1653 103.637 20.1929 103.7 20.2207 103.767C20.2802 103.902 20.3435 104.04 20.4107 104.183C20.4186 104.195 20.4225 104.206 20.4305 104.218C20.4423 104.246 20.4542 104.27 20.466 104.293C20.5056 104.365 20.5412 104.436 20.5767 104.507C20.5965 104.547 20.6202 104.586 20.6439 104.622C20.6835 104.693 20.7229 104.764 20.7667 104.835L20.7705 104.839C20.806 104.891 20.8377 104.946 20.8735 104.998C20.909 105.053 20.9407 105.104 20.9803 105.156C21.004 105.188 21.0277 105.223 21.0555 105.255C21.091 105.302 21.1306 105.35 21.1703 105.397C21.2099 105.445 21.2493 105.488 21.2931 105.532C21.4354 105.678 21.5857 105.805 21.7441 105.904C21.8035 105.939 21.8707 105.975 21.934 106.003C21.9696 106.018 22.0053 106.03 22.0409 106.042C22.0725 106.054 22.1081 106.066 22.1438 106.074C22.1755 106.082 22.2072 106.09 22.235 106.094C22.2705 106.102 22.3063 106.106 22.3418 106.109C22.3853 106.113 22.4329 106.117 22.4764 106.117H22.4883C22.5634 106.117 22.6424 106.109 22.7256 106.094C22.9194 106.058 23.0896 105.979 23.244 105.868C23.2466 105.871 23.2479 105.871 23.2479 105.868C23.7622 105.481 24.051 104.725 24.2371 104.001V103.997C24.3439 103.573 24.4153 103.158 24.4706 102.845L24.4744 102.849L24.8068 103.098C24.8858 103.154 24.9651 103.205 25.0482 103.261C25.0482 103.261 25.0482 103.264 25.0521 103.269C25.1154 103.312 25.1787 103.356 25.2459 103.395C25.3764 103.482 25.5111 103.569 25.6416 103.657C25.9067 103.831 26.1718 104.005 26.4249 104.187H26.4287C26.5237 104.258 26.6187 104.329 26.7096 104.404C26.8954 104.551 27.0777 104.709 27.2476 104.879C27.3346 104.962 27.4177 105.053 27.5009 105.148L27.5722 105.231C27.592 105.259 27.6195 105.291 27.6512 105.323C27.837 105.54 28.0705 105.809 28.3277 106.094C28.9607 106.798 29.7401 107.606 30.3257 107.958C30.3852 107.997 30.4405 108.029 30.492 108.053C30.5237 108.068 30.5515 108.08 30.579 108.092C30.6145 108.108 30.6503 108.12 30.6858 108.128C30.7095 108.132 30.7332 108.14 30.753 108.14C31.0419 108.187 31.2159 107.985 31.1803 107.392C31.1765 107.332 31.1685 107.273 31.1525 107.214C31.1289 107.103 31.0854 106.996 31.0377 106.889C31.0218 106.858 31.0022 106.826 30.9904 106.794C30.9587 106.735 30.9309 106.68 30.8993 106.62C30.9706 106.739 31.0496 106.85 31.1289 106.961C31.1605 107.008 31.196 107.056 31.2318 107.103C31.2913 107.186 31.3466 107.261 31.41 107.34C31.4694 107.416 31.5327 107.491 31.5958 107.566C31.6156 107.59 31.6355 107.609 31.6553 107.629C31.679 107.649 31.6988 107.669 31.7186 107.689C31.7582 107.724 31.8017 107.752 31.8414 107.776C31.8692 107.791 31.8967 107.803 31.9245 107.811C31.96 107.827 31.9958 107.839 32.0275 107.843C32.1541 107.863 32.269 107.823 32.3598 107.728C32.5101 107.574 32.6013 107.273 32.5655 106.83L32.5668 106.829ZM16.8228 68.8882C17.0167 68.6508 17.4123 68.6467 17.6893 68.6547C18.0257 68.6627 18.3619 68.7219 18.6942 68.7734C18.7377 68.7772 18.7179 68.8447 18.6785 68.8367C18.643 68.8328 18.6113 68.8287 18.5797 68.8248C19.0425 68.9633 19.4698 69.2956 19.7509 69.6913C19.842 69.8218 19.9172 69.9523 19.9725 70.0908V70.0947C20.1031 70.4151 20.0755 70.7871 19.7391 70.9611C19.2405 71.2183 18.5282 71.0008 18.0497 70.7989C17.9784 70.7673 17.9073 70.7356 17.836 70.696C17.464 70.5021 17.1237 70.2252 16.9062 69.8612C16.7441 69.5881 16.5976 69.1649 16.8231 68.8879L16.8228 68.8882Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M17.2063 71.7762C16.9353 71.8441 16.9379 72.1533 16.9564 72.3829C16.9798 72.6782 17.1129 72.9335 17.3487 73.114C17.7575 73.428 18.3696 73.367 18.7385 73.0226C19.5653 72.2516 19.0911 71.2982 17.2063 71.7736V71.7762Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M22.0742 71.5111C22.1538 71.3003 22.2238 71.0823 22.2753 70.8599C22.3476 70.5389 22.0019 70.3561 21.7777 70.4593C21.7216 70.3726 21.649 70.2789 21.5627 70.1829C18.2437 73.5944 17.2184 75.8601 17.2673 77.4697C17.2907 78.2335 17.9003 78.4561 18.6244 78.5195C18.9562 77.6386 19.5539 76.8326 20.6379 76.4622C20.8901 76.3755 20.6379 75.6866 20.5328 75.5134C20.7993 74.9767 20.9274 74.363 21.1004 73.8006C21.2546 73.2968 21.4858 72.8257 21.7077 72.35C21.7846 72.3312 21.8572 72.2774 21.9015 72.1765C22.0065 71.9446 22.0603 71.7219 22.0719 71.5088L22.0742 71.5111Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M19.4144 77.2307C19.732 76.9051 20.1315 76.6356 20.6384 76.4624C20.8906 76.3756 20.6384 75.6868 20.5333 75.5135C20.7998 74.9768 20.928 74.3632 21.101 73.8007C21.2551 73.2969 21.4863 72.8259 21.7082 72.3504C21.7851 72.3316 21.8577 72.2778 21.902 72.1769C22.007 71.945 22.0608 71.7223 22.0724 71.5092C22.1517 71.2984 22.2217 71.0804 22.2732 70.858C22.3455 70.537 21.9998 70.3542 21.7756 70.4572C21.7311 70.3846 21.6729 70.3094 21.6075 70.2322C20.2108 71.7973 17.8189 75.3259 18.7672 76.8022C18.8934 77.0011 19.1549 77.1746 19.4144 77.2287V77.231V77.2307Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M31.8406 107.775C31.7616 107.728 31.6743 107.656 31.5953 107.565C31.4687 107.415 31.3461 107.264 31.2313 107.102C31.1127 106.944 30.9979 106.782 30.8949 106.612C30.9265 106.675 30.9582 106.73 30.9899 106.794C31.0017 106.825 31.0215 106.857 31.0372 106.889C31.1124 107.051 31.1719 107.217 31.1837 107.395C31.2272 108.099 30.9739 108.254 30.5783 108.091C29.7195 107.751 28.1568 105.911 27.496 105.147C27.1755 104.772 26.8074 104.467 26.4236 104.186C25.9803 103.866 25.5057 103.577 25.0506 103.268C25.0467 103.264 25.0467 103.26 25.0467 103.26C24.8487 103.13 24.6549 102.995 24.4729 102.849C24.2909 103.853 23.9743 105.867 22.7279 106.097C22.4391 106.149 22.174 106.105 21.9325 106.002C21.8692 105.974 21.802 105.939 21.7425 105.903C21.5842 105.804 21.4339 105.678 21.2915 105.531C21.2084 105.444 21.1294 105.353 21.0542 105.254C21.0264 105.223 21.0027 105.187 20.979 105.155C20.9039 105.052 20.8367 104.946 20.7693 104.839L20.7654 104.835C20.7219 104.764 20.6822 104.693 20.6426 104.621C20.6189 104.586 20.5952 104.546 20.5754 104.507C20.5399 104.435 20.5041 104.364 20.4647 104.293L20.4609 104.289C20.3937 104.143 20.3262 104.004 20.267 103.87C20.2037 103.735 20.1522 103.608 20.1008 103.49C19.9978 103.248 19.8989 102.995 19.804 102.742H19.8001C17.6396 103.027 15.6377 103.565 12.1202 101.721C11.7958 104.241 9.18023 107.153 7.10702 105.856C7.05966 105.82 7.00817 105.789 6.96055 105.753C6.83004 105.658 6.72707 105.555 6.64393 105.452C6.61613 105.413 6.58858 105.373 6.5649 105.329C6.54122 105.29 6.51754 105.246 6.50159 105.199C6.27197 104.645 6.53324 104 6.71909 103.359C6.90906 102.714 6.65963 101.792 6.1968 100.704C6.1255 100.538 6.05445 100.368 5.97517 100.194C5.89203 100.015 5.80888 99.8375 5.71802 99.6514C5.63487 99.4694 5.544 99.2913 5.45288 99.1055C5.45288 99.1016 5.44901 99.0975 5.44901 99.0975C5.31053 98.8166 5.16818 98.5317 5.01785 98.2429C5.01785 98.239 5.01398 98.239 5.01398 98.2349C4.37302 96.9687 3.67672 95.6116 3.15443 94.2782H3.15057C3.08725 94.2702 3.02392 94.2426 2.9606 94.1793C2.9606 94.1767 2.95931 94.1755 2.95673 94.1755C2.70756 93.9183 2.47794 93.665 2.26429 93.4117C2.16132 93.2851 2.06248 93.1625 1.96749 93.0398C1.96363 93.0359 1.96363 93.0318 1.96363 93.0318C-1.20179 88.8733 0.634089 84.9837 2.48206 82.6256C3.86695 80.8569 4.79673 79.6898 5.43383 78.8905C7.523 76.279 6.47841 77.6124 7.87128 74.8625C8.10064 74.4074 8.40155 73.8377 8.78922 73.1216C9.46184 71.8832 10.1978 70.9137 10.9574 70.1739C11.8754 69.2758 12.8329 68.6982 13.7864 68.3618C14.7715 68.0135 15.7489 67.9226 16.671 67.9937C16.4573 68.2271 16.2555 68.4645 16.0655 68.7136C15.3929 69.5724 14.8351 70.522 14.3761 71.5388C10.1581 80.8252 14.2533 95.3701 18.4 91.6943C21.2568 95.8608 25.2253 98.0923 29.3404 95.8844C30.1911 98.0449 30.9863 100.304 31.568 102.294C32.114 104.118 32.4821 105.725 32.5691 106.833C32.6363 107.672 32.2486 108.008 31.8411 107.774L31.8406 107.775Z' fill='%23464C2E'/%3E%3Cpath opacity='0.7' d='M31.8447 107.775C31.7626 107.73 31.6784 107.658 31.5984 107.565C31.471 107.416 31.3479 107.263 31.2334 107.103C31.1144 106.945 31.0022 106.781 30.8964 106.613C30.9288 106.673 30.9613 106.732 30.9914 106.794C31.0066 106.824 31.0238 106.857 31.039 106.889C31.1124 107.049 31.1708 107.215 31.1816 107.39C31.2012 107.719 31.1556 107.926 31.0627 108.04C31.0475 108.06 31.0282 108.077 31.0086 108.092C30.9934 108.105 30.9785 108.114 30.961 108.118C30.8616 108.164 30.7322 108.151 30.5829 108.092C29.7211 107.753 28.1614 105.913 27.5003 105.146C27.1786 104.772 26.8112 104.466 26.4267 104.187C25.9816 103.863 25.5087 103.575 25.0529 103.266L25.0485 103.262C24.8541 103.13 24.6639 102.994 24.478 102.847C24.476 102.845 24.4716 102.843 24.4693 102.841C24.2878 103.85 23.9725 105.863 22.724 106.092C22.601 106.116 22.4821 106.12 22.3675 106.111C22.333 106.107 22.3006 106.103 22.2661 106.096C22.264 106.096 22.2596 106.096 22.2553 106.094C22.2208 106.09 22.1863 106.081 22.1515 106.073C22.0977 106.058 22.0447 106.041 21.9925 106.02C21.9737 106.013 21.9536 106.009 21.9353 106.001C21.8704 105.971 21.8079 105.939 21.7453 105.902C21.6805 105.863 21.62 105.818 21.5595 105.768C21.5294 105.744 21.499 105.718 21.4689 105.692C21.4104 105.645 21.3523 105.591 21.2962 105.532C21.212 105.448 21.1319 105.353 21.0565 105.254C21.0305 105.221 21.0048 105.187 20.9831 105.154C20.9075 105.053 20.8385 104.947 20.7715 104.839L20.7672 104.835C20.7262 104.766 20.6851 104.694 20.6441 104.623C20.6204 104.584 20.5988 104.545 20.5793 104.506C20.5424 104.435 20.5059 104.364 20.4691 104.295C20.467 104.293 20.4647 104.29 20.4647 104.288C20.3934 104.146 20.3265 104.006 20.268 103.871C20.2055 103.735 20.1491 103.603 20.0994 103.487C19.9957 103.245 19.8987 102.994 19.8034 102.742C19.8034 102.74 19.8014 102.74 19.8014 102.737C18.4749 102.914 17.2092 103.182 15.613 102.938C15.5244 102.923 15.4338 102.908 15.3429 102.89H15.3365C14.4034 102.715 13.3578 102.363 12.1245 101.72C12.1224 101.72 12.1201 101.72 12.1181 101.718C11.874 103.612 10.336 105.731 8.70501 106.111C8.53666 106.15 8.366 106.172 8.19739 106.172C8.14771 106.172 8.09597 106.17 8.04629 106.165C8.00099 106.161 7.95568 106.157 7.91012 106.15C7.89056 106.148 7.86919 106.146 7.84963 106.139C7.81076 106.133 7.77189 106.124 7.73302 106.116C7.66918 106.101 7.60586 106.081 7.54305 106.06C7.53816 106.058 7.53301 106.056 7.52812 106.054C7.38705 106.004 7.24805 105.939 7.11111 105.854C7.06143 105.822 7.01174 105.789 6.96206 105.753C6.83258 105.658 6.72885 105.556 6.6488 105.453C6.62074 105.414 6.59268 105.373 6.569 105.332C6.543 105.288 6.52137 105.245 6.50413 105.2C6.48945 105.166 6.48224 105.13 6.47143 105.095C6.46937 105.088 6.46732 105.082 6.46526 105.076C6.31158 104.549 6.54376 103.95 6.71778 103.353C6.90569 102.712 6.65935 101.791 6.19935 100.703C6.13011 100.536 6.05674 100.368 5.97694 100.195C5.89689 100.018 5.81065 99.8385 5.7221 99.6529C5.63793 99.4714 5.54706 99.2899 5.45645 99.1043C5.45439 99.1023 5.45207 99.1 5.45207 99.0979C5.31384 98.8171 5.16918 98.5319 5.0222 98.2425C5.02014 98.2405 5.01782 98.2381 5.01782 98.2361C4.37635 96.9704 3.6785 95.6138 3.15363 94.2809C3.15363 94.2789 3.15157 94.2789 3.15157 94.2765C3.08902 94.2657 3.02209 94.2377 2.96366 94.1792L2.95928 94.1749C2.70856 93.92 2.47972 93.6652 2.26812 93.4124C2.16439 93.2871 2.06502 93.164 1.97003 93.0386L1.96566 93.0343C0.53418 91.1536 0.126439 89.3288 0.28063 87.6749L0.281659 87.662C0.294272 87.5308 0.308947 87.4 0.32851 87.271C0.509987 86.0483 0.987228 84.9293 1.56615 83.9597C1.59859 83.9056 1.63103 83.8515 1.66346 83.7977C1.66346 83.7977 1.66346 83.7957 1.66552 83.7934C1.73039 83.6896 1.795 83.5882 1.86218 83.4865C2.06528 83.1797 2.27482 82.8904 2.48641 82.6203C2.73687 82.3006 2.97241 82.0005 3.19482 81.7196C4.19719 80.4452 4.9164 79.5445 5.43715 78.8899C4.67031 81.6223 3.15826 85.9428 5.96639 91.559C7.89854 95.4231 11.3667 97.6075 14.607 98.0394C17.3155 98.4006 20.2492 98.0482 18.9014 96.0133C18.2144 94.9744 17.6074 93.7926 17.6875 92.5485C18.8149 96.2573 22.1374 99.3141 28.8919 97.426C29.2029 97.3395 29.5162 97.2445 29.823 97.1472C30.4884 98.91 31.0975 100.688 31.5726 102.295C32.1106 104.118 32.4777 105.721 32.5662 106.827C32.6332 107.667 32.2486 108.002 31.8447 107.775V107.775Z' fill='%23464C2E'/%3E%3Cpath opacity='0.7' d='M31.069 108.043C31.0517 108.064 31.0321 108.079 31.0105 108.092C30.9953 108.105 30.9804 108.114 30.9629 108.118C30.2826 108.401 28.2843 106.043 27.5089 105.146C26.6492 104.148 25.4805 103.632 24.4804 102.841V102.848C24.2946 103.858 23.9793 105.863 22.7352 106.092H22.7267C22.6036 106.116 22.4847 106.12 22.3702 106.112C22.3357 106.107 22.3032 106.103 22.2688 106.096C22.2667 106.096 22.2623 106.096 22.2579 106.094C22.2234 106.09 22.189 106.081 22.1542 106.073C21.9426 106.017 21.7439 105.911 21.5624 105.768C21.5323 105.744 21.5019 105.718 21.4718 105.692C20.8239 105.129 20.3788 104.124 20.1088 103.487C20.0074 103.243 19.9057 102.992 19.8107 102.737H19.8043C18.4778 102.914 17.2121 103.182 15.6159 102.938C15.5273 102.923 15.4367 102.908 15.3459 102.891H15.3394C14.4063 102.715 13.3607 102.361 12.1274 101.717V101.72C11.8811 103.616 10.341 105.737 8.70793 106.111C8.53958 106.15 8.36892 106.171 8.20031 106.171C8.15063 106.171 8.09889 106.169 8.04921 106.165C8.00391 106.161 7.9586 106.156 7.91304 106.15C7.89348 106.148 7.87211 106.145 7.85254 106.139C7.81367 106.133 7.7748 106.124 7.73593 106.115C7.47466 106.053 7.21751 105.934 6.97116 105.752C6.08334 105.102 6.4723 104.223 6.72714 103.353C7.23476 101.625 4.57773 97.8681 3.16067 94.2756C3.0958 94.2648 3.03118 94.2347 2.97069 94.1742C0.579575 91.7399 0.0243323 89.3572 0.330912 87.2704C0.512389 86.0477 0.989638 84.9287 1.56856 83.959C1.601 83.905 1.63343 83.8509 1.66586 83.7971C1.66586 83.7971 1.66586 83.795 1.66792 83.7927C1.73279 83.689 1.7974 83.5852 1.86459 83.4859C2.06769 83.179 2.27722 82.8897 2.48882 82.6197C2.73928 82.3 2.97481 81.9998 3.19722 81.719C3.16041 83.8684 3.16041 85.711 3.16041 85.7259C3.26852 95.2327 12.4834 101.329 21.5539 98.3173C21.5799 98.3842 29.7258 107.161 31.0648 108.04C31.0669 108.04 31.0669 108.042 31.0692 108.042L31.069 108.043Z' fill='%23464C2E'/%3E%3Cpath d='M31.2485 77.9354H31.2459C29.3771 77.6445 23.5338 75.2866 19.7652 76.8336C19.6288 76.8903 19.5155 76.8517 19.446 76.7719C18.5219 76.4861 20.7589 71.2375 21.6572 70.4343L25.2378 70.8616C26.2189 70.9903 27.0089 71.6133 27.7476 72.2311C28.5765 72.9209 29.3591 73.9171 30.0618 74.9442C30.3424 75.3484 30.6075 75.7551 30.8598 76.1515C30.9241 76.2519 30.9885 76.3523 31.0528 76.4527C31.2948 76.8388 31.5265 77.2095 31.7401 77.5467C31.9847 77.9328 31.7762 78.0152 31.2485 77.9354Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M21.6559 70.4304C20.7591 71.2317 18.5214 76.4825 19.4463 76.7659C19.5163 76.848 19.6286 76.8853 19.7663 76.8292C24.0337 75.0767 30.9617 78.3359 31.7628 77.9212C31.6436 77.907 31.5244 77.8885 31.4078 77.8697C30.9172 77.7948 30.4338 77.6776 29.9596 77.5348C29.0159 77.2514 28.1098 76.8459 27.2408 76.3818C26.804 76.1499 26.3741 75.8969 25.9537 75.6346C25.5661 75.3931 25.1735 75.1519 24.8278 74.852C24.1737 74.2826 23.6995 73.5305 23.2746 72.7806C22.9639 72.2323 22.5458 71.2858 22.674 70.5571L21.6557 70.4353V70.4307L21.6559 70.4304Z' fill='%2334381B'/%3E%3Cpath opacity='0.3' d='M19.4507 76.7712C19.5207 76.8533 19.6329 76.8906 19.7706 76.8345C21.693 76.0473 24.1503 76.272 26.3483 76.722C25.8227 76.4128 25.2574 76.1691 24.7202 75.9794C24.113 75.7662 23.4777 75.6373 22.8609 75.4545C22.2863 75.2859 21.6953 75.0609 21.2585 74.6393C20.7424 74.1401 20.6886 73.4536 20.8029 72.7789C20.8868 72.2847 21.0412 71.7948 21.1859 71.3145C21.249 71.113 21.319 70.9163 21.4078 70.7263C20.4103 72.0829 18.6025 76.5114 19.4504 76.7714L19.4507 76.7712Z' fill='%2334381B'/%3E%3Cpath opacity='0.4' d='M27.752 72.2333C27.014 71.617 26.2222 70.9938 25.2409 70.8649L23.5966 70.6682C23.5801 70.6916 23.5639 70.7127 23.55 70.7362C23.0689 71.528 23.3793 72.9831 25.0167 73.7283C27.3386 74.785 28.5392 75.3755 28.7752 73.248C28.4434 72.8683 28.1023 72.5216 27.752 72.231V72.2333Z' fill='%23676D54'/%3E%3Cpath d='M17.6347 72.0925C17.4221 72.069 17.1955 72.0387 16.9713 71.9846C16.8545 72.1954 16.8102 72.4415 16.8709 72.6899C16.9737 73.1 17.3708 73.4936 17.8193 73.456C18.3284 73.4138 18.7395 72.9641 18.7514 72.4462C18.7537 72.3478 18.7398 72.2472 18.7117 72.1486C18.3521 72.1486 17.9922 72.1347 17.635 72.0948V72.0925H17.6347Z' fill='%23464C2E'/%3E%3Cpath d='M16.8668 72.6941C16.9695 73.1041 17.3667 73.4977 17.8151 73.4604C17.8967 73.4534 17.9762 73.4347 18.0509 73.4089C17.9224 73.2825 17.8151 73.1301 17.7193 72.9803C17.5582 72.7319 17.4763 72.3852 17.5489 72.0876C17.3597 72.0642 17.1613 72.0361 16.9674 71.989C16.8506 72.1998 16.8063 72.4459 16.867 72.6943L16.8668 72.6941Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M4.35572 96.9119C5.68243 99.5854 7.1049 102.048 6.72187 103.351C6.56485 103.882 6.35944 104.419 6.42482 104.902C6.44387 104.876 6.46008 104.85 6.47913 104.825C6.86911 104.26 7.35254 103.749 7.87818 103.311C8.5109 102.781 9.26331 102.411 10.0621 102.21C10.7159 102.046 11.3818 102.06 12.0305 102.205C12.0707 102.043 12.1008 101.882 12.1219 101.72C12.2668 101.797 12.4117 101.868 12.552 101.936C12.2128 101.65 11.9417 101.289 11.5448 101.076C11.1296 100.855 10.6523 100.755 10.197 100.645C9.28829 100.422 8.43805 100.033 7.63234 99.5599C6.87091 99.1122 6.16765 98.5781 5.49066 98.0159C5.09089 97.6831 4.69191 97.3224 4.35547 96.917V96.9124L4.35572 96.9119Z' fill='%2334381B'/%3E%3Cpath d='M18.2079 81.7854C18.2126 81.6868 17.9534 82.753 18.4509 83.9176C18.549 84.1472 18.6775 84.3768 18.8759 84.5266C19.0744 84.6767 19.3617 84.7351 19.5789 84.611C19.8546 84.454 19.9177 84.0885 19.9223 83.7721C19.9269 83.4558 19.9107 83.1067 20.1069 82.8583C20.1537 82.7999 20.2096 82.7504 20.2727 82.7105C19.6232 82.3309 18.9367 82.0147 18.21 81.7851H18.2077L18.2079 81.7854Z' fill='%23464C2E'/%3E%3Cpath d='M0.570312 90.3932C0.951028 91.6162 1.70268 92.8886 2.96683 94.1749C3.02733 94.2359 3.09271 94.2663 3.15835 94.2756C3.15835 94.2756 2.60723 93.1018 2.1722 90.8617C1.73795 88.6217 1.78222 86.6208 1.78222 86.6208C1.78222 86.6208 0.791946 88.4508 0.570312 90.3953V90.393V90.3932Z' fill='%2334381B'/%3E%3Cpath opacity='0.32' d='M30.916 103.231C30.5703 103.36 30.15 103.13 29.8789 102.884C29.907 103.034 29.9489 103.203 30.012 103.383C30.3273 104.29 31.2221 104.669 31.1191 103.693C31.0983 103.501 31.07 103.325 31.0373 103.165C31.0023 103.189 30.9626 103.212 30.9158 103.229V103.231L30.916 103.231Z' fill='%23676D54'/%3E%3Cpath opacity='0.32' d='M26.967 100.196C26.584 100.484 25.9742 100.348 25.5469 100.142C25.6357 100.32 25.7502 100.512 25.8949 100.716C26.6167 101.735 27.8734 101.883 27.3897 100.7C27.2963 100.468 27.1982 100.259 27.0978 100.072C27.0628 100.117 27.0208 100.156 26.9693 100.196H26.9668H26.967Z' fill='%23676D54'/%3E%3Cpath opacity='0.3' d='M14.043 78.5471C14.2741 79.3765 15.407 79.5147 15.6382 78.9806C15.6358 79.0789 14.3302 81.3002 14.043 78.5471Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M13.5789 72.7898C13.5835 73.3942 14.3238 73.6941 14.5784 73.3757C14.5599 73.4413 13.2705 74.7065 13.5789 72.7898Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M15.7227 83.5935C16.0545 84.1675 16.9279 84.0527 16.9979 83.6077C17.0167 83.6803 16.4699 85.5944 15.7227 83.5935Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M8.59375 85.5378C8.92556 86.1119 9.79896 85.9971 9.86898 85.552C9.88777 85.6246 9.34102 87.5387 8.59375 85.5378Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M12.8164 87.4924C13.148 88.0665 14.0214 87.9517 14.0914 87.5066C14.1102 87.5792 13.5634 89.4936 12.8164 87.4924Z' fill='%23464C2E'/%3E%3Cpath d='M16.754 73.7485C16.8498 73.7554 16.9644 73.7297 17.0017 73.6406C17.0578 73.5116 16.9036 73.2869 16.8055 73.2164C16.6536 73.1085 16.3383 73.0782 16.2753 73.3031C16.2029 73.5562 16.5556 73.7294 16.754 73.7459V73.7485Z' fill='%23676D54'/%3E%3Cpath d='M17.4249 110.567C17.5976 110.647 17.7798 110.731 17.8944 110.884C18.0625 111.109 18.0439 111.418 18.0182 111.699C18.004 111.868 17.9878 112.034 17.9714 112.203C18.3008 111.912 18.567 111.549 18.7493 111.146C18.8615 110.898 18.7959 110.605 18.5951 110.422C18.455 110.295 18.3124 110.167 18.1724 110.04C17.9832 109.867 17.7894 109.691 17.5582 109.579C17.3271 109.466 17.0514 109.422 16.813 109.518C16.5749 109.614 16.3973 109.879 16.4511 110.129C16.7734 110.274 17.098 110.422 17.4226 110.567H17.4249Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M17.7768 110.096C17.3937 109.957 16.882 109.892 16.4501 109.976C16.4431 110.028 16.4431 110.077 16.4547 110.129C16.777 110.274 17.1016 110.422 17.4264 110.567C17.5992 110.646 17.7814 110.731 17.8959 110.883C18.064 111.108 18.0455 111.417 18.0198 111.699C18.0059 111.867 17.9894 112.034 17.9729 112.202C18.3021 111.912 18.5686 111.549 18.7508 111.146C18.8419 110.944 18.8162 110.71 18.6924 110.532C18.627 110.497 18.5593 110.466 18.5032 110.44C18.2602 110.326 18.029 110.19 17.7744 110.098L17.7768 110.096V110.096Z' fill='%2334381B'/%3E%3Cpath d='M5.17495 108.595C4.73091 108.565 4.7358 109.253 5.17495 109.284C5.59299 109.312 6.34953 109.061 6.66975 109.408C6.77246 109.521 6.89859 109.534 7.00619 109.495C7.26026 109.523 7.51304 109.162 7.29552 108.893C7.08496 108.633 6.71145 108.469 6.40796 108.356C6.09958 108.241 5.68592 108.129 5.39169 108.333C5.29182 108.403 5.24677 108.499 5.24033 108.597C5.21639 108.595 5.19323 108.595 5.17212 108.595H5.17495V108.595Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M5.37719 108.958C5.2907 109.052 5.2091 109.162 5.14062 109.279C5.15041 109.284 5.15967 109.284 5.17151 109.284C5.58955 109.312 6.34609 109.061 6.66632 109.408C6.76903 109.52 6.89515 109.534 7.00198 109.495C7.25682 109.523 7.50935 109.162 7.29183 108.892C7.16081 108.731 6.96749 108.607 6.76619 108.508C6.55151 108.489 6.334 108.492 6.12163 108.513C5.8184 108.543 5.57256 108.74 5.37409 108.96L5.37693 108.958L5.37719 108.958Z' fill='%2334381B'/%3E%3Cpath d='M20.7302 113.074C19.1885 108.323 5.03592 107.017 2.44093 110.886C2.12354 111.356 1.89702 111.935 2.13255 112.451C2.24942 112.708 2.45973 112.933 2.72795 113.022C2.99669 113.111 3.32129 113.043 3.49942 112.821C3.59234 112.704 3.63945 112.554 3.70483 112.415C4.48969 110.782 11.7374 109.006 18.7355 114.215C19.2681 114.613 20.1088 114.738 20.5479 114.238C20.8187 113.932 20.854 113.465 20.7279 113.076L20.7302 113.074V113.074Z' fill='%23676D54'/%3E%3Cpath opacity='0.5' d='M2.44093 110.883C2.12354 111.354 1.89702 111.933 2.13255 112.448C2.24942 112.706 2.45972 112.931 2.72794 113.02C2.99668 113.109 3.32129 113.041 3.49942 112.818C3.59234 112.701 3.63945 112.551 3.70483 112.413C4.48969 110.78 11.7374 109.004 18.7355 114.213C19.2681 114.611 20.1088 114.735 20.5479 114.236C20.819 113.929 20.854 113.463 20.7279 113.074C20.7044 113.004 20.681 112.938 20.6532 112.87C20.5786 112.987 20.4897 113.095 20.3845 113.186C20.0179 113.507 19.5108 113.554 19.0696 113.364C18.7589 113.231 18.4855 113.013 18.2312 112.793C17.9462 112.544 17.687 112.251 17.5213 111.907C17.2386 111.323 17.4162 110.646 17.9815 110.375C16.2998 109.517 14.0714 108.957 11.8147 108.73C11.8147 108.873 11.7732 109.018 11.6726 109.149C11.2898 109.653 10.5163 109.779 9.93476 109.857C9.24772 109.948 8.54756 109.993 7.87468 109.793C7.40516 109.653 6.89368 109.297 6.78376 108.821C4.78649 109.133 3.16555 109.81 2.44119 110.888V110.883L2.44093 110.883Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M16.8783 112.252C16.7498 111.765 16.6448 111.256 16.6564 110.75C16.6633 110.455 16.7218 110.115 16.9529 109.914C15.8666 109.485 14.631 109.157 13.3465 108.939C13.0523 109.225 12.8863 109.698 12.7926 110.059C12.7017 110.404 12.6554 110.76 12.6484 111.116V111.247C14.0941 111.622 15.6216 112.234 17.1609 113.159C17.0559 112.859 16.9599 112.557 16.8783 112.252Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M5.64801 110.164C5.59884 109.869 5.59163 109.395 5.72266 109.032C4.44949 109.339 3.40285 109.827 2.75391 110.504C2.93616 111.139 3.40568 111.664 3.94959 112.09C4.33237 111.706 5.04952 111.34 6.01946 111.089C5.81816 110.834 5.69743 110.466 5.64801 110.164Z' fill='%23474C2F'/%3E%3Cpath d='M4.8881 107.615C4.67985 107.936 4.47701 108.304 4.42578 108.672C4.62631 108.997 5.39289 109.039 5.44412 108.688C5.44824 108.667 5.46033 108.655 5.47654 108.653C5.52803 108.398 5.72933 108.185 5.92058 107.995L7.86586 106.069C7.90808 105.832 7.81953 105.565 7.6674 105.389C7.40355 105.085 6.91086 105.141 6.56747 105.295C5.96718 106.036 5.40396 106.811 4.8881 107.613V107.615Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M4.8881 107.615C4.68037 107.936 4.47701 108.304 4.42578 108.672C4.62631 108.998 5.39289 109.04 5.44412 108.689C5.44901 108.667 5.46033 108.656 5.47654 108.654C5.50743 108.494 5.59624 108.354 5.70307 108.225C5.6678 108.218 5.63331 108.208 5.60037 108.192C5.35042 108.075 5.3414 107.751 5.3414 107.517C5.34346 107.248 5.38568 107.002 5.46522 106.756C5.26882 107.037 5.07524 107.323 4.8881 107.613V107.615Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M6.56832 105.297C6.31837 105.604 6.07563 105.918 5.83984 106.239C5.98194 106.195 6.12712 106.16 6.26921 106.131C6.36291 106.113 6.51916 106.092 6.59638 106.166C6.66897 106.237 6.64992 106.321 6.61749 106.403C6.81107 106.258 7.1403 106.047 7.16861 106.399C7.17788 106.523 7.17067 106.649 7.15445 106.773L7.86672 106.068C7.90893 105.832 7.82038 105.564 7.66825 105.389C7.4044 105.084 6.91171 105.14 6.56832 105.295V105.297V105.297Z' fill='%2334381B'/%3E%3Cpath d='M4.3116 108.388C3.83718 108.529 2.05305 109.625 2.28189 110.542C2.38949 110.973 3.38697 112.99 4.30465 112.669C4.482 112.608 4.57571 112.404 4.5129 112.229L3.40087 110.978C3.26779 110.846 3.16019 110.701 3.07138 110.544C2.88707 110.221 4.44236 109.066 4.54018 109.038C4.96517 108.911 4.73453 108.262 4.30928 108.389H4.31134L4.3116 108.388Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M2.82052 109.368C2.44958 109.734 2.18573 110.153 2.28148 110.542C2.38857 110.973 3.38579 112.991 4.30424 112.67C4.4816 112.609 4.5753 112.405 4.51198 112.229L3.39995 110.978C3.26687 110.847 3.16004 110.702 3.07046 110.545C3.01486 110.449 3.11963 110.273 3.29493 110.076C3.28077 110.074 3.26455 110.072 3.25065 110.067C3.08462 110.018 2.97059 109.859 2.90237 109.709C2.86788 109.631 2.83055 109.5 2.81871 109.369H2.82077L2.82052 109.368Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M2.83984 111.669C3.23472 112.278 3.78146 112.852 4.30453 112.669C4.48189 112.608 4.57559 112.404 4.51226 112.229L3.40101 110.978C3.3328 110.91 3.2723 110.837 3.21592 110.762C3.23703 110.938 3.25609 111.116 3.18556 111.28C3.11296 111.449 2.98503 111.569 2.8401 111.669L2.83984 111.669Z' fill='%2334381B'/%3E%3Cpath d='M4.42796 108.469C3.68275 109.127 3.13857 110.153 3.14063 110.226C3.16174 110.697 3.8529 112.597 4.39475 112.564C4.56284 112.553 5.54693 112.046 5.12889 111.627C5.09801 111.597 5.05862 111.571 5.01898 111.554C5.00199 111.54 4.98371 111.526 4.96466 111.514C4.83647 111.44 4.69361 111.458 4.58678 111.54C4.43465 111.156 4.20606 110.793 4.09126 110.399C4.1031 110.376 4.11726 110.355 4.12652 110.329C4.20606 110.132 4.37365 109.97 4.50029 109.806C4.64239 109.624 4.75719 109.436 4.82257 109.211C4.84085 109.146 4.84085 109.085 4.82669 109.033C4.85475 109.007 4.88306 108.979 4.91318 108.953C5.24756 108.658 4.75899 108.173 4.42744 108.466V108.468L4.42796 108.469Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M3.2964 110.158C3.26603 110.132 3.23797 110.101 3.20991 110.066C3.1677 110.151 3.14453 110.209 3.14453 110.223C3.16564 110.694 3.8568 112.594 4.39865 112.562C4.56674 112.55 5.55084 112.044 5.13203 111.624C5.10165 111.594 5.06227 111.568 5.02211 111.552C5.00589 111.538 4.98761 111.524 4.96857 111.512C4.84037 111.437 4.69751 111.456 4.58992 111.538C4.43856 111.153 4.2092 110.79 4.09517 110.396C4.10649 110.373 4.12039 110.352 4.13043 110.326C4.13249 110.314 4.1397 110.305 4.14459 110.293C4.06916 110.319 3.98344 110.326 3.90802 110.333C3.6954 110.352 3.45549 110.298 3.29435 110.158H3.2964Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M4.16385 111.433C4.11674 111.674 4.01893 111.925 3.85547 112.11C4.03283 112.386 4.22203 112.574 4.3945 112.562C4.56259 112.55 5.54668 112.044 5.12864 111.625C5.09775 111.595 5.05837 111.569 5.01872 111.552C5.00174 111.538 4.98346 111.524 4.96441 111.512C4.83622 111.438 4.69336 111.456 4.58653 111.538C4.47893 111.269 4.33606 111.009 4.21997 110.741C4.2313 110.973 4.21019 111.205 4.16566 111.435L4.16385 111.433Z' fill='%2334381B'/%3E%3Cpath d='M4.4153 108.764C3.84307 110.746 4.71931 112.326 5.09513 112.455C5.62077 112.633 6.37242 111.646 6.68363 110.943C6.19532 111.032 5.75385 111.152 5.36825 111.288C5.35692 111.311 5.34714 111.332 5.33581 111.351C5.26116 110.981 5.2259 110.526 5.1183 110.133C5.0627 109.924 5.09513 109.702 5.21689 109.524C5.31676 109.376 5.42951 109.233 5.55256 109.1C5.8545 108.774 5.36824 108.284 5.06681 108.612C5.05265 108.626 5.04159 108.643 5.02743 108.657C4.8753 108.467 4.50668 108.458 4.41787 108.765H4.41504L4.4153 108.764Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M4.29121 110.077C4.2701 110.063 4.25183 110.049 4.23072 110.033C4.21656 111.385 4.80501 112.355 5.09717 112.453C5.62281 112.631 6.37446 111.645 6.68567 110.942C6.19736 111.031 5.7559 111.15 5.37029 111.286C5.35896 111.31 5.34918 111.331 5.33786 111.35C5.26321 110.979 5.22794 110.525 5.12034 110.131C5.11107 110.094 5.10412 110.056 5.09923 110.019C4.86138 110.197 4.58543 110.276 4.28915 110.077H4.29121Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M5.1987 111.404C5.1727 111.68 5.11221 112.062 4.95312 112.357C5.00461 112.407 5.05378 112.44 5.096 112.453C5.17065 112.477 5.24736 112.479 5.3269 112.463C5.36422 111.851 5.95318 111.136 6.53957 111.235C6.59517 111.134 6.64434 111.036 6.68655 110.942C6.19824 111.031 5.75678 111.15 5.37117 111.286C5.35984 111.31 5.35006 111.331 5.33874 111.35C5.26409 110.979 5.22882 110.525 5.12122 110.131C5.11195 110.094 5.105 110.056 5.10011 110.019C5.08389 110.03 5.06562 110.045 5.04657 110.056C5.10706 110.178 5.14439 110.314 5.17039 110.443C5.23577 110.757 5.23577 111.085 5.20565 111.404H5.1987V111.404Z' fill='%2334381B'/%3E%3Cpath d='M12.8386 108.714C12.453 108.775 11.9137 111.094 12.2424 111.558C12.4247 111.818 12.4345 111.696 12.9835 112.235C13.9198 113.156 14.2981 112.723 14.2819 112.439C14.2773 112.346 13.5975 111.551 13.294 111.202C13.2026 111.097 13.1653 110.961 13.1892 110.825C13.2237 110.631 13.2729 110.34 13.3128 110.12C13.3455 109.928 13.4739 109.766 13.6513 109.688C13.7308 109.653 13.8101 109.621 13.892 109.592C14.9314 109.243 17.1364 108.376 15.9193 108.175C15.0084 108.023 13.5136 108.604 12.8358 108.714H12.8386V108.714Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M12.2436 111.558C12.4259 111.819 12.4352 111.697 12.984 112.236C13.9204 113.156 14.2988 112.723 14.2824 112.439C14.2777 112.346 13.5979 111.551 13.2942 111.202C13.2033 111.097 13.166 110.961 13.1894 110.825C13.2247 110.631 13.2731 110.34 13.3132 110.12C13.3317 110.019 13.3763 109.925 13.4417 109.848C13.2851 109.815 13.1312 109.74 12.9981 109.637C12.7878 109.471 12.5984 109.234 12.6264 108.95C12.6285 108.943 12.6313 108.927 12.6313 108.927C12.292 109.52 11.97 111.174 12.2436 111.558Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M12.844 112.102C12.8862 112.142 12.9305 112.186 12.982 112.236C13.9184 113.156 14.2969 112.723 14.2806 112.439C14.276 112.353 13.6991 111.673 13.372 111.294C13.33 111.502 13.2389 111.701 13.1099 111.868C13.0381 111.959 12.9447 112.036 12.844 112.102Z' fill='%2334381B'/%3E%3Cpath d='M13.3458 110.082C13.3131 110.56 13.6799 112.564 14.2264 113.058C14.5651 113.363 15.8707 112.885 16.6579 112.873C16.0857 112.554 15.5158 112.275 14.9505 112.036C14.864 112.062 14.7754 112.008 14.7543 111.922C14.6797 111.608 14.5932 111.118 14.4998 110.75C14.4436 110.532 14.5232 110.302 14.7031 110.169C15.0069 109.942 15.3011 109.705 15.586 109.457C15.8056 109.937 16.6605 110.052 17.0085 109.972C19.2228 109.461 21.9349 107.372 22.033 107.381C22.1872 107.395 22.3529 107.4 22.4883 107.325C22.701 107.208 22.7733 106.936 22.7898 106.692C22.7898 106.673 22.8902 106.373 23.0232 105.935C22.9275 105.968 22.8248 105.987 22.7313 106.001C22.4744 106.041 22.1709 106.064 21.9115 106.02C21.7411 105.989 21.5843 105.931 21.4443 105.848C21.4208 105.893 21.3905 105.933 21.3462 105.961C20.809 106.312 17.5553 107.716 16.0182 108.013C15.7425 108.067 15.5253 108.217 15.446 108.407C15.1914 108.496 14.9533 108.677 14.7523 108.826C14.6261 108.92 13.3579 109.918 13.346 110.077V110.082L13.3458 110.082Z' fill='%23474C2F'/%3E%3Cpath opacity='0.25' d='M21.3462 105.966C20.8206 106.308 17.7118 107.653 16.1328 107.995C16.5019 108.058 16.8546 108.269 17.1326 108.498C17.5156 108.815 17.7633 109.246 17.8263 109.726C19.8375 108.988 21.9468 107.374 22.0333 107.381C22.1874 107.395 22.3532 107.4 22.4886 107.325C22.7012 107.208 22.7736 106.936 22.7901 106.692C22.7901 106.673 22.8904 106.373 23.0235 105.935C22.9278 105.968 22.8251 105.987 22.7316 106.001C22.4747 106.041 22.1712 106.064 21.9117 106.02C21.7413 105.989 21.5846 105.931 21.4445 105.848C21.4211 105.893 21.3907 105.933 21.3465 105.961L21.3462 105.966ZM20.3698 107.421C20.5148 107.634 20.2579 107.866 20.1199 108.007C19.8887 108.246 19.6457 108.473 19.3585 108.642C19.0012 108.852 18.214 109.035 18.0341 108.492C17.8168 107.835 20.0918 107.013 20.3698 107.421Z' fill='%2334381B'/%3E%3Cpath opacity='0.25' d='M20.399 108.295C20.5416 108.248 20.6863 108.203 20.8312 108.159C21.5226 107.718 21.9922 107.376 22.0318 107.381C22.186 107.395 22.3518 107.4 22.4874 107.325C22.7 107.208 22.7724 106.936 22.7888 106.692C22.7888 106.673 22.8892 106.373 23.0223 105.935C22.9266 105.968 22.8239 105.987 22.7304 106.001C22.4735 106.041 22.1698 106.064 21.9106 106.02C21.7401 105.989 21.5836 105.931 21.4433 105.848C21.4202 105.893 21.3895 105.933 21.3453 105.961C21.1141 106.111 20.3874 106.455 19.5117 106.821C19.6448 106.837 19.7781 106.856 19.9089 106.87C20.2384 106.907 20.6587 106.987 20.9648 106.826C20.9882 106.814 21.0163 106.828 21.0163 106.854C20.9882 107.385 20.7452 107.892 20.3995 108.292V108.295H20.399Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M13.3458 110.083C13.3131 110.561 13.6799 112.564 14.2264 113.058C14.5651 113.363 15.8707 112.885 16.6579 112.873C16.0857 112.555 15.5158 112.276 14.9505 112.037C14.864 112.062 14.7752 112.009 14.7543 111.922C14.6797 111.608 14.5932 111.118 14.4998 110.75C14.4436 110.533 14.5232 110.303 14.7031 110.169C14.7966 110.099 14.89 110.029 14.9811 109.956C14.9415 109.973 14.9042 109.989 14.8689 110.003C14.5559 110.13 14.2125 110.181 13.909 110.003C13.804 109.94 13.7244 109.841 13.6706 109.722C13.4861 109.888 13.353 110.026 13.3483 110.078L13.3458 110.083V110.083Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M14.1025 111.915C14.051 111.952 13.8994 112.048 13.7383 112.125C13.876 112.531 14.042 112.882 14.231 113.053C14.5697 113.358 15.8753 112.88 16.6625 112.868C16.0903 112.55 15.5204 112.271 14.9551 112.032C14.8686 112.057 14.7798 112.004 14.7589 111.917C14.7051 111.694 14.6467 111.385 14.5836 111.094C14.5136 111.418 14.3571 111.722 14.1 111.915H14.1023H14.1025Z' fill='%2334381B'/%3E%3Cpath d='M14.6866 110.874C14.7309 111.315 14.9296 111.537 15.17 111.926C15.2169 111.999 15.2588 112.071 15.3008 112.147C16.2818 114.34 16.4826 113.601 17.8397 113.588C17.5524 113.398 17.2651 113.22 16.9753 113.051C16.8211 113.016 16.6949 112.906 16.6319 112.758C16.4241 112.268 15.9451 111.134 15.9451 111.134C15.8424 110.89 15.847 110.616 15.9616 110.38C17.4214 107.383 14.5834 109.857 14.6863 110.874H14.6866Z' fill='%23474C2F'/%3E%3Cpath opacity='0.5' d='M14.9408 110.106C14.7727 110.383 14.6651 110.659 14.6862 110.873C14.7305 111.313 14.9292 111.536 15.1696 111.925C15.2165 111.997 15.2585 112.07 15.3004 112.145C16.2814 114.338 16.4822 113.6 17.8393 113.586C17.552 113.396 17.2647 113.218 16.9749 113.049C16.8207 113.014 16.6946 112.904 16.6315 112.756C16.4238 112.267 15.9447 111.133 15.9447 111.133C15.8678 110.95 15.8513 110.748 15.8981 110.558C15.8793 110.57 15.8608 110.584 15.8397 110.596C15.5686 110.751 15.279 110.631 15.0852 110.416C14.9964 110.32 14.9519 110.214 14.9403 110.109V110.106L14.9408 110.106Z' fill='%2334381B'/%3E%3Cpath opacity='0.5' d='M16.268 112.501C16.2049 112.756 16.0461 113.026 15.8242 113.155C16.4152 114.068 16.7633 113.6 17.8424 113.588C17.5551 113.398 17.2678 113.22 16.9779 113.051C16.8238 113.016 16.6976 112.906 16.6346 112.758C16.5481 112.555 16.4173 112.243 16.2912 111.946C16.31 112.131 16.31 112.318 16.2654 112.501H16.2677H16.268Z' fill='%2334381B'/%3E%3Cpath d='M20.9407 107.547C21.2092 107.449 21.4545 107.285 21.6486 107.074C21.6463 107.381 21.5294 107.688 21.3261 107.918C22.0548 107.854 22.73 107.454 23.2157 106.908C23.7015 106.362 24.0122 105.675 24.2106 104.97C24.4091 104.262 24.4979 103.531 24.5867 102.805L24.624 102.503C24.6287 102.477 24.631 102.449 24.6194 102.426C24.6101 102.402 24.5774 102.398 24.5656 102.377C23.6711 100.781 20.9124 100.446 19.0508 100.549C19.3777 102.194 19.9921 103.782 20.8563 105.218C20.9405 105.359 21.029 105.516 20.994 105.675C20.9682 105.788 20.8843 105.877 20.8025 105.959C20.5806 106.184 20.3564 106.409 20.1345 106.634C20.6413 106.561 21.1389 106.432 21.6154 106.247C21.3701 106.669 21.1459 107.102 20.9451 107.545L20.9405 107.548L20.9407 107.547Z' fill='%23676D54'/%3E%3Cpath opacity='0.3' d='M20.7981 105.961C20.5762 106.186 20.352 106.411 20.1301 106.636C20.637 106.563 21.1345 106.434 21.611 106.249C21.3657 106.671 21.1415 107.105 20.9407 107.547C21.2092 107.449 21.4545 107.285 21.6486 107.074C21.6463 107.381 21.5294 107.688 21.3261 107.918C22.0548 107.854 22.73 107.454 23.2157 106.908C23.7015 106.362 24.0122 105.675 24.2106 104.97C24.4091 104.262 24.4979 103.531 24.5867 102.805L24.624 102.503C24.6287 102.477 24.631 102.449 24.6194 102.426C24.6101 102.402 24.5774 102.398 24.5656 102.377C23.6711 100.781 20.9124 100.446 19.0508 100.549C19.3777 102.194 19.9921 103.782 20.8563 105.218C20.9405 105.359 21.029 105.516 20.994 105.675C20.9682 105.788 20.8843 105.877 20.8025 105.959L20.7978 105.961L20.7981 105.961ZM21.0293 102.847C20.8985 101.153 23.956 100.762 23.8791 103.475C23.8652 103.993 23.6714 104.661 23.1153 104.825C22.6296 104.967 22.1086 104.64 21.7698 104.321C21.368 103.944 21.0692 103.4 21.0269 102.847H21.0293Z' fill='%23464C2E'/%3E%3Cpath opacity='0.3' d='M20.7973 105.959C20.5754 106.184 20.3512 106.409 20.1293 106.634C20.6362 106.561 21.1338 106.432 21.6102 106.247C21.3649 106.669 21.1407 107.102 20.9399 107.545C21.2084 107.446 21.4537 107.282 21.6478 107.072C21.6455 107.378 21.5286 107.686 21.3253 107.915C21.7364 107.88 22.1266 107.737 22.4793 107.524C22.4023 107.444 22.3367 107.351 22.2947 107.238C22.1874 106.955 22.2947 106.648 22.4793 106.43C22.5261 106.374 22.6054 106.292 22.5024 106.219C22.4721 106.198 22.4394 106.181 22.409 106.161C22.367 106.133 22.3506 106.095 22.3343 106.05C22.3132 105.987 22.3109 105.912 22.3835 105.889C22.4582 105.863 22.5704 105.929 22.6381 105.952C22.7431 105.987 22.895 105.971 22.783 105.842C22.6219 105.657 22.3531 105.544 22.1408 105.437C21.9377 105.334 21.725 105.242 21.5312 105.118C21.1786 104.891 20.9098 104.542 20.7067 104.178C20.3587 103.555 20.151 102.819 20.0341 102.121C19.9476 101.598 19.8333 101.064 19.8449 100.533C19.5669 100.53 19.3007 100.535 19.0508 100.549C19.378 102.194 19.9921 103.782 20.8563 105.219C20.9405 105.359 21.029 105.516 20.994 105.676C20.9683 105.788 20.8843 105.877 20.8025 105.959H20.7978L20.7973 105.959Z' fill='%23464C2E'/%3E%3Cpath d='M6.47153 104.911C6.47153 104.911 6.46175 105.066 6.21875 105.755C6.83809 105.604 7.06899 105.462 7.06899 105.462C7.01982 105.616 6.98533 105.778 6.96834 105.942C7.19486 105.816 7.44069 105.724 7.69527 105.672C7.69244 105.883 7.65718 106.094 7.58973 106.293C7.86079 106.197 7.81626 106.216 8.40265 106.164C8.35349 106.096 7.32872 103.861 6.47153 104.908V104.911V104.911Z' fill='%23464C2E'/%3E%3Cpath d='M48.7442 82.6167C50.1789 85.1536 46.7749 84.2079 45.9646 82.8503C44.564 81.3845 43.5846 79.6134 42.7497 77.7821C45.3981 78.3124 47.3765 80.3988 48.7442 82.617L48.7442 82.6167Z' fill='%23EFE9E6'/%3E%3Cpath d='M51.2158 77.8669C49.3478 79.7572 45.9575 79.076 43.6124 78.4048C44.0933 77.2623 52.2173 75.4692 51.2158 77.8669Z' fill='%23EFE9E6'/%3E%3Cpath d='M43.8052 78.7689C51.6819 88.8484 40.2664 88.5247 42.4436 77.7491C42.955 78.0046 43.4164 78.3502 43.8052 78.7689Z' fill='white'/%3E%3Cpath d='M51.5682 74.6999C50.983 78.0725 43.9542 78.0145 42.4419 77.7418C44.4667 76.0839 49.4554 71.4763 51.5682 74.6999Z' fill='white'/%3E%3Cpath d='M51.3543 80.481C50.9968 84.4565 43.6857 79.4365 42.4429 77.7416C44.0502 77.5713 50.0705 77.8061 51.3543 80.481Z' fill='white'/%3E%3Cpath d='M18.3828 77.182C18.2177 77.1853 18.0887 77.3203 18.0918 77.4836L18.0928 77.4983C18.1031 77.6556 18.234 77.7794 18.3934 77.7746C23.6239 76.1967 34.3033 76.2593 35.7102 76.4346C36.1341 76.486 36.5459 76.5494 36.9546 76.6222L36.9581 76.6217C38.058 76.8188 39.1206 77.0881 40.2323 77.4385L40.2344 77.4403C41.4884 77.8331 42.8043 78.3299 44.3053 78.9345C44.4562 78.9963 44.6295 78.9227 44.6913 78.7699C44.7531 78.619 44.6795 78.4457 44.5268 78.3839C42.7524 77.6685 41.2132 77.0996 39.7143 76.6678C39.1772 76.5136 38.6449 76.3753 38.1082 76.2558L38.1064 76.256C37.8547 76.1988 37.6015 76.1472 37.347 76.0995C35.4523 75.7371 25.4258 75.6819 18.3826 77.1826L18.3828 77.182Z' fill='%2374A352'/%3E%3Cpath d='M39.7169 76.6673L40.2352 77.4382L40.2373 77.44C41.4913 77.8328 42.8072 78.3296 44.3082 78.9342C44.4591 78.9959 44.6324 78.9224 44.6942 78.7696C44.756 78.6187 44.6824 78.4454 44.5297 78.3836C42.7554 77.6681 41.2162 77.0993 39.7172 76.6675L39.7169 76.6673Z' fill='%23568040'/%3E%3Cpath d='M41.4437 77.4778C40.5858 79.289 41.3223 80.3138 41.4345 81.3369C41.7147 83.058 42.2988 82.2635 42.633 81.1546C42.8416 80.4634 42.9543 79.6498 42.8367 79.2498C44.2719 80.3984 45.3859 79.7073 45.3886 78.8405C45.3921 78.2691 44.9092 77.6191 43.7144 77.373C44.1371 77.0353 44.5738 76.6637 44.917 76.2338C45.2433 75.8289 45.489 75.3685 45.5611 74.8368C45.7126 73.8848 41.6921 76.235 41.4437 77.4778Z' fill='%2374A352'/%3E%3Cpath d='M41.4437 77.4778C40.5858 79.289 41.3223 80.3138 41.4345 81.3369C41.7147 83.058 42.2988 82.2635 42.633 81.1546C42.1527 80.631 41.4105 79.5166 41.9926 78.0411C42.8129 75.9586 44.917 76.2338 44.917 76.2338C45.2433 75.8289 45.489 75.3685 45.5611 74.8368C45.7126 73.8848 41.6921 76.235 41.4437 77.4778Z' fill='%23568040'/%3E%3Cpath d='M43.7154 77.373C41.485 77.5027 41.4683 79.0023 41.4683 79.0023C42.6419 77.2736 45.3879 78.8423 45.3879 78.8423L45.3898 78.8405C45.3933 78.2691 44.9101 77.6192 43.7154 77.373Z' fill='%23568040'/%3E%3Cpath d='M31.053 76.4525L28.7518 76.8592L27.5625 76.1308L30.062 74.9441C30.3426 75.3482 30.6077 75.7549 30.86 76.1514C30.9243 76.2517 30.9887 76.3521 31.053 76.4525Z' fill='%23464C2E'/%3E%3Cpath opacity='0.4' d='M31.0129 77.2677C31.1717 77.338 31.382 77.3568 31.5409 77.2608C31.5128 77.207 31.4848 77.1529 31.4544 77.0968C31.0222 76.408 30.5364 75.6254 30.0085 74.864C29.9243 74.9904 29.8589 75.1217 29.8239 75.2272C29.5251 76.1503 30.6345 77.1017 31.0152 77.2703L31.0129 77.268V77.2677Z' fill='%23676D54'/%3E%3Cpath d='M31.2545 77.9331C30.1051 77.3964 29.0448 76.6703 27.9516 76.0306C27.314 75.6558 26.6671 75.2949 26.0035 74.9716C25.6742 74.8122 25.3352 74.6763 25.0037 74.5239C24.6533 74.3646 24.3007 74.3319 23.9153 74.2779C23.7426 74.2544 23.5673 74.2287 23.392 74.2264C23.0767 74.2217 22.7475 74.2874 22.453 74.1703C22.2591 74.0953 22.1026 73.9453 21.9134 73.8634C21.7242 73.7813 21.4604 73.7908 21.3554 73.969C21.2503 74.1448 21.3716 74.3837 21.5538 74.4797C21.7337 74.5734 21.951 74.5641 22.1541 74.5523C23.6443 74.4655 25.109 74.9739 26.438 75.6182C27.1806 75.9765 27.9047 76.3796 28.6265 76.7781C29.2106 77.1014 29.9018 77.6263 30.5558 77.788C30.8243 77.8536 31.0604 77.9051 31.2519 77.9357L31.2542 77.9334L31.2545 77.9331Z' fill='%2334381B'/%3E%3Cpath d='M205.889 34.9968C207.105 33.8863 207.831 32.3032 207.184 30.8619C206.821 30.0114 206.086 29.3813 205.242 28.9087C202.565 27.3178 198.996 27.3178 195.964 28.2078C192.924 29.1293 190.248 30.8304 187.619 32.5631C190.335 30.3815 193.09 28.0975 194.551 25.0653C195.972 22.041 195.601 18.0479 192.766 16.0553C190.177 14.2438 186.529 14.5825 183.363 15.315C176.96 16.7877 170.959 19.5994 165.851 23.4035C162.526 25.8765 156.005 30.6729 155.27 34.9968H205.889Z' fill='%23EAEAEA'/%3E%3Cpath d='M191.787 30.0116C190.777 31.4528 194.219 32.0435 195.191 32.0829C197.417 32.1932 199.691 31.4213 201.554 30.3817C202.565 29.8304 203.457 29.1295 204.191 28.3497C201.681 27.318 198.641 27.3889 195.964 28.2001C194.504 28.6412 193.13 29.2318 191.835 29.9722C191.835 29.9722 191.835 30.0116 191.795 30.0116H191.787Z' fill='white'/%3E%3Cpath d='M167.469 30.7913C173.588 31.1615 181.247 31.1615 186.15 27.2866C189.032 24.9947 191.377 21.0095 189.64 17.5756C189.111 16.5439 188.306 15.5436 187.327 14.7324C185.992 14.7718 184.65 15.0238 183.355 15.3231C176.952 16.7959 170.951 19.6076 165.843 23.4116C163.9 24.8529 160.813 27.1369 158.468 29.6493C161.39 30.3109 164.469 30.6496 167.469 30.7913Z' fill='%23F3F3F3'/%3E%3Cpath d='M299.862 63.6023C301.078 62.4918 301.804 60.9087 301.156 59.4674C300.793 58.6168 300.059 57.9868 299.214 57.5142C296.538 55.9233 292.969 55.9233 289.937 56.8132C286.897 57.7347 284.22 59.4359 281.591 61.1686C284.307 58.987 287.063 56.703 288.524 53.6708C289.945 50.6464 289.574 46.6534 286.739 44.6608C284.149 42.8493 280.502 43.188 277.335 43.9204C270.932 45.3932 264.932 48.2049 259.823 52.009C256.499 54.482 249.977 59.2784 249.243 63.6023H299.862Z' fill='%23EAEAEA'/%3E%3Cpath d='M285.76 58.617C284.75 60.0583 288.192 60.649 289.163 60.6884C291.39 60.7986 293.664 60.0268 295.527 58.9872C296.538 58.4359 297.43 57.7349 298.164 56.9552C295.653 55.9235 292.614 55.9944 289.937 56.8056C288.476 57.2466 287.102 57.8373 285.808 58.5776C285.808 58.5776 285.808 58.617 285.768 58.617H285.76Z' fill='white'/%3E%3Cpath d='M261.442 59.3968C267.561 59.767 275.22 59.767 280.123 55.8921C283.005 53.6002 285.35 49.615 283.613 46.1811C283.084 45.1493 282.278 44.1491 281.299 43.3379C279.965 43.3773 278.623 43.6293 277.328 43.9286C270.925 45.4014 264.924 48.2131 259.815 52.0171C257.873 53.4584 254.786 55.7424 252.441 58.2548C255.362 58.9164 258.442 59.2551 261.442 59.3968Z' fill='%23F3F3F3'/%3E%3C/g%3E%3Cdefs%3E%3CclipPath id='clip0_647_16511'%3E%3Crect width='320' height='194' fill='white'/%3E%3C/clipPath%3E%3C/defs%3E%3C/svg%3E\");\n    animation: notify-show 0.3s ease-in;\n    transition: 0.3s ease transform;\n    box-shadow: 4px 4px 12px 0px rgba(0,0,0,0.14902);\n    padding: 0 20px;\n    display: flex;\n}\n\n.promo-notification__close {\n        position: absolute;\n        top: 8px;\n        right: 8px;\n        cursor: pointer;\n        padding: 0;\n    }\n\n.promo-notification__content {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        margin-left: auto;\n    }\n\n.promo-notification__title {\n        white-space: pre-wrap;\n        text-align: center;\n        font-weight: 700;\n        line-height: 29px;\n        font-size: 24px;\n        letter-spacing: 0px;\n        color: #4D4D4D;\n        max-width: 200px;\n    }\n\n.promo-notification__btn {\n        color: #fff;\n        font-weight: 400;\n        font-size: 16px;\n        line-height: 24px;\n        background-color: #67B279;\n        padding: 12px 24px;\n        min-width: 128px;\n        border: none;\n        border-radius: 8px;\n        margin-top: 24px;\n        letter-spacing: 0px;\n        text-align: center;\n    }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 18572:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".chart .tick text {\n        fill: var(--gray700);\n    }\n\n        @media (color-index: 48) {.chart .tick text {\n            fill: var(--gray300)\n    }\n        }\n\n        @media (color: 48842621) {.chart .tick text {\n            fill: var(--gray300)\n    }\n        }\n\n        @media (prefers-color-scheme: dark) {.chart .tick text {\n            fill: var(--gray300)\n    }\n        }\n    .chart .c3-line-data1 {\n        stroke-width: 4px;\n    }\n    .chart .c3-axis line,\n        .chart .c3-axis path {\n            stroke: rgba(0, 0, 0, 0);\n        }\n    .chart__tooltip {\n        font-size: 13px;\n        position: relative;\n        padding: 10px 20px;\n        font-weight: 500;\n        color: #fff;\n        border-radius: 8px;\n        background-color: var(--gray400);\n        filter: drop-shadow(0 2px 2px rgba(0, 0, 0, 0.3));\n    }\n    .chart__tooltip:before {\n        content: \"\";\n        top: 99%;\n        left: 50%;\n        height: 0;\n        width: 0;\n        position: absolute;\n        pointer-events: none;\n        border: solid transparent;\n        border-color: rgba(255, 255, 255, 0);\n        border-top-color: var(--gray400);\n        border-width: 8px;\n        margin-left: -8px;\n    }\n\n\n.light-mode .tick text {\n        fill: var(--gray700);\n    }\n\n.dark-mode .tick text {\n        fill: var(--gray300);\n    }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 95191:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".stats-chart {\n    height: 100%;\n}\n\n    .stats-chart__filters {\n        padding: 10px 10px 27px 10px;\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .stats-chart__select {\n        position: relative;\n        width: 150px;\n        display: inline-block;\n    }\n\n    .stats-chart__select--left .stats-chart__icon {\n                left: 6px\n            }\n\n    .stats-chart__select--left .stats-chart__select-in {\n                text-overflow: ellipsis;\n                padding: 0 10px 0 30px;\n            }\n\n    .stats-chart__select-in {\n        width: 100%;\n        height: 33px;\n        padding: 0 25px 0 10px;\n        font-weight: 500;\n        font-size: 12px;\n        color: var(--gray900);\n        border: 0;\n        background-color: transparent;\n        -webkit-appearance: none;\n           -moz-appearance: none;\n                appearance: none;\n        cursor: pointer;\n    }\n\n    .stats-chart__select-in option {\n            color: var(--gray900);\n        }\n\n    @media (color-index: 48) {\n\n    .stats-chart__select-in {\n            color: var(--gray300)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .stats-chart__select-in {\n            color: var(--gray300)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .stats-chart__select-in {\n            color: var(--gray300)\n    }\n        }\n\n    .stats-chart__icon {\n        pointer-events: none;\n        position: absolute;\n        right: 6px;\n        top: 13px;\n    }\n\n.light-mode .stats-chart__select-in {\n        color: var(--gray900);\n    }\n\n.dark-mode .stats-chart__select-in {\n        color: var(--gray300);\n    }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 66680:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".stats {\n    padding: 24px 20px 9px;\n}\n\n    .stats__list {\n        font-size: 13px;\n    }\n\n    .stats__item {\n        padding: 0;\n        list-style: none;\n        margin: 0 0 15px;\n        display: flex;\n    }\n\n    .stats__name {\n        outline: none;\n        color: rgba(34, 34, 34, 0.58);\n    }\n\n    @media (color-index: 48) {\n\n    .stats__name {\n            color: var(--gray300)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .stats__name {\n            color: var(--gray300)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .stats__name {\n            color: var(--gray300)\n    }\n        }\n\n    .stats__value {\n        outline: none;\n        margin-left: auto;\n        font-weight: 600;\n        color: var(--gray900);\n    }\n\n    @media (color-index: 48) {\n\n    .stats__value {\n            color: var(--grayd8)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .stats__value {\n            color: var(--grayd8)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .stats__value {\n            color: var(--grayd8)\n    }\n        }\n\n.light-mode .stats__name {\n            color: rgba(34, 34, 34, 0.58);\n        }\n\n.light-mode .stats__value {\n            color: var(--gray900);\n        }\n\n.dark-mode .stats__name {\n            color: var(--gray300);\n        }\n\n.dark-mode .stats__value {\n            color: var(--grayd8);\n        }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 95255:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".tabs__panel {\n        display: flex;\n        max-width: 288px;\n        padding: 4px;\n        border-radius: 12px;\n        margin: 0 auto;\n        background-color: var(--gray100);\n        overflow: hidden;\n    }\n\n        @media (color-index: 48) {.tabs__panel {\n            background: var(--gray900)\n    }\n        }\n\n        @media (color: 48842621) {.tabs__panel {\n            background: var(--gray900)\n    }\n        }\n\n        @media (prefers-color-scheme: dark) {.tabs__panel {\n            background: var(--gray900)\n    }\n        }\n    .tabs__content {\n        height: 168px;\n        overflow: auto;\n        scrollbar-width: thin;\n    }\n    .tabs__content::-webkit-scrollbar {\n            width: 12px;\n        }\n    .tabs__content::-webkit-scrollbar-track {\n            background: var(--gray100);\n        }\n    @media (color-index: 48) {\n    .tabs__content::-webkit-scrollbar-track {\n                background: var(--grayDark)\n        }\n            }\n    @media (color: 48842621) {\n    .tabs__content::-webkit-scrollbar-track {\n                background: var(--grayDark)\n        }\n            }\n    @media (prefers-color-scheme: dark) {\n    .tabs__content::-webkit-scrollbar-track {\n                background: var(--grayDark)\n        }\n            }\n    .tabs__content::-webkit-scrollbar-thumb {\n            background-color: var(--gray300);\n            border-radius: 20px;\n            border: 3px solid var(--gray100);\n        }\n    @media (color-index: 48) {\n    .tabs__content::-webkit-scrollbar-thumb {\n                background-color: var(--gray700);\n                border: 3px solid var(--grayDark)\n        }\n            }\n    @media (color: 48842621) {\n    .tabs__content::-webkit-scrollbar-thumb {\n                background-color: var(--gray700);\n                border: 3px solid var(--grayDark)\n        }\n            }\n    @media (prefers-color-scheme: dark) {\n    .tabs__content::-webkit-scrollbar-thumb {\n                background-color: var(--gray700);\n                border: 3px solid var(--grayDark)\n        }\n            }\n    @media (color-index: 48) {\n    .tabs__content {\n            background-color: var(--black)\n    }\n        }\n    @media (color: 48842621) {\n    .tabs__content {\n            background-color: var(--black)\n    }\n        }\n    @media (prefers-color-scheme: dark) {\n    .tabs__content {\n            background-color: var(--black)\n    }\n        }\n    .tabs__tab {\n        font-size: 16px;\n        width: 50%;\n        padding: 6px 5px;\n        line-height: 20px;\n        border: 0;\n        color: var(--gray700);\n        cursor: pointer;\n        text-align: center;\n        transition: var(--t3) color;\n    }\n    .tabs__tab:hover {\n            color: var(--gray900);\n        }\n    @media (color-index: 48) {\n    .tabs__tab:hover {\n                color: var(--gray100)\n        }\n            }\n    @media (color: 48842621) {\n    .tabs__tab:hover {\n                color: var(--gray100)\n        }\n            }\n    @media (prefers-color-scheme: dark) {\n    .tabs__tab:hover {\n                color: var(--gray100)\n        }\n            }\n    @media (color-index: 48) {\n    .tabs__tab {\n            color: var(--gray400)\n    }\n        }\n    @media (color: 48842621) {\n    .tabs__tab {\n            color: var(--gray400)\n    }\n        }\n    @media (prefers-color-scheme: dark) {\n    .tabs__tab {\n            color: var(--gray400)\n    }\n        }\n    .tabs__tab_active {\n            border-radius: 8px;\n            background-color: var(--white);\n            color: var(--gray900);\n            box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.12), 0px 3px 1px rgba(0, 0, 0, 0.04);\n        }\n    @media (color-index: 48) {\n    .tabs__tab_active {\n                background-color: var(--black);\n                color: var(--gray300)\n        }\n            }\n    @media (color: 48842621) {\n    .tabs__tab_active {\n                background-color: var(--black);\n                color: var(--gray300)\n        }\n            }\n    @media (prefers-color-scheme: dark) {\n    .tabs__tab_active {\n                background-color: var(--black);\n                color: var(--gray300)\n        }\n            }\n\n.light-mode .tabs__panel {\n            background-color: var(--gray100);\n        }\n\n.light-mode .tabs__content {\n            background-color: var(--white);\n        }\n\n.light-mode .tabs__content::-webkit-scrollbar-track {\n                background: var(--gray100);\n            }\n\n.light-mode .tabs__content::-webkit-scrollbar-thumb {\n                background-color: var(--gray300);\n                border-radius: 20px;\n                border: 3px solid var(--gray100);\n            }\n\n.light-mode .tabs__tab {\n            color: var(--gray700);\n        }\n\n.light-mode .tabs__tab:hover {\n                color: var(--gray900);\n            }\n\n.light-mode .tabs__tab_active {\n                background-color: var(--white);\n                color: var(--gray900);\n            }\n\n.dark-mode .tabs__panel {\n            background: var(--gray900);\n        }\n\n.dark-mode .tabs__content {\n            background-color: var(--black);\n        }\n\n.dark-mode .tabs__content::-webkit-scrollbar-track {\n                background: var(--grayDark);\n            }\n\n.dark-mode .tabs__content::-webkit-scrollbar-thumb {\n                background-color: var(--gray700);\n                border-radius: 20px;\n                border: 3px solid var(--grayDark);\n            }\n\n.dark-mode .tabs__tab {\n            color: var(--gray400);\n        }\n\n.dark-mode .tabs__tab:hover {\n                color: var(--gray100);\n            }\n\n.dark-mode .tabs__tab_active {\n                background-color: var(--black);\n                color: var(--gray300);\n            }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 80493:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".icon {\n    display: inline-block;\n    vertical-align: middle;\n    flex-shrink: 0;\n}\n\n    .icon--button {\n        width: 24px;\n        height: 24px;\n    }\n\n    .icon--update-filters {\n        width: 22px;\n        height: 22px;\n    }\n\n    .icon--settings {\n        width: 22px;\n        height: 22px;\n    }\n\n    .icon--pause {\n        width: 22px;\n        height: 22px;\n    }\n\n    .icon--logo {\n        width: 113px;\n        height: 25px;\n        color: #232323;\n    }\n\n    @media (color-index: 48) {\n\n    .icon--logo {\n            color: var(--gray300)\n    }\n        }\n\n    @media (color: 48842621) {\n\n    .icon--logo {\n            color: var(--gray300)\n    }\n        }\n\n    @media (prefers-color-scheme: dark) {\n\n    .icon--logo {\n            color: var(--gray300)\n    }\n        }\n\n    .icon--action {\n        width: 17px;\n        height: 17px;\n    }\n\n    .icon--cross {\n        width: 15px;\n        height: 15px;\n    }\n\n    .icon--play {\n        width: 24px;\n        height: 24px;\n    }\n\n    .icon--circle {\n        width: 24px;\n        height: 24px;\n    }\n\n    .icon--checkmark {\n        width: 24px;\n        height: 24px;\n    }\n\n    .icon--exclamation {\n        width: 4px;\n        height: 24px;\n    }\n\n    .icon--select {\n        width: 14px;\n        height: 8px;\n    }\n\n.light-mode .icon--logo {\n            color: #232323;\n        }\n\n.dark-mode .icon--logo {\n            color: var(--gray300);\n        }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 41657:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "button {\n    cursor: pointer;\n    text-decoration: none;\n    display: inline-block;\n    border: none;\n    background-color: transparent;\n    border-radius: 0;\n}\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 37153:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "*,\n*:before,\n*:after {\n    box-sizing: border-box;\n}\n\n:root {\n    color-scheme: light dark;\n}\n\nhtml,\nbody,\n#root {\n    height: 100%;\n    min-height: 100%;\n    width: auto;\n    min-width: 320px;\n    background-color: var(--width);\n}\n\n@media (color-index: 48) {\n\nhtml,\nbody,\n#root {\n        background-color: var(--black)\n}\n    }\n\n@media (color: 48842621) {\n\nhtml,\nbody,\n#root {\n        background-color: var(--black)\n}\n    }\n\n@media (prefers-color-scheme: dark) {\n\nhtml,\nbody,\n#root {\n        background-color: var(--black)\n}\n    }\n\nhtml {\n    font-size: 10px;\n    background-color: var(--width);\n}\n\n@media (color-index: 48) {\n\nhtml {\n        background-color: var(--black)\n}\n    }\n\n@media (color: 48842621) {\n\nhtml {\n        background-color: var(--black)\n}\n    }\n\n@media (prefers-color-scheme: dark) {\n\nhtml {\n        background-color: var(--black)\n}\n    }\n\nbody {\n    margin: 0;\n    font-size: 1.6rem;\n    line-height: 1.4;\n    font-family: 'Roboto Flex', 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Ubuntu, Arial, sans-serif;\n    font-optical-sizing: none;\n}\n\nul {\n    margin: 0;\n    padding: 0;\n}\n\n.hidden {\n    display: none;\n}\n\na {\n    color: currentColor;\n}\n\na.focus-visible {\n        outline: 2px solid var(--outline);\n    }\n\na:focus-visible {\n        outline: 2px solid var(--outline);\n    }\n\nbutton,\ninput,\ntextarea,\nselect {\n    font-family: inherit;\n}\n\nbutton.focus-visible, input.focus-visible, textarea.focus-visible, select.focus-visible {\n        outline: 2px solid var(--outline);\n    }\n\nbutton:focus-visible, input:focus-visible, textarea:focus-visible, select:focus-visible {\n        outline: 2px solid var(--outline);\n    }\n\n.light-mode {\n    color-scheme: light;\n    background-color: var(--width);\n}\n\n.light-mode body,\n    .light-mode #root {\n        background-color: var(--width);\n    }\n\n.dark-mode {\n    color-scheme: dark;\n    background-color: var(--black);\n}\n\n.dark-mode body,\n    .dark-mode #root {\n        background-color: var(--black);\n    }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 65201:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_common_styles_fonts_pcss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(84381);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_common_styles_vars_pcss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(26834);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_buttons_pcss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(41657);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_common_pcss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(37153);
// Imports






var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_common_styles_fonts_pcss__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z);
___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_common_styles_vars_pcss__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z);
___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_buttons_pcss__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z);
___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_3_use_1_node_modules_postcss_loader_dist_cjs_js_common_pcss__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 25460:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91389);
/* harmony import */ var _css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59633);
/* harmony import */ var _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/*-- Chart --*/\n.c3 svg {\n  font: 10px sans-serif;\n  -webkit-tap-highlight-color: transparent; }\n\n.c3 path, .c3 line {\n  fill: none;\n  stroke: #000; }\n\n.c3 text {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none; }\n\n.c3-legend-item-tile,\n.c3-xgrid-focus,\n.c3-ygrid,\n.c3-event-rect,\n.c3-bars path {\n  shape-rendering: crispEdges; }\n\n.c3-chart-arc path {\n  stroke: #fff; }\n\n.c3-chart-arc text {\n  fill: #fff;\n  font-size: 13px; }\n\n/*-- Axis --*/\n/*-- Grid --*/\n.c3-grid line {\n  stroke: #aaa; }\n\n.c3-grid text {\n  fill: #aaa; }\n\n.c3-xgrid, .c3-ygrid {\n  stroke-dasharray: 3 3; }\n\n/*-- Text on Chart --*/\n.c3-text.c3-empty {\n  fill: #808080;\n  font-size: 2em; }\n\n/*-- Line --*/\n.c3-line {\n  stroke-width: 1px; }\n\n/*-- Point --*/\n.c3-circle._expanded_ {\n  stroke-width: 1px;\n  stroke: white; }\n\n.c3-selected-circle {\n  fill: white;\n  stroke-width: 2px; }\n\n/*-- Bar --*/\n.c3-bar {\n  stroke-width: 0; }\n\n.c3-bar._expanded_ {\n  fill-opacity: 1;\n  fill-opacity: 0.75; }\n\n/*-- Focus --*/\n.c3-target.c3-focused {\n  opacity: 1; }\n\n.c3-target.c3-focused path.c3-line, .c3-target.c3-focused path.c3-step {\n  stroke-width: 2px; }\n\n.c3-target.c3-defocused {\n  opacity: 0.3 !important; }\n\n/*-- Region --*/\n.c3-region {\n  fill: steelblue;\n  fill-opacity: .1; }\n\n/*-- Brush --*/\n.c3-brush .extent {\n  fill-opacity: .1; }\n\n/*-- Select - Drag --*/\n/*-- Legend --*/\n.c3-legend-item {\n  font-size: 12px; }\n\n.c3-legend-item-hidden {\n  opacity: 0.15; }\n\n.c3-legend-background {\n  opacity: 0.75;\n  fill: white;\n  stroke: lightgray;\n  stroke-width: 1; }\n\n/*-- Title --*/\n.c3-title {\n  font: 14px sans-serif; }\n\n/*-- Tooltip --*/\n.c3-tooltip-container {\n  z-index: 10; }\n\n.c3-tooltip {\n  border-collapse: collapse;\n  border-spacing: 0;\n  background-color: #fff;\n  empty-cells: show;\n  box-shadow: 7px 7px 12px -9px #777777;\n  opacity: 0.9; }\n\n.c3-tooltip tr {\n  border: 1px solid #CCC; }\n\n.c3-tooltip th {\n  background-color: #aaa;\n  font-size: 14px;\n  padding: 2px 5px;\n  text-align: left;\n  color: #FFF; }\n\n.c3-tooltip td {\n  font-size: 13px;\n  padding: 3px 6px;\n  background-color: #fff;\n  border-left: 1px dotted #999; }\n\n.c3-tooltip td > span {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  margin-right: 6px; }\n\n.c3-tooltip td.value {\n  text-align: right; }\n\n/*-- Area --*/\n.c3-area {\n  stroke-width: 0;\n  opacity: 0.2; }\n\n/*-- Arc --*/\n.c3-chart-arcs-title {\n  dominant-baseline: middle;\n  font-size: 1.3em; }\n\n.c3-chart-arcs .c3-chart-arcs-background {\n  fill: #e0e0e0;\n  stroke: none; }\n\n.c3-chart-arcs .c3-chart-arcs-gauge-unit {\n  fill: #000;\n  font-size: 16px; }\n\n.c3-chart-arcs .c3-chart-arcs-gauge-max {\n  fill: #777; }\n\n.c3-chart-arcs .c3-chart-arcs-gauge-min {\n  fill: #777; }\n\n.c3-chart-arc .c3-gauge-value {\n  fill: #000;\n  /*  font-size: 28px !important;*/ }\n\n.c3-chart-arc.c3-target g path {\n  opacity: 1; }\n\n.c3-chart-arc.c3-target.c3-focused g path {\n  opacity: 1; }\n", ""]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 58396:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Iu": () => (/* binding */ translate)
/* harmony export */ });
/* unused harmony exports Translator, validator */
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

var NODE_TYPES;

(function (NODE_TYPES) {
  NODE_TYPES["PLACEHOLDER"] = "placeholder";
  NODE_TYPES["TEXT"] = "text";
  NODE_TYPES["TAG"] = "tag";
  NODE_TYPES["VOID_TAG"] = "void_tag";
})(NODE_TYPES || (NODE_TYPES = {}));

var isTextNode = function isTextNode(node) {
  return node.type === NODE_TYPES.TEXT;
};
var isTagNode = function isTagNode(node) {
  return node.type === NODE_TYPES.TAG;
};
var isPlaceholderNode = function isPlaceholderNode(node) {
  return node.type === NODE_TYPES.PLACEHOLDER;
};
var isVoidTagNode = function isVoidTagNode(node) {
  return node.type === NODE_TYPES.VOID_TAG;
};
var placeholderNode = function placeholderNode(value) {
  return {
    type: NODE_TYPES.PLACEHOLDER,
    value: value
  };
};
var textNode = function textNode(str) {
  return {
    type: NODE_TYPES.TEXT,
    value: str
  };
};
var tagNode = function tagNode(tagName, children) {
  var value = tagName.trim();
  return {
    type: NODE_TYPES.TAG,
    value: value,
    children: children
  };
};
var voidTagNode = function voidTagNode(tagName) {
  var value = tagName.trim();
  return {
    type: NODE_TYPES.VOID_TAG,
    value: value
  };
};
/**
 * Checks if target is node
 * @param target
 */

var isNode = function isNode(target) {
  if (typeof target === 'string') {
    return false;
  }

  return !!target.type;
};

var STATE;

(function (STATE) {
  /**
   * Parser function switches to the text state when parses simple text,
   * or content between open and close tags
   */
  STATE["TEXT"] = "text";
  /**
   * Parser function switches to the tag state when meets open tag brace ("<"), and switches back,
   * when meets closing tag brace (">")
   */

  STATE["TAG"] = "tag";
  /**
   * Parser function switches to the placeholder state when meets in the text
   * open placeholders brace ("{") and switches back to the text state,
   * when meets close placeholder brace ("}")
   */

  STATE["PLACEHOLDER"] = "placeholder";
})(STATE || (STATE = {}));

var CONTROL_CHARS = {
  TAG_OPEN_BRACE: '<',
  TAG_CLOSE_BRACE: '>',
  CLOSING_TAG_MARK: '/',
  PLACEHOLDER_MARK: '%'
};
/**
 * Checks if text length is enough to create text node
 * If text node created, then if stack is not empty it is pushed into stack,
 * otherwise into result
 * @param context
 */

var createTextNodeIfPossible = function createTextNodeIfPossible(context) {
  var text = context.text;

  if (text.length > 0) {
    var node = textNode(text);

    if (context.stack.length > 0) {
      context.stack.push(node);
    } else {
      context.result.push(node);
    }
  }

  context.text = '';
};
/**
 * Checks if lastFromStack tag has any attributes
 * @param lastFromStack
 */


var hasAttributes = function hasAttributes(lastFromStack) {
  // e.g. "a class" or "a href='#'"
  var tagStrParts = lastFromStack.split(' ');
  return tagStrParts.length > 1;
};
/**
 * Handles text state
 */


var textStateHandler = function textStateHandler(context) {
  var currChar = context.currChar,
      currIdx = context.currIdx; // switches to the tag state

  if (currChar === CONTROL_CHARS.TAG_OPEN_BRACE) {
    context.lastTextStateChangeIdx = currIdx;
    return STATE.TAG;
  } // switches to the placeholder state


  if (currChar === CONTROL_CHARS.PLACEHOLDER_MARK) {
    context.lastTextStateChangeIdx = currIdx;
    return STATE.PLACEHOLDER;
  } // remains in the text state


  context.text += currChar;
  return STATE.TEXT;
};
/**
 * Handles placeholder state
 * @param context
 */


var placeholderStateHandler = function placeholderStateHandler(context) {
  var currChar = context.currChar,
      currIdx = context.currIdx,
      lastTextStateChangeIdx = context.lastTextStateChangeIdx,
      placeholder = context.placeholder,
      stack = context.stack,
      result = context.result,
      str = context.str;

  if (currChar === CONTROL_CHARS.PLACEHOLDER_MARK) {
    // if distance between current index and last state change equal to 1,
    // it means that placeholder mark was escaped by itself e.g. "%%",
    // so we return to the text state
    if (currIdx - lastTextStateChangeIdx === 1) {
      context.text += str.substring(lastTextStateChangeIdx, currIdx);
      return STATE.TEXT;
    }

    createTextNodeIfPossible(context);
    var node = placeholderNode(placeholder); // push node to the appropriate stack

    if (stack.length > 0) {
      stack.push(node);
    } else {
      result.push(node);
    }

    context.placeholder = '';
    return STATE.TEXT;
  }

  context.placeholder += currChar;
  return STATE.PLACEHOLDER;
};
/**
 * Switches current state to the tag state and returns tag state handler
 */


var tagStateHandler = function tagStateHandler(context) {
  var currChar = context.currChar,
      text = context.text,
      stack = context.stack,
      result = context.result,
      lastTextStateChangeIdx = context.lastTextStateChangeIdx,
      currIdx = context.currIdx,
      str = context.str;
  var tag = context.tag; // if found tag end ">"

  if (currChar === CONTROL_CHARS.TAG_CLOSE_BRACE) {
    // if the tag is close tag e.g. </a>
    if (tag.indexOf(CONTROL_CHARS.CLOSING_TAG_MARK) === 0) {
      // remove slash from tag
      tag = tag.substring(1);
      var children = [];

      if (text.length > 0) {
        children.push(textNode(text));
        context.text = '';
      }

      var pairTagFound = false; // looking for the pair to the close tag

      while (!pairTagFound && stack.length > 0) {
        var lastFromStack = stack.pop(); // if tag from stack equal to close tag

        if (lastFromStack === tag) {
          // create tag node
          var node = tagNode(tag, children); // and add it to the appropriate stack

          if (stack.length > 0) {
            stack.push(node);
          } else {
            result.push(node);
          }

          children = [];
          pairTagFound = true;
        } else if (isNode(lastFromStack)) {
          // add nodes between close tag and open tag to the children
          children.unshift(lastFromStack);
        } else {
          if (typeof lastFromStack === 'string' && hasAttributes(lastFromStack)) {
            throw new Error("Tags in string should not have attributes: ".concat(str));
          } else {
            throw new Error("String has unbalanced tags: ".concat(str));
          }
        }

        if (stack.length === 0 && children.length > 0) {
          throw new Error("String has unbalanced tags: ".concat(str));
        }
      }

      context.tag = '';
      return STATE.TEXT;
    } // if the tag is void tag e.g. <img/>


    if (tag.lastIndexOf(CONTROL_CHARS.CLOSING_TAG_MARK) === tag.length - 1) {
      tag = tag.substring(0, tag.length - 1);
      createTextNodeIfPossible(context);

      var _node = voidTagNode(tag); // add node to the appropriate stack


      if (stack.length > 0) {
        stack.push(_node);
      } else {
        result.push(_node);
      }

      context.tag = '';
      return STATE.TEXT;
    }

    createTextNodeIfPossible(context);
    stack.push(tag);
    context.tag = '';
    return STATE.TEXT;
  } // If we meet open tag "<" it means that we wrongly moved into tag state


  if (currChar === CONTROL_CHARS.TAG_OPEN_BRACE) {
    context.text += str.substring(lastTextStateChangeIdx, currIdx);
    context.lastTextStateChangeIdx = currIdx;
    context.tag = '';
    return STATE.TAG;
  }

  context.tag += currChar;
  return STATE.TAG;
};
/**
 * Parses string into AST (abstract syntax tree) and returns it
 * e.g.
 * parse("String to <a>translate</a>") ->
 * ```
 *      [
 *           { type: 'text', value: 'String to ' },
 *           { type: 'tag', value: 'a', children: [{ type: 'text', value: 'translate' }] }
 *      ];
 * ```
 * Empty string is parsed into empty AST (abstract syntax tree): "[]"
 * If founds unbalanced tags, it throws error about it
 *
 * @param {string} str - message in simplified ICU like syntax without plural support
 */


var parser = function parser() {
  var _STATE_HANDLERS;

  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var context = {
    /**
     * Stack is used to keep and search nested tag nodes
     */
    stack: [],

    /**
     * Result is stack where function allocates nodes
     */
    result: [],

    /**
     * Current char index
     */
    currIdx: 0,

    /**
     * Saves index of the last state change from the text state,
     * used to restore parsed text if we moved into other state wrongly
     */
    lastTextStateChangeIdx: 0,

    /**
     * Accumulated tag value
     */
    tag: '',

    /**
     * Accumulated text value
     */
    text: '',

    /**
     * Accumulated placeholder value
     */
    placeholder: '',

    /**
     * Parsed string
     */
    str: str
  };
  var STATE_HANDLERS = (_STATE_HANDLERS = {}, _defineProperty(_STATE_HANDLERS, STATE.TEXT, textStateHandler), _defineProperty(_STATE_HANDLERS, STATE.PLACEHOLDER, placeholderStateHandler), _defineProperty(_STATE_HANDLERS, STATE.TAG, tagStateHandler), _STATE_HANDLERS); // Start from text state

  var currentState = STATE.TEXT;

  while (context.currIdx < str.length) {
    context.currChar = str[context.currIdx];
    var currentStateHandler = STATE_HANDLERS[currentState];
    currentState = currentStateHandler(context);
    context.currIdx += 1;
  }

  var result = context.result,
      text = context.text,
      stack = context.stack,
      lastTextStateChangeIdx = context.lastTextStateChangeIdx; // Means that tag or placeholder nodes were not closed, so we consider them as text

  if (currentState !== STATE.TEXT) {
    var restText = str.substring(lastTextStateChangeIdx);

    if ((restText + text).length > 0) {
      result.push(textNode(text + restText));
    }
  } else {
    // eslint-disable-next-line no-lonely-if
    if (text.length > 0) {
      result.push(textNode(text));
    }
  }

  if (stack.length > 0) {
    throw new Error("String has unbalanced tags: ".concat(context.str));
  }

  return result;
};

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * Helper functions used by default to assemble strings from tag nodes
 * @param tagName
 * @param children
 */

var createStringElement = function createStringElement(tagName, children) {
  if (children) {
    return "<".concat(tagName, ">").concat(children, "</").concat(tagName, ">");
  }

  return "<".concat(tagName, "/>");
};
/**
 * Creates map with default values for tag converters
 */


var createDefaultValues = function createDefaultValues() {
  return {
    p: function p(children) {
      return createStringElement('p', children);
    },
    b: function b(children) {
      return createStringElement('b', children);
    },
    strong: function strong(children) {
      return createStringElement('strong', children);
    },
    tt: function tt(children) {
      return createStringElement('tt', children);
    },
    s: function s(children) {
      return createStringElement('s', children);
    },
    i: function i(children) {
      return createStringElement('i', children);
    }
  };
};
/**
 * This function accepts an AST (abstract syntax tree) which is a result
 * of the parser function call, and converts tree nodes into array of strings replacing node
 * values with provided values.
 * Values is a map with functions or strings, where each key is related to placeholder value
 * or tag value
 * e.g.
 * string "text <tag>tag text</tag> %placeholder%" is parsed into next AST
 *
 *      [
 *          { type: 'text', value: 'text ' },
 *          {
 *              type: 'tag',
 *              value: 'tag',
 *              children: [{ type: 'text', value: 'tag text' }],
 *          },
 *          { type: 'text', value: ' ' },
 *          { type: 'placeholder', value: 'placeholder' }
 *      ];
 *
 * this AST after format and next values
 *
 *      {
 *          // here used template strings, but it can be react components as well
 *          tag: (chunks) => `<b>${chunks}</b>`,
 *          placeholder: 'placeholder text'
 *      }
 *
 * will return next array
 *
 * [ 'text ', '<b>tag text</b>', ' ', 'placeholder text' ]
 *
 * as you can see, <tag> was replaced by <b>, and placeholder was replaced by placeholder text
 *
 * @param ast - AST (abstract syntax tree)
 * @param values
 */


var format = function format() {
  var ast = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var result = [];

  var tmplValues = _objectSpread(_objectSpread({}, createDefaultValues()), values);

  var i = 0;

  while (i < ast.length) {
    var currentNode = ast[i]; // if current node is text node, there is nothing to change, append value to the result

    if (isTextNode(currentNode)) {
      result.push(currentNode.value);
    } else if (isTagNode(currentNode)) {
      var children = _toConsumableArray(format(currentNode.children, tmplValues));

      var value = tmplValues[currentNode.value];

      if (value) {
        // TODO consider using strong typing
        if (typeof value === 'function') {
          result.push(value(children.join('')));
        } else {
          result.push(value);
        }
      } else {
        throw new Error("Value ".concat(currentNode.value, " wasn't provided"));
      }
    } else if (isVoidTagNode(currentNode)) {
      var _value = tmplValues[currentNode.value]; // TODO consider using strong typing

      if (_value && typeof _value === 'string') {
        result.push(_value);
      } else {
        throw new Error("Value ".concat(currentNode.value, " wasn't provided"));
      }
    } else if (isPlaceholderNode(currentNode)) {
      var _value2 = tmplValues[currentNode.value]; // TODO consider using strong typing

      if (_value2 && typeof _value2 === 'string') {
        result.push(_value2);
      } else {
        throw new Error("Value ".concat(currentNode.value, " wasn't provided"));
      }
    }

    i += 1;
  }

  return result;
};
/**
 * Function gets AST (abstract syntax tree) or string and formats messages,
 * replacing values accordingly
 * e.g.
 *      const message = formatter('<a>some text</a>', {
 *          a: (chunks) => `<a href="#">${chunks}</a>`,
 *      });
 *      console.log(message); // ['<a href="#">some text</a>']
 * @param message
 * @param [values]
 */


var formatter = function formatter(message, values) {
  var ast = parser(message);
  var preparedValues = {}; // convert values to strings if not a function

  if (values) {
    Object.keys(values).forEach(function (key) {
      var value = values[key]; // TODO consider using strong typing

      if (typeof value === 'function') {
        preparedValues[key] = value;
      } else {
        preparedValues[key] = String(value);
      }
    });
  }

  return format(ast, preparedValues);
};

var _pluralFormsCount;

var AvailableLocales;

(function (AvailableLocales) {
  AvailableLocales["az"] = "az";
  AvailableLocales["bo"] = "bo";
  AvailableLocales["dz"] = "dz";
  AvailableLocales["id"] = "id";
  AvailableLocales["ja"] = "ja";
  AvailableLocales["jv"] = "jv";
  AvailableLocales["ka"] = "ka";
  AvailableLocales["km"] = "km";
  AvailableLocales["kn"] = "kn";
  AvailableLocales["ko"] = "ko";
  AvailableLocales["ms"] = "ms";
  AvailableLocales["th"] = "th";
  AvailableLocales["tr"] = "tr";
  AvailableLocales["vi"] = "vi";
  AvailableLocales["zh"] = "zh";
  AvailableLocales["zh_cn"] = "zh_cn";
  AvailableLocales["zh_tw"] = "zh_tw";
  AvailableLocales["af"] = "af";
  AvailableLocales["bn"] = "bn";
  AvailableLocales["bg"] = "bg";
  AvailableLocales["ca"] = "ca";
  AvailableLocales["da"] = "da";
  AvailableLocales["de"] = "de";
  AvailableLocales["el"] = "el";
  AvailableLocales["en"] = "en";
  AvailableLocales["eo"] = "eo";
  AvailableLocales["es"] = "es";
  AvailableLocales["et"] = "et";
  AvailableLocales["eu"] = "eu";
  AvailableLocales["fa"] = "fa";
  AvailableLocales["fi"] = "fi";
  AvailableLocales["fo"] = "fo";
  AvailableLocales["fur"] = "fur";
  AvailableLocales["fy"] = "fy";
  AvailableLocales["gl"] = "gl";
  AvailableLocales["gu"] = "gu";
  AvailableLocales["ha"] = "ha";
  AvailableLocales["he"] = "he";
  AvailableLocales["hu"] = "hu";
  AvailableLocales["is"] = "is";
  AvailableLocales["it"] = "it";
  AvailableLocales["ku"] = "ku";
  AvailableLocales["lb"] = "lb";
  AvailableLocales["ml"] = "ml";
  AvailableLocales["mn"] = "mn";
  AvailableLocales["mr"] = "mr";
  AvailableLocales["nah"] = "nah";
  AvailableLocales["nb"] = "nb";
  AvailableLocales["ne"] = "ne";
  AvailableLocales["nl"] = "nl";
  AvailableLocales["nn"] = "nn";
  AvailableLocales["no"] = "no";
  AvailableLocales["oc"] = "oc";
  AvailableLocales["om"] = "om";
  AvailableLocales["or"] = "or";
  AvailableLocales["pa"] = "pa";
  AvailableLocales["pap"] = "pap";
  AvailableLocales["ps"] = "ps";
  AvailableLocales["pt"] = "pt";
  AvailableLocales["pt_pt"] = "pt_pt";
  AvailableLocales["pt_br"] = "pt_br";
  AvailableLocales["so"] = "so";
  AvailableLocales["sq"] = "sq";
  AvailableLocales["sv"] = "sv";
  AvailableLocales["sw"] = "sw";
  AvailableLocales["ta"] = "ta";
  AvailableLocales["te"] = "te";
  AvailableLocales["tk"] = "tk";
  AvailableLocales["ur"] = "ur";
  AvailableLocales["zu"] = "zu";
  AvailableLocales["am"] = "am";
  AvailableLocales["bh"] = "bh";
  AvailableLocales["fil"] = "fil";
  AvailableLocales["fr"] = "fr";
  AvailableLocales["gun"] = "gun";
  AvailableLocales["hi"] = "hi";
  AvailableLocales["hy"] = "hy";
  AvailableLocales["ln"] = "ln";
  AvailableLocales["mg"] = "mg";
  AvailableLocales["nso"] = "nso";
  AvailableLocales["xbr"] = "xbr";
  AvailableLocales["ti"] = "ti";
  AvailableLocales["wa"] = "wa";
  AvailableLocales["be"] = "be";
  AvailableLocales["bs"] = "bs";
  AvailableLocales["hr"] = "hr";
  AvailableLocales["ru"] = "ru";
  AvailableLocales["sr"] = "sr";
  AvailableLocales["uk"] = "uk";
  AvailableLocales["cs"] = "cs";
  AvailableLocales["sk"] = "sk";
  AvailableLocales["ga"] = "ga";
  AvailableLocales["lt"] = "lt";
  AvailableLocales["sl"] = "sl";
  AvailableLocales["mk"] = "mk";
  AvailableLocales["mt"] = "mt";
  AvailableLocales["lv"] = "lv";
  AvailableLocales["pl"] = "pl";
  AvailableLocales["cy"] = "cy";
  AvailableLocales["ro"] = "ro";
  AvailableLocales["ar"] = "ar";
})(AvailableLocales || (AvailableLocales = {}));

var getPluralFormId = function getPluralFormId(locale, number) {
  var _supportedForms;

  if (number === 0) {
    return 0;
  }

  var slavNum = number % 10 === 1 && number % 100 !== 11 ? 1 : number % 10 >= 2 && number % 10 <= 4 && (number % 100 < 10 || number % 100 >= 20) ? 2 : 3;
  var supportedForms = (_supportedForms = {}, _defineProperty(_supportedForms, AvailableLocales.az, 1), _defineProperty(_supportedForms, AvailableLocales.bo, 1), _defineProperty(_supportedForms, AvailableLocales.dz, 1), _defineProperty(_supportedForms, AvailableLocales.id, 1), _defineProperty(_supportedForms, AvailableLocales.ja, 1), _defineProperty(_supportedForms, AvailableLocales.jv, 1), _defineProperty(_supportedForms, AvailableLocales.ka, 1), _defineProperty(_supportedForms, AvailableLocales.km, 1), _defineProperty(_supportedForms, AvailableLocales.kn, 1), _defineProperty(_supportedForms, AvailableLocales.ko, 1), _defineProperty(_supportedForms, AvailableLocales.ms, 1), _defineProperty(_supportedForms, AvailableLocales.th, 1), _defineProperty(_supportedForms, AvailableLocales.tr, 1), _defineProperty(_supportedForms, AvailableLocales.vi, 1), _defineProperty(_supportedForms, AvailableLocales.zh, 1), _defineProperty(_supportedForms, AvailableLocales.zh_tw, 1), _defineProperty(_supportedForms, AvailableLocales.zh_cn, 1), _defineProperty(_supportedForms, AvailableLocales.af, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.bn, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.bg, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ca, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.da, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.de, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.el, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.en, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.eo, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.es, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.et, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.eu, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.fa, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.fi, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.fo, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.fur, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.fy, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.gl, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.gu, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ha, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.he, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.hu, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.is, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.it, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ku, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.lb, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ml, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.mn, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.mr, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.nah, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.nb, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ne, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.nl, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.nn, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.no, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.oc, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.om, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.or, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.pa, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.pap, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ps, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.pt, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.pt_pt, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.pt_br, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.so, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.sq, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.sv, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.sw, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ta, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.te, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.tk, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.ur, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.zu, number === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.am, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.bh, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.fil, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.fr, number === 0 || number >= 2 ? 2 : 1), _defineProperty(_supportedForms, AvailableLocales.gun, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.hi, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.hy, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.ln, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.mg, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.nso, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.xbr, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.ti, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.wa, number === 0 || number === 1 ? 0 : 1), _defineProperty(_supportedForms, AvailableLocales.be, slavNum), _defineProperty(_supportedForms, AvailableLocales.bs, slavNum), _defineProperty(_supportedForms, AvailableLocales.hr, slavNum), _defineProperty(_supportedForms, AvailableLocales.ru, slavNum), _defineProperty(_supportedForms, AvailableLocales.sr, slavNum), _defineProperty(_supportedForms, AvailableLocales.uk, slavNum), _defineProperty(_supportedForms, AvailableLocales.cs, number === 1 ? 1 : number >= 2 && number <= 4 ? 2 : 3), _defineProperty(_supportedForms, AvailableLocales.sk, number === 1 ? 1 : number >= 2 && number <= 4 ? 2 : 3), _defineProperty(_supportedForms, AvailableLocales.ga, number === 1 ? 1 : number === 2 ? 2 : 3), _defineProperty(_supportedForms, AvailableLocales.lt, number % 10 === 1 && number % 100 !== 11 ? 1 : number % 10 >= 2 && (number % 100 < 10 || number % 100 >= 20) ? 2 : 3), _defineProperty(_supportedForms, AvailableLocales.sl, number % 100 === 1 ? 1 : number % 100 === 2 ? 2 : number % 100 === 3 || number % 100 === 4 ? 3 : 4), _defineProperty(_supportedForms, AvailableLocales.mk, number % 10 === 1 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.mt, number === 1 ? 1 : number === 0 || number % 100 > 1 && number % 100 < 11 ? 2 : number % 100 > 10 && number % 100 < 20 ? 3 : 4), _defineProperty(_supportedForms, AvailableLocales.lv, number === 0 ? 0 : number % 10 === 1 && number % 100 !== 11 ? 1 : 2), _defineProperty(_supportedForms, AvailableLocales.pl, number === 1 ? 1 : number % 10 >= 2 && number % 10 <= 4 && (number % 100 < 12 || number % 100 > 14) ? 2 : 3), _defineProperty(_supportedForms, AvailableLocales.cy, number === 1 ? 0 : number === 2 ? 1 : number === 8 || number === 11 ? 2 : 3), _defineProperty(_supportedForms, AvailableLocales.ro, number === 1 ? 1 : number === 1 || number % 100 > 0 && number % 100 < 20 ? 2 : 3), _defineProperty(_supportedForms, AvailableLocales.ar, number === 0 ? 0 : number === 1 ? 1 : number === 2 ? 2 : number % 100 >= 3 && number % 100 <= 10 ? 3 : number % 100 >= 11 && number % 100 <= 99 ? 4 : 5), _supportedForms);
  return supportedForms[locale];
};

var pluralFormsCount = (_pluralFormsCount = {}, _defineProperty(_pluralFormsCount, AvailableLocales.az, 2), _defineProperty(_pluralFormsCount, AvailableLocales.bo, 2), _defineProperty(_pluralFormsCount, AvailableLocales.dz, 2), _defineProperty(_pluralFormsCount, AvailableLocales.id, 2), _defineProperty(_pluralFormsCount, AvailableLocales.ja, 2), _defineProperty(_pluralFormsCount, AvailableLocales.jv, 2), _defineProperty(_pluralFormsCount, AvailableLocales.ka, 2), _defineProperty(_pluralFormsCount, AvailableLocales.km, 2), _defineProperty(_pluralFormsCount, AvailableLocales.kn, 2), _defineProperty(_pluralFormsCount, AvailableLocales.ko, 2), _defineProperty(_pluralFormsCount, AvailableLocales.ms, 2), _defineProperty(_pluralFormsCount, AvailableLocales.th, 2), _defineProperty(_pluralFormsCount, AvailableLocales.tr, 2), _defineProperty(_pluralFormsCount, AvailableLocales.vi, 2), _defineProperty(_pluralFormsCount, AvailableLocales.zh, 2), _defineProperty(_pluralFormsCount, AvailableLocales.zh_cn, 2), _defineProperty(_pluralFormsCount, AvailableLocales.zh_tw, 2), _defineProperty(_pluralFormsCount, AvailableLocales.af, 3), _defineProperty(_pluralFormsCount, AvailableLocales.bn, 3), _defineProperty(_pluralFormsCount, AvailableLocales.bg, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ca, 3), _defineProperty(_pluralFormsCount, AvailableLocales.da, 3), _defineProperty(_pluralFormsCount, AvailableLocales.de, 3), _defineProperty(_pluralFormsCount, AvailableLocales.el, 3), _defineProperty(_pluralFormsCount, AvailableLocales.en, 3), _defineProperty(_pluralFormsCount, AvailableLocales.eo, 3), _defineProperty(_pluralFormsCount, AvailableLocales.es, 3), _defineProperty(_pluralFormsCount, AvailableLocales.et, 3), _defineProperty(_pluralFormsCount, AvailableLocales.eu, 3), _defineProperty(_pluralFormsCount, AvailableLocales.fa, 3), _defineProperty(_pluralFormsCount, AvailableLocales.fi, 3), _defineProperty(_pluralFormsCount, AvailableLocales.fo, 3), _defineProperty(_pluralFormsCount, AvailableLocales.fur, 3), _defineProperty(_pluralFormsCount, AvailableLocales.fy, 3), _defineProperty(_pluralFormsCount, AvailableLocales.gl, 3), _defineProperty(_pluralFormsCount, AvailableLocales.gu, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ha, 3), _defineProperty(_pluralFormsCount, AvailableLocales.he, 3), _defineProperty(_pluralFormsCount, AvailableLocales.hu, 3), _defineProperty(_pluralFormsCount, AvailableLocales.is, 3), _defineProperty(_pluralFormsCount, AvailableLocales.it, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ku, 3), _defineProperty(_pluralFormsCount, AvailableLocales.lb, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ml, 3), _defineProperty(_pluralFormsCount, AvailableLocales.mn, 3), _defineProperty(_pluralFormsCount, AvailableLocales.mr, 3), _defineProperty(_pluralFormsCount, AvailableLocales.nah, 3), _defineProperty(_pluralFormsCount, AvailableLocales.nb, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ne, 3), _defineProperty(_pluralFormsCount, AvailableLocales.nl, 3), _defineProperty(_pluralFormsCount, AvailableLocales.nn, 3), _defineProperty(_pluralFormsCount, AvailableLocales.no, 3), _defineProperty(_pluralFormsCount, AvailableLocales.oc, 3), _defineProperty(_pluralFormsCount, AvailableLocales.om, 3), _defineProperty(_pluralFormsCount, AvailableLocales.or, 3), _defineProperty(_pluralFormsCount, AvailableLocales.pa, 3), _defineProperty(_pluralFormsCount, AvailableLocales.pap, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ps, 3), _defineProperty(_pluralFormsCount, AvailableLocales.pt, 3), _defineProperty(_pluralFormsCount, AvailableLocales.pt_pt, 3), _defineProperty(_pluralFormsCount, AvailableLocales.pt_br, 3), _defineProperty(_pluralFormsCount, AvailableLocales.so, 3), _defineProperty(_pluralFormsCount, AvailableLocales.sq, 3), _defineProperty(_pluralFormsCount, AvailableLocales.sv, 3), _defineProperty(_pluralFormsCount, AvailableLocales.sw, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ta, 3), _defineProperty(_pluralFormsCount, AvailableLocales.te, 3), _defineProperty(_pluralFormsCount, AvailableLocales.tk, 3), _defineProperty(_pluralFormsCount, AvailableLocales.ur, 3), _defineProperty(_pluralFormsCount, AvailableLocales.zu, 3), _defineProperty(_pluralFormsCount, AvailableLocales.am, 2), _defineProperty(_pluralFormsCount, AvailableLocales.bh, 2), _defineProperty(_pluralFormsCount, AvailableLocales.fil, 2), _defineProperty(_pluralFormsCount, AvailableLocales.fr, 3), _defineProperty(_pluralFormsCount, AvailableLocales.gun, 2), _defineProperty(_pluralFormsCount, AvailableLocales.hi, 2), _defineProperty(_pluralFormsCount, AvailableLocales.hy, 2), _defineProperty(_pluralFormsCount, AvailableLocales.ln, 2), _defineProperty(_pluralFormsCount, AvailableLocales.mg, 2), _defineProperty(_pluralFormsCount, AvailableLocales.nso, 2), _defineProperty(_pluralFormsCount, AvailableLocales.xbr, 2), _defineProperty(_pluralFormsCount, AvailableLocales.ti, 2), _defineProperty(_pluralFormsCount, AvailableLocales.wa, 2), _defineProperty(_pluralFormsCount, AvailableLocales.be, 4), _defineProperty(_pluralFormsCount, AvailableLocales.bs, 4), _defineProperty(_pluralFormsCount, AvailableLocales.hr, 4), _defineProperty(_pluralFormsCount, AvailableLocales.ru, 4), _defineProperty(_pluralFormsCount, AvailableLocales.sr, 4), _defineProperty(_pluralFormsCount, AvailableLocales.uk, 4), _defineProperty(_pluralFormsCount, AvailableLocales.cs, 4), _defineProperty(_pluralFormsCount, AvailableLocales.sk, 4), _defineProperty(_pluralFormsCount, AvailableLocales.ga, 4), _defineProperty(_pluralFormsCount, AvailableLocales.lt, 4), _defineProperty(_pluralFormsCount, AvailableLocales.sl, 5), _defineProperty(_pluralFormsCount, AvailableLocales.mk, 3), _defineProperty(_pluralFormsCount, AvailableLocales.mt, 5), _defineProperty(_pluralFormsCount, AvailableLocales.lv, 3), _defineProperty(_pluralFormsCount, AvailableLocales.pl, 4), _defineProperty(_pluralFormsCount, AvailableLocales.cy, 4), _defineProperty(_pluralFormsCount, AvailableLocales.ro, 4), _defineProperty(_pluralFormsCount, AvailableLocales.ar, 6), _pluralFormsCount);
var PLURAL_STRING_DELIMITER = '|';

var checkForms = function checkForms(str, locale, key) {
  var forms = str.split(PLURAL_STRING_DELIMITER);

  if (forms.length !== pluralFormsCount[locale]) {
    throw new Error("Invalid plural string \"".concat(key, "\" for locale ").concat(locale, ": ").concat(forms.length, " given; need: ").concat(pluralFormsCount[locale]));
  }
};
/**
 * Checks if plural forms are valid
 * @param str - message string
 * @param locale - message locale
 * @param key - message key, used for clearer log message
 */


var isPluralFormValid = function isPluralFormValid(str, locale, key) {
  try {
    checkForms(str, locale, key);
    return true;
  } catch (error) {
    return false;
  }
};
/**
 * Returns plural form corresponding to number
 * @param str
 * @param number
 * @param locale - current locale
 * @param key - message key
 */

var getForm = function getForm(str, number, locale, key) {
  checkForms(str, locale, key);
  var forms = str.split(PLURAL_STRING_DELIMITER);
  var currentForm = getPluralFormId(locale, number);
  return forms[currentForm].trim();
};

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var defaultMessageConstructor = function defaultMessageConstructor(formatted) {
  return formatted.join('');
};

var Translator = /*#__PURE__*/function () {
  function Translator(i18n, messageConstructor, values) {
    _classCallCheck(this, Translator);

    this.i18n = i18n;
    this.messageConstructor = messageConstructor || defaultMessageConstructor;
    this.values = values || {};
  }
  /**
   * Retrieves message and translates it, substituting parameters where necessary
   * @param key - translation message key
   * @param params - values used to substitute placeholders and tags
   */


  _createClass(Translator, [{
    key: "getMessage",
    value: function getMessage(key) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var message = this.i18n.getMessage(key);

      if (!message) {
        message = this.i18n.getBaseMessage(key);

        if (!message) {
          throw new Error("Was unable to find message for key: \"".concat(key, "\""));
        }
      }

      var formatted = formatter(message, _objectSpread$1(_objectSpread$1({}, this.values), params));
      return this.messageConstructor(formatted);
    }
    /**
     * Retrieves correct plural form and translates it
     * @param key - translation message key
     * @param number - plural form number
     * @param params - values used to substitute placeholders or tags if necessary,
     * if params has "count" property it will be overridden by number (plural form number)
     */

  }, {
    key: "getPlural",
    value: function getPlural(key, number) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var message = this.i18n.getMessage(key);
      var language = this.i18n.getUILanguage();

      if (!message) {
        message = this.i18n.getBaseMessage(key);

        if (!message) {
          throw new Error("Was unable to find message for key: \"".concat(key, "\""));
        }

        language = this.i18n.getBaseUILanguage();
      }

      var form = getForm(message, number, language, key);
      var formatted = formatter(form, _objectSpread$1(_objectSpread$1(_objectSpread$1({}, this.values), params), {}, {
        count: number
      }));
      return this.messageConstructor(formatted);
    }
  }]);

  return Translator;
}();

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * Creates translation function for strings used in the React components
 * We do not import React directly, because translator module can be used
 * in the modules without React too
 *
 * e.g.
 * const translateReact = createReactTranslator(getMessage, React);
 * in locales folder you should have messages.json file
 * ```
 * message:
 *     "popup_auth_agreement_consent": {
 *          "message": "You agree to our <eula>EULA</eula>",
 *      },
 * ```
 *
 * this message can be retrieved and translated into react components next way:
 *
 * const component = translateReact('popup_auth_agreement_consent', {
 *          eula: (chunks) => (
 *              <button
 *                  className="auth__privacy-link"
 *                  onClick={handleEulaClick}
 *              >
 *                  {chunks}
 *              </button>
 *          ),
 *       });
 *
 * Note how functions in the values argument can be used with handlers
 *
 * @param i18n - object with methods which get translated message by key and return current locale
 * @param React - instance of react library
 */

var createReactTranslator = function createReactTranslator(i18n, react, defaults) {
  /**
   * Helps to build nodes without values
   *
   * @param tagName
   * @param children
   */
  var createReactElement = function createReactElement(tagName, children) {
    if (children) {
      return react.createElement(tagName, null, react.Children.toArray(children));
    }

    return react.createElement(tagName, null);
  };
  /**
   * Function creates default values to be used if user didn't provide function values for tags
   */


  var createDefaultValues = function createDefaultValues() {
    var externalDefaults = {};

    if (defaults) {
      defaults.tags.forEach(function (t) {
        externalDefaults[t.key] = function (children) {
          return createReactElement(t.createdTag, children);
        };
      });
    }

    if (defaults !== null && defaults !== void 0 && defaults.override) {
      return externalDefaults;
    }

    return _objectSpread$2({
      p: function p(children) {
        return createReactElement('p', children);
      },
      b: function b(children) {
        return createReactElement('b', children);
      },
      strong: function strong(children) {
        return createReactElement('strong', children);
      },
      tt: function tt(children) {
        return createReactElement('tt', children);
      },
      s: function s(children) {
        return createReactElement('s', children);
      },
      i: function i(children) {
        return createReactElement('i', children);
      }
    }, externalDefaults);
  };

  var reactMessageConstructor = function reactMessageConstructor(formatted) {
    var reactChildren = react.Children.toArray(formatted); // if there is only strings in the array we join them

    if (reactChildren.every(function (child) {
      return typeof child === 'string';
    })) {
      return reactChildren.join('');
    }

    return reactChildren;
  };

  var defaultValues = createDefaultValues();
  return new Translator(i18n, reactMessageConstructor, defaultValues);
};

var r,
    f;

function A(n, l) {
  return l = l || [], null == n || "boolean" == typeof n || (Array.isArray(n) ? n.some(function (n) {
    A(n, l);
  }) : l.push(n)), l;
}

r = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, f = 0;

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * Creates translation function for strings used in the Preact components
 * We do not import Preact directly, because translator module can be used
 * in the modules without Preact too
 *
 * e.g.
 * const translatePreact = createPreactTranslator(getMessage, Preact);
 * in locales folder you should have messages.json file
 * ```
 * message:
 *     "popup_auth_agreement_consent": {
 *          "message": "You agree to our <eula>EULA</eula>",
 *      },
 * ```
 *
 * this message can be retrieved and translated into preact components next way:
 *
 * const component = translatePreact('popup_auth_agreement_consent', {
 *          eula: (chunks) => (
 *              <button
 *                  className="auth__privacy-link"
 *                  onClick={handleEulaClick}
 *              >
 *                  {chunks}
 *              </button>
 *          ),
 *       });
 *
 * Note how functions in the values argument can be used with handlers
 *
 * @param i18n - object with methods which get translated message by key and return current locale
 * @param Preact - instance of preact library
 */

var createPreactTranslator = function createPreactTranslator(i18n, preact, defaults) {
  /**
   * Helps to build nodes without values
   *
   * @param tagName
   * @param children
   */
  var createPreactElement = function createPreactElement(tagName, children) {
    if (children) {
      return preact.createElement(tagName, null, A(children));
    }

    return preact.createElement(tagName, null);
  };
  /**
   * Function creates default values to be used if user didn't provide function values for tags
   */


  var createDefaultValues = function createDefaultValues() {
    var externalDefaults = {};

    if (defaults) {
      defaults.tags.forEach(function (t) {
        externalDefaults[t.key] = function (children) {
          return createPreactElement(t.createdTag, children);
        };
      });
    }

    if (defaults !== null && defaults !== void 0 && defaults.override) {
      return externalDefaults;
    }

    return _objectSpread$3({
      p: function p(children) {
        return createPreactElement('p', children);
      },
      b: function b(children) {
        return createPreactElement('b', children);
      },
      strong: function strong(children) {
        return createPreactElement('strong', children);
      },
      tt: function tt(children) {
        return createPreactElement('tt', children);
      },
      s: function s(children) {
        return createPreactElement('s', children);
      },
      i: function i(children) {
        return createPreactElement('i', children);
      }
    }, externalDefaults);
  };

  var preactMessageConstructor = function preactMessageConstructor(formatted) {
    var preactChildren = A(formatted); // if there is only strings in the array we join them

    if (preactChildren.every(function (child) {
      return typeof child === 'string';
    })) {
      return preactChildren.join('');
    }

    return preactChildren;
  };

  var defaultValues = createDefaultValues();
  return new Translator(i18n, preactMessageConstructor, defaultValues);
};

/**
 * Creates translator instance strings, by default for simple strings
 * @param i18n - function which returns translated message by key
 * @param messageConstructor - function that will collect messages
 * @param values - map with default values for tag converters
 */

var createTranslator = function createTranslator(i18n, messageConstructor, values) {
  return new Translator(i18n, messageConstructor, values);
};

var translate = {
  createTranslator: createTranslator,
  createReactTranslator: createReactTranslator,
  createPreactTranslator: createPreactTranslator
};

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

/**
 * Compares two AST (abstract syntax tree) structures,
 * view tests for examples
 * @param baseAst
 * @param targetAst
 */

var areAstStructuresSame = function areAstStructuresSame(baseAst, targetAst) {
  var textNodeFilter = function textNodeFilter(node) {
    return !isTextNode(node);
  };

  var filteredBaseAst = baseAst.filter(textNodeFilter);
  var filteredTargetAst = targetAst.filter(textNodeFilter); // if AST structures have different lengths, they are not equal

  if (filteredBaseAst.length !== filteredTargetAst.length) {
    return false;
  }

  var _loop = function _loop(i) {
    var baseNode = filteredBaseAst[i];
    var targetNode = filteredTargetAst.find(function (node) {
      return node.type === baseNode.type && node.value === baseNode.value;
    });

    if (!targetNode) {
      return {
        v: false
      };
    }

    if (targetNode.children && baseNode.children) {
      var areChildrenSame = areAstStructuresSame(baseNode.children, targetNode.children);

      if (!areChildrenSame) {
        return {
          v: false
        };
      }
    }
  };

  for (var i = 0; i < filteredBaseAst.length; i += 1) {
    var _ret = _loop(i);

    if (_typeof(_ret) === "object") return _ret.v;
  }

  return true;
};
/**
 * Validates translation against base string by AST (abstract syntax tree) structure
 * @param baseMessage - base message
 * @param translatedMessage - translated message
 */


var isTranslationValid = function isTranslationValid(baseMessage, translatedMessage) {
  var baseMessageAst = parser(baseMessage);
  var translatedMessageAst = parser(translatedMessage);
  return areAstStructuresSame(baseMessageAst, translatedMessageAst);
};
var validator = {
  isTranslationValid: isTranslationValid,
  isPluralFormValid: isPluralFormValid
};




/***/ }),

/***/ 36554:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

(function (global, factory) {
	 true ? module.exports = factory() :
	0;
}(this, (function () { 'use strict';

var CLASS = {
    target: 'c3-target',
    chart: 'c3-chart',
    chartLine: 'c3-chart-line',
    chartLines: 'c3-chart-lines',
    chartBar: 'c3-chart-bar',
    chartBars: 'c3-chart-bars',
    chartText: 'c3-chart-text',
    chartTexts: 'c3-chart-texts',
    chartArc: 'c3-chart-arc',
    chartArcs: 'c3-chart-arcs',
    chartArcsTitle: 'c3-chart-arcs-title',
    chartArcsBackground: 'c3-chart-arcs-background',
    chartArcsGaugeUnit: 'c3-chart-arcs-gauge-unit',
    chartArcsGaugeMax: 'c3-chart-arcs-gauge-max',
    chartArcsGaugeMin: 'c3-chart-arcs-gauge-min',
    selectedCircle: 'c3-selected-circle',
    selectedCircles: 'c3-selected-circles',
    eventRect: 'c3-event-rect',
    eventRects: 'c3-event-rects',
    eventRectsSingle: 'c3-event-rects-single',
    eventRectsMultiple: 'c3-event-rects-multiple',
    zoomRect: 'c3-zoom-rect',
    brush: 'c3-brush',
    focused: 'c3-focused',
    defocused: 'c3-defocused',
    region: 'c3-region',
    regions: 'c3-regions',
    title: 'c3-title',
    tooltipContainer: 'c3-tooltip-container',
    tooltip: 'c3-tooltip',
    tooltipName: 'c3-tooltip-name',
    shape: 'c3-shape',
    shapes: 'c3-shapes',
    line: 'c3-line',
    lines: 'c3-lines',
    bar: 'c3-bar',
    bars: 'c3-bars',
    circle: 'c3-circle',
    circles: 'c3-circles',
    arc: 'c3-arc',
    arcs: 'c3-arcs',
    area: 'c3-area',
    areas: 'c3-areas',
    empty: 'c3-empty',
    text: 'c3-text',
    texts: 'c3-texts',
    gaugeValue: 'c3-gauge-value',
    grid: 'c3-grid',
    gridLines: 'c3-grid-lines',
    xgrid: 'c3-xgrid',
    xgrids: 'c3-xgrids',
    xgridLine: 'c3-xgrid-line',
    xgridLines: 'c3-xgrid-lines',
    xgridFocus: 'c3-xgrid-focus',
    ygrid: 'c3-ygrid',
    ygrids: 'c3-ygrids',
    ygridLine: 'c3-ygrid-line',
    ygridLines: 'c3-ygrid-lines',
    axis: 'c3-axis',
    axisX: 'c3-axis-x',
    axisXLabel: 'c3-axis-x-label',
    axisY: 'c3-axis-y',
    axisYLabel: 'c3-axis-y-label',
    axisY2: 'c3-axis-y2',
    axisY2Label: 'c3-axis-y2-label',
    legendBackground: 'c3-legend-background',
    legendItem: 'c3-legend-item',
    legendItemEvent: 'c3-legend-item-event',
    legendItemTile: 'c3-legend-item-tile',
    legendItemHidden: 'c3-legend-item-hidden',
    legendItemFocused: 'c3-legend-item-focused',
    dragarea: 'c3-dragarea',
    EXPANDED: '_expanded_',
    SELECTED: '_selected_',
    INCLUDED: '_included_'
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var isValue = function isValue(v) {
    return v || v === 0;
};
var isFunction = function isFunction(o) {
    return typeof o === 'function';
};
var isArray = function isArray(o) {
    return Array.isArray(o);
};
var isString = function isString(o) {
    return typeof o === 'string';
};
var isUndefined = function isUndefined(v) {
    return typeof v === 'undefined';
};
var isDefined = function isDefined(v) {
    return typeof v !== 'undefined';
};
var ceil10 = function ceil10(v) {
    return Math.ceil(v / 10) * 10;
};
var asHalfPixel = function asHalfPixel(n) {
    return Math.ceil(n) + 0.5;
};
var diffDomain = function diffDomain(d) {
    return d[1] - d[0];
};
var isEmpty = function isEmpty(o) {
    return typeof o === 'undefined' || o === null || isString(o) && o.length === 0 || (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' && Object.keys(o).length === 0;
};
var notEmpty = function notEmpty(o) {
    return !c3_chart_internal_fn.isEmpty(o);
};
var getOption = function getOption(options, key, defaultValue) {
    return isDefined(options[key]) ? options[key] : defaultValue;
};
var hasValue = function hasValue(dict, value) {
    var found = false;
    Object.keys(dict).forEach(function (key) {
        if (dict[key] === value) {
            found = true;
        }
    });
    return found;
};
var sanitise = function sanitise(str) {
    return typeof str === 'string' ? str.replace(/</g, '&lt;').replace(/>/g, '&gt;') : str;
};
var getPathBox = function getPathBox(path) {
    var box = path.getBoundingClientRect(),
        items = [path.pathSegList.getItem(0), path.pathSegList.getItem(1)],
        minX = items[0].x,
        minY = Math.min(items[0].y, items[1].y);
    return { x: minX, y: minY, width: box.width, height: box.height };
};

// Features:
// 1. category axis
// 2. ceil values of translate/x/y to int for half pixel antialiasing
// 3. multiline tick text
var tickTextCharSize;
function c3_axis(d3, params) {
    var scale = d3.scale.linear(),
        orient = "bottom",
        innerTickSize = 6,
        outerTickSize,
        tickPadding = 3,
        tickValues = null,
        tickFormat,
        tickArguments;

    var tickOffset = 0,
        tickCulling = true,
        tickCentered;

    params = params || {};
    outerTickSize = params.withOuterTick ? 6 : 0;

    function axisX(selection, x) {
        selection.attr("transform", function (d) {
            return "translate(" + Math.ceil(x(d) + tickOffset) + ", 0)";
        });
    }
    function axisY(selection, y) {
        selection.attr("transform", function (d) {
            return "translate(0," + Math.ceil(y(d)) + ")";
        });
    }
    function scaleExtent(domain) {
        var start = domain[0],
            stop = domain[domain.length - 1];
        return start < stop ? [start, stop] : [stop, start];
    }
    function generateTicks(scale) {
        var i,
            domain,
            ticks = [];
        if (scale.ticks) {
            return scale.ticks.apply(scale, tickArguments);
        }
        domain = scale.domain();
        for (i = Math.ceil(domain[0]); i < domain[1]; i++) {
            ticks.push(i);
        }
        if (ticks.length > 0 && ticks[0] > 0) {
            ticks.unshift(ticks[0] - (ticks[1] - ticks[0]));
        }
        return ticks;
    }
    function copyScale() {
        var newScale = scale.copy(),
            domain;
        if (params.isCategory) {
            domain = scale.domain();
            newScale.domain([domain[0], domain[1] - 1]);
        }
        return newScale;
    }
    function textFormatted(v) {
        var formatted = tickFormat ? tickFormat(v) : v;
        return typeof formatted !== 'undefined' ? formatted : '';
    }
    function getSizeFor1Char(tick) {
        if (tickTextCharSize) {
            return tickTextCharSize;
        }
        var size = {
            h: 11.5,
            w: 5.5
        };
        tick.select('text').text(textFormatted).each(function (d) {
            var box = this.getBoundingClientRect(),
                text = textFormatted(d),
                h = box.height,
                w = text ? box.width / text.length : undefined;
            if (h && w) {
                size.h = h;
                size.w = w;
            }
        }).text('');
        tickTextCharSize = size;
        return size;
    }
    function transitionise(selection) {
        return params.withoutTransition ? selection : d3.transition(selection);
    }
    function axis(g) {
        g.each(function () {
            var g = axis.g = d3.select(this);

            var scale0 = this.__chart__ || scale,
                scale1 = this.__chart__ = copyScale();

            var ticks = tickValues ? tickValues : generateTicks(scale1),
                tick = g.selectAll(".tick").data(ticks, scale1),
                tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", 1e-6),

            // MEMO: No exit transition. The reason is this transition affects max tick width calculation because old tick will be included in the ticks.
            tickExit = tick.exit().remove(),
                tickUpdate = transitionise(tick).style("opacity", 1),
                tickTransform,
                tickX,
                tickY;

            var range = scale.rangeExtent ? scale.rangeExtent() : scaleExtent(scale.range()),
                path = g.selectAll(".domain").data([0]),
                pathUpdate = (path.enter().append("path").attr("class", "domain"), transitionise(path));
            tickEnter.append("line");
            tickEnter.append("text");

            var lineEnter = tickEnter.select("line"),
                lineUpdate = tickUpdate.select("line"),
                textEnter = tickEnter.select("text"),
                textUpdate = tickUpdate.select("text");

            if (params.isCategory) {
                tickOffset = Math.ceil((scale1(1) - scale1(0)) / 2);
                tickX = tickCentered ? 0 : tickOffset;
                tickY = tickCentered ? tickOffset : 0;
            } else {
                tickOffset = tickX = 0;
            }

            var text,
                tspan,
                sizeFor1Char = getSizeFor1Char(g.select('.tick')),
                counts = [];
            var tickLength = Math.max(innerTickSize, 0) + tickPadding,
                isVertical = orient === 'left' || orient === 'right';

            // this should be called only when category axis
            function splitTickText(d, maxWidth) {
                var tickText = textFormatted(d),
                    subtext,
                    spaceIndex,
                    textWidth,
                    splitted = [];

                if (Object.prototype.toString.call(tickText) === "[object Array]") {
                    return tickText;
                }

                if (!maxWidth || maxWidth <= 0) {
                    maxWidth = isVertical ? 95 : params.isCategory ? Math.ceil(scale1(ticks[1]) - scale1(ticks[0])) - 12 : 110;
                }

                function split(splitted, text) {
                    spaceIndex = undefined;
                    for (var i = 1; i < text.length; i++) {
                        if (text.charAt(i) === ' ') {
                            spaceIndex = i;
                        }
                        subtext = text.substr(0, i + 1);
                        textWidth = sizeFor1Char.w * subtext.length;
                        // if text width gets over tick width, split by space index or crrent index
                        if (maxWidth < textWidth) {
                            return split(splitted.concat(text.substr(0, spaceIndex ? spaceIndex : i)), text.slice(spaceIndex ? spaceIndex + 1 : i));
                        }
                    }
                    return splitted.concat(text);
                }

                return split(splitted, tickText + "");
            }

            function tspanDy(d, i) {
                var dy = sizeFor1Char.h;
                if (i === 0) {
                    if (orient === 'left' || orient === 'right') {
                        dy = -((counts[d.index] - 1) * (sizeFor1Char.h / 2) - 3);
                    } else {
                        dy = ".71em";
                    }
                }
                return dy;
            }

            function tickSize(d) {
                var tickPosition = scale(d) + (tickCentered ? 0 : tickOffset);
                return range[0] < tickPosition && tickPosition < range[1] ? innerTickSize : 0;
            }

            text = tick.select("text");
            tspan = text.selectAll('tspan').data(function (d, i) {
                var splitted = params.tickMultiline ? splitTickText(d, params.tickWidth) : [].concat(textFormatted(d));
                counts[i] = splitted.length;
                return splitted.map(function (s) {
                    return { index: i, splitted: s };
                });
            });
            tspan.enter().append('tspan');
            tspan.exit().remove();
            tspan.text(function (d) {
                return d.splitted;
            });

            var rotate = params.tickTextRotate;

            function textAnchorForText(rotate) {
                if (!rotate) {
                    return 'middle';
                }
                return rotate > 0 ? "start" : "end";
            }
            function textTransform(rotate) {
                if (!rotate) {
                    return '';
                }
                return "rotate(" + rotate + ")";
            }
            function dxForText(rotate) {
                if (!rotate) {
                    return 0;
                }
                return 8 * Math.sin(Math.PI * (rotate / 180));
            }
            function yForText(rotate) {
                if (!rotate) {
                    return tickLength;
                }
                return 11.5 - 2.5 * (rotate / 15) * (rotate > 0 ? 1 : -1);
            }

            switch (orient) {
                case "bottom":
                    {
                        tickTransform = axisX;
                        lineEnter.attr("y2", innerTickSize);
                        textEnter.attr("y", tickLength);
                        lineUpdate.attr("x1", tickX).attr("x2", tickX).attr("y2", tickSize);
                        textUpdate.attr("x", 0).attr("y", yForText(rotate)).style("text-anchor", textAnchorForText(rotate)).attr("transform", textTransform(rotate));
                        tspan.attr('x', 0).attr("dy", tspanDy).attr('dx', dxForText(rotate));
                        pathUpdate.attr("d", "M" + range[0] + "," + outerTickSize + "V0H" + range[1] + "V" + outerTickSize);
                        break;
                    }
                case "top":
                    {
                        // TODO: rotated tick text
                        tickTransform = axisX;
                        lineEnter.attr("y2", -innerTickSize);
                        textEnter.attr("y", -tickLength);
                        lineUpdate.attr("x2", 0).attr("y2", -innerTickSize);
                        textUpdate.attr("x", 0).attr("y", -tickLength);
                        text.style("text-anchor", "middle");
                        tspan.attr('x', 0).attr("dy", "0em");
                        pathUpdate.attr("d", "M" + range[0] + "," + -outerTickSize + "V0H" + range[1] + "V" + -outerTickSize);
                        break;
                    }
                case "left":
                    {
                        tickTransform = axisY;
                        lineEnter.attr("x2", -innerTickSize);
                        textEnter.attr("x", -tickLength);
                        lineUpdate.attr("x2", -innerTickSize).attr("y1", tickY).attr("y2", tickY);
                        textUpdate.attr("x", -tickLength).attr("y", tickOffset);
                        text.style("text-anchor", "end");
                        tspan.attr('x', -tickLength).attr("dy", tspanDy);
                        pathUpdate.attr("d", "M" + -outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + -outerTickSize);
                        break;
                    }
                case "right":
                    {
                        tickTransform = axisY;
                        lineEnter.attr("x2", innerTickSize);
                        textEnter.attr("x", tickLength);
                        lineUpdate.attr("x2", innerTickSize).attr("y2", 0);
                        textUpdate.attr("x", tickLength).attr("y", 0);
                        text.style("text-anchor", "start");
                        tspan.attr('x', tickLength).attr("dy", tspanDy);
                        pathUpdate.attr("d", "M" + outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + outerTickSize);
                        break;
                    }
            }
            if (scale1.rangeBand) {
                var x = scale1,
                    dx = x.rangeBand() / 2;
                scale0 = scale1 = function scale1(d) {
                    return x(d) + dx;
                };
            } else if (scale0.rangeBand) {
                scale0 = scale1;
            } else {
                tickExit.call(tickTransform, scale1);
            }
            tickEnter.call(tickTransform, scale0);
            tickUpdate.call(tickTransform, scale1);
        });
    }
    axis.scale = function (x) {
        if (!arguments.length) {
            return scale;
        }
        scale = x;
        return axis;
    };
    axis.orient = function (x) {
        if (!arguments.length) {
            return orient;
        }
        orient = x in { top: 1, right: 1, bottom: 1, left: 1 } ? x + "" : "bottom";
        return axis;
    };
    axis.tickFormat = function (format) {
        if (!arguments.length) {
            return tickFormat;
        }
        tickFormat = format;
        return axis;
    };
    axis.tickCentered = function (isCentered) {
        if (!arguments.length) {
            return tickCentered;
        }
        tickCentered = isCentered;
        return axis;
    };
    axis.tickOffset = function () {
        return tickOffset;
    };
    axis.tickInterval = function () {
        var interval, length;
        if (params.isCategory) {
            interval = tickOffset * 2;
        } else {
            length = axis.g.select('path.domain').node().getTotalLength() - outerTickSize * 2;
            interval = length / axis.g.selectAll('line').size();
        }
        return interval === Infinity ? 0 : interval;
    };
    axis.ticks = function () {
        if (!arguments.length) {
            return tickArguments;
        }
        tickArguments = arguments;
        return axis;
    };
    axis.tickCulling = function (culling) {
        if (!arguments.length) {
            return tickCulling;
        }
        tickCulling = culling;
        return axis;
    };
    axis.tickValues = function (x) {
        if (typeof x === 'function') {
            tickValues = function tickValues() {
                return x(scale.domain());
            };
        } else {
            if (!arguments.length) {
                return tickValues;
            }
            tickValues = x;
        }
        return axis;
    };
    return axis;
}

function Axis(owner) {
    API.call(this, owner);
}

inherit(API, Axis);

Axis.prototype.init = function init() {

    var $$ = this.owner,
        config = $$.config,
        main = $$.main;
    $$.axes.x = main.append("g").attr("class", CLASS.axis + ' ' + CLASS.axisX).attr("clip-path", $$.clipPathForXAxis).attr("transform", $$.getTranslate('x')).style("visibility", config.axis_x_show ? 'visible' : 'hidden');
    $$.axes.x.append("text").attr("class", CLASS.axisXLabel).attr("transform", config.axis_rotated ? "rotate(-90)" : "").style("text-anchor", this.textAnchorForXAxisLabel.bind(this));
    $$.axes.y = main.append("g").attr("class", CLASS.axis + ' ' + CLASS.axisY).attr("clip-path", config.axis_y_inner ? "" : $$.clipPathForYAxis).attr("transform", $$.getTranslate('y')).style("visibility", config.axis_y_show ? 'visible' : 'hidden');
    $$.axes.y.append("text").attr("class", CLASS.axisYLabel).attr("transform", config.axis_rotated ? "" : "rotate(-90)").style("text-anchor", this.textAnchorForYAxisLabel.bind(this));

    $$.axes.y2 = main.append("g").attr("class", CLASS.axis + ' ' + CLASS.axisY2
    // clip-path?
    ).attr("transform", $$.getTranslate('y2')).style("visibility", config.axis_y2_show ? 'visible' : 'hidden');
    $$.axes.y2.append("text").attr("class", CLASS.axisY2Label).attr("transform", config.axis_rotated ? "" : "rotate(-90)").style("text-anchor", this.textAnchorForY2AxisLabel.bind(this));
};
Axis.prototype.getXAxis = function getXAxis(scale, orient, tickFormat, tickValues, withOuterTick, withoutTransition, withoutRotateTickText) {
    var $$ = this.owner,
        config = $$.config,
        axisParams = {
        isCategory: $$.isCategorized(),
        withOuterTick: withOuterTick,
        tickMultiline: config.axis_x_tick_multiline,
        tickWidth: config.axis_x_tick_width,
        tickTextRotate: withoutRotateTickText ? 0 : config.axis_x_tick_rotate,
        withoutTransition: withoutTransition
    },
        axis = c3_axis($$.d3, axisParams).scale(scale).orient(orient);

    if ($$.isTimeSeries() && tickValues && typeof tickValues !== "function") {
        tickValues = tickValues.map(function (v) {
            return $$.parseDate(v);
        });
    }

    // Set tick
    axis.tickFormat(tickFormat).tickValues(tickValues);
    if ($$.isCategorized()) {
        axis.tickCentered(config.axis_x_tick_centered);
        if (isEmpty(config.axis_x_tick_culling)) {
            config.axis_x_tick_culling = false;
        }
    }

    return axis;
};
Axis.prototype.updateXAxisTickValues = function updateXAxisTickValues(targets, axis) {
    var $$ = this.owner,
        config = $$.config,
        tickValues;
    if (config.axis_x_tick_fit || config.axis_x_tick_count) {
        tickValues = this.generateTickValues($$.mapTargetsToUniqueXs(targets), config.axis_x_tick_count, $$.isTimeSeries());
    }
    if (axis) {
        axis.tickValues(tickValues);
    } else {
        $$.xAxis.tickValues(tickValues);
        $$.subXAxis.tickValues(tickValues);
    }
    return tickValues;
};
Axis.prototype.getYAxis = function getYAxis(scale, orient, tickFormat, tickValues, withOuterTick, withoutTransition, withoutRotateTickText) {
    var $$ = this.owner,
        config = $$.config,
        axisParams = {
        withOuterTick: withOuterTick,
        withoutTransition: withoutTransition,
        tickTextRotate: withoutRotateTickText ? 0 : config.axis_y_tick_rotate
    },
        axis = c3_axis($$.d3, axisParams).scale(scale).orient(orient).tickFormat(tickFormat);
    if ($$.isTimeSeriesY()) {
        axis.ticks($$.d3.time[config.axis_y_tick_time_value], config.axis_y_tick_time_interval);
    } else {
        axis.tickValues(tickValues);
    }
    return axis;
};
Axis.prototype.getId = function getId(id) {
    var config = this.owner.config;
    return id in config.data_axes ? config.data_axes[id] : 'y';
};
Axis.prototype.getXAxisTickFormat = function getXAxisTickFormat() {
    var $$ = this.owner,
        config = $$.config,
        format = $$.isTimeSeries() ? $$.defaultAxisTimeFormat : $$.isCategorized() ? $$.categoryName : function (v) {
        return v < 0 ? v.toFixed(0) : v;
    };
    if (config.axis_x_tick_format) {
        if (isFunction(config.axis_x_tick_format)) {
            format = config.axis_x_tick_format;
        } else if ($$.isTimeSeries()) {
            format = function format(date) {
                return date ? $$.axisTimeFormat(config.axis_x_tick_format)(date) : "";
            };
        }
    }
    return isFunction(format) ? function (v) {
        return format.call($$, v);
    } : format;
};
Axis.prototype.getTickValues = function getTickValues(tickValues, axis) {
    return tickValues ? tickValues : axis ? axis.tickValues() : undefined;
};
Axis.prototype.getXAxisTickValues = function getXAxisTickValues() {
    return this.getTickValues(this.owner.config.axis_x_tick_values, this.owner.xAxis);
};
Axis.prototype.getYAxisTickValues = function getYAxisTickValues() {
    return this.getTickValues(this.owner.config.axis_y_tick_values, this.owner.yAxis);
};
Axis.prototype.getY2AxisTickValues = function getY2AxisTickValues() {
    return this.getTickValues(this.owner.config.axis_y2_tick_values, this.owner.y2Axis);
};
Axis.prototype.getLabelOptionByAxisId = function getLabelOptionByAxisId(axisId) {
    var $$ = this.owner,
        config = $$.config,
        option;
    if (axisId === 'y') {
        option = config.axis_y_label;
    } else if (axisId === 'y2') {
        option = config.axis_y2_label;
    } else if (axisId === 'x') {
        option = config.axis_x_label;
    }
    return option;
};
Axis.prototype.getLabelText = function getLabelText(axisId) {
    var option = this.getLabelOptionByAxisId(axisId);
    return isString(option) ? option : option ? option.text : null;
};
Axis.prototype.setLabelText = function setLabelText(axisId, text) {
    var $$ = this.owner,
        config = $$.config,
        option = this.getLabelOptionByAxisId(axisId);
    if (isString(option)) {
        if (axisId === 'y') {
            config.axis_y_label = text;
        } else if (axisId === 'y2') {
            config.axis_y2_label = text;
        } else if (axisId === 'x') {
            config.axis_x_label = text;
        }
    } else if (option) {
        option.text = text;
    }
};
Axis.prototype.getLabelPosition = function getLabelPosition(axisId, defaultPosition) {
    var option = this.getLabelOptionByAxisId(axisId),
        position = option && (typeof option === 'undefined' ? 'undefined' : _typeof(option)) === 'object' && option.position ? option.position : defaultPosition;
    return {
        isInner: position.indexOf('inner') >= 0,
        isOuter: position.indexOf('outer') >= 0,
        isLeft: position.indexOf('left') >= 0,
        isCenter: position.indexOf('center') >= 0,
        isRight: position.indexOf('right') >= 0,
        isTop: position.indexOf('top') >= 0,
        isMiddle: position.indexOf('middle') >= 0,
        isBottom: position.indexOf('bottom') >= 0
    };
};
Axis.prototype.getXAxisLabelPosition = function getXAxisLabelPosition() {
    return this.getLabelPosition('x', this.owner.config.axis_rotated ? 'inner-top' : 'inner-right');
};
Axis.prototype.getYAxisLabelPosition = function getYAxisLabelPosition() {
    return this.getLabelPosition('y', this.owner.config.axis_rotated ? 'inner-right' : 'inner-top');
};
Axis.prototype.getY2AxisLabelPosition = function getY2AxisLabelPosition() {
    return this.getLabelPosition('y2', this.owner.config.axis_rotated ? 'inner-right' : 'inner-top');
};
Axis.prototype.getLabelPositionById = function getLabelPositionById(id) {
    return id === 'y2' ? this.getY2AxisLabelPosition() : id === 'y' ? this.getYAxisLabelPosition() : this.getXAxisLabelPosition();
};
Axis.prototype.textForXAxisLabel = function textForXAxisLabel() {
    return this.getLabelText('x');
};
Axis.prototype.textForYAxisLabel = function textForYAxisLabel() {
    return this.getLabelText('y');
};
Axis.prototype.textForY2AxisLabel = function textForY2AxisLabel() {
    return this.getLabelText('y2');
};
Axis.prototype.xForAxisLabel = function xForAxisLabel(forHorizontal, position) {
    var $$ = this.owner;
    if (forHorizontal) {
        return position.isLeft ? 0 : position.isCenter ? $$.width / 2 : $$.width;
    } else {
        return position.isBottom ? -$$.height : position.isMiddle ? -$$.height / 2 : 0;
    }
};
Axis.prototype.dxForAxisLabel = function dxForAxisLabel(forHorizontal, position) {
    if (forHorizontal) {
        return position.isLeft ? "0.5em" : position.isRight ? "-0.5em" : "0";
    } else {
        return position.isTop ? "-0.5em" : position.isBottom ? "0.5em" : "0";
    }
};
Axis.prototype.textAnchorForAxisLabel = function textAnchorForAxisLabel(forHorizontal, position) {
    if (forHorizontal) {
        return position.isLeft ? 'start' : position.isCenter ? 'middle' : 'end';
    } else {
        return position.isBottom ? 'start' : position.isMiddle ? 'middle' : 'end';
    }
};
Axis.prototype.xForXAxisLabel = function xForXAxisLabel() {
    return this.xForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());
};
Axis.prototype.xForYAxisLabel = function xForYAxisLabel() {
    return this.xForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());
};
Axis.prototype.xForY2AxisLabel = function xForY2AxisLabel() {
    return this.xForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());
};
Axis.prototype.dxForXAxisLabel = function dxForXAxisLabel() {
    return this.dxForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());
};
Axis.prototype.dxForYAxisLabel = function dxForYAxisLabel() {
    return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());
};
Axis.prototype.dxForY2AxisLabel = function dxForY2AxisLabel() {
    return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());
};
Axis.prototype.dyForXAxisLabel = function dyForXAxisLabel() {
    var $$ = this.owner,
        config = $$.config,
        position = this.getXAxisLabelPosition();
    if (config.axis_rotated) {
        return position.isInner ? "1.2em" : -25 - this.getMaxTickWidth('x');
    } else {
        return position.isInner ? "-0.5em" : config.axis_x_height ? config.axis_x_height - 10 : "3em";
    }
};
Axis.prototype.dyForYAxisLabel = function dyForYAxisLabel() {
    var $$ = this.owner,
        position = this.getYAxisLabelPosition();
    if ($$.config.axis_rotated) {
        return position.isInner ? "-0.5em" : "3em";
    } else {
        return position.isInner ? "1.2em" : -10 - ($$.config.axis_y_inner ? 0 : this.getMaxTickWidth('y') + 10);
    }
};
Axis.prototype.dyForY2AxisLabel = function dyForY2AxisLabel() {
    var $$ = this.owner,
        position = this.getY2AxisLabelPosition();
    if ($$.config.axis_rotated) {
        return position.isInner ? "1.2em" : "-2.2em";
    } else {
        return position.isInner ? "-0.5em" : 15 + ($$.config.axis_y2_inner ? 0 : this.getMaxTickWidth('y2') + 15);
    }
};
Axis.prototype.textAnchorForXAxisLabel = function textAnchorForXAxisLabel() {
    var $$ = this.owner;
    return this.textAnchorForAxisLabel(!$$.config.axis_rotated, this.getXAxisLabelPosition());
};
Axis.prototype.textAnchorForYAxisLabel = function textAnchorForYAxisLabel() {
    var $$ = this.owner;
    return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getYAxisLabelPosition());
};
Axis.prototype.textAnchorForY2AxisLabel = function textAnchorForY2AxisLabel() {
    var $$ = this.owner;
    return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getY2AxisLabelPosition());
};
Axis.prototype.getMaxTickWidth = function getMaxTickWidth(id, withoutRecompute) {
    var $$ = this.owner,
        config = $$.config,
        maxWidth = 0,
        targetsToShow,
        scale,
        axis,
        dummy,
        svg;
    if (withoutRecompute && $$.currentMaxTickWidths[id]) {
        return $$.currentMaxTickWidths[id];
    }
    if ($$.svg) {
        targetsToShow = $$.filterTargetsToShow($$.data.targets);
        if (id === 'y') {
            scale = $$.y.copy().domain($$.getYDomain(targetsToShow, 'y'));
            axis = this.getYAxis(scale, $$.yOrient, config.axis_y_tick_format, $$.yAxisTickValues, false, true, true);
        } else if (id === 'y2') {
            scale = $$.y2.copy().domain($$.getYDomain(targetsToShow, 'y2'));
            axis = this.getYAxis(scale, $$.y2Orient, config.axis_y2_tick_format, $$.y2AxisTickValues, false, true, true);
        } else {
            scale = $$.x.copy().domain($$.getXDomain(targetsToShow));
            axis = this.getXAxis(scale, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, false, true, true);
            this.updateXAxisTickValues(targetsToShow, axis);
        }
        dummy = $$.d3.select('body').append('div').classed('c3', true);
        svg = dummy.append("svg").style('visibility', 'hidden').style('position', 'fixed').style('top', 0).style('left', 0), svg.append('g').call(axis).each(function () {
            $$.d3.select(this).selectAll('text').each(function () {
                var box = this.getBoundingClientRect();
                if (maxWidth < box.width) {
                    maxWidth = box.width;
                }
            });
            dummy.remove();
        });
    }
    $$.currentMaxTickWidths[id] = maxWidth <= 0 ? $$.currentMaxTickWidths[id] : maxWidth;
    return $$.currentMaxTickWidths[id];
};

Axis.prototype.updateLabels = function updateLabels(withTransition) {
    var $$ = this.owner;
    var axisXLabel = $$.main.select('.' + CLASS.axisX + ' .' + CLASS.axisXLabel),
        axisYLabel = $$.main.select('.' + CLASS.axisY + ' .' + CLASS.axisYLabel),
        axisY2Label = $$.main.select('.' + CLASS.axisY2 + ' .' + CLASS.axisY2Label);
    (withTransition ? axisXLabel.transition() : axisXLabel).attr("x", this.xForXAxisLabel.bind(this)).attr("dx", this.dxForXAxisLabel.bind(this)).attr("dy", this.dyForXAxisLabel.bind(this)).text(this.textForXAxisLabel.bind(this));
    (withTransition ? axisYLabel.transition() : axisYLabel).attr("x", this.xForYAxisLabel.bind(this)).attr("dx", this.dxForYAxisLabel.bind(this)).attr("dy", this.dyForYAxisLabel.bind(this)).text(this.textForYAxisLabel.bind(this));
    (withTransition ? axisY2Label.transition() : axisY2Label).attr("x", this.xForY2AxisLabel.bind(this)).attr("dx", this.dxForY2AxisLabel.bind(this)).attr("dy", this.dyForY2AxisLabel.bind(this)).text(this.textForY2AxisLabel.bind(this));
};
Axis.prototype.getPadding = function getPadding(padding, key, defaultValue, domainLength) {
    var p = typeof padding === 'number' ? padding : padding[key];
    if (!isValue(p)) {
        return defaultValue;
    }
    if (padding.unit === 'ratio') {
        return padding[key] * domainLength;
    }
    // assume padding is pixels if unit is not specified
    return this.convertPixelsToAxisPadding(p, domainLength);
};
Axis.prototype.convertPixelsToAxisPadding = function convertPixelsToAxisPadding(pixels, domainLength) {
    var $$ = this.owner,
        length = $$.config.axis_rotated ? $$.width : $$.height;
    return domainLength * (pixels / length);
};
Axis.prototype.generateTickValues = function generateTickValues(values, tickCount, forTimeSeries) {
    var tickValues = values,
        targetCount,
        start,
        end,
        count,
        interval,
        i,
        tickValue;
    if (tickCount) {
        targetCount = isFunction(tickCount) ? tickCount() : tickCount;
        // compute ticks according to tickCount
        if (targetCount === 1) {
            tickValues = [values[0]];
        } else if (targetCount === 2) {
            tickValues = [values[0], values[values.length - 1]];
        } else if (targetCount > 2) {
            count = targetCount - 2;
            start = values[0];
            end = values[values.length - 1];
            interval = (end - start) / (count + 1);
            // re-construct unique values
            tickValues = [start];
            for (i = 0; i < count; i++) {
                tickValue = +start + interval * (i + 1);
                tickValues.push(forTimeSeries ? new Date(tickValue) : tickValue);
            }
            tickValues.push(end);
        }
    }
    if (!forTimeSeries) {
        tickValues = tickValues.sort(function (a, b) {
            return a - b;
        });
    }
    return tickValues;
};
Axis.prototype.generateTransitions = function generateTransitions(duration) {
    var $$ = this.owner,
        axes = $$.axes;
    return {
        axisX: duration ? axes.x.transition().duration(duration) : axes.x,
        axisY: duration ? axes.y.transition().duration(duration) : axes.y,
        axisY2: duration ? axes.y2.transition().duration(duration) : axes.y2,
        axisSubX: duration ? axes.subx.transition().duration(duration) : axes.subx
    };
};
Axis.prototype.redraw = function redraw(transitions, isHidden) {
    var $$ = this.owner;
    $$.axes.x.style("opacity", isHidden ? 0 : 1);
    $$.axes.y.style("opacity", isHidden ? 0 : 1);
    $$.axes.y2.style("opacity", isHidden ? 0 : 1);
    $$.axes.subx.style("opacity", isHidden ? 0 : 1);
    transitions.axisX.call($$.xAxis);
    transitions.axisY.call($$.yAxis);
    transitions.axisY2.call($$.y2Axis);
    transitions.axisSubX.call($$.subXAxis);
};

var c3$1 = { version: "0.4.15" };

var c3_chart_fn;
var c3_chart_internal_fn;
var c3_chart_internal_axis_fn;

function API(owner) {
    this.owner = owner;
}

function inherit(base, derived) {

    if (Object.create) {
        derived.prototype = Object.create(base.prototype);
    } else {
        var f = function f() {};
        f.prototype = base.prototype;
        derived.prototype = new f();
    }

    derived.prototype.constructor = derived;

    return derived;
}

function Chart(config) {
    var $$ = this.internal = new ChartInternal(this);
    $$.loadConfig(config);

    $$.beforeInit(config);
    $$.init();
    $$.afterInit(config);

    // bind "this" to nested API
    (function bindThis(fn, target, argThis) {
        Object.keys(fn).forEach(function (key) {
            target[key] = fn[key].bind(argThis);
            if (Object.keys(fn[key]).length > 0) {
                bindThis(fn[key], target[key], argThis);
            }
        });
    })(c3_chart_fn, this, this);
}

function ChartInternal(api) {
    var $$ = this;
    $$.d3 = window.d3 ? window.d3 :  true ? __webpack_require__(92846) : 0;
    $$.api = api;
    $$.config = $$.getDefaultConfig();
    $$.data = {};
    $$.cache = {};
    $$.axes = {};
}

c3$1.generate = function (config) {
    return new Chart(config);
};

c3$1.chart = {
    fn: Chart.prototype,
    internal: {
        fn: ChartInternal.prototype,
        axis: {
            fn: Axis.prototype
        }
    }
};
c3_chart_fn = c3$1.chart.fn;
c3_chart_internal_fn = c3$1.chart.internal.fn;
c3_chart_internal_axis_fn = c3$1.chart.internal.axis.fn;

c3_chart_internal_fn.beforeInit = function () {
    // can do something
};
c3_chart_internal_fn.afterInit = function () {
    // can do something
};
c3_chart_internal_fn.init = function () {
    var $$ = this,
        config = $$.config;

    $$.initParams();

    if (config.data_url) {
        $$.convertUrlToData(config.data_url, config.data_mimeType, config.data_headers, config.data_keys, $$.initWithData);
    } else if (config.data_json) {
        $$.initWithData($$.convertJsonToData(config.data_json, config.data_keys));
    } else if (config.data_rows) {
        $$.initWithData($$.convertRowsToData(config.data_rows));
    } else if (config.data_columns) {
        $$.initWithData($$.convertColumnsToData(config.data_columns));
    } else {
        throw Error('url or json or rows or columns is required.');
    }
};

c3_chart_internal_fn.initParams = function () {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config;

    // MEMO: clipId needs to be unique because it conflicts when multiple charts exist
    $$.clipId = "c3-" + +new Date() + '-clip', $$.clipIdForXAxis = $$.clipId + '-xaxis', $$.clipIdForYAxis = $$.clipId + '-yaxis', $$.clipIdForGrid = $$.clipId + '-grid', $$.clipIdForSubchart = $$.clipId + '-subchart', $$.clipPath = $$.getClipPath($$.clipId), $$.clipPathForXAxis = $$.getClipPath($$.clipIdForXAxis), $$.clipPathForYAxis = $$.getClipPath($$.clipIdForYAxis);
    $$.clipPathForGrid = $$.getClipPath($$.clipIdForGrid), $$.clipPathForSubchart = $$.getClipPath($$.clipIdForSubchart), $$.dragStart = null;
    $$.dragging = false;
    $$.flowing = false;
    $$.cancelClick = false;
    $$.mouseover = false;
    $$.transiting = false;

    $$.color = $$.generateColor();
    $$.levelColor = $$.generateLevelColor();

    $$.dataTimeFormat = config.data_xLocaltime ? d3.time.format : d3.time.format.utc;
    $$.axisTimeFormat = config.axis_x_localtime ? d3.time.format : d3.time.format.utc;
    $$.defaultAxisTimeFormat = $$.axisTimeFormat.multi([[".%L", function (d) {
        return d.getMilliseconds();
    }], [":%S", function (d) {
        return d.getSeconds();
    }], ["%I:%M", function (d) {
        return d.getMinutes();
    }], ["%I %p", function (d) {
        return d.getHours();
    }], ["%-m/%-d", function (d) {
        return d.getDay() && d.getDate() !== 1;
    }], ["%-m/%-d", function (d) {
        return d.getDate() !== 1;
    }], ["%-m/%-d", function (d) {
        return d.getMonth();
    }], ["%Y/%-m/%-d", function () {
        return true;
    }]]);

    $$.hiddenTargetIds = [];
    $$.hiddenLegendIds = [];
    $$.focusedTargetIds = [];
    $$.defocusedTargetIds = [];

    $$.xOrient = config.axis_rotated ? "left" : "bottom";
    $$.yOrient = config.axis_rotated ? config.axis_y_inner ? "top" : "bottom" : config.axis_y_inner ? "right" : "left";
    $$.y2Orient = config.axis_rotated ? config.axis_y2_inner ? "bottom" : "top" : config.axis_y2_inner ? "left" : "right";
    $$.subXOrient = config.axis_rotated ? "left" : "bottom";

    $$.isLegendRight = config.legend_position === 'right';
    $$.isLegendInset = config.legend_position === 'inset';
    $$.isLegendTop = config.legend_inset_anchor === 'top-left' || config.legend_inset_anchor === 'top-right';
    $$.isLegendLeft = config.legend_inset_anchor === 'top-left' || config.legend_inset_anchor === 'bottom-left';
    $$.legendStep = 0;
    $$.legendItemWidth = 0;
    $$.legendItemHeight = 0;

    $$.currentMaxTickWidths = {
        x: 0,
        y: 0,
        y2: 0
    };

    $$.rotated_padding_left = 30;
    $$.rotated_padding_right = config.axis_rotated && !config.axis_x_show ? 0 : 30;
    $$.rotated_padding_top = 5;

    $$.withoutFadeIn = {};

    $$.intervalForObserveInserted = undefined;

    $$.axes.subx = d3.selectAll([]); // needs when excluding subchart.js
};

c3_chart_internal_fn.initChartElements = function () {
    if (this.initBar) {
        this.initBar();
    }
    if (this.initLine) {
        this.initLine();
    }
    if (this.initArc) {
        this.initArc();
    }
    if (this.initGauge) {
        this.initGauge();
    }
    if (this.initText) {
        this.initText();
    }
};

c3_chart_internal_fn.initWithData = function (data) {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config;
    var defs,
        main,
        binding = true;

    $$.axis = new Axis($$);

    if ($$.initPie) {
        $$.initPie();
    }
    if ($$.initBrush) {
        $$.initBrush();
    }
    if ($$.initZoom) {
        $$.initZoom();
    }

    if (!config.bindto) {
        $$.selectChart = d3.selectAll([]);
    } else if (typeof config.bindto.node === 'function') {
        $$.selectChart = config.bindto;
    } else {
        $$.selectChart = d3.select(config.bindto);
    }
    if ($$.selectChart.empty()) {
        $$.selectChart = d3.select(document.createElement('div')).style('opacity', 0);
        $$.observeInserted($$.selectChart);
        binding = false;
    }
    $$.selectChart.html("").classed("c3", true);

    // Init data as targets
    $$.data.xs = {};
    $$.data.targets = $$.convertDataToTargets(data);

    if (config.data_filter) {
        $$.data.targets = $$.data.targets.filter(config.data_filter);
    }

    // Set targets to hide if needed
    if (config.data_hide) {
        $$.addHiddenTargetIds(config.data_hide === true ? $$.mapToIds($$.data.targets) : config.data_hide);
    }
    if (config.legend_hide) {
        $$.addHiddenLegendIds(config.legend_hide === true ? $$.mapToIds($$.data.targets) : config.legend_hide);
    }

    // when gauge, hide legend // TODO: fix
    if ($$.hasType('gauge')) {
        config.legend_show = false;
    }

    // Init sizes and scales
    $$.updateSizes();
    $$.updateScales();

    // Set domains for each scale
    $$.x.domain(d3.extent($$.getXDomain($$.data.targets)));
    $$.y.domain($$.getYDomain($$.data.targets, 'y'));
    $$.y2.domain($$.getYDomain($$.data.targets, 'y2'));
    $$.subX.domain($$.x.domain());
    $$.subY.domain($$.y.domain());
    $$.subY2.domain($$.y2.domain());

    // Save original x domain for zoom update
    $$.orgXDomain = $$.x.domain();

    // Set initialized scales to brush and zoom
    if ($$.brush) {
        $$.brush.scale($$.subX);
    }
    if (config.zoom_enabled) {
        $$.zoom.scale($$.x);
    }

    /*-- Basic Elements --*/

    // Define svgs
    $$.svg = $$.selectChart.append("svg").style("overflow", "hidden").on('mouseenter', function () {
        return config.onmouseover.call($$);
    }).on('mouseleave', function () {
        return config.onmouseout.call($$);
    });

    if ($$.config.svg_classname) {
        $$.svg.attr('class', $$.config.svg_classname);
    }

    // Define defs
    defs = $$.svg.append("defs");
    $$.clipChart = $$.appendClip(defs, $$.clipId);
    $$.clipXAxis = $$.appendClip(defs, $$.clipIdForXAxis);
    $$.clipYAxis = $$.appendClip(defs, $$.clipIdForYAxis);
    $$.clipGrid = $$.appendClip(defs, $$.clipIdForGrid);
    $$.clipSubchart = $$.appendClip(defs, $$.clipIdForSubchart);
    $$.updateSvgSize();

    // Define regions
    main = $$.main = $$.svg.append("g").attr("transform", $$.getTranslate('main'));

    if ($$.initSubchart) {
        $$.initSubchart();
    }
    if ($$.initTooltip) {
        $$.initTooltip();
    }
    if ($$.initLegend) {
        $$.initLegend();
    }
    if ($$.initTitle) {
        $$.initTitle();
    }

    /*-- Main Region --*/

    // text when empty
    main.append("text").attr("class", CLASS.text + ' ' + CLASS.empty).attr("text-anchor", "middle" // horizontal centering of text at x position in all browsers.
    ).attr("dominant-baseline", "middle"); // vertical centering of text at y position in all browsers, except IE.

    // Regions
    $$.initRegion();

    // Grids
    $$.initGrid();

    // Define g for chart area
    main.append('g').attr("clip-path", $$.clipPath).attr('class', CLASS.chart);

    // Grid lines
    if (config.grid_lines_front) {
        $$.initGridLines();
    }

    // Cover whole with rects for events
    $$.initEventRect();

    // Define g for chart
    $$.initChartElements();

    // if zoom privileged, insert rect to forefront
    // TODO: is this needed?
    main.insert('rect', config.zoom_privileged ? null : 'g.' + CLASS.regions).attr('class', CLASS.zoomRect).attr('width', $$.width).attr('height', $$.height).style('opacity', 0).on("dblclick.zoom", null);

    // Set default extent if defined
    if (config.axis_x_extent) {
        $$.brush.extent($$.getDefaultExtent());
    }

    // Add Axis
    $$.axis.init();

    // Set targets
    $$.updateTargets($$.data.targets);

    // Draw with targets
    if (binding) {
        $$.updateDimension();
        $$.config.oninit.call($$);
        $$.redraw({
            withTransition: false,
            withTransform: true,
            withUpdateXDomain: true,
            withUpdateOrgXDomain: true,
            withTransitionForAxis: false
        });
    }

    // Bind resize event
    $$.bindResize();

    // export element of the chart
    $$.api.element = $$.selectChart.node();
};

c3_chart_internal_fn.smoothLines = function (el, type) {
    var $$ = this;
    if (type === 'grid') {
        el.each(function () {
            var g = $$.d3.select(this),
                x1 = g.attr('x1'),
                x2 = g.attr('x2'),
                y1 = g.attr('y1'),
                y2 = g.attr('y2');
            g.attr({
                'x1': Math.ceil(x1),
                'x2': Math.ceil(x2),
                'y1': Math.ceil(y1),
                'y2': Math.ceil(y2)
            });
        });
    }
};

c3_chart_internal_fn.updateSizes = function () {
    var $$ = this,
        config = $$.config;
    var legendHeight = $$.legend ? $$.getLegendHeight() : 0,
        legendWidth = $$.legend ? $$.getLegendWidth() : 0,
        legendHeightForBottom = $$.isLegendRight || $$.isLegendInset ? 0 : legendHeight,
        hasArc = $$.hasArcType(),
        xAxisHeight = config.axis_rotated || hasArc ? 0 : $$.getHorizontalAxisHeight('x'),
        subchartHeight = config.subchart_show && !hasArc ? config.subchart_size_height + xAxisHeight : 0;

    $$.currentWidth = $$.getCurrentWidth();
    $$.currentHeight = $$.getCurrentHeight();

    // for main
    $$.margin = config.axis_rotated ? {
        top: $$.getHorizontalAxisHeight('y2') + $$.getCurrentPaddingTop(),
        right: hasArc ? 0 : $$.getCurrentPaddingRight(),
        bottom: $$.getHorizontalAxisHeight('y') + legendHeightForBottom + $$.getCurrentPaddingBottom(),
        left: subchartHeight + (hasArc ? 0 : $$.getCurrentPaddingLeft())
    } : {
        top: 4 + $$.getCurrentPaddingTop(), // for top tick text
        right: hasArc ? 0 : $$.getCurrentPaddingRight(),
        bottom: xAxisHeight + subchartHeight + legendHeightForBottom + $$.getCurrentPaddingBottom(),
        left: hasArc ? 0 : $$.getCurrentPaddingLeft()
    };

    // for subchart
    $$.margin2 = config.axis_rotated ? {
        top: $$.margin.top,
        right: NaN,
        bottom: 20 + legendHeightForBottom,
        left: $$.rotated_padding_left
    } : {
        top: $$.currentHeight - subchartHeight - legendHeightForBottom,
        right: NaN,
        bottom: xAxisHeight + legendHeightForBottom,
        left: $$.margin.left
    };

    // for legend
    $$.margin3 = {
        top: 0,
        right: NaN,
        bottom: 0,
        left: 0
    };
    if ($$.updateSizeForLegend) {
        $$.updateSizeForLegend(legendHeight, legendWidth);
    }

    $$.width = $$.currentWidth - $$.margin.left - $$.margin.right;
    $$.height = $$.currentHeight - $$.margin.top - $$.margin.bottom;
    if ($$.width < 0) {
        $$.width = 0;
    }
    if ($$.height < 0) {
        $$.height = 0;
    }

    $$.width2 = config.axis_rotated ? $$.margin.left - $$.rotated_padding_left - $$.rotated_padding_right : $$.width;
    $$.height2 = config.axis_rotated ? $$.height : $$.currentHeight - $$.margin2.top - $$.margin2.bottom;
    if ($$.width2 < 0) {
        $$.width2 = 0;
    }
    if ($$.height2 < 0) {
        $$.height2 = 0;
    }

    // for arc
    $$.arcWidth = $$.width - ($$.isLegendRight ? legendWidth + 10 : 0);
    $$.arcHeight = $$.height - ($$.isLegendRight ? 0 : 10);
    if ($$.hasType('gauge') && !config.gauge_fullCircle) {
        $$.arcHeight += $$.height - $$.getGaugeLabelHeight();
    }
    if ($$.updateRadius) {
        $$.updateRadius();
    }

    if ($$.isLegendRight && hasArc) {
        $$.margin3.left = $$.arcWidth / 2 + $$.radiusExpanded * 1.1;
    }
};

c3_chart_internal_fn.updateTargets = function (targets) {
    var $$ = this;

    /*-- Main --*/

    //-- Text --//
    $$.updateTargetsForText(targets);

    //-- Bar --//
    $$.updateTargetsForBar(targets);

    //-- Line --//
    $$.updateTargetsForLine(targets);

    //-- Arc --//
    if ($$.hasArcType() && $$.updateTargetsForArc) {
        $$.updateTargetsForArc(targets);
    }

    /*-- Sub --*/

    if ($$.updateTargetsForSubchart) {
        $$.updateTargetsForSubchart(targets);
    }

    // Fade-in each chart
    $$.showTargets();
};
c3_chart_internal_fn.showTargets = function () {
    var $$ = this;
    $$.svg.selectAll('.' + CLASS.target).filter(function (d) {
        return $$.isTargetToShow(d.id);
    }).transition().duration($$.config.transition_duration).style("opacity", 1);
};

c3_chart_internal_fn.redraw = function (options, transitions) {
    var $$ = this,
        main = $$.main,
        d3 = $$.d3,
        config = $$.config;
    var areaIndices = $$.getShapeIndices($$.isAreaType),
        barIndices = $$.getShapeIndices($$.isBarType),
        lineIndices = $$.getShapeIndices($$.isLineType);
    var withY, withSubchart, withTransition, withTransitionForExit, withTransitionForAxis, withTransform, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain, withLegend, withEventRect, withDimension, withUpdateXAxis;
    var hideAxis = $$.hasArcType();
    var drawArea, drawBar, drawLine, xForText, yForText;
    var duration, durationForExit, durationForAxis;
    var waitForDraw, flow;
    var targetsToShow = $$.filterTargetsToShow($$.data.targets),
        tickValues,
        i,
        intervalForCulling,
        xDomainForZoom;
    var xv = $$.xv.bind($$),
        cx,
        cy;

    options = options || {};
    withY = getOption(options, "withY", true);
    withSubchart = getOption(options, "withSubchart", true);
    withTransition = getOption(options, "withTransition", true);
    withTransform = getOption(options, "withTransform", false);
    withUpdateXDomain = getOption(options, "withUpdateXDomain", false);
    withUpdateOrgXDomain = getOption(options, "withUpdateOrgXDomain", false);
    withTrimXDomain = getOption(options, "withTrimXDomain", true);
    withUpdateXAxis = getOption(options, "withUpdateXAxis", withUpdateXDomain);
    withLegend = getOption(options, "withLegend", false);
    withEventRect = getOption(options, "withEventRect", true);
    withDimension = getOption(options, "withDimension", true);
    withTransitionForExit = getOption(options, "withTransitionForExit", withTransition);
    withTransitionForAxis = getOption(options, "withTransitionForAxis", withTransition);

    duration = withTransition ? config.transition_duration : 0;
    durationForExit = withTransitionForExit ? duration : 0;
    durationForAxis = withTransitionForAxis ? duration : 0;

    transitions = transitions || $$.axis.generateTransitions(durationForAxis);

    // update legend and transform each g
    if (withLegend && config.legend_show) {
        $$.updateLegend($$.mapToIds($$.data.targets), options, transitions);
    } else if (withDimension) {
        // need to update dimension (e.g. axis.y.tick.values) because y tick values should change
        // no need to update axis in it because they will be updated in redraw()
        $$.updateDimension(true);
    }

    // MEMO: needed for grids calculation
    if ($$.isCategorized() && targetsToShow.length === 0) {
        $$.x.domain([0, $$.axes.x.selectAll('.tick').size()]);
    }

    if (targetsToShow.length) {
        $$.updateXDomain(targetsToShow, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain);
        if (!config.axis_x_tick_values) {
            tickValues = $$.axis.updateXAxisTickValues(targetsToShow);
        }
    } else {
        $$.xAxis.tickValues([]);
        $$.subXAxis.tickValues([]);
    }

    if (config.zoom_rescale && !options.flow) {
        xDomainForZoom = $$.x.orgDomain();
    }

    $$.y.domain($$.getYDomain(targetsToShow, 'y', xDomainForZoom));
    $$.y2.domain($$.getYDomain(targetsToShow, 'y2', xDomainForZoom));

    if (!config.axis_y_tick_values && config.axis_y_tick_count) {
        $$.yAxis.tickValues($$.axis.generateTickValues($$.y.domain(), config.axis_y_tick_count));
    }
    if (!config.axis_y2_tick_values && config.axis_y2_tick_count) {
        $$.y2Axis.tickValues($$.axis.generateTickValues($$.y2.domain(), config.axis_y2_tick_count));
    }

    // axes
    $$.axis.redraw(transitions, hideAxis);

    // Update axis label
    $$.axis.updateLabels(withTransition);

    // show/hide if manual culling needed
    if ((withUpdateXDomain || withUpdateXAxis) && targetsToShow.length) {
        if (config.axis_x_tick_culling && tickValues) {
            for (i = 1; i < tickValues.length; i++) {
                if (tickValues.length / i < config.axis_x_tick_culling_max) {
                    intervalForCulling = i;
                    break;
                }
            }
            $$.svg.selectAll('.' + CLASS.axisX + ' .tick text').each(function (e) {
                var index = tickValues.indexOf(e);
                if (index >= 0) {
                    d3.select(this).style('display', index % intervalForCulling ? 'none' : 'block');
                }
            });
        } else {
            $$.svg.selectAll('.' + CLASS.axisX + ' .tick text').style('display', 'block');
        }
    }

    // setup drawer - MEMO: these must be called after axis updated
    drawArea = $$.generateDrawArea ? $$.generateDrawArea(areaIndices, false) : undefined;
    drawBar = $$.generateDrawBar ? $$.generateDrawBar(barIndices) : undefined;
    drawLine = $$.generateDrawLine ? $$.generateDrawLine(lineIndices, false) : undefined;
    xForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, true);
    yForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, false);

    // Update sub domain
    if (withY) {
        $$.subY.domain($$.getYDomain(targetsToShow, 'y'));
        $$.subY2.domain($$.getYDomain(targetsToShow, 'y2'));
    }

    // xgrid focus
    $$.updateXgridFocus();

    // Data empty label positioning and text.
    main.select("text." + CLASS.text + '.' + CLASS.empty).attr("x", $$.width / 2).attr("y", $$.height / 2).text(config.data_empty_label_text).transition().style('opacity', targetsToShow.length ? 0 : 1);

    // grid
    $$.updateGrid(duration);

    // rect for regions
    $$.updateRegion(duration);

    // bars
    $$.updateBar(durationForExit);

    // lines, areas and cricles
    $$.updateLine(durationForExit);
    $$.updateArea(durationForExit);
    $$.updateCircle();

    // text
    if ($$.hasDataLabel()) {
        $$.updateText(durationForExit);
    }

    // title
    if ($$.redrawTitle) {
        $$.redrawTitle();
    }

    // arc
    if ($$.redrawArc) {
        $$.redrawArc(duration, durationForExit, withTransform);
    }

    // subchart
    if ($$.redrawSubchart) {
        $$.redrawSubchart(withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices);
    }

    // circles for select
    main.selectAll('.' + CLASS.selectedCircles).filter($$.isBarType.bind($$)).selectAll('circle').remove();

    // event rects will redrawn when flow called
    if (config.interaction_enabled && !options.flow && withEventRect) {
        $$.redrawEventRect();
        if ($$.updateZoom) {
            $$.updateZoom();
        }
    }

    // update circleY based on updated parameters
    $$.updateCircleY();

    // generate circle x/y functions depending on updated params
    cx = ($$.config.axis_rotated ? $$.circleY : $$.circleX).bind($$);
    cy = ($$.config.axis_rotated ? $$.circleX : $$.circleY).bind($$);

    if (options.flow) {
        flow = $$.generateFlow({
            targets: targetsToShow,
            flow: options.flow,
            duration: options.flow.duration,
            drawBar: drawBar,
            drawLine: drawLine,
            drawArea: drawArea,
            cx: cx,
            cy: cy,
            xv: xv,
            xForText: xForText,
            yForText: yForText
        });
    }

    if ((duration || flow) && $$.isTabVisible()) {
        // Only use transition if tab visible. See #938.
        // transition should be derived from one transition
        d3.transition().duration(duration).each(function () {
            var transitionsToWait = [];

            // redraw and gather transitions
            [$$.redrawBar(drawBar, true), $$.redrawLine(drawLine, true), $$.redrawArea(drawArea, true), $$.redrawCircle(cx, cy, true), $$.redrawText(xForText, yForText, options.flow, true), $$.redrawRegion(true), $$.redrawGrid(true)].forEach(function (transitions) {
                transitions.forEach(function (transition) {
                    transitionsToWait.push(transition);
                });
            });

            // Wait for end of transitions to call flow and onrendered callback
            waitForDraw = $$.generateWait();
            transitionsToWait.forEach(function (t) {
                waitForDraw.add(t);
            });
        }).call(waitForDraw, function () {
            if (flow) {
                flow();
            }
            if (config.onrendered) {
                config.onrendered.call($$);
            }
        });
    } else {
        $$.redrawBar(drawBar);
        $$.redrawLine(drawLine);
        $$.redrawArea(drawArea);
        $$.redrawCircle(cx, cy);
        $$.redrawText(xForText, yForText, options.flow);
        $$.redrawRegion();
        $$.redrawGrid();
        if (config.onrendered) {
            config.onrendered.call($$);
        }
    }

    // update fadein condition
    $$.mapToIds($$.data.targets).forEach(function (id) {
        $$.withoutFadeIn[id] = true;
    });
};

c3_chart_internal_fn.updateAndRedraw = function (options) {
    var $$ = this,
        config = $$.config,
        transitions;
    options = options || {};
    // same with redraw
    options.withTransition = getOption(options, "withTransition", true);
    options.withTransform = getOption(options, "withTransform", false);
    options.withLegend = getOption(options, "withLegend", false);
    // NOT same with redraw
    options.withUpdateXDomain = true;
    options.withUpdateOrgXDomain = true;
    options.withTransitionForExit = false;
    options.withTransitionForTransform = getOption(options, "withTransitionForTransform", options.withTransition);
    // MEMO: this needs to be called before updateLegend and it means this ALWAYS needs to be called)
    $$.updateSizes();
    // MEMO: called in updateLegend in redraw if withLegend
    if (!(options.withLegend && config.legend_show)) {
        transitions = $$.axis.generateTransitions(options.withTransitionForAxis ? config.transition_duration : 0);
        // Update scales
        $$.updateScales();
        $$.updateSvgSize();
        // Update g positions
        $$.transformAll(options.withTransitionForTransform, transitions);
    }
    // Draw with new sizes & scales
    $$.redraw(options, transitions);
};
c3_chart_internal_fn.redrawWithoutRescale = function () {
    this.redraw({
        withY: false,
        withSubchart: false,
        withEventRect: false,
        withTransitionForAxis: false
    });
};

c3_chart_internal_fn.isTimeSeries = function () {
    return this.config.axis_x_type === 'timeseries';
};
c3_chart_internal_fn.isCategorized = function () {
    return this.config.axis_x_type.indexOf('categor') >= 0;
};
c3_chart_internal_fn.isCustomX = function () {
    var $$ = this,
        config = $$.config;
    return !$$.isTimeSeries() && (config.data_x || notEmpty(config.data_xs));
};

c3_chart_internal_fn.isTimeSeriesY = function () {
    return this.config.axis_y_type === 'timeseries';
};

c3_chart_internal_fn.getTranslate = function (target) {
    var $$ = this,
        config = $$.config,
        x,
        y;
    if (target === 'main') {
        x = asHalfPixel($$.margin.left);
        y = asHalfPixel($$.margin.top);
    } else if (target === 'context') {
        x = asHalfPixel($$.margin2.left);
        y = asHalfPixel($$.margin2.top);
    } else if (target === 'legend') {
        x = $$.margin3.left;
        y = $$.margin3.top;
    } else if (target === 'x') {
        x = 0;
        y = config.axis_rotated ? 0 : $$.height;
    } else if (target === 'y') {
        x = 0;
        y = config.axis_rotated ? $$.height : 0;
    } else if (target === 'y2') {
        x = config.axis_rotated ? 0 : $$.width;
        y = config.axis_rotated ? 1 : 0;
    } else if (target === 'subx') {
        x = 0;
        y = config.axis_rotated ? 0 : $$.height2;
    } else if (target === 'arc') {
        x = $$.arcWidth / 2;
        y = $$.arcHeight / 2;
    }
    return "translate(" + x + "," + y + ")";
};
c3_chart_internal_fn.initialOpacity = function (d) {
    return d.value !== null && this.withoutFadeIn[d.id] ? 1 : 0;
};
c3_chart_internal_fn.initialOpacityForCircle = function (d) {
    return d.value !== null && this.withoutFadeIn[d.id] ? this.opacityForCircle(d) : 0;
};
c3_chart_internal_fn.opacityForCircle = function (d) {
    var isPointShouldBeShown = isFunction(this.config.point_show) ? this.config.point_show(d) : this.config.point_show;
    var opacity = isPointShouldBeShown ? 1 : 0;
    return isValue(d.value) ? this.isScatterType(d) ? 0.5 : opacity : 0;
};
c3_chart_internal_fn.opacityForText = function () {
    return this.hasDataLabel() ? 1 : 0;
};
c3_chart_internal_fn.xx = function (d) {
    return d ? this.x(d.x) : null;
};
c3_chart_internal_fn.xv = function (d) {
    var $$ = this,
        value = d.value;
    if ($$.isTimeSeries()) {
        value = $$.parseDate(d.value);
    } else if ($$.isCategorized() && typeof d.value === 'string') {
        value = $$.config.axis_x_categories.indexOf(d.value);
    }
    return Math.ceil($$.x(value));
};
c3_chart_internal_fn.yv = function (d) {
    var $$ = this,
        yScale = d.axis && d.axis === 'y2' ? $$.y2 : $$.y;
    return Math.ceil(yScale(d.value));
};
c3_chart_internal_fn.subxx = function (d) {
    return d ? this.subX(d.x) : null;
};

c3_chart_internal_fn.transformMain = function (withTransition, transitions) {
    var $$ = this,
        xAxis,
        yAxis,
        y2Axis;
    if (transitions && transitions.axisX) {
        xAxis = transitions.axisX;
    } else {
        xAxis = $$.main.select('.' + CLASS.axisX);
        if (withTransition) {
            xAxis = xAxis.transition();
        }
    }
    if (transitions && transitions.axisY) {
        yAxis = transitions.axisY;
    } else {
        yAxis = $$.main.select('.' + CLASS.axisY);
        if (withTransition) {
            yAxis = yAxis.transition();
        }
    }
    if (transitions && transitions.axisY2) {
        y2Axis = transitions.axisY2;
    } else {
        y2Axis = $$.main.select('.' + CLASS.axisY2);
        if (withTransition) {
            y2Axis = y2Axis.transition();
        }
    }
    (withTransition ? $$.main.transition() : $$.main).attr("transform", $$.getTranslate('main'));
    xAxis.attr("transform", $$.getTranslate('x'));
    yAxis.attr("transform", $$.getTranslate('y'));
    y2Axis.attr("transform", $$.getTranslate('y2'));
    $$.main.select('.' + CLASS.chartArcs).attr("transform", $$.getTranslate('arc'));
};
c3_chart_internal_fn.transformAll = function (withTransition, transitions) {
    var $$ = this;
    $$.transformMain(withTransition, transitions);
    if ($$.config.subchart_show) {
        $$.transformContext(withTransition, transitions);
    }
    if ($$.legend) {
        $$.transformLegend(withTransition);
    }
};

c3_chart_internal_fn.updateSvgSize = function () {
    var $$ = this,
        brush = $$.svg.select(".c3-brush .background");
    $$.svg.attr('width', $$.currentWidth).attr('height', $$.currentHeight);
    $$.svg.selectAll(['#' + $$.clipId, '#' + $$.clipIdForGrid]).select('rect').attr('width', $$.width).attr('height', $$.height);
    $$.svg.select('#' + $$.clipIdForXAxis).select('rect').attr('x', $$.getXAxisClipX.bind($$)).attr('y', $$.getXAxisClipY.bind($$)).attr('width', $$.getXAxisClipWidth.bind($$)).attr('height', $$.getXAxisClipHeight.bind($$));
    $$.svg.select('#' + $$.clipIdForYAxis).select('rect').attr('x', $$.getYAxisClipX.bind($$)).attr('y', $$.getYAxisClipY.bind($$)).attr('width', $$.getYAxisClipWidth.bind($$)).attr('height', $$.getYAxisClipHeight.bind($$));
    $$.svg.select('#' + $$.clipIdForSubchart).select('rect').attr('width', $$.width).attr('height', brush.size() ? brush.attr('height') : 0);
    $$.svg.select('.' + CLASS.zoomRect).attr('width', $$.width).attr('height', $$.height);
    // MEMO: parent div's height will be bigger than svg when <!DOCTYPE html>
    $$.selectChart.style('max-height', $$.currentHeight + "px");
};

c3_chart_internal_fn.updateDimension = function (withoutAxis) {
    var $$ = this;
    if (!withoutAxis) {
        if ($$.config.axis_rotated) {
            $$.axes.x.call($$.xAxis);
            $$.axes.subx.call($$.subXAxis);
        } else {
            $$.axes.y.call($$.yAxis);
            $$.axes.y2.call($$.y2Axis);
        }
    }
    $$.updateSizes();
    $$.updateScales();
    $$.updateSvgSize();
    $$.transformAll(false);
};

c3_chart_internal_fn.observeInserted = function (selection) {
    var $$ = this,
        observer;
    if (typeof MutationObserver === 'undefined') {
        window.console.error("MutationObserver not defined.");
        return;
    }
    observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
            if (mutation.type === 'childList' && mutation.previousSibling) {
                observer.disconnect();
                // need to wait for completion of load because size calculation requires the actual sizes determined after that completion
                $$.intervalForObserveInserted = window.setInterval(function () {
                    // parentNode will NOT be null when completed
                    if (selection.node().parentNode) {
                        window.clearInterval($$.intervalForObserveInserted);
                        $$.updateDimension();
                        if ($$.brush) {
                            $$.brush.update();
                        }
                        $$.config.oninit.call($$);
                        $$.redraw({
                            withTransform: true,
                            withUpdateXDomain: true,
                            withUpdateOrgXDomain: true,
                            withTransition: false,
                            withTransitionForTransform: false,
                            withLegend: true
                        });
                        selection.transition().style('opacity', 1);
                    }
                }, 10);
            }
        });
    });
    observer.observe(selection.node(), { attributes: true, childList: true, characterData: true });
};

c3_chart_internal_fn.bindResize = function () {
    var $$ = this,
        config = $$.config;

    $$.resizeFunction = $$.generateResize();

    $$.resizeFunction.add(function () {
        config.onresize.call($$);
    });
    if (config.resize_auto) {
        $$.resizeFunction.add(function () {
            if ($$.resizeTimeout !== undefined) {
                window.clearTimeout($$.resizeTimeout);
            }
            $$.resizeTimeout = window.setTimeout(function () {
                delete $$.resizeTimeout;
                $$.api.flush();
            }, 100);
        });
    }
    $$.resizeFunction.add(function () {
        config.onresized.call($$);
    });

    if (window.attachEvent) {
        window.attachEvent('onresize', $$.resizeFunction);
    } else if (window.addEventListener) {
        window.addEventListener('resize', $$.resizeFunction, false);
    } else {
        // fallback to this, if this is a very old browser
        var wrapper = window.onresize;
        if (!wrapper) {
            // create a wrapper that will call all charts
            wrapper = $$.generateResize();
        } else if (!wrapper.add || !wrapper.remove) {
            // there is already a handler registered, make sure we call it too
            wrapper = $$.generateResize();
            wrapper.add(window.onresize);
        }
        // add this graph to the wrapper, we will be removed if the user calls destroy
        wrapper.add($$.resizeFunction);
        window.onresize = wrapper;
    }
};

c3_chart_internal_fn.generateResize = function () {
    var resizeFunctions = [];
    function callResizeFunctions() {
        resizeFunctions.forEach(function (f) {
            f();
        });
    }
    callResizeFunctions.add = function (f) {
        resizeFunctions.push(f);
    };
    callResizeFunctions.remove = function (f) {
        for (var i = 0; i < resizeFunctions.length; i++) {
            if (resizeFunctions[i] === f) {
                resizeFunctions.splice(i, 1);
                break;
            }
        }
    };
    return callResizeFunctions;
};

c3_chart_internal_fn.endall = function (transition, callback) {
    var n = 0;
    transition.each(function () {
        ++n;
    }).each("end", function () {
        if (! --n) {
            callback.apply(this, arguments);
        }
    });
};
c3_chart_internal_fn.generateWait = function () {
    var transitionsToWait = [],
        f = function f(transition, callback) {
        var timer = setInterval(function () {
            var done = 0;
            transitionsToWait.forEach(function (t) {
                if (t.empty()) {
                    done += 1;
                    return;
                }
                try {
                    t.transition();
                } catch (e) {
                    done += 1;
                }
            });
            if (done === transitionsToWait.length) {
                clearInterval(timer);
                if (callback) {
                    callback();
                }
            }
        }, 10);
    };
    f.add = function (transition) {
        transitionsToWait.push(transition);
    };
    return f;
};

c3_chart_internal_fn.parseDate = function (date) {
    var $$ = this,
        parsedDate;
    if (date instanceof Date) {
        parsedDate = date;
    } else if (typeof date === 'string') {
        parsedDate = $$.dataTimeFormat($$.config.data_xFormat).parse(date);
    } else if ((typeof date === 'undefined' ? 'undefined' : _typeof(date)) === 'object') {
        parsedDate = new Date(+date);
    } else if (typeof date === 'number' && !isNaN(date)) {
        parsedDate = new Date(+date);
    }
    if (!parsedDate || isNaN(+parsedDate)) {
        window.console.error("Failed to parse x '" + date + "' to Date object");
    }
    return parsedDate;
};

c3_chart_internal_fn.isTabVisible = function () {
    var hidden;
    if (typeof document.hidden !== "undefined") {
        // Opera 12.10 and Firefox 18 and later support
        hidden = "hidden";
    } else if (typeof document.mozHidden !== "undefined") {
        hidden = "mozHidden";
    } else if (typeof document.msHidden !== "undefined") {
        hidden = "msHidden";
    } else if (typeof document.webkitHidden !== "undefined") {
        hidden = "webkitHidden";
    }

    return document[hidden] ? false : true;
};

c3_chart_internal_fn.isValue = isValue;
c3_chart_internal_fn.isFunction = isFunction;
c3_chart_internal_fn.isString = isString;
c3_chart_internal_fn.isUndefined = isUndefined;
c3_chart_internal_fn.isDefined = isDefined;
c3_chart_internal_fn.ceil10 = ceil10;
c3_chart_internal_fn.asHalfPixel = asHalfPixel;
c3_chart_internal_fn.diffDomain = diffDomain;
c3_chart_internal_fn.isEmpty = isEmpty;
c3_chart_internal_fn.notEmpty = notEmpty;
c3_chart_internal_fn.notEmpty = notEmpty;
c3_chart_internal_fn.getOption = getOption;
c3_chart_internal_fn.hasValue = hasValue;
c3_chart_internal_fn.sanitise = sanitise;
c3_chart_internal_fn.getPathBox = getPathBox;
c3_chart_internal_fn.CLASS = CLASS;

/* jshint ignore:start */

// PhantomJS doesn't have support for Function.prototype.bind, which has caused confusion. Use
// this polyfill to avoid the confusion.
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Polyfill

if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
        if (typeof this !== 'function') {
            // closest thing possible to the ECMAScript 5
            // internal IsCallable function
            throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
        }

        var aArgs = Array.prototype.slice.call(arguments, 1),
            fToBind = this,
            fNOP = function fNOP() {},
            fBound = function fBound() {
            return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
        };

        fNOP.prototype = this.prototype;
        fBound.prototype = new fNOP();

        return fBound;
    };
}

// SVGPathSeg API polyfill
// https://github.com/progers/pathseg
//
// This is a drop-in replacement for the SVGPathSeg and SVGPathSegList APIs that were removed from
// SVG2 (https://lists.w3.org/Archives/Public/www-svg/2015Jun/0044.html), including the latest spec
// changes which were implemented in Firefox 43 and Chrome 46.

(function () {
    "use strict";

    if (!("SVGPathSeg" in window)) {
        // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGPathSeg
        window.SVGPathSeg = function (type, typeAsLetter, owningPathSegList) {
            this.pathSegType = type;
            this.pathSegTypeAsLetter = typeAsLetter;
            this._owningPathSegList = owningPathSegList;
        };

        window.SVGPathSeg.prototype.classname = "SVGPathSeg";

        window.SVGPathSeg.PATHSEG_UNKNOWN = 0;
        window.SVGPathSeg.PATHSEG_CLOSEPATH = 1;
        window.SVGPathSeg.PATHSEG_MOVETO_ABS = 2;
        window.SVGPathSeg.PATHSEG_MOVETO_REL = 3;
        window.SVGPathSeg.PATHSEG_LINETO_ABS = 4;
        window.SVGPathSeg.PATHSEG_LINETO_REL = 5;
        window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS = 6;
        window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL = 7;
        window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS = 8;
        window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL = 9;
        window.SVGPathSeg.PATHSEG_ARC_ABS = 10;
        window.SVGPathSeg.PATHSEG_ARC_REL = 11;
        window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS = 12;
        window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL = 13;
        window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS = 14;
        window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL = 15;
        window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16;
        window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17;
        window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18;
        window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19;

        // Notify owning PathSegList on any changes so they can be synchronized back to the path element.
        window.SVGPathSeg.prototype._segmentChanged = function () {
            if (this._owningPathSegList) this._owningPathSegList.segmentChanged(this);
        };

        window.SVGPathSegClosePath = function (owningPathSegList) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CLOSEPATH, "z", owningPathSegList);
        };
        window.SVGPathSegClosePath.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegClosePath.prototype.toString = function () {
            return "[object SVGPathSegClosePath]";
        };
        window.SVGPathSegClosePath.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter;
        };
        window.SVGPathSegClosePath.prototype.clone = function () {
            return new window.SVGPathSegClosePath(undefined);
        };

        window.SVGPathSegMovetoAbs = function (owningPathSegList, x, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_ABS, "M", owningPathSegList);
            this._x = x;
            this._y = y;
        };
        window.SVGPathSegMovetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegMovetoAbs.prototype.toString = function () {
            return "[object SVGPathSegMovetoAbs]";
        };
        window.SVGPathSegMovetoAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
        };
        window.SVGPathSegMovetoAbs.prototype.clone = function () {
            return new window.SVGPathSegMovetoAbs(undefined, this._x, this._y);
        };
        Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegMovetoAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegMovetoRel = function (owningPathSegList, x, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_MOVETO_REL, "m", owningPathSegList);
            this._x = x;
            this._y = y;
        };
        window.SVGPathSegMovetoRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegMovetoRel.prototype.toString = function () {
            return "[object SVGPathSegMovetoRel]";
        };
        window.SVGPathSegMovetoRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
        };
        window.SVGPathSegMovetoRel.prototype.clone = function () {
            return new window.SVGPathSegMovetoRel(undefined, this._x, this._y);
        };
        Object.defineProperty(window.SVGPathSegMovetoRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegMovetoRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegLinetoAbs = function (owningPathSegList, x, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_ABS, "L", owningPathSegList);
            this._x = x;
            this._y = y;
        };
        window.SVGPathSegLinetoAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegLinetoAbs.prototype.toString = function () {
            return "[object SVGPathSegLinetoAbs]";
        };
        window.SVGPathSegLinetoAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
        };
        window.SVGPathSegLinetoAbs.prototype.clone = function () {
            return new window.SVGPathSegLinetoAbs(undefined, this._x, this._y);
        };
        Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegLinetoAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegLinetoRel = function (owningPathSegList, x, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_REL, "l", owningPathSegList);
            this._x = x;
            this._y = y;
        };
        window.SVGPathSegLinetoRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegLinetoRel.prototype.toString = function () {
            return "[object SVGPathSegLinetoRel]";
        };
        window.SVGPathSegLinetoRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
        };
        window.SVGPathSegLinetoRel.prototype.clone = function () {
            return new window.SVGPathSegLinetoRel(undefined, this._x, this._y);
        };
        Object.defineProperty(window.SVGPathSegLinetoRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegLinetoRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoCubicAbs = function (owningPathSegList, x, y, x1, y1, x2, y2) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS, "C", owningPathSegList);
            this._x = x;
            this._y = y;
            this._x1 = x1;
            this._y1 = y1;
            this._x2 = x2;
            this._y2 = y2;
        };
        window.SVGPathSegCurvetoCubicAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoCubicAbs.prototype.toString = function () {
            return "[object SVGPathSegCurvetoCubicAbs]";
        };
        window.SVGPathSegCurvetoCubicAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoCubicAbs.prototype.clone = function () {
            return new window.SVGPathSegCurvetoCubicAbs(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2);
        };
        Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "x1", { get: function get() {
                return this._x1;
            }, set: function set(x1) {
                this._x1 = x1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "y1", { get: function get() {
                return this._y1;
            }, set: function set(y1) {
                this._y1 = y1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "x2", { get: function get() {
                return this._x2;
            }, set: function set(x2) {
                this._x2 = x2;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype, "y2", { get: function get() {
                return this._y2;
            }, set: function set(y2) {
                this._y2 = y2;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoCubicRel = function (owningPathSegList, x, y, x1, y1, x2, y2) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL, "c", owningPathSegList);
            this._x = x;
            this._y = y;
            this._x1 = x1;
            this._y1 = y1;
            this._x2 = x2;
            this._y2 = y2;
        };
        window.SVGPathSegCurvetoCubicRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoCubicRel.prototype.toString = function () {
            return "[object SVGPathSegCurvetoCubicRel]";
        };
        window.SVGPathSegCurvetoCubicRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoCubicRel.prototype.clone = function () {
            return new window.SVGPathSegCurvetoCubicRel(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2);
        };
        Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "x1", { get: function get() {
                return this._x1;
            }, set: function set(x1) {
                this._x1 = x1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "y1", { get: function get() {
                return this._y1;
            }, set: function set(y1) {
                this._y1 = y1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "x2", { get: function get() {
                return this._x2;
            }, set: function set(x2) {
                this._x2 = x2;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype, "y2", { get: function get() {
                return this._y2;
            }, set: function set(y2) {
                this._y2 = y2;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoQuadraticAbs = function (owningPathSegList, x, y, x1, y1) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS, "Q", owningPathSegList);
            this._x = x;
            this._y = y;
            this._x1 = x1;
            this._y1 = y1;
        };
        window.SVGPathSegCurvetoQuadraticAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoQuadraticAbs.prototype.toString = function () {
            return "[object SVGPathSegCurvetoQuadraticAbs]";
        };
        window.SVGPathSegCurvetoQuadraticAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoQuadraticAbs.prototype.clone = function () {
            return new window.SVGPathSegCurvetoQuadraticAbs(undefined, this._x, this._y, this._x1, this._y1);
        };
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "x1", { get: function get() {
                return this._x1;
            }, set: function set(x1) {
                this._x1 = x1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype, "y1", { get: function get() {
                return this._y1;
            }, set: function set(y1) {
                this._y1 = y1;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoQuadraticRel = function (owningPathSegList, x, y, x1, y1) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL, "q", owningPathSegList);
            this._x = x;
            this._y = y;
            this._x1 = x1;
            this._y1 = y1;
        };
        window.SVGPathSegCurvetoQuadraticRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoQuadraticRel.prototype.toString = function () {
            return "[object SVGPathSegCurvetoQuadraticRel]";
        };
        window.SVGPathSegCurvetoQuadraticRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoQuadraticRel.prototype.clone = function () {
            return new window.SVGPathSegCurvetoQuadraticRel(undefined, this._x, this._y, this._x1, this._y1);
        };
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "x1", { get: function get() {
                return this._x1;
            }, set: function set(x1) {
                this._x1 = x1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype, "y1", { get: function get() {
                return this._y1;
            }, set: function set(y1) {
                this._y1 = y1;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegArcAbs = function (owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_ABS, "A", owningPathSegList);
            this._x = x;
            this._y = y;
            this._r1 = r1;
            this._r2 = r2;
            this._angle = angle;
            this._largeArcFlag = largeArcFlag;
            this._sweepFlag = sweepFlag;
        };
        window.SVGPathSegArcAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegArcAbs.prototype.toString = function () {
            return "[object SVGPathSegArcAbs]";
        };
        window.SVGPathSegArcAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._r1 + " " + this._r2 + " " + this._angle + " " + (this._largeArcFlag ? "1" : "0") + " " + (this._sweepFlag ? "1" : "0") + " " + this._x + " " + this._y;
        };
        window.SVGPathSegArcAbs.prototype.clone = function () {
            return new window.SVGPathSegArcAbs(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag);
        };
        Object.defineProperty(window.SVGPathSegArcAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcAbs.prototype, "r1", { get: function get() {
                return this._r1;
            }, set: function set(r1) {
                this._r1 = r1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcAbs.prototype, "r2", { get: function get() {
                return this._r2;
            }, set: function set(r2) {
                this._r2 = r2;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcAbs.prototype, "angle", { get: function get() {
                return this._angle;
            }, set: function set(angle) {
                this._angle = angle;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcAbs.prototype, "largeArcFlag", { get: function get() {
                return this._largeArcFlag;
            }, set: function set(largeArcFlag) {
                this._largeArcFlag = largeArcFlag;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcAbs.prototype, "sweepFlag", { get: function get() {
                return this._sweepFlag;
            }, set: function set(sweepFlag) {
                this._sweepFlag = sweepFlag;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegArcRel = function (owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_ARC_REL, "a", owningPathSegList);
            this._x = x;
            this._y = y;
            this._r1 = r1;
            this._r2 = r2;
            this._angle = angle;
            this._largeArcFlag = largeArcFlag;
            this._sweepFlag = sweepFlag;
        };
        window.SVGPathSegArcRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegArcRel.prototype.toString = function () {
            return "[object SVGPathSegArcRel]";
        };
        window.SVGPathSegArcRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._r1 + " " + this._r2 + " " + this._angle + " " + (this._largeArcFlag ? "1" : "0") + " " + (this._sweepFlag ? "1" : "0") + " " + this._x + " " + this._y;
        };
        window.SVGPathSegArcRel.prototype.clone = function () {
            return new window.SVGPathSegArcRel(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag);
        };
        Object.defineProperty(window.SVGPathSegArcRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcRel.prototype, "r1", { get: function get() {
                return this._r1;
            }, set: function set(r1) {
                this._r1 = r1;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcRel.prototype, "r2", { get: function get() {
                return this._r2;
            }, set: function set(r2) {
                this._r2 = r2;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcRel.prototype, "angle", { get: function get() {
                return this._angle;
            }, set: function set(angle) {
                this._angle = angle;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcRel.prototype, "largeArcFlag", { get: function get() {
                return this._largeArcFlag;
            }, set: function set(largeArcFlag) {
                this._largeArcFlag = largeArcFlag;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegArcRel.prototype, "sweepFlag", { get: function get() {
                return this._sweepFlag;
            }, set: function set(sweepFlag) {
                this._sweepFlag = sweepFlag;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegLinetoHorizontalAbs = function (owningPathSegList, x) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS, "H", owningPathSegList);
            this._x = x;
        };
        window.SVGPathSegLinetoHorizontalAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegLinetoHorizontalAbs.prototype.toString = function () {
            return "[object SVGPathSegLinetoHorizontalAbs]";
        };
        window.SVGPathSegLinetoHorizontalAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x;
        };
        window.SVGPathSegLinetoHorizontalAbs.prototype.clone = function () {
            return new window.SVGPathSegLinetoHorizontalAbs(undefined, this._x);
        };
        Object.defineProperty(window.SVGPathSegLinetoHorizontalAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegLinetoHorizontalRel = function (owningPathSegList, x) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL, "h", owningPathSegList);
            this._x = x;
        };
        window.SVGPathSegLinetoHorizontalRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegLinetoHorizontalRel.prototype.toString = function () {
            return "[object SVGPathSegLinetoHorizontalRel]";
        };
        window.SVGPathSegLinetoHorizontalRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x;
        };
        window.SVGPathSegLinetoHorizontalRel.prototype.clone = function () {
            return new window.SVGPathSegLinetoHorizontalRel(undefined, this._x);
        };
        Object.defineProperty(window.SVGPathSegLinetoHorizontalRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegLinetoVerticalAbs = function (owningPathSegList, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS, "V", owningPathSegList);
            this._y = y;
        };
        window.SVGPathSegLinetoVerticalAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegLinetoVerticalAbs.prototype.toString = function () {
            return "[object SVGPathSegLinetoVerticalAbs]";
        };
        window.SVGPathSegLinetoVerticalAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._y;
        };
        window.SVGPathSegLinetoVerticalAbs.prototype.clone = function () {
            return new window.SVGPathSegLinetoVerticalAbs(undefined, this._y);
        };
        Object.defineProperty(window.SVGPathSegLinetoVerticalAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegLinetoVerticalRel = function (owningPathSegList, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL, "v", owningPathSegList);
            this._y = y;
        };
        window.SVGPathSegLinetoVerticalRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegLinetoVerticalRel.prototype.toString = function () {
            return "[object SVGPathSegLinetoVerticalRel]";
        };
        window.SVGPathSegLinetoVerticalRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._y;
        };
        window.SVGPathSegLinetoVerticalRel.prototype.clone = function () {
            return new window.SVGPathSegLinetoVerticalRel(undefined, this._y);
        };
        Object.defineProperty(window.SVGPathSegLinetoVerticalRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoCubicSmoothAbs = function (owningPathSegList, x, y, x2, y2) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, "S", owningPathSegList);
            this._x = x;
            this._y = y;
            this._x2 = x2;
            this._y2 = y2;
        };
        window.SVGPathSegCurvetoCubicSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoCubicSmoothAbs.prototype.toString = function () {
            return "[object SVGPathSegCurvetoCubicSmoothAbs]";
        };
        window.SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoCubicSmoothAbs.prototype.clone = function () {
            return new window.SVGPathSegCurvetoCubicSmoothAbs(undefined, this._x, this._y, this._x2, this._y2);
        };
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "x2", { get: function get() {
                return this._x2;
            }, set: function set(x2) {
                this._x2 = x2;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype, "y2", { get: function get() {
                return this._y2;
            }, set: function set(y2) {
                this._y2 = y2;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoCubicSmoothRel = function (owningPathSegList, x, y, x2, y2) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL, "s", owningPathSegList);
            this._x = x;
            this._y = y;
            this._x2 = x2;
            this._y2 = y2;
        };
        window.SVGPathSegCurvetoCubicSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoCubicSmoothRel.prototype.toString = function () {
            return "[object SVGPathSegCurvetoCubicSmoothRel]";
        };
        window.SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoCubicSmoothRel.prototype.clone = function () {
            return new window.SVGPathSegCurvetoCubicSmoothRel(undefined, this._x, this._y, this._x2, this._y2);
        };
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "x2", { get: function get() {
                return this._x2;
            }, set: function set(x2) {
                this._x2 = x2;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype, "y2", { get: function get() {
                return this._y2;
            }, set: function set(y2) {
                this._y2 = y2;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoQuadraticSmoothAbs = function (owningPathSegList, x, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, "T", owningPathSegList);
            this._x = x;
            this._y = y;
        };
        window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString = function () {
            return "[object SVGPathSegCurvetoQuadraticSmoothAbs]";
        };
        window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone = function () {
            return new window.SVGPathSegCurvetoQuadraticSmoothAbs(undefined, this._x, this._y);
        };
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        window.SVGPathSegCurvetoQuadraticSmoothRel = function (owningPathSegList, x, y) {
            window.SVGPathSeg.call(this, window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, "t", owningPathSegList);
            this._x = x;
            this._y = y;
        };
        window.SVGPathSegCurvetoQuadraticSmoothRel.prototype = Object.create(window.SVGPathSeg.prototype);
        window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString = function () {
            return "[object SVGPathSegCurvetoQuadraticSmoothRel]";
        };
        window.SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString = function () {
            return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
        };
        window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone = function () {
            return new window.SVGPathSegCurvetoQuadraticSmoothRel(undefined, this._x, this._y);
        };
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, "x", { get: function get() {
                return this._x;
            }, set: function set(x) {
                this._x = x;this._segmentChanged();
            }, enumerable: true });
        Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype, "y", { get: function get() {
                return this._y;
            }, set: function set(y) {
                this._y = y;this._segmentChanged();
            }, enumerable: true });

        // Add createSVGPathSeg* functions to window.SVGPathElement.
        // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-Interfacewindow.SVGPathElement.
        window.SVGPathElement.prototype.createSVGPathSegClosePath = function () {
            return new window.SVGPathSegClosePath(undefined);
        };
        window.SVGPathElement.prototype.createSVGPathSegMovetoAbs = function (x, y) {
            return new window.SVGPathSegMovetoAbs(undefined, x, y);
        };
        window.SVGPathElement.prototype.createSVGPathSegMovetoRel = function (x, y) {
            return new window.SVGPathSegMovetoRel(undefined, x, y);
        };
        window.SVGPathElement.prototype.createSVGPathSegLinetoAbs = function (x, y) {
            return new window.SVGPathSegLinetoAbs(undefined, x, y);
        };
        window.SVGPathElement.prototype.createSVGPathSegLinetoRel = function (x, y) {
            return new window.SVGPathSegLinetoRel(undefined, x, y);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs = function (x, y, x1, y1, x2, y2) {
            return new window.SVGPathSegCurvetoCubicAbs(undefined, x, y, x1, y1, x2, y2);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel = function (x, y, x1, y1, x2, y2) {
            return new window.SVGPathSegCurvetoCubicRel(undefined, x, y, x1, y1, x2, y2);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs = function (x, y, x1, y1) {
            return new window.SVGPathSegCurvetoQuadraticAbs(undefined, x, y, x1, y1);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel = function (x, y, x1, y1) {
            return new window.SVGPathSegCurvetoQuadraticRel(undefined, x, y, x1, y1);
        };
        window.SVGPathElement.prototype.createSVGPathSegArcAbs = function (x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
            return new window.SVGPathSegArcAbs(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag);
        };
        window.SVGPathElement.prototype.createSVGPathSegArcRel = function (x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
            return new window.SVGPathSegArcRel(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag);
        };
        window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs = function (x) {
            return new window.SVGPathSegLinetoHorizontalAbs(undefined, x);
        };
        window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel = function (x) {
            return new window.SVGPathSegLinetoHorizontalRel(undefined, x);
        };
        window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs = function (y) {
            return new window.SVGPathSegLinetoVerticalAbs(undefined, y);
        };
        window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel = function (y) {
            return new window.SVGPathSegLinetoVerticalRel(undefined, y);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs = function (x, y, x2, y2) {
            return new window.SVGPathSegCurvetoCubicSmoothAbs(undefined, x, y, x2, y2);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel = function (x, y, x2, y2) {
            return new window.SVGPathSegCurvetoCubicSmoothRel(undefined, x, y, x2, y2);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs = function (x, y) {
            return new window.SVGPathSegCurvetoQuadraticSmoothAbs(undefined, x, y);
        };
        window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel = function (x, y) {
            return new window.SVGPathSegCurvetoQuadraticSmoothRel(undefined, x, y);
        };

        if (!("getPathSegAtLength" in window.SVGPathElement.prototype)) {
            // Add getPathSegAtLength to SVGPathElement.
            // Spec: https://www.w3.org/TR/SVG11/single-page.html#paths-__svg__SVGPathElement__getPathSegAtLength
            // This polyfill requires SVGPathElement.getTotalLength to implement the distance-along-a-path algorithm.
            window.SVGPathElement.prototype.getPathSegAtLength = function (distance) {
                if (distance === undefined || !isFinite(distance)) throw "Invalid arguments.";

                var measurementElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
                measurementElement.setAttribute("d", this.getAttribute("d"));
                var lastPathSegment = measurementElement.pathSegList.numberOfItems - 1;

                // If the path is empty, return 0.
                if (lastPathSegment <= 0) return 0;

                do {
                    measurementElement.pathSegList.removeItem(lastPathSegment);
                    if (distance > measurementElement.getTotalLength()) break;
                    lastPathSegment--;
                } while (lastPathSegment > 0);
                return lastPathSegment;
            };
        }
    }

    if (!("SVGPathSegList" in window)) {
        // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGPathSegList
        window.SVGPathSegList = function (pathElement) {
            this._pathElement = pathElement;
            this._list = this._parsePath(this._pathElement.getAttribute("d"));

            // Use a MutationObserver to catch changes to the path's "d" attribute.
            this._mutationObserverConfig = { "attributes": true, "attributeFilter": ["d"] };
            this._pathElementMutationObserver = new MutationObserver(this._updateListFromPathMutations.bind(this));
            this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
        };

        window.SVGPathSegList.prototype.classname = "SVGPathSegList";

        Object.defineProperty(window.SVGPathSegList.prototype, "numberOfItems", {
            get: function get() {
                this._checkPathSynchronizedToList();
                return this._list.length;
            },
            enumerable: true
        });

        // Add the pathSegList accessors to window.SVGPathElement.
        // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGAnimatedPathData
        Object.defineProperty(window.SVGPathElement.prototype, "pathSegList", {
            get: function get() {
                if (!this._pathSegList) this._pathSegList = new window.SVGPathSegList(this);
                return this._pathSegList;
            },
            enumerable: true
        });
        // FIXME: The following are not implemented and simply return window.SVGPathElement.pathSegList.
        Object.defineProperty(window.SVGPathElement.prototype, "normalizedPathSegList", { get: function get() {
                return this.pathSegList;
            }, enumerable: true });
        Object.defineProperty(window.SVGPathElement.prototype, "animatedPathSegList", { get: function get() {
                return this.pathSegList;
            }, enumerable: true });
        Object.defineProperty(window.SVGPathElement.prototype, "animatedNormalizedPathSegList", { get: function get() {
                return this.pathSegList;
            }, enumerable: true });

        // Process any pending mutations to the path element and update the list as needed.
        // This should be the first call of all public functions and is needed because
        // MutationObservers are not synchronous so we can have pending asynchronous mutations.
        window.SVGPathSegList.prototype._checkPathSynchronizedToList = function () {
            this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords());
        };

        window.SVGPathSegList.prototype._updateListFromPathMutations = function (mutationRecords) {
            if (!this._pathElement) return;
            var hasPathMutations = false;
            mutationRecords.forEach(function (record) {
                if (record.attributeName == "d") hasPathMutations = true;
            });
            if (hasPathMutations) this._list = this._parsePath(this._pathElement.getAttribute("d"));
        };

        // Serialize the list and update the path's 'd' attribute.
        window.SVGPathSegList.prototype._writeListToPath = function () {
            this._pathElementMutationObserver.disconnect();
            this._pathElement.setAttribute("d", window.SVGPathSegList._pathSegArrayAsString(this._list));
            this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
        };

        // When a path segment changes the list needs to be synchronized back to the path element.
        window.SVGPathSegList.prototype.segmentChanged = function (pathSeg) {
            this._writeListToPath();
        };

        window.SVGPathSegList.prototype.clear = function () {
            this._checkPathSynchronizedToList();

            this._list.forEach(function (pathSeg) {
                pathSeg._owningPathSegList = null;
            });
            this._list = [];
            this._writeListToPath();
        };

        window.SVGPathSegList.prototype.initialize = function (newItem) {
            this._checkPathSynchronizedToList();

            this._list = [newItem];
            newItem._owningPathSegList = this;
            this._writeListToPath();
            return newItem;
        };

        window.SVGPathSegList.prototype._checkValidIndex = function (index) {
            if (isNaN(index) || index < 0 || index >= this.numberOfItems) throw "INDEX_SIZE_ERR";
        };

        window.SVGPathSegList.prototype.getItem = function (index) {
            this._checkPathSynchronizedToList();

            this._checkValidIndex(index);
            return this._list[index];
        };

        window.SVGPathSegList.prototype.insertItemBefore = function (newItem, index) {
            this._checkPathSynchronizedToList();

            // Spec: If the index is greater than or equal to numberOfItems, then the new item is appended to the end of the list.
            if (index > this.numberOfItems) index = this.numberOfItems;
            if (newItem._owningPathSegList) {
                // SVG2 spec says to make a copy.
                newItem = newItem.clone();
            }
            this._list.splice(index, 0, newItem);
            newItem._owningPathSegList = this;
            this._writeListToPath();
            return newItem;
        };

        window.SVGPathSegList.prototype.replaceItem = function (newItem, index) {
            this._checkPathSynchronizedToList();

            if (newItem._owningPathSegList) {
                // SVG2 spec says to make a copy.
                newItem = newItem.clone();
            }
            this._checkValidIndex(index);
            this._list[index] = newItem;
            newItem._owningPathSegList = this;
            this._writeListToPath();
            return newItem;
        };

        window.SVGPathSegList.prototype.removeItem = function (index) {
            this._checkPathSynchronizedToList();

            this._checkValidIndex(index);
            var item = this._list[index];
            this._list.splice(index, 1);
            this._writeListToPath();
            return item;
        };

        window.SVGPathSegList.prototype.appendItem = function (newItem) {
            this._checkPathSynchronizedToList();

            if (newItem._owningPathSegList) {
                // SVG2 spec says to make a copy.
                newItem = newItem.clone();
            }
            this._list.push(newItem);
            newItem._owningPathSegList = this;
            // TODO: Optimize this to just append to the existing attribute.
            this._writeListToPath();
            return newItem;
        };

        window.SVGPathSegList._pathSegArrayAsString = function (pathSegArray) {
            var string = "";
            var first = true;
            pathSegArray.forEach(function (pathSeg) {
                if (first) {
                    first = false;
                    string += pathSeg._asPathString();
                } else {
                    string += " " + pathSeg._asPathString();
                }
            });
            return string;
        };

        // This closely follows SVGPathParser::parsePath from Source/core/svg/SVGPathParser.cpp.
        window.SVGPathSegList.prototype._parsePath = function (string) {
            if (!string || string.length == 0) return [];

            var owningPathSegList = this;

            var Builder = function Builder() {
                this.pathSegList = [];
            };

            Builder.prototype.appendSegment = function (pathSeg) {
                this.pathSegList.push(pathSeg);
            };

            var Source = function Source(string) {
                this._string = string;
                this._currentIndex = 0;
                this._endIndex = this._string.length;
                this._previousCommand = window.SVGPathSeg.PATHSEG_UNKNOWN;

                this._skipOptionalSpaces();
            };

            Source.prototype._isCurrentSpace = function () {
                var character = this._string[this._currentIndex];
                return character <= " " && (character == " " || character == "\n" || character == "\t" || character == "\r" || character == "\f");
            };

            Source.prototype._skipOptionalSpaces = function () {
                while (this._currentIndex < this._endIndex && this._isCurrentSpace()) {
                    this._currentIndex++;
                }return this._currentIndex < this._endIndex;
            };

            Source.prototype._skipOptionalSpacesOrDelimiter = function () {
                if (this._currentIndex < this._endIndex && !this._isCurrentSpace() && this._string.charAt(this._currentIndex) != ",") return false;
                if (this._skipOptionalSpaces()) {
                    if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ",") {
                        this._currentIndex++;
                        this._skipOptionalSpaces();
                    }
                }
                return this._currentIndex < this._endIndex;
            };

            Source.prototype.hasMoreData = function () {
                return this._currentIndex < this._endIndex;
            };

            Source.prototype.peekSegmentType = function () {
                var lookahead = this._string[this._currentIndex];
                return this._pathSegTypeFromChar(lookahead);
            };

            Source.prototype._pathSegTypeFromChar = function (lookahead) {
                switch (lookahead) {
                    case "Z":
                    case "z":
                        return window.SVGPathSeg.PATHSEG_CLOSEPATH;
                    case "M":
                        return window.SVGPathSeg.PATHSEG_MOVETO_ABS;
                    case "m":
                        return window.SVGPathSeg.PATHSEG_MOVETO_REL;
                    case "L":
                        return window.SVGPathSeg.PATHSEG_LINETO_ABS;
                    case "l":
                        return window.SVGPathSeg.PATHSEG_LINETO_REL;
                    case "C":
                        return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;
                    case "c":
                        return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;
                    case "Q":
                        return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;
                    case "q":
                        return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;
                    case "A":
                        return window.SVGPathSeg.PATHSEG_ARC_ABS;
                    case "a":
                        return window.SVGPathSeg.PATHSEG_ARC_REL;
                    case "H":
                        return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;
                    case "h":
                        return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;
                    case "V":
                        return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;
                    case "v":
                        return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;
                    case "S":
                        return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;
                    case "s":
                        return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;
                    case "T":
                        return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;
                    case "t":
                        return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;
                    default:
                        return window.SVGPathSeg.PATHSEG_UNKNOWN;
                }
            };

            Source.prototype._nextCommandHelper = function (lookahead, previousCommand) {
                // Check for remaining coordinates in the current command.
                if ((lookahead == "+" || lookahead == "-" || lookahead == "." || lookahead >= "0" && lookahead <= "9") && previousCommand != window.SVGPathSeg.PATHSEG_CLOSEPATH) {
                    if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_ABS) return window.SVGPathSeg.PATHSEG_LINETO_ABS;
                    if (previousCommand == window.SVGPathSeg.PATHSEG_MOVETO_REL) return window.SVGPathSeg.PATHSEG_LINETO_REL;
                    return previousCommand;
                }
                return window.SVGPathSeg.PATHSEG_UNKNOWN;
            };

            Source.prototype.initialCommandIsMoveTo = function () {
                // If the path is empty it is still valid, so return true.
                if (!this.hasMoreData()) return true;
                var command = this.peekSegmentType();
                // Path must start with moveTo.
                return command == window.SVGPathSeg.PATHSEG_MOVETO_ABS || command == window.SVGPathSeg.PATHSEG_MOVETO_REL;
            };

            // Parse a number from an SVG path. This very closely follows genericParseNumber(...) from Source/core/svg/SVGParserUtilities.cpp.
            // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-PathDataBNF
            Source.prototype._parseNumber = function () {
                var exponent = 0;
                var integer = 0;
                var frac = 1;
                var decimal = 0;
                var sign = 1;
                var expsign = 1;

                var startIndex = this._currentIndex;

                this._skipOptionalSpaces();

                // Read the sign.
                if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == "+") this._currentIndex++;else if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == "-") {
                    this._currentIndex++;
                    sign = -1;
                }

                if (this._currentIndex == this._endIndex || (this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9") && this._string.charAt(this._currentIndex) != ".")
                    // The first character of a number must be one of [0-9+-.].
                    return undefined;

                // Read the integer part, build right-to-left.
                var startIntPartIndex = this._currentIndex;
                while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9") {
                    this._currentIndex++;
                } // Advance to first non-digit.

                if (this._currentIndex != startIntPartIndex) {
                    var scanIntPartIndex = this._currentIndex - 1;
                    var multiplier = 1;
                    while (scanIntPartIndex >= startIntPartIndex) {
                        integer += multiplier * (this._string.charAt(scanIntPartIndex--) - "0");
                        multiplier *= 10;
                    }
                }

                // Read the decimals.
                if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ".") {
                    this._currentIndex++;

                    // There must be a least one digit following the .
                    if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9") return undefined;
                    while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9") {
                        frac *= 10;
                        decimal += (this._string.charAt(this._currentIndex) - "0") / frac;
                        this._currentIndex += 1;
                    }
                }

                // Read the exponent part.
                if (this._currentIndex != startIndex && this._currentIndex + 1 < this._endIndex && (this._string.charAt(this._currentIndex) == "e" || this._string.charAt(this._currentIndex) == "E") && this._string.charAt(this._currentIndex + 1) != "x" && this._string.charAt(this._currentIndex + 1) != "m") {
                    this._currentIndex++;

                    // Read the sign of the exponent.
                    if (this._string.charAt(this._currentIndex) == "+") {
                        this._currentIndex++;
                    } else if (this._string.charAt(this._currentIndex) == "-") {
                        this._currentIndex++;
                        expsign = -1;
                    }

                    // There must be an exponent.
                    if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9") return undefined;

                    while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9") {
                        exponent *= 10;
                        exponent += this._string.charAt(this._currentIndex) - "0";
                        this._currentIndex++;
                    }
                }

                var number = integer + decimal;
                number *= sign;

                if (exponent) number *= Math.pow(10, expsign * exponent);

                if (startIndex == this._currentIndex) return undefined;

                this._skipOptionalSpacesOrDelimiter();

                return number;
            };

            Source.prototype._parseArcFlag = function () {
                if (this._currentIndex >= this._endIndex) return undefined;
                var flag = false;
                var flagChar = this._string.charAt(this._currentIndex++);
                if (flagChar == "0") flag = false;else if (flagChar == "1") flag = true;else return undefined;

                this._skipOptionalSpacesOrDelimiter();
                return flag;
            };

            Source.prototype.parseSegment = function () {
                var lookahead = this._string[this._currentIndex];
                var command = this._pathSegTypeFromChar(lookahead);
                if (command == window.SVGPathSeg.PATHSEG_UNKNOWN) {
                    // Possibly an implicit command. Not allowed if this is the first command.
                    if (this._previousCommand == window.SVGPathSeg.PATHSEG_UNKNOWN) return null;
                    command = this._nextCommandHelper(lookahead, this._previousCommand);
                    if (command == window.SVGPathSeg.PATHSEG_UNKNOWN) return null;
                } else {
                    this._currentIndex++;
                }

                this._previousCommand = command;

                switch (command) {
                    case window.SVGPathSeg.PATHSEG_MOVETO_REL:
                        return new window.SVGPathSegMovetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_MOVETO_ABS:
                        return new window.SVGPathSegMovetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_LINETO_REL:
                        return new window.SVGPathSegLinetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_LINETO_ABS:
                        return new window.SVGPathSegLinetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:
                        return new window.SVGPathSegLinetoHorizontalRel(owningPathSegList, this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:
                        return new window.SVGPathSegLinetoHorizontalAbs(owningPathSegList, this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:
                        return new window.SVGPathSegLinetoVerticalRel(owningPathSegList, this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:
                        return new window.SVGPathSegLinetoVerticalAbs(owningPathSegList, this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_CLOSEPATH:
                        this._skipOptionalSpaces();
                        return new window.SVGPathSegClosePath(owningPathSegList);
                    case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:
                        var points = { x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegCurvetoCubicRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
                    case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:
                        var points = { x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegCurvetoCubicAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
                    case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:
                        var points = { x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegCurvetoCubicSmoothRel(owningPathSegList, points.x, points.y, points.x2, points.y2);
                    case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:
                        var points = { x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegCurvetoCubicSmoothAbs(owningPathSegList, points.x, points.y, points.x2, points.y2);
                    case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:
                        var points = { x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegCurvetoQuadraticRel(owningPathSegList, points.x, points.y, points.x1, points.y1);
                    case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:
                        var points = { x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegCurvetoQuadraticAbs(owningPathSegList, points.x, points.y, points.x1, points.y1);
                    case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:
                        return new window.SVGPathSegCurvetoQuadraticSmoothRel(owningPathSegList, this._parseNumber(), this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:
                        return new window.SVGPathSegCurvetoQuadraticSmoothAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
                    case window.SVGPathSeg.PATHSEG_ARC_REL:
                        var points = { x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegArcRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
                    case window.SVGPathSeg.PATHSEG_ARC_ABS:
                        var points = { x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber() };
                        return new window.SVGPathSegArcAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
                    default:
                        throw "Unknown path seg type.";
                }
            };

            var builder = new Builder();
            var source = new Source(string);

            if (!source.initialCommandIsMoveTo()) return [];
            while (source.hasMoreData()) {
                var pathSeg = source.parseSegment();
                if (!pathSeg) return [];
                builder.appendSegment(pathSeg);
            }

            return builder.pathSegList;
        };
    }
})();

/* jshint ignore:end */

c3_chart_fn.axis = function () {};
c3_chart_fn.axis.labels = function (labels) {
    var $$ = this.internal;
    if (arguments.length) {
        Object.keys(labels).forEach(function (axisId) {
            $$.axis.setLabelText(axisId, labels[axisId]);
        });
        $$.axis.updateLabels();
    }
    // TODO: return some values?
};
c3_chart_fn.axis.max = function (max) {
    var $$ = this.internal,
        config = $$.config;
    if (arguments.length) {
        if ((typeof max === 'undefined' ? 'undefined' : _typeof(max)) === 'object') {
            if (isValue(max.x)) {
                config.axis_x_max = max.x;
            }
            if (isValue(max.y)) {
                config.axis_y_max = max.y;
            }
            if (isValue(max.y2)) {
                config.axis_y2_max = max.y2;
            }
        } else {
            config.axis_y_max = config.axis_y2_max = max;
        }
        $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
    } else {
        return {
            x: config.axis_x_max,
            y: config.axis_y_max,
            y2: config.axis_y2_max
        };
    }
};
c3_chart_fn.axis.min = function (min) {
    var $$ = this.internal,
        config = $$.config;
    if (arguments.length) {
        if ((typeof min === 'undefined' ? 'undefined' : _typeof(min)) === 'object') {
            if (isValue(min.x)) {
                config.axis_x_min = min.x;
            }
            if (isValue(min.y)) {
                config.axis_y_min = min.y;
            }
            if (isValue(min.y2)) {
                config.axis_y2_min = min.y2;
            }
        } else {
            config.axis_y_min = config.axis_y2_min = min;
        }
        $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
    } else {
        return {
            x: config.axis_x_min,
            y: config.axis_y_min,
            y2: config.axis_y2_min
        };
    }
};
c3_chart_fn.axis.range = function (range) {
    if (arguments.length) {
        if (isDefined(range.max)) {
            this.axis.max(range.max);
        }
        if (isDefined(range.min)) {
            this.axis.min(range.min);
        }
    } else {
        return {
            max: this.axis.max(),
            min: this.axis.min()
        };
    }
};

c3_chart_fn.category = function (i, category) {
    var $$ = this.internal,
        config = $$.config;
    if (arguments.length > 1) {
        config.axis_x_categories[i] = category;
        $$.redraw();
    }
    return config.axis_x_categories[i];
};
c3_chart_fn.categories = function (categories) {
    var $$ = this.internal,
        config = $$.config;
    if (!arguments.length) {
        return config.axis_x_categories;
    }
    config.axis_x_categories = categories;
    $$.redraw();
    return config.axis_x_categories;
};

c3_chart_fn.resize = function (size) {
    var $$ = this.internal,
        config = $$.config;
    config.size_width = size ? size.width : null;
    config.size_height = size ? size.height : null;
    this.flush();
};

c3_chart_fn.flush = function () {
    var $$ = this.internal;
    $$.updateAndRedraw({ withLegend: true, withTransition: false, withTransitionForTransform: false });
};

c3_chart_fn.destroy = function () {
    var $$ = this.internal;

    window.clearInterval($$.intervalForObserveInserted);

    if ($$.resizeTimeout !== undefined) {
        window.clearTimeout($$.resizeTimeout);
    }

    if (window.detachEvent) {
        window.detachEvent('onresize', $$.resizeFunction);
    } else if (window.removeEventListener) {
        window.removeEventListener('resize', $$.resizeFunction);
    } else {
        var wrapper = window.onresize;
        // check if no one else removed our wrapper and remove our resizeFunction from it
        if (wrapper && wrapper.add && wrapper.remove) {
            wrapper.remove($$.resizeFunction);
        }
    }

    $$.selectChart.classed('c3', false).html("");

    // MEMO: this is needed because the reference of some elements will not be released, then memory leak will happen.
    Object.keys($$).forEach(function (key) {
        $$[key] = null;
    });

    return null;
};

// TODO: fix
c3_chart_fn.color = function (id) {
    var $$ = this.internal;
    return $$.color(id); // more patterns
};

c3_chart_fn.data = function (targetIds) {
    var targets = this.internal.data.targets;
    return typeof targetIds === 'undefined' ? targets : targets.filter(function (t) {
        return [].concat(targetIds).indexOf(t.id) >= 0;
    });
};
c3_chart_fn.data.shown = function (targetIds) {
    return this.internal.filterTargetsToShow(this.data(targetIds));
};
c3_chart_fn.data.values = function (targetId) {
    var targets,
        values = null;
    if (targetId) {
        targets = this.data(targetId);
        values = targets[0] ? targets[0].values.map(function (d) {
            return d.value;
        }) : null;
    }
    return values;
};
c3_chart_fn.data.names = function (names) {
    this.internal.clearLegendItemTextBoxCache();
    return this.internal.updateDataAttributes('names', names);
};
c3_chart_fn.data.colors = function (colors) {
    return this.internal.updateDataAttributes('colors', colors);
};
c3_chart_fn.data.axes = function (axes) {
    return this.internal.updateDataAttributes('axes', axes);
};

c3_chart_fn.flow = function (args) {
    var $$ = this.internal,
        targets,
        data,
        notfoundIds = [],
        orgDataCount = $$.getMaxDataCount(),
        dataCount,
        domain,
        baseTarget,
        baseValue,
        length = 0,
        tail = 0,
        diff,
        to;

    if (args.json) {
        data = $$.convertJsonToData(args.json, args.keys);
    } else if (args.rows) {
        data = $$.convertRowsToData(args.rows);
    } else if (args.columns) {
        data = $$.convertColumnsToData(args.columns);
    } else {
        return;
    }
    targets = $$.convertDataToTargets(data, true);

    // Update/Add data
    $$.data.targets.forEach(function (t) {
        var found = false,
            i,
            j;
        for (i = 0; i < targets.length; i++) {
            if (t.id === targets[i].id) {
                found = true;

                if (t.values[t.values.length - 1]) {
                    tail = t.values[t.values.length - 1].index + 1;
                }
                length = targets[i].values.length;

                for (j = 0; j < length; j++) {
                    targets[i].values[j].index = tail + j;
                    if (!$$.isTimeSeries()) {
                        targets[i].values[j].x = tail + j;
                    }
                }
                t.values = t.values.concat(targets[i].values);

                targets.splice(i, 1);
                break;
            }
        }
        if (!found) {
            notfoundIds.push(t.id);
        }
    });

    // Append null for not found targets
    $$.data.targets.forEach(function (t) {
        var i, j;
        for (i = 0; i < notfoundIds.length; i++) {
            if (t.id === notfoundIds[i]) {
                tail = t.values[t.values.length - 1].index + 1;
                for (j = 0; j < length; j++) {
                    t.values.push({
                        id: t.id,
                        index: tail + j,
                        x: $$.isTimeSeries() ? $$.getOtherTargetX(tail + j) : tail + j,
                        value: null
                    });
                }
            }
        }
    });

    // Generate null values for new target
    if ($$.data.targets.length) {
        targets.forEach(function (t) {
            var i,
                missing = [];
            for (i = $$.data.targets[0].values[0].index; i < tail; i++) {
                missing.push({
                    id: t.id,
                    index: i,
                    x: $$.isTimeSeries() ? $$.getOtherTargetX(i) : i,
                    value: null
                });
            }
            t.values.forEach(function (v) {
                v.index += tail;
                if (!$$.isTimeSeries()) {
                    v.x += tail;
                }
            });
            t.values = missing.concat(t.values);
        });
    }
    $$.data.targets = $$.data.targets.concat(targets); // add remained

    // check data count because behavior needs to change when it's only one
    dataCount = $$.getMaxDataCount();
    baseTarget = $$.data.targets[0];
    baseValue = baseTarget.values[0];

    // Update length to flow if needed
    if (isDefined(args.to)) {
        length = 0;
        to = $$.isTimeSeries() ? $$.parseDate(args.to) : args.to;
        baseTarget.values.forEach(function (v) {
            if (v.x < to) {
                length++;
            }
        });
    } else if (isDefined(args.length)) {
        length = args.length;
    }

    // If only one data, update the domain to flow from left edge of the chart
    if (!orgDataCount) {
        if ($$.isTimeSeries()) {
            if (baseTarget.values.length > 1) {
                diff = baseTarget.values[baseTarget.values.length - 1].x - baseValue.x;
            } else {
                diff = baseValue.x - $$.getXDomain($$.data.targets)[0];
            }
        } else {
            diff = 1;
        }
        domain = [baseValue.x - diff, baseValue.x];
        $$.updateXDomain(null, true, true, false, domain);
    } else if (orgDataCount === 1) {
        if ($$.isTimeSeries()) {
            diff = (baseTarget.values[baseTarget.values.length - 1].x - baseValue.x) / 2;
            domain = [new Date(+baseValue.x - diff), new Date(+baseValue.x + diff)];
            $$.updateXDomain(null, true, true, false, domain);
        }
    }

    // Set targets
    $$.updateTargets($$.data.targets);

    // Redraw with new targets
    $$.redraw({
        flow: {
            index: baseValue.index,
            length: length,
            duration: isValue(args.duration) ? args.duration : $$.config.transition_duration,
            done: args.done,
            orgDataCount: orgDataCount
        },
        withLegend: true,
        withTransition: orgDataCount > 1,
        withTrimXDomain: false,
        withUpdateXAxis: true
    });
};

c3_chart_internal_fn.generateFlow = function (args) {
    var $$ = this,
        config = $$.config,
        d3 = $$.d3;

    return function () {
        var targets = args.targets,
            flow = args.flow,
            drawBar = args.drawBar,
            drawLine = args.drawLine,
            drawArea = args.drawArea,
            cx = args.cx,
            cy = args.cy,
            xv = args.xv,
            xForText = args.xForText,
            yForText = args.yForText,
            duration = args.duration;

        var translateX,
            scaleX = 1,
            transform,
            flowIndex = flow.index,
            flowLength = flow.length,
            flowStart = $$.getValueOnIndex($$.data.targets[0].values, flowIndex),
            flowEnd = $$.getValueOnIndex($$.data.targets[0].values, flowIndex + flowLength),
            orgDomain = $$.x.domain(),
            domain,
            durationForFlow = flow.duration || duration,
            done = flow.done || function () {},
            wait = $$.generateWait();

        var xgrid = $$.xgrid || d3.selectAll([]),
            xgridLines = $$.xgridLines || d3.selectAll([]),
            mainRegion = $$.mainRegion || d3.selectAll([]),
            mainText = $$.mainText || d3.selectAll([]),
            mainBar = $$.mainBar || d3.selectAll([]),
            mainLine = $$.mainLine || d3.selectAll([]),
            mainArea = $$.mainArea || d3.selectAll([]),
            mainCircle = $$.mainCircle || d3.selectAll([]);

        // set flag
        $$.flowing = true;

        // remove head data after rendered
        $$.data.targets.forEach(function (d) {
            d.values.splice(0, flowLength);
        });

        // update x domain to generate axis elements for flow
        domain = $$.updateXDomain(targets, true, true);
        // update elements related to x scale
        if ($$.updateXGrid) {
            $$.updateXGrid(true);
        }

        // generate transform to flow
        if (!flow.orgDataCount) {
            // if empty
            if ($$.data.targets[0].values.length !== 1) {
                translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);
            } else {
                if ($$.isTimeSeries()) {
                    flowStart = $$.getValueOnIndex($$.data.targets[0].values, 0);
                    flowEnd = $$.getValueOnIndex($$.data.targets[0].values, $$.data.targets[0].values.length - 1);
                    translateX = $$.x(flowStart.x) - $$.x(flowEnd.x);
                } else {
                    translateX = diffDomain(domain) / 2;
                }
            }
        } else if (flow.orgDataCount === 1 || (flowStart && flowStart.x) === (flowEnd && flowEnd.x)) {
            translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);
        } else {
            if ($$.isTimeSeries()) {
                translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);
            } else {
                translateX = $$.x(flowStart.x) - $$.x(flowEnd.x);
            }
        }
        scaleX = diffDomain(orgDomain) / diffDomain(domain);
        transform = 'translate(' + translateX + ',0) scale(' + scaleX + ',1)';

        $$.hideXGridFocus();

        d3.transition().ease('linear').duration(durationForFlow).each(function () {
            wait.add($$.axes.x.transition().call($$.xAxis));
            wait.add(mainBar.transition().attr('transform', transform));
            wait.add(mainLine.transition().attr('transform', transform));
            wait.add(mainArea.transition().attr('transform', transform));
            wait.add(mainCircle.transition().attr('transform', transform));
            wait.add(mainText.transition().attr('transform', transform));
            wait.add(mainRegion.filter($$.isRegionOnX).transition().attr('transform', transform));
            wait.add(xgrid.transition().attr('transform', transform));
            wait.add(xgridLines.transition().attr('transform', transform));
        }).call(wait, function () {
            var i,
                shapes = [],
                texts = [],
                eventRects = [];

            // remove flowed elements
            if (flowLength) {
                for (i = 0; i < flowLength; i++) {
                    shapes.push('.' + CLASS.shape + '-' + (flowIndex + i));
                    texts.push('.' + CLASS.text + '-' + (flowIndex + i));
                    eventRects.push('.' + CLASS.eventRect + '-' + (flowIndex + i));
                }
                $$.svg.selectAll('.' + CLASS.shapes).selectAll(shapes).remove();
                $$.svg.selectAll('.' + CLASS.texts).selectAll(texts).remove();
                $$.svg.selectAll('.' + CLASS.eventRects).selectAll(eventRects).remove();
                $$.svg.select('.' + CLASS.xgrid).remove();
            }

            // draw again for removing flowed elements and reverting attr
            xgrid.attr('transform', null).attr($$.xgridAttr);
            xgridLines.attr('transform', null);
            xgridLines.select('line').attr("x1", config.axis_rotated ? 0 : xv).attr("x2", config.axis_rotated ? $$.width : xv);
            xgridLines.select('text').attr("x", config.axis_rotated ? $$.width : 0).attr("y", xv);
            mainBar.attr('transform', null).attr("d", drawBar);
            mainLine.attr('transform', null).attr("d", drawLine);
            mainArea.attr('transform', null).attr("d", drawArea);
            mainCircle.attr('transform', null).attr("cx", cx).attr("cy", cy);
            mainText.attr('transform', null).attr('x', xForText).attr('y', yForText).style('fill-opacity', $$.opacityForText.bind($$));
            mainRegion.attr('transform', null);
            mainRegion.select('rect').filter($$.isRegionOnX).attr("x", $$.regionX.bind($$)).attr("width", $$.regionWidth.bind($$));

            if (config.interaction_enabled) {
                $$.redrawEventRect();
            }

            // callback for end of flow
            done();

            $$.flowing = false;
        });
    };
};

c3_chart_fn.focus = function (targetIds) {
    var $$ = this.internal,
        candidates;

    targetIds = $$.mapToTargetIds(targetIds);
    candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$))), this.revert();
    this.defocus();
    candidates.classed(CLASS.focused, true).classed(CLASS.defocused, false);
    if ($$.hasArcType()) {
        $$.expandArc(targetIds);
    }
    $$.toggleFocusLegend(targetIds, true);

    $$.focusedTargetIds = targetIds;
    $$.defocusedTargetIds = $$.defocusedTargetIds.filter(function (id) {
        return targetIds.indexOf(id) < 0;
    });
};

c3_chart_fn.defocus = function (targetIds) {
    var $$ = this.internal,
        candidates;

    targetIds = $$.mapToTargetIds(targetIds);
    candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$))), candidates.classed(CLASS.focused, false).classed(CLASS.defocused, true);
    if ($$.hasArcType()) {
        $$.unexpandArc(targetIds);
    }
    $$.toggleFocusLegend(targetIds, false);

    $$.focusedTargetIds = $$.focusedTargetIds.filter(function (id) {
        return targetIds.indexOf(id) < 0;
    });
    $$.defocusedTargetIds = targetIds;
};

c3_chart_fn.revert = function (targetIds) {
    var $$ = this.internal,
        candidates;

    targetIds = $$.mapToTargetIds(targetIds);
    candidates = $$.svg.selectAll($$.selectorTargets(targetIds)); // should be for all targets

    candidates.classed(CLASS.focused, false).classed(CLASS.defocused, false);
    if ($$.hasArcType()) {
        $$.unexpandArc(targetIds);
    }
    if ($$.config.legend_show) {
        $$.showLegend(targetIds.filter($$.isLegendToShow.bind($$)));
        $$.legend.selectAll($$.selectorLegends(targetIds)).filter(function () {
            return $$.d3.select(this).classed(CLASS.legendItemFocused);
        }).classed(CLASS.legendItemFocused, false);
    }

    $$.focusedTargetIds = [];
    $$.defocusedTargetIds = [];
};

c3_chart_fn.xgrids = function (grids) {
    var $$ = this.internal,
        config = $$.config;
    if (!grids) {
        return config.grid_x_lines;
    }
    config.grid_x_lines = grids;
    $$.redrawWithoutRescale();
    return config.grid_x_lines;
};
c3_chart_fn.xgrids.add = function (grids) {
    var $$ = this.internal;
    return this.xgrids($$.config.grid_x_lines.concat(grids ? grids : []));
};
c3_chart_fn.xgrids.remove = function (params) {
    // TODO: multiple
    var $$ = this.internal;
    $$.removeGridLines(params, true);
};

c3_chart_fn.ygrids = function (grids) {
    var $$ = this.internal,
        config = $$.config;
    if (!grids) {
        return config.grid_y_lines;
    }
    config.grid_y_lines = grids;
    $$.redrawWithoutRescale();
    return config.grid_y_lines;
};
c3_chart_fn.ygrids.add = function (grids) {
    var $$ = this.internal;
    return this.ygrids($$.config.grid_y_lines.concat(grids ? grids : []));
};
c3_chart_fn.ygrids.remove = function (params) {
    // TODO: multiple
    var $$ = this.internal;
    $$.removeGridLines(params, false);
};

c3_chart_fn.groups = function (groups) {
    var $$ = this.internal,
        config = $$.config;
    if (isUndefined(groups)) {
        return config.data_groups;
    }
    config.data_groups = groups;
    $$.redraw();
    return config.data_groups;
};

c3_chart_fn.legend = function () {};
c3_chart_fn.legend.show = function (targetIds) {
    var $$ = this.internal;
    $$.showLegend($$.mapToTargetIds(targetIds));
    $$.updateAndRedraw({ withLegend: true });
};
c3_chart_fn.legend.hide = function (targetIds) {
    var $$ = this.internal;
    $$.hideLegend($$.mapToTargetIds(targetIds));
    $$.updateAndRedraw({ withLegend: true });
};

c3_chart_fn.load = function (args) {
    var $$ = this.internal,
        config = $$.config;
    // update xs if specified
    if (args.xs) {
        $$.addXs(args.xs);
    }
    // update names if exists
    if ('names' in args) {
        c3_chart_fn.data.names.bind(this)(args.names);
    }
    // update classes if exists
    if ('classes' in args) {
        Object.keys(args.classes).forEach(function (id) {
            config.data_classes[id] = args.classes[id];
        });
    }
    // update categories if exists
    if ('categories' in args && $$.isCategorized()) {
        config.axis_x_categories = args.categories;
    }
    // update axes if exists
    if ('axes' in args) {
        Object.keys(args.axes).forEach(function (id) {
            config.data_axes[id] = args.axes[id];
        });
    }
    // update colors if exists
    if ('colors' in args) {
        Object.keys(args.colors).forEach(function (id) {
            config.data_colors[id] = args.colors[id];
        });
    }
    // use cache if exists
    if ('cacheIds' in args && $$.hasCaches(args.cacheIds)) {
        $$.load($$.getCaches(args.cacheIds), args.done);
        return;
    }
    // unload if needed
    if ('unload' in args) {
        // TODO: do not unload if target will load (included in url/rows/columns)
        $$.unload($$.mapToTargetIds(typeof args.unload === 'boolean' && args.unload ? null : args.unload), function () {
            $$.loadFromArgs(args);
        });
    } else {
        $$.loadFromArgs(args);
    }
};

c3_chart_fn.unload = function (args) {
    var $$ = this.internal;
    args = args || {};
    if (args instanceof Array) {
        args = { ids: args };
    } else if (typeof args === 'string') {
        args = { ids: [args] };
    }
    $$.unload($$.mapToTargetIds(args.ids), function () {
        $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true });
        if (args.done) {
            args.done();
        }
    });
};

c3_chart_fn.regions = function (regions) {
    var $$ = this.internal,
        config = $$.config;
    if (!regions) {
        return config.regions;
    }
    config.regions = regions;
    $$.redrawWithoutRescale();
    return config.regions;
};
c3_chart_fn.regions.add = function (regions) {
    var $$ = this.internal,
        config = $$.config;
    if (!regions) {
        return config.regions;
    }
    config.regions = config.regions.concat(regions);
    $$.redrawWithoutRescale();
    return config.regions;
};
c3_chart_fn.regions.remove = function (options) {
    var $$ = this.internal,
        config = $$.config,
        duration,
        classes,
        regions;

    options = options || {};
    duration = $$.getOption(options, "duration", config.transition_duration);
    classes = $$.getOption(options, "classes", [CLASS.region]);

    regions = $$.main.select('.' + CLASS.regions).selectAll(classes.map(function (c) {
        return '.' + c;
    }));
    (duration ? regions.transition().duration(duration) : regions).style('opacity', 0).remove();

    config.regions = config.regions.filter(function (region) {
        var found = false;
        if (!region['class']) {
            return true;
        }
        region['class'].split(' ').forEach(function (c) {
            if (classes.indexOf(c) >= 0) {
                found = true;
            }
        });
        return !found;
    });

    return config.regions;
};

c3_chart_fn.selected = function (targetId) {
    var $$ = this.internal,
        d3 = $$.d3;
    return d3.merge($$.main.selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(targetId)).selectAll('.' + CLASS.shape).filter(function () {
        return d3.select(this).classed(CLASS.SELECTED);
    }).map(function (d) {
        return d.map(function (d) {
            var data = d.__data__;return data.data ? data.data : data;
        });
    }));
};
c3_chart_fn.select = function (ids, indices, resetOther) {
    var $$ = this.internal,
        d3 = $$.d3,
        config = $$.config;
    if (!config.data_selection_enabled) {
        return;
    }
    $$.main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).each(function (d, i) {
        var shape = d3.select(this),
            id = d.data ? d.data.id : d.id,
            toggle = $$.getToggle(this, d).bind($$),
            isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id) >= 0,
            isTargetIndex = !indices || indices.indexOf(i) >= 0,
            isSelected = shape.classed(CLASS.SELECTED);
        // line/area selection not supported yet
        if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {
            return;
        }
        if (isTargetId && isTargetIndex) {
            if (config.data_selection_isselectable(d) && !isSelected) {
                toggle(true, shape.classed(CLASS.SELECTED, true), d, i);
            }
        } else if (isDefined(resetOther) && resetOther) {
            if (isSelected) {
                toggle(false, shape.classed(CLASS.SELECTED, false), d, i);
            }
        }
    });
};
c3_chart_fn.unselect = function (ids, indices) {
    var $$ = this.internal,
        d3 = $$.d3,
        config = $$.config;
    if (!config.data_selection_enabled) {
        return;
    }
    $$.main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).each(function (d, i) {
        var shape = d3.select(this),
            id = d.data ? d.data.id : d.id,
            toggle = $$.getToggle(this, d).bind($$),
            isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id) >= 0,
            isTargetIndex = !indices || indices.indexOf(i) >= 0,
            isSelected = shape.classed(CLASS.SELECTED);
        // line/area selection not supported yet
        if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {
            return;
        }
        if (isTargetId && isTargetIndex) {
            if (config.data_selection_isselectable(d)) {
                if (isSelected) {
                    toggle(false, shape.classed(CLASS.SELECTED, false), d, i);
                }
            }
        }
    });
};

c3_chart_fn.show = function (targetIds, options) {
    var $$ = this.internal,
        targets;

    targetIds = $$.mapToTargetIds(targetIds);
    options = options || {};

    $$.removeHiddenTargetIds(targetIds);
    targets = $$.svg.selectAll($$.selectorTargets(targetIds));

    targets.transition().style('opacity', 1, 'important').call($$.endall, function () {
        targets.style('opacity', null).style('opacity', 1);
    });

    if (options.withLegend) {
        $$.showLegend(targetIds);
    }

    $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true });
};

c3_chart_fn.hide = function (targetIds, options) {
    var $$ = this.internal,
        targets;

    targetIds = $$.mapToTargetIds(targetIds);
    options = options || {};

    $$.addHiddenTargetIds(targetIds);
    targets = $$.svg.selectAll($$.selectorTargets(targetIds));

    targets.transition().style('opacity', 0, 'important').call($$.endall, function () {
        targets.style('opacity', null).style('opacity', 0);
    });

    if (options.withLegend) {
        $$.hideLegend(targetIds);
    }

    $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true });
};

c3_chart_fn.toggle = function (targetIds, options) {
    var that = this,
        $$ = this.internal;
    $$.mapToTargetIds(targetIds).forEach(function (targetId) {
        $$.isTargetToShow(targetId) ? that.hide(targetId, options) : that.show(targetId, options);
    });
};

c3_chart_fn.tooltip = function () {};
c3_chart_fn.tooltip.show = function (args) {
    var $$ = this.internal,
        index,
        mouse;

    // determine mouse position on the chart
    if (args.mouse) {
        mouse = args.mouse;
    }

    // determine focus data
    if (args.data) {
        if ($$.isMultipleX()) {
            // if multiple xs, target point will be determined by mouse
            mouse = [$$.x(args.data.x), $$.getYScale(args.data.id)(args.data.value)];
            index = null;
        } else {
            // TODO: when tooltip_grouped = false
            index = isValue(args.data.index) ? args.data.index : $$.getIndexByX(args.data.x);
        }
    } else if (typeof args.x !== 'undefined') {
        index = $$.getIndexByX(args.x);
    } else if (typeof args.index !== 'undefined') {
        index = args.index;
    }

    // emulate mouse events to show
    $$.dispatchEvent('mouseover', index, mouse);
    $$.dispatchEvent('mousemove', index, mouse);

    $$.config.tooltip_onshow.call($$, args.data);
};
c3_chart_fn.tooltip.hide = function () {
    // TODO: get target data by checking the state of focus
    this.internal.dispatchEvent('mouseout', 0);

    this.internal.config.tooltip_onhide.call(this);
};

c3_chart_fn.transform = function (type, targetIds) {
    var $$ = this.internal,
        options = ['pie', 'donut'].indexOf(type) >= 0 ? { withTransform: true } : null;
    $$.transformTo(targetIds, type, options);
};

c3_chart_internal_fn.transformTo = function (targetIds, type, optionsForRedraw) {
    var $$ = this,
        withTransitionForAxis = !$$.hasArcType(),
        options = optionsForRedraw || { withTransitionForAxis: withTransitionForAxis };
    options.withTransitionForTransform = false;
    $$.transiting = false;
    $$.setTargetType(targetIds, type);
    $$.updateTargets($$.data.targets); // this is needed when transforming to arc
    $$.updateAndRedraw(options);
};

c3_chart_fn.x = function (x) {
    var $$ = this.internal;
    if (arguments.length) {
        $$.updateTargetX($$.data.targets, x);
        $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
    }
    return $$.data.xs;
};
c3_chart_fn.xs = function (xs) {
    var $$ = this.internal;
    if (arguments.length) {
        $$.updateTargetXs($$.data.targets, xs);
        $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
    }
    return $$.data.xs;
};

c3_chart_fn.zoom = function (domain) {
    var $$ = this.internal;
    if (domain) {
        if ($$.isTimeSeries()) {
            domain = domain.map(function (x) {
                return $$.parseDate(x);
            });
        }
        $$.brush.extent(domain);
        $$.redraw({ withUpdateXDomain: true, withY: $$.config.zoom_rescale });
        $$.config.zoom_onzoom.call(this, $$.x.orgDomain());
    }
    return $$.brush.extent();
};
c3_chart_fn.zoom.enable = function (enabled) {
    var $$ = this.internal;
    $$.config.zoom_enabled = enabled;
    $$.updateAndRedraw();
};
c3_chart_fn.unzoom = function () {
    var $$ = this.internal;
    $$.brush.clear().update();
    $$.redraw({ withUpdateXDomain: true });
};

c3_chart_fn.zoom.max = function (max) {
    var $$ = this.internal,
        config = $$.config,
        d3 = $$.d3;
    if (max === 0 || max) {
        config.zoom_x_max = d3.max([$$.orgXDomain[1], max]);
    } else {
        return config.zoom_x_max;
    }
};

c3_chart_fn.zoom.min = function (min) {
    var $$ = this.internal,
        config = $$.config,
        d3 = $$.d3;
    if (min === 0 || min) {
        config.zoom_x_min = d3.min([$$.orgXDomain[0], min]);
    } else {
        return config.zoom_x_min;
    }
};

c3_chart_fn.zoom.range = function (range) {
    if (arguments.length) {
        if (isDefined(range.max)) {
            this.domain.max(range.max);
        }
        if (isDefined(range.min)) {
            this.domain.min(range.min);
        }
    } else {
        return {
            max: this.domain.max(),
            min: this.domain.min()
        };
    }
};

c3_chart_internal_fn.initPie = function () {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config;
    $$.pie = d3.layout.pie().value(function (d) {
        return d.values.reduce(function (a, b) {
            return a + b.value;
        }, 0);
    });
    if (!config.data_order) {
        $$.pie.sort(null);
    }
};

c3_chart_internal_fn.updateRadius = function () {
    var $$ = this,
        config = $$.config,
        w = config.gauge_width || config.donut_width;
    $$.radiusExpanded = Math.min($$.arcWidth, $$.arcHeight) / 2;
    $$.radius = $$.radiusExpanded * 0.95;
    $$.innerRadiusRatio = w ? ($$.radius - w) / $$.radius : 0.6;
    $$.innerRadius = $$.hasType('donut') || $$.hasType('gauge') ? $$.radius * $$.innerRadiusRatio : 0;
};

c3_chart_internal_fn.updateArc = function () {
    var $$ = this;
    $$.svgArc = $$.getSvgArc();
    $$.svgArcExpanded = $$.getSvgArcExpanded();
    $$.svgArcExpandedSub = $$.getSvgArcExpanded(0.98);
};

c3_chart_internal_fn.updateAngle = function (d) {
    var $$ = this,
        config = $$.config,
        found = false,
        index = 0,
        gMin,
        gMax,
        gTic,
        gValue;

    if (!config) {
        return null;
    }

    $$.pie($$.filterTargetsToShow($$.data.targets)).forEach(function (t) {
        if (!found && t.data.id === d.data.id) {
            found = true;
            d = t;
            d.index = index;
        }
        index++;
    });
    if (isNaN(d.startAngle)) {
        d.startAngle = 0;
    }
    if (isNaN(d.endAngle)) {
        d.endAngle = d.startAngle;
    }
    if ($$.isGaugeType(d.data)) {
        gMin = config.gauge_min;
        gMax = config.gauge_max;
        gTic = Math.PI * (config.gauge_fullCircle ? 2 : 1) / (gMax - gMin);
        gValue = d.value < gMin ? 0 : d.value < gMax ? d.value - gMin : gMax - gMin;
        d.startAngle = config.gauge_startingAngle;
        d.endAngle = d.startAngle + gTic * gValue;
    }
    return found ? d : null;
};

c3_chart_internal_fn.getSvgArc = function () {
    var $$ = this,
        arc = $$.d3.svg.arc().outerRadius($$.radius).innerRadius($$.innerRadius),
        newArc = function newArc(d, withoutUpdate) {
        var updated;
        if (withoutUpdate) {
            return arc(d);
        } // for interpolate
        updated = $$.updateAngle(d);
        return updated ? arc(updated) : "M 0 0";
    };
    // TODO: extends all function
    newArc.centroid = arc.centroid;
    return newArc;
};

c3_chart_internal_fn.getSvgArcExpanded = function (rate) {
    var $$ = this,
        arc = $$.d3.svg.arc().outerRadius($$.radiusExpanded * (rate ? rate : 1)).innerRadius($$.innerRadius);
    return function (d) {
        var updated = $$.updateAngle(d);
        return updated ? arc(updated) : "M 0 0";
    };
};

c3_chart_internal_fn.getArc = function (d, withoutUpdate, force) {
    return force || this.isArcType(d.data) ? this.svgArc(d, withoutUpdate) : "M 0 0";
};

c3_chart_internal_fn.transformForArcLabel = function (d) {
    var $$ = this,
        config = $$.config,
        updated = $$.updateAngle(d),
        c,
        x,
        y,
        h,
        ratio,
        translate = "";
    if (updated && !$$.hasType('gauge')) {
        c = this.svgArc.centroid(updated);
        x = isNaN(c[0]) ? 0 : c[0];
        y = isNaN(c[1]) ? 0 : c[1];
        h = Math.sqrt(x * x + y * y);
        if ($$.hasType('donut') && config.donut_label_ratio) {
            ratio = isFunction(config.donut_label_ratio) ? config.donut_label_ratio(d, $$.radius, h) : config.donut_label_ratio;
        } else if ($$.hasType('pie') && config.pie_label_ratio) {
            ratio = isFunction(config.pie_label_ratio) ? config.pie_label_ratio(d, $$.radius, h) : config.pie_label_ratio;
        } else {
            ratio = $$.radius && h ? (36 / $$.radius > 0.375 ? 1.175 - 36 / $$.radius : 0.8) * $$.radius / h : 0;
        }
        translate = "translate(" + x * ratio + ',' + y * ratio + ")";
    }
    return translate;
};

c3_chart_internal_fn.getArcRatio = function (d) {
    var $$ = this,
        config = $$.config,
        whole = Math.PI * ($$.hasType('gauge') && !config.gauge_fullCircle ? 1 : 2);
    return d ? (d.endAngle - d.startAngle) / whole : null;
};

c3_chart_internal_fn.convertToArcData = function (d) {
    return this.addName({
        id: d.data.id,
        value: d.value,
        ratio: this.getArcRatio(d),
        index: d.index
    });
};

c3_chart_internal_fn.textForArcLabel = function (d) {
    var $$ = this,
        updated,
        value,
        ratio,
        id,
        format;
    if (!$$.shouldShowArcLabel()) {
        return "";
    }
    updated = $$.updateAngle(d);
    value = updated ? updated.value : null;
    ratio = $$.getArcRatio(updated);
    id = d.data.id;
    if (!$$.hasType('gauge') && !$$.meetsArcLabelThreshold(ratio)) {
        return "";
    }
    format = $$.getArcLabelFormat();
    return format ? format(value, ratio, id) : $$.defaultArcValueFormat(value, ratio);
};

c3_chart_internal_fn.textForGaugeMinMax = function (value, isMax) {
    var $$ = this,
        format = $$.getGaugeLabelExtents();

    return format ? format(value, isMax) : value;
};

c3_chart_internal_fn.expandArc = function (targetIds) {
    var $$ = this,
        interval;

    // MEMO: avoid to cancel transition
    if ($$.transiting) {
        interval = window.setInterval(function () {
            if (!$$.transiting) {
                window.clearInterval(interval);
                if ($$.legend.selectAll('.c3-legend-item-focused').size() > 0) {
                    $$.expandArc(targetIds);
                }
            }
        }, 10);
        return;
    }

    targetIds = $$.mapToTargetIds(targetIds);

    $$.svg.selectAll($$.selectorTargets(targetIds, '.' + CLASS.chartArc)).each(function (d) {
        if (!$$.shouldExpand(d.data.id)) {
            return;
        }
        $$.d3.select(this).selectAll('path').transition().duration($$.expandDuration(d.data.id)).attr("d", $$.svgArcExpanded).transition().duration($$.expandDuration(d.data.id) * 2).attr("d", $$.svgArcExpandedSub).each(function (d) {
            if ($$.isDonutType(d.data)) {
                // callback here
            }
        });
    });
};

c3_chart_internal_fn.unexpandArc = function (targetIds) {
    var $$ = this;

    if ($$.transiting) {
        return;
    }

    targetIds = $$.mapToTargetIds(targetIds);

    $$.svg.selectAll($$.selectorTargets(targetIds, '.' + CLASS.chartArc)).selectAll('path').transition().duration(function (d) {
        return $$.expandDuration(d.data.id);
    }).attr("d", $$.svgArc);
    $$.svg.selectAll('.' + CLASS.arc);
};

c3_chart_internal_fn.expandDuration = function (id) {
    var $$ = this,
        config = $$.config;

    if ($$.isDonutType(id)) {
        return config.donut_expand_duration;
    } else if ($$.isGaugeType(id)) {
        return config.gauge_expand_duration;
    } else if ($$.isPieType(id)) {
        return config.pie_expand_duration;
    } else {
        return 50;
    }
};

c3_chart_internal_fn.shouldExpand = function (id) {
    var $$ = this,
        config = $$.config;
    return $$.isDonutType(id) && config.donut_expand || $$.isGaugeType(id) && config.gauge_expand || $$.isPieType(id) && config.pie_expand;
};

c3_chart_internal_fn.shouldShowArcLabel = function () {
    var $$ = this,
        config = $$.config,
        shouldShow = true;
    if ($$.hasType('donut')) {
        shouldShow = config.donut_label_show;
    } else if ($$.hasType('pie')) {
        shouldShow = config.pie_label_show;
    }
    // when gauge, always true
    return shouldShow;
};

c3_chart_internal_fn.meetsArcLabelThreshold = function (ratio) {
    var $$ = this,
        config = $$.config,
        threshold = $$.hasType('donut') ? config.donut_label_threshold : config.pie_label_threshold;
    return ratio >= threshold;
};

c3_chart_internal_fn.getArcLabelFormat = function () {
    var $$ = this,
        config = $$.config,
        format = config.pie_label_format;
    if ($$.hasType('gauge')) {
        format = config.gauge_label_format;
    } else if ($$.hasType('donut')) {
        format = config.donut_label_format;
    }
    return format;
};

c3_chart_internal_fn.getGaugeLabelExtents = function () {
    var $$ = this,
        config = $$.config;
    return config.gauge_label_extents;
};

c3_chart_internal_fn.getArcTitle = function () {
    var $$ = this;
    return $$.hasType('donut') ? $$.config.donut_title : "";
};

c3_chart_internal_fn.updateTargetsForArc = function (targets) {
    var $$ = this,
        main = $$.main,
        mainPieUpdate,
        mainPieEnter,
        classChartArc = $$.classChartArc.bind($$),
        classArcs = $$.classArcs.bind($$),
        classFocus = $$.classFocus.bind($$);
    mainPieUpdate = main.select('.' + CLASS.chartArcs).selectAll('.' + CLASS.chartArc).data($$.pie(targets)).attr("class", function (d) {
        return classChartArc(d) + classFocus(d.data);
    });
    mainPieEnter = mainPieUpdate.enter().append("g").attr("class", classChartArc);
    mainPieEnter.append('g').attr('class', classArcs);
    mainPieEnter.append("text").attr("dy", $$.hasType('gauge') ? "-.1em" : ".35em").style("opacity", 0).style("text-anchor", "middle").style("pointer-events", "none");
    // MEMO: can not keep same color..., but not bad to update color in redraw
    //mainPieUpdate.exit().remove();
};

c3_chart_internal_fn.initArc = function () {
    var $$ = this;
    $$.arcs = $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartArcs).attr("transform", $$.getTranslate('arc'));
    $$.arcs.append('text').attr('class', CLASS.chartArcsTitle).style("text-anchor", "middle").text($$.getArcTitle());
};

c3_chart_internal_fn.redrawArc = function (duration, durationForExit, withTransform) {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config,
        main = $$.main,
        mainArc;
    mainArc = main.selectAll('.' + CLASS.arcs).selectAll('.' + CLASS.arc).data($$.arcData.bind($$));
    mainArc.enter().append('path').attr("class", $$.classArc.bind($$)).style("fill", function (d) {
        return $$.color(d.data);
    }).style("cursor", function (d) {
        return config.interaction_enabled && config.data_selection_isselectable(d) ? "pointer" : null;
    }).each(function (d) {
        if ($$.isGaugeType(d.data)) {
            d.startAngle = d.endAngle = config.gauge_startingAngle;
        }
        this._current = d;
    });
    mainArc.attr("transform", function (d) {
        return !$$.isGaugeType(d.data) && withTransform ? "scale(0)" : "";
    }).on('mouseover', config.interaction_enabled ? function (d) {
        var updated, arcData;
        if ($$.transiting) {
            // skip while transiting
            return;
        }
        updated = $$.updateAngle(d);
        if (updated) {
            arcData = $$.convertToArcData(updated);
            // transitions
            $$.expandArc(updated.data.id);
            $$.api.focus(updated.data.id);
            $$.toggleFocusLegend(updated.data.id, true);
            $$.config.data_onmouseover(arcData, this);
        }
    } : null).on('mousemove', config.interaction_enabled ? function (d) {
        var updated = $$.updateAngle(d),
            arcData,
            selectedData;
        if (updated) {
            arcData = $$.convertToArcData(updated), selectedData = [arcData];
            $$.showTooltip(selectedData, this);
        }
    } : null).on('mouseout', config.interaction_enabled ? function (d) {
        var updated, arcData;
        if ($$.transiting) {
            // skip while transiting
            return;
        }
        updated = $$.updateAngle(d);
        if (updated) {
            arcData = $$.convertToArcData(updated);
            // transitions
            $$.unexpandArc(updated.data.id);
            $$.api.revert();
            $$.revertLegend();
            $$.hideTooltip();
            $$.config.data_onmouseout(arcData, this);
        }
    } : null).on('click', config.interaction_enabled ? function (d, i) {
        var updated = $$.updateAngle(d),
            arcData;
        if (updated) {
            arcData = $$.convertToArcData(updated);
            if ($$.toggleShape) {
                $$.toggleShape(this, arcData, i);
            }
            $$.config.data_onclick.call($$.api, arcData, this);
        }
    } : null).each(function () {
        $$.transiting = true;
    }).transition().duration(duration).attrTween("d", function (d) {
        var updated = $$.updateAngle(d),
            interpolate;
        if (!updated) {
            return function () {
                return "M 0 0";
            };
        }
        //                if (this._current === d) {
        //                    this._current = {
        //                        startAngle: Math.PI*2,
        //                        endAngle: Math.PI*2,
        //                    };
        //                }
        if (isNaN(this._current.startAngle)) {
            this._current.startAngle = 0;
        }
        if (isNaN(this._current.endAngle)) {
            this._current.endAngle = this._current.startAngle;
        }
        interpolate = d3.interpolate(this._current, updated);
        this._current = interpolate(0);
        return function (t) {
            var interpolated = interpolate(t);
            interpolated.data = d.data; // data.id will be updated by interporator
            return $$.getArc(interpolated, true);
        };
    }).attr("transform", withTransform ? "scale(1)" : "").style("fill", function (d) {
        return $$.levelColor ? $$.levelColor(d.data.values[0].value) : $$.color(d.data.id);
    } // Where gauge reading color would receive customization.
    ).call($$.endall, function () {
        $$.transiting = false;
    });
    mainArc.exit().transition().duration(durationForExit).style('opacity', 0).remove();
    main.selectAll('.' + CLASS.chartArc).select('text').style("opacity", 0).attr('class', function (d) {
        return $$.isGaugeType(d.data) ? CLASS.gaugeValue : '';
    }).text($$.textForArcLabel.bind($$)).attr("transform", $$.transformForArcLabel.bind($$)).style('font-size', function (d) {
        return $$.isGaugeType(d.data) ? Math.round($$.radius / 5) + 'px' : '';
    }).transition().duration(duration).style("opacity", function (d) {
        return $$.isTargetToShow(d.data.id) && $$.isArcType(d.data) ? 1 : 0;
    });
    main.select('.' + CLASS.chartArcsTitle).style("opacity", $$.hasType('donut') || $$.hasType('gauge') ? 1 : 0);

    if ($$.hasType('gauge')) {
        $$.arcs.select('.' + CLASS.chartArcsBackground).attr("d", function () {
            var d = {
                data: [{ value: config.gauge_max }],
                startAngle: config.gauge_startingAngle,
                endAngle: -1 * config.gauge_startingAngle
            };
            return $$.getArc(d, true, true);
        });
        $$.arcs.select('.' + CLASS.chartArcsGaugeUnit).attr("dy", ".75em").text(config.gauge_label_show ? config.gauge_units : '');
        $$.arcs.select('.' + CLASS.chartArcsGaugeMin).attr("dx", -1 * ($$.innerRadius + ($$.radius - $$.innerRadius) / (config.gauge_fullCircle ? 1 : 2)) + "px").attr("dy", "1.2em").text(config.gauge_label_show ? $$.textForGaugeMinMax(config.gauge_min, false) : '');
        $$.arcs.select('.' + CLASS.chartArcsGaugeMax).attr("dx", $$.innerRadius + ($$.radius - $$.innerRadius) / (config.gauge_fullCircle ? 1 : 2) + "px").attr("dy", "1.2em").text(config.gauge_label_show ? $$.textForGaugeMinMax(config.gauge_max, true) : '');
    }
};
c3_chart_internal_fn.initGauge = function () {
    var arcs = this.arcs;
    if (this.hasType('gauge')) {
        arcs.append('path').attr("class", CLASS.chartArcsBackground);
        arcs.append("text").attr("class", CLASS.chartArcsGaugeUnit).style("text-anchor", "middle").style("pointer-events", "none");
        arcs.append("text").attr("class", CLASS.chartArcsGaugeMin).style("text-anchor", "middle").style("pointer-events", "none");
        arcs.append("text").attr("class", CLASS.chartArcsGaugeMax).style("text-anchor", "middle").style("pointer-events", "none");
    }
};
c3_chart_internal_fn.getGaugeLabelHeight = function () {
    return this.config.gauge_label_show ? 20 : 0;
};

c3_chart_internal_fn.hasCaches = function (ids) {
    for (var i = 0; i < ids.length; i++) {
        if (!(ids[i] in this.cache)) {
            return false;
        }
    }
    return true;
};
c3_chart_internal_fn.addCache = function (id, target) {
    this.cache[id] = this.cloneTarget(target);
};
c3_chart_internal_fn.getCaches = function (ids) {
    var targets = [],
        i;
    for (i = 0; i < ids.length; i++) {
        if (ids[i] in this.cache) {
            targets.push(this.cloneTarget(this.cache[ids[i]]));
        }
    }
    return targets;
};

c3_chart_internal_fn.categoryName = function (i) {
    var config = this.config;
    return i < config.axis_x_categories.length ? config.axis_x_categories[i] : i;
};

c3_chart_internal_fn.generateClass = function (prefix, targetId) {
    return " " + prefix + " " + prefix + this.getTargetSelectorSuffix(targetId);
};
c3_chart_internal_fn.classText = function (d) {
    return this.generateClass(CLASS.text, d.index);
};
c3_chart_internal_fn.classTexts = function (d) {
    return this.generateClass(CLASS.texts, d.id);
};
c3_chart_internal_fn.classShape = function (d) {
    return this.generateClass(CLASS.shape, d.index);
};
c3_chart_internal_fn.classShapes = function (d) {
    return this.generateClass(CLASS.shapes, d.id);
};
c3_chart_internal_fn.classLine = function (d) {
    return this.classShape(d) + this.generateClass(CLASS.line, d.id);
};
c3_chart_internal_fn.classLines = function (d) {
    return this.classShapes(d) + this.generateClass(CLASS.lines, d.id);
};
c3_chart_internal_fn.classCircle = function (d) {
    return this.classShape(d) + this.generateClass(CLASS.circle, d.index);
};
c3_chart_internal_fn.classCircles = function (d) {
    return this.classShapes(d) + this.generateClass(CLASS.circles, d.id);
};
c3_chart_internal_fn.classBar = function (d) {
    return this.classShape(d) + this.generateClass(CLASS.bar, d.index);
};
c3_chart_internal_fn.classBars = function (d) {
    return this.classShapes(d) + this.generateClass(CLASS.bars, d.id);
};
c3_chart_internal_fn.classArc = function (d) {
    return this.classShape(d.data) + this.generateClass(CLASS.arc, d.data.id);
};
c3_chart_internal_fn.classArcs = function (d) {
    return this.classShapes(d.data) + this.generateClass(CLASS.arcs, d.data.id);
};
c3_chart_internal_fn.classArea = function (d) {
    return this.classShape(d) + this.generateClass(CLASS.area, d.id);
};
c3_chart_internal_fn.classAreas = function (d) {
    return this.classShapes(d) + this.generateClass(CLASS.areas, d.id);
};
c3_chart_internal_fn.classRegion = function (d, i) {
    return this.generateClass(CLASS.region, i) + ' ' + ('class' in d ? d['class'] : '');
};
c3_chart_internal_fn.classEvent = function (d) {
    return this.generateClass(CLASS.eventRect, d.index);
};
c3_chart_internal_fn.classTarget = function (id) {
    var $$ = this;
    var additionalClassSuffix = $$.config.data_classes[id],
        additionalClass = '';
    if (additionalClassSuffix) {
        additionalClass = ' ' + CLASS.target + '-' + additionalClassSuffix;
    }
    return $$.generateClass(CLASS.target, id) + additionalClass;
};
c3_chart_internal_fn.classFocus = function (d) {
    return this.classFocused(d) + this.classDefocused(d);
};
c3_chart_internal_fn.classFocused = function (d) {
    return ' ' + (this.focusedTargetIds.indexOf(d.id) >= 0 ? CLASS.focused : '');
};
c3_chart_internal_fn.classDefocused = function (d) {
    return ' ' + (this.defocusedTargetIds.indexOf(d.id) >= 0 ? CLASS.defocused : '');
};
c3_chart_internal_fn.classChartText = function (d) {
    return CLASS.chartText + this.classTarget(d.id);
};
c3_chart_internal_fn.classChartLine = function (d) {
    return CLASS.chartLine + this.classTarget(d.id);
};
c3_chart_internal_fn.classChartBar = function (d) {
    return CLASS.chartBar + this.classTarget(d.id);
};
c3_chart_internal_fn.classChartArc = function (d) {
    return CLASS.chartArc + this.classTarget(d.data.id);
};
c3_chart_internal_fn.getTargetSelectorSuffix = function (targetId) {
    return targetId || targetId === 0 ? ('-' + targetId).replace(/[\s?!@#$%^&*()_=+,.<>'":;\[\]\/|~`{}\\]/g, '-') : '';
};
c3_chart_internal_fn.selectorTarget = function (id, prefix) {
    return (prefix || '') + '.' + CLASS.target + this.getTargetSelectorSuffix(id);
};
c3_chart_internal_fn.selectorTargets = function (ids, prefix) {
    var $$ = this;
    ids = ids || [];
    return ids.length ? ids.map(function (id) {
        return $$.selectorTarget(id, prefix);
    }) : null;
};
c3_chart_internal_fn.selectorLegend = function (id) {
    return '.' + CLASS.legendItem + this.getTargetSelectorSuffix(id);
};
c3_chart_internal_fn.selectorLegends = function (ids) {
    var $$ = this;
    return ids && ids.length ? ids.map(function (id) {
        return $$.selectorLegend(id);
    }) : null;
};

c3_chart_internal_fn.getClipPath = function (id) {
    var isIE9 = window.navigator.appVersion.toLowerCase().indexOf("msie 9.") >= 0;
    return "url(" + (isIE9 ? "" : document.URL.split('#')[0]) + "#" + id + ")";
};
c3_chart_internal_fn.appendClip = function (parent, id) {
    return parent.append("clipPath").attr("id", id).append("rect");
};
c3_chart_internal_fn.getAxisClipX = function (forHorizontal) {
    // axis line width + padding for left
    var left = Math.max(30, this.margin.left);
    return forHorizontal ? -(1 + left) : -(left - 1);
};
c3_chart_internal_fn.getAxisClipY = function (forHorizontal) {
    return forHorizontal ? -20 : -this.margin.top;
};
c3_chart_internal_fn.getXAxisClipX = function () {
    var $$ = this;
    return $$.getAxisClipX(!$$.config.axis_rotated);
};
c3_chart_internal_fn.getXAxisClipY = function () {
    var $$ = this;
    return $$.getAxisClipY(!$$.config.axis_rotated);
};
c3_chart_internal_fn.getYAxisClipX = function () {
    var $$ = this;
    return $$.config.axis_y_inner ? -1 : $$.getAxisClipX($$.config.axis_rotated);
};
c3_chart_internal_fn.getYAxisClipY = function () {
    var $$ = this;
    return $$.getAxisClipY($$.config.axis_rotated);
};
c3_chart_internal_fn.getAxisClipWidth = function (forHorizontal) {
    var $$ = this,
        left = Math.max(30, $$.margin.left),
        right = Math.max(30, $$.margin.right);
    // width + axis line width + padding for left/right
    return forHorizontal ? $$.width + 2 + left + right : $$.margin.left + 20;
};
c3_chart_internal_fn.getAxisClipHeight = function (forHorizontal) {
    // less than 20 is not enough to show the axis label 'outer' without legend
    return (forHorizontal ? this.margin.bottom : this.margin.top + this.height) + 20;
};
c3_chart_internal_fn.getXAxisClipWidth = function () {
    var $$ = this;
    return $$.getAxisClipWidth(!$$.config.axis_rotated);
};
c3_chart_internal_fn.getXAxisClipHeight = function () {
    var $$ = this;
    return $$.getAxisClipHeight(!$$.config.axis_rotated);
};
c3_chart_internal_fn.getYAxisClipWidth = function () {
    var $$ = this;
    return $$.getAxisClipWidth($$.config.axis_rotated) + ($$.config.axis_y_inner ? 20 : 0);
};
c3_chart_internal_fn.getYAxisClipHeight = function () {
    var $$ = this;
    return $$.getAxisClipHeight($$.config.axis_rotated);
};

c3_chart_internal_fn.generateColor = function () {
    var $$ = this,
        config = $$.config,
        d3 = $$.d3,
        colors = config.data_colors,
        pattern = notEmpty(config.color_pattern) ? config.color_pattern : d3.scale.category10().range(),
        callback = config.data_color,
        ids = [];

    return function (d) {
        var id = d.id || d.data && d.data.id || d,
            color;

        // if callback function is provided
        if (colors[id] instanceof Function) {
            color = colors[id](d);
        }
        // if specified, choose that color
        else if (colors[id]) {
                color = colors[id];
            }
            // if not specified, choose from pattern
            else {
                    if (ids.indexOf(id) < 0) {
                        ids.push(id);
                    }
                    color = pattern[ids.indexOf(id) % pattern.length];
                    colors[id] = color;
                }
        return callback instanceof Function ? callback(color, d) : color;
    };
};
c3_chart_internal_fn.generateLevelColor = function () {
    var $$ = this,
        config = $$.config,
        colors = config.color_pattern,
        threshold = config.color_threshold,
        asValue = threshold.unit === 'value',
        values = threshold.values && threshold.values.length ? threshold.values : [],
        max = threshold.max || 100;
    return notEmpty(config.color_threshold) ? function (value) {
        var i,
            v,
            color = colors[colors.length - 1];
        for (i = 0; i < values.length; i++) {
            v = asValue ? value : value * 100 / max;
            if (v < values[i]) {
                color = colors[i];
                break;
            }
        }
        return color;
    } : null;
};

c3_chart_internal_fn.getDefaultConfig = function () {
    var config = {
        bindto: '#chart',
        svg_classname: undefined,
        size_width: undefined,
        size_height: undefined,
        padding_left: undefined,
        padding_right: undefined,
        padding_top: undefined,
        padding_bottom: undefined,
        resize_auto: true,
        zoom_enabled: false,
        zoom_extent: undefined,
        zoom_privileged: false,
        zoom_rescale: false,
        zoom_onzoom: function zoom_onzoom() {},
        zoom_onzoomstart: function zoom_onzoomstart() {},
        zoom_onzoomend: function zoom_onzoomend() {},
        zoom_x_min: undefined,
        zoom_x_max: undefined,
        interaction_brighten: true,
        interaction_enabled: true,
        onmouseover: function onmouseover() {},
        onmouseout: function onmouseout() {},
        onresize: function onresize() {},
        onresized: function onresized() {},
        oninit: function oninit() {},
        onrendered: function onrendered() {},
        transition_duration: 350,
        data_x: undefined,
        data_xs: {},
        data_xFormat: '%Y-%m-%d',
        data_xLocaltime: true,
        data_xSort: true,
        data_idConverter: function data_idConverter(id) {
            return id;
        },
        data_names: {},
        data_classes: {},
        data_groups: [],
        data_axes: {},
        data_type: undefined,
        data_types: {},
        data_labels: {},
        data_order: 'desc',
        data_regions: {},
        data_color: undefined,
        data_colors: {},
        data_hide: false,
        data_filter: undefined,
        data_selection_enabled: false,
        data_selection_grouped: false,
        data_selection_isselectable: function data_selection_isselectable() {
            return true;
        },
        data_selection_multiple: true,
        data_selection_draggable: false,
        data_onclick: function data_onclick() {},
        data_onmouseover: function data_onmouseover() {},
        data_onmouseout: function data_onmouseout() {},
        data_onselected: function data_onselected() {},
        data_onunselected: function data_onunselected() {},
        data_url: undefined,
        data_headers: undefined,
        data_json: undefined,
        data_rows: undefined,
        data_columns: undefined,
        data_mimeType: undefined,
        data_keys: undefined,
        // configuration for no plot-able data supplied.
        data_empty_label_text: "",
        // subchart
        subchart_show: false,
        subchart_size_height: 60,
        subchart_axis_x_show: true,
        subchart_onbrush: function subchart_onbrush() {},
        // color
        color_pattern: [],
        color_threshold: {},
        // legend
        legend_show: true,
        legend_hide: false,
        legend_position: 'bottom',
        legend_inset_anchor: 'top-left',
        legend_inset_x: 10,
        legend_inset_y: 0,
        legend_inset_step: undefined,
        legend_item_onclick: undefined,
        legend_item_onmouseover: undefined,
        legend_item_onmouseout: undefined,
        legend_equally: false,
        legend_padding: 0,
        legend_item_tile_width: 10,
        legend_item_tile_height: 10,
        // axis
        axis_rotated: false,
        axis_x_show: true,
        axis_x_type: 'indexed',
        axis_x_localtime: true,
        axis_x_categories: [],
        axis_x_tick_centered: false,
        axis_x_tick_format: undefined,
        axis_x_tick_culling: {},
        axis_x_tick_culling_max: 10,
        axis_x_tick_count: undefined,
        axis_x_tick_fit: true,
        axis_x_tick_values: null,
        axis_x_tick_rotate: 0,
        axis_x_tick_outer: true,
        axis_x_tick_multiline: true,
        axis_x_tick_width: null,
        axis_x_max: undefined,
        axis_x_min: undefined,
        axis_x_padding: {},
        axis_x_height: undefined,
        axis_x_extent: undefined,
        axis_x_label: {},
        axis_y_show: true,
        axis_y_type: undefined,
        axis_y_max: undefined,
        axis_y_min: undefined,
        axis_y_inverted: false,
        axis_y_center: undefined,
        axis_y_inner: undefined,
        axis_y_label: {},
        axis_y_tick_format: undefined,
        axis_y_tick_outer: true,
        axis_y_tick_values: null,
        axis_y_tick_rotate: 0,
        axis_y_tick_count: undefined,
        axis_y_tick_time_value: undefined,
        axis_y_tick_time_interval: undefined,
        axis_y_padding: {},
        axis_y_default: undefined,
        axis_y2_show: false,
        axis_y2_max: undefined,
        axis_y2_min: undefined,
        axis_y2_inverted: false,
        axis_y2_center: undefined,
        axis_y2_inner: undefined,
        axis_y2_label: {},
        axis_y2_tick_format: undefined,
        axis_y2_tick_outer: true,
        axis_y2_tick_values: null,
        axis_y2_tick_count: undefined,
        axis_y2_padding: {},
        axis_y2_default: undefined,
        // grid
        grid_x_show: false,
        grid_x_type: 'tick',
        grid_x_lines: [],
        grid_y_show: false,
        // not used
        // grid_y_type: 'tick',
        grid_y_lines: [],
        grid_y_ticks: 10,
        grid_focus_show: true,
        grid_lines_front: true,
        // point - point of each data
        point_show: true,
        point_r: 2.5,
        point_sensitivity: 10,
        point_focus_expand_enabled: true,
        point_focus_expand_r: undefined,
        point_select_r: undefined,
        // line
        line_connectNull: false,
        line_step_type: 'step',
        // bar
        bar_width: undefined,
        bar_width_ratio: 0.6,
        bar_width_max: undefined,
        bar_zerobased: true,
        // area
        area_zerobased: true,
        area_above: false,
        // pie
        pie_label_show: true,
        pie_label_format: undefined,
        pie_label_threshold: 0.05,
        pie_label_ratio: undefined,
        pie_expand: {},
        pie_expand_duration: 50,
        // gauge
        gauge_fullCircle: false,
        gauge_label_show: true,
        gauge_label_format: undefined,
        gauge_min: 0,
        gauge_max: 100,
        gauge_startingAngle: -1 * Math.PI / 2,
        gauge_label_extents: undefined,
        gauge_units: undefined,
        gauge_width: undefined,
        gauge_expand: {},
        gauge_expand_duration: 50,
        // donut
        donut_label_show: true,
        donut_label_format: undefined,
        donut_label_threshold: 0.05,
        donut_label_ratio: undefined,
        donut_width: undefined,
        donut_title: "",
        donut_expand: {},
        donut_expand_duration: 50,
        // spline
        spline_interpolation_type: 'cardinal',
        // region - region to change style
        regions: [],
        // tooltip - show when mouseover on each data
        tooltip_show: true,
        tooltip_grouped: true,
        tooltip_order: undefined,
        tooltip_format_title: undefined,
        tooltip_format_name: undefined,
        tooltip_format_value: undefined,
        tooltip_position: undefined,
        tooltip_contents: function tooltip_contents(d, defaultTitleFormat, defaultValueFormat, color) {
            return this.getTooltipContent ? this.getTooltipContent(d, defaultTitleFormat, defaultValueFormat, color) : '';
        },
        tooltip_init_show: false,
        tooltip_init_x: 0,
        tooltip_init_position: { top: '0px', left: '50px' },
        tooltip_onshow: function tooltip_onshow() {},
        tooltip_onhide: function tooltip_onhide() {},
        // title
        title_text: undefined,
        title_padding: {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
        },
        title_position: 'top-center'
    };

    Object.keys(this.additionalConfig).forEach(function (key) {
        config[key] = this.additionalConfig[key];
    }, this);

    return config;
};
c3_chart_internal_fn.additionalConfig = {};

c3_chart_internal_fn.loadConfig = function (config) {
    var this_config = this.config,
        target,
        keys,
        read;
    function find() {
        var key = keys.shift();
        //        console.log("key =>", key, ", target =>", target);
        if (key && target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && key in target) {
            target = target[key];
            return find();
        } else if (!key) {
            return target;
        } else {
            return undefined;
        }
    }
    Object.keys(this_config).forEach(function (key) {
        target = config;
        keys = key.split('_');
        read = find();
        //        console.log("CONFIG : ", key, read);
        if (isDefined(read)) {
            this_config[key] = read;
        }
    });
};

c3_chart_internal_fn.convertUrlToData = function (url, mimeType, headers, keys, done) {
    var $$ = this,
        type = mimeType ? mimeType : 'csv';
    var req = $$.d3.xhr(url);
    if (headers) {
        Object.keys(headers).forEach(function (header) {
            req.header(header, headers[header]);
        });
    }
    req.get(function (error, data) {
        var d;
        var dataResponse = data.response || data.responseText; // Fixes IE9 XHR issue; see #1345
        if (!data) {
            throw new Error(error.responseURL + ' ' + error.status + ' (' + error.statusText + ')');
        }
        if (type === 'json') {
            d = $$.convertJsonToData(JSON.parse(dataResponse), keys);
        } else if (type === 'tsv') {
            d = $$.convertTsvToData(dataResponse);
        } else {
            d = $$.convertCsvToData(dataResponse);
        }
        done.call($$, d);
    });
};
c3_chart_internal_fn.convertXsvToData = function (xsv, parser) {
    var rows = parser.parseRows(xsv),
        d;
    if (rows.length === 1) {
        d = [{}];
        rows[0].forEach(function (id) {
            d[0][id] = null;
        });
    } else {
        d = parser.parse(xsv);
    }
    return d;
};
c3_chart_internal_fn.convertCsvToData = function (csv) {
    return this.convertXsvToData(csv, this.d3.csv);
};
c3_chart_internal_fn.convertTsvToData = function (tsv) {
    return this.convertXsvToData(tsv, this.d3.tsv);
};
c3_chart_internal_fn.convertJsonToData = function (json, keys) {
    var $$ = this,
        new_rows = [],
        targetKeys,
        data;
    if (keys) {
        // when keys specified, json would be an array that includes objects
        if (keys.x) {
            targetKeys = keys.value.concat(keys.x);
            $$.config.data_x = keys.x;
        } else {
            targetKeys = keys.value;
        }
        new_rows.push(targetKeys);
        json.forEach(function (o) {
            var new_row = [];
            targetKeys.forEach(function (key) {
                // convert undefined to null because undefined data will be removed in convertDataToTargets()
                var v = $$.findValueInJson(o, key);
                if (isUndefined(v)) {
                    v = null;
                }
                new_row.push(v);
            });
            new_rows.push(new_row);
        });
        data = $$.convertRowsToData(new_rows);
    } else {
        Object.keys(json).forEach(function (key) {
            new_rows.push([key].concat(json[key]));
        });
        data = $$.convertColumnsToData(new_rows);
    }
    return data;
};
c3_chart_internal_fn.findValueInJson = function (object, path) {
    path = path.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties (replace [] with .)
    path = path.replace(/^\./, ''); // strip a leading dot
    var pathArray = path.split('.');
    for (var i = 0; i < pathArray.length; ++i) {
        var k = pathArray[i];
        if (k in object) {
            object = object[k];
        } else {
            return;
        }
    }
    return object;
};

/**
 * Converts the rows to normalized data.
 * @param {any[][]} rows The row data
 * @return {Object[]}
 */
c3_chart_internal_fn.convertRowsToData = function (rows) {
    var newRows = [];
    var keys = rows[0];

    for (var i = 1; i < rows.length; i++) {
        var newRow = {};
        for (var j = 0; j < rows[i].length; j++) {
            if (isUndefined(rows[i][j])) {
                throw new Error("Source data is missing a component at (" + i + "," + j + ")!");
            }
            newRow[keys[j]] = rows[i][j];
        }
        newRows.push(newRow);
    }
    return newRows;
};

/**
 * Converts the columns to normalized data.
 * @param {any[][]} columns The column data
 * @return {Object[]}
 */
c3_chart_internal_fn.convertColumnsToData = function (columns) {
    var newRows = [];

    for (var i = 0; i < columns.length; i++) {
        var key = columns[i][0];
        for (var j = 1; j < columns[i].length; j++) {
            if (isUndefined(newRows[j - 1])) {
                newRows[j - 1] = {};
            }
            if (isUndefined(columns[i][j])) {
                throw new Error("Source data is missing a component at (" + i + "," + j + ")!");
            }
            newRows[j - 1][key] = columns[i][j];
        }
    }

    return newRows;
};

c3_chart_internal_fn.convertDataToTargets = function (data, appendXs) {
    var $$ = this,
        config = $$.config,
        ids = $$.d3.keys(data[0]).filter($$.isNotX, $$),
        xs = $$.d3.keys(data[0]).filter($$.isX, $$),
        targets;

    // save x for update data by load when custom x and c3.x API
    ids.forEach(function (id) {
        var xKey = $$.getXKey(id);

        if ($$.isCustomX() || $$.isTimeSeries()) {
            // if included in input data
            if (xs.indexOf(xKey) >= 0) {
                $$.data.xs[id] = (appendXs && $$.data.xs[id] ? $$.data.xs[id] : []).concat(data.map(function (d) {
                    return d[xKey];
                }).filter(isValue).map(function (rawX, i) {
                    return $$.generateTargetX(rawX, id, i);
                }));
            }
            // if not included in input data, find from preloaded data of other id's x
            else if (config.data_x) {
                    $$.data.xs[id] = $$.getOtherTargetXs();
                }
                // if not included in input data, find from preloaded data
                else if (notEmpty(config.data_xs)) {
                        $$.data.xs[id] = $$.getXValuesOfXKey(xKey, $$.data.targets);
                    }
            // MEMO: if no x included, use same x of current will be used
        } else {
            $$.data.xs[id] = data.map(function (d, i) {
                return i;
            });
        }
    });

    // check x is defined
    ids.forEach(function (id) {
        if (!$$.data.xs[id]) {
            throw new Error('x is not defined for id = "' + id + '".');
        }
    });

    // convert to target
    targets = ids.map(function (id, index) {
        var convertedId = config.data_idConverter(id);
        return {
            id: convertedId,
            id_org: id,
            values: data.map(function (d, i) {
                var xKey = $$.getXKey(id),
                    rawX = d[xKey],
                    value = d[id] !== null && !isNaN(d[id]) ? +d[id] : null,
                    x;
                // use x as categories if custom x and categorized
                if ($$.isCustomX() && $$.isCategorized() && !isUndefined(rawX)) {
                    if (index === 0 && i === 0) {
                        config.axis_x_categories = [];
                    }
                    x = config.axis_x_categories.indexOf(rawX);
                    if (x === -1) {
                        x = config.axis_x_categories.length;
                        config.axis_x_categories.push(rawX);
                    }
                } else {
                    x = $$.generateTargetX(rawX, id, i);
                }
                // mark as x = undefined if value is undefined and filter to remove after mapped
                if (isUndefined(d[id]) || $$.data.xs[id].length <= i) {
                    x = undefined;
                }
                return { x: x, value: value, id: convertedId };
            }).filter(function (v) {
                return isDefined(v.x);
            })
        };
    });

    // finish targets
    targets.forEach(function (t) {
        var i;
        // sort values by its x
        if (config.data_xSort) {
            t.values = t.values.sort(function (v1, v2) {
                var x1 = v1.x || v1.x === 0 ? v1.x : Infinity,
                    x2 = v2.x || v2.x === 0 ? v2.x : Infinity;
                return x1 - x2;
            });
        }
        // indexing each value
        i = 0;
        t.values.forEach(function (v) {
            v.index = i++;
        });
        // this needs to be sorted because its index and value.index is identical
        $$.data.xs[t.id].sort(function (v1, v2) {
            return v1 - v2;
        });
    });

    // cache information about values
    $$.hasNegativeValue = $$.hasNegativeValueInTargets(targets);
    $$.hasPositiveValue = $$.hasPositiveValueInTargets(targets);

    // set target types
    if (config.data_type) {
        $$.setTargetType($$.mapToIds(targets).filter(function (id) {
            return !(id in config.data_types);
        }), config.data_type);
    }

    // cache as original id keyed
    targets.forEach(function (d) {
        $$.addCache(d.id_org, d);
    });

    return targets;
};

c3_chart_internal_fn.isX = function (key) {
    var $$ = this,
        config = $$.config;
    return config.data_x && key === config.data_x || notEmpty(config.data_xs) && hasValue(config.data_xs, key);
};
c3_chart_internal_fn.isNotX = function (key) {
    return !this.isX(key);
};
c3_chart_internal_fn.getXKey = function (id) {
    var $$ = this,
        config = $$.config;
    return config.data_x ? config.data_x : notEmpty(config.data_xs) ? config.data_xs[id] : null;
};
c3_chart_internal_fn.getXValuesOfXKey = function (key, targets) {
    var $$ = this,
        xValues,
        ids = targets && notEmpty(targets) ? $$.mapToIds(targets) : [];
    ids.forEach(function (id) {
        if ($$.getXKey(id) === key) {
            xValues = $$.data.xs[id];
        }
    });
    return xValues;
};
c3_chart_internal_fn.getIndexByX = function (x) {
    var $$ = this,
        data = $$.filterByX($$.data.targets, x);
    return data.length ? data[0].index : null;
};
c3_chart_internal_fn.getXValue = function (id, i) {
    var $$ = this;
    return id in $$.data.xs && $$.data.xs[id] && isValue($$.data.xs[id][i]) ? $$.data.xs[id][i] : i;
};
c3_chart_internal_fn.getOtherTargetXs = function () {
    var $$ = this,
        idsForX = Object.keys($$.data.xs);
    return idsForX.length ? $$.data.xs[idsForX[0]] : null;
};
c3_chart_internal_fn.getOtherTargetX = function (index) {
    var xs = this.getOtherTargetXs();
    return xs && index < xs.length ? xs[index] : null;
};
c3_chart_internal_fn.addXs = function (xs) {
    var $$ = this;
    Object.keys(xs).forEach(function (id) {
        $$.config.data_xs[id] = xs[id];
    });
};
c3_chart_internal_fn.hasMultipleX = function (xs) {
    return this.d3.set(Object.keys(xs).map(function (id) {
        return xs[id];
    })).size() > 1;
};
c3_chart_internal_fn.isMultipleX = function () {
    return notEmpty(this.config.data_xs) || !this.config.data_xSort || this.hasType('scatter');
};
c3_chart_internal_fn.addName = function (data) {
    var $$ = this,
        name;
    if (data) {
        name = $$.config.data_names[data.id];
        data.name = name !== undefined ? name : data.id;
    }
    return data;
};
c3_chart_internal_fn.getValueOnIndex = function (values, index) {
    var valueOnIndex = values.filter(function (v) {
        return v.index === index;
    });
    return valueOnIndex.length ? valueOnIndex[0] : null;
};
c3_chart_internal_fn.updateTargetX = function (targets, x) {
    var $$ = this;
    targets.forEach(function (t) {
        t.values.forEach(function (v, i) {
            v.x = $$.generateTargetX(x[i], t.id, i);
        });
        $$.data.xs[t.id] = x;
    });
};
c3_chart_internal_fn.updateTargetXs = function (targets, xs) {
    var $$ = this;
    targets.forEach(function (t) {
        if (xs[t.id]) {
            $$.updateTargetX([t], xs[t.id]);
        }
    });
};
c3_chart_internal_fn.generateTargetX = function (rawX, id, index) {
    var $$ = this,
        x;
    if ($$.isTimeSeries()) {
        x = rawX ? $$.parseDate(rawX) : $$.parseDate($$.getXValue(id, index));
    } else if ($$.isCustomX() && !$$.isCategorized()) {
        x = isValue(rawX) ? +rawX : $$.getXValue(id, index);
    } else {
        x = index;
    }
    return x;
};
c3_chart_internal_fn.cloneTarget = function (target) {
    return {
        id: target.id,
        id_org: target.id_org,
        values: target.values.map(function (d) {
            return { x: d.x, value: d.value, id: d.id };
        })
    };
};
c3_chart_internal_fn.updateXs = function () {
    var $$ = this;
    if ($$.data.targets.length) {
        $$.xs = [];
        $$.data.targets[0].values.forEach(function (v) {
            $$.xs[v.index] = v.x;
        });
    }
};
c3_chart_internal_fn.getPrevX = function (i) {
    var x = this.xs[i - 1];
    return typeof x !== 'undefined' ? x : null;
};
c3_chart_internal_fn.getNextX = function (i) {
    var x = this.xs[i + 1];
    return typeof x !== 'undefined' ? x : null;
};
c3_chart_internal_fn.getMaxDataCount = function () {
    var $$ = this;
    return $$.d3.max($$.data.targets, function (t) {
        return t.values.length;
    });
};
c3_chart_internal_fn.getMaxDataCountTarget = function (targets) {
    var length = targets.length,
        max = 0,
        maxTarget;
    if (length > 1) {
        targets.forEach(function (t) {
            if (t.values.length > max) {
                maxTarget = t;
                max = t.values.length;
            }
        });
    } else {
        maxTarget = length ? targets[0] : null;
    }
    return maxTarget;
};
c3_chart_internal_fn.getEdgeX = function (targets) {
    var $$ = this;
    return !targets.length ? [0, 0] : [$$.d3.min(targets, function (t) {
        return t.values[0].x;
    }), $$.d3.max(targets, function (t) {
        return t.values[t.values.length - 1].x;
    })];
};
c3_chart_internal_fn.mapToIds = function (targets) {
    return targets.map(function (d) {
        return d.id;
    });
};
c3_chart_internal_fn.mapToTargetIds = function (ids) {
    var $$ = this;
    return ids ? [].concat(ids) : $$.mapToIds($$.data.targets);
};
c3_chart_internal_fn.hasTarget = function (targets, id) {
    var ids = this.mapToIds(targets),
        i;
    for (i = 0; i < ids.length; i++) {
        if (ids[i] === id) {
            return true;
        }
    }
    return false;
};
c3_chart_internal_fn.isTargetToShow = function (targetId) {
    return this.hiddenTargetIds.indexOf(targetId) < 0;
};
c3_chart_internal_fn.isLegendToShow = function (targetId) {
    return this.hiddenLegendIds.indexOf(targetId) < 0;
};
c3_chart_internal_fn.filterTargetsToShow = function (targets) {
    var $$ = this;
    return targets.filter(function (t) {
        return $$.isTargetToShow(t.id);
    });
};
c3_chart_internal_fn.mapTargetsToUniqueXs = function (targets) {
    var $$ = this;
    var xs = $$.d3.set($$.d3.merge(targets.map(function (t) {
        return t.values.map(function (v) {
            return +v.x;
        });
    }))).values();
    xs = $$.isTimeSeries() ? xs.map(function (x) {
        return new Date(+x);
    }) : xs.map(function (x) {
        return +x;
    });
    return xs.sort(function (a, b) {
        return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    });
};
c3_chart_internal_fn.addHiddenTargetIds = function (targetIds) {
    targetIds = targetIds instanceof Array ? targetIds : new Array(targetIds);
    for (var i = 0; i < targetIds.length; i++) {
        if (this.hiddenTargetIds.indexOf(targetIds[i]) < 0) {
            this.hiddenTargetIds = this.hiddenTargetIds.concat(targetIds[i]);
        }
    }
};
c3_chart_internal_fn.removeHiddenTargetIds = function (targetIds) {
    this.hiddenTargetIds = this.hiddenTargetIds.filter(function (id) {
        return targetIds.indexOf(id) < 0;
    });
};
c3_chart_internal_fn.addHiddenLegendIds = function (targetIds) {
    targetIds = targetIds instanceof Array ? targetIds : new Array(targetIds);
    for (var i = 0; i < targetIds.length; i++) {
        if (this.hiddenLegendIds.indexOf(targetIds[i]) < 0) {
            this.hiddenLegendIds = this.hiddenLegendIds.concat(targetIds[i]);
        }
    }
};
c3_chart_internal_fn.removeHiddenLegendIds = function (targetIds) {
    this.hiddenLegendIds = this.hiddenLegendIds.filter(function (id) {
        return targetIds.indexOf(id) < 0;
    });
};
c3_chart_internal_fn.getValuesAsIdKeyed = function (targets) {
    var ys = {};
    targets.forEach(function (t) {
        ys[t.id] = [];
        t.values.forEach(function (v) {
            ys[t.id].push(v.value);
        });
    });
    return ys;
};
c3_chart_internal_fn.checkValueInTargets = function (targets, checker) {
    var ids = Object.keys(targets),
        i,
        j,
        values;
    for (i = 0; i < ids.length; i++) {
        values = targets[ids[i]].values;
        for (j = 0; j < values.length; j++) {
            if (checker(values[j].value)) {
                return true;
            }
        }
    }
    return false;
};
c3_chart_internal_fn.hasNegativeValueInTargets = function (targets) {
    return this.checkValueInTargets(targets, function (v) {
        return v < 0;
    });
};
c3_chart_internal_fn.hasPositiveValueInTargets = function (targets) {
    return this.checkValueInTargets(targets, function (v) {
        return v > 0;
    });
};
c3_chart_internal_fn.isOrderDesc = function () {
    var config = this.config;
    return typeof config.data_order === 'string' && config.data_order.toLowerCase() === 'desc';
};
c3_chart_internal_fn.isOrderAsc = function () {
    var config = this.config;
    return typeof config.data_order === 'string' && config.data_order.toLowerCase() === 'asc';
};
c3_chart_internal_fn.orderTargets = function (targets) {
    var $$ = this,
        config = $$.config,
        orderAsc = $$.isOrderAsc(),
        orderDesc = $$.isOrderDesc();
    if (orderAsc || orderDesc) {
        targets.sort(function (t1, t2) {
            var reducer = function reducer(p, c) {
                return p + Math.abs(c.value);
            };
            var t1Sum = t1.values.reduce(reducer, 0),
                t2Sum = t2.values.reduce(reducer, 0);
            return orderAsc ? t2Sum - t1Sum : t1Sum - t2Sum;
        });
    } else if (isFunction(config.data_order)) {
        targets.sort(config.data_order);
    } else if (isArray(config.data_order)) {
        targets.sort(function (t1, t2) {
            return config.data_order.indexOf(t1.id) - config.data_order.indexOf(t2.id);
        });
    }
    return targets;
};
c3_chart_internal_fn.filterByX = function (targets, x) {
    return this.d3.merge(targets.map(function (t) {
        return t.values;
    })).filter(function (v) {
        return v.x - x === 0;
    });
};
c3_chart_internal_fn.filterRemoveNull = function (data) {
    return data.filter(function (d) {
        return isValue(d.value);
    });
};
c3_chart_internal_fn.filterByXDomain = function (targets, xDomain) {
    return targets.map(function (t) {
        return {
            id: t.id,
            id_org: t.id_org,
            values: t.values.filter(function (v) {
                return xDomain[0] <= v.x && v.x <= xDomain[1];
            })
        };
    });
};
c3_chart_internal_fn.hasDataLabel = function () {
    var config = this.config;
    if (typeof config.data_labels === 'boolean' && config.data_labels) {
        return true;
    } else if (_typeof(config.data_labels) === 'object' && notEmpty(config.data_labels)) {
        return true;
    }
    return false;
};
c3_chart_internal_fn.getDataLabelLength = function (min, max, key) {
    var $$ = this,
        lengths = [0, 0],
        paddingCoef = 1.3;
    $$.selectChart.select('svg').selectAll('.dummy').data([min, max]).enter().append('text').text(function (d) {
        return $$.dataLabelFormat(d.id)(d);
    }).each(function (d, i) {
        lengths[i] = this.getBoundingClientRect()[key] * paddingCoef;
    }).remove();
    return lengths;
};
c3_chart_internal_fn.isNoneArc = function (d) {
    return this.hasTarget(this.data.targets, d.id);
}, c3_chart_internal_fn.isArc = function (d) {
    return 'data' in d && this.hasTarget(this.data.targets, d.data.id);
};
c3_chart_internal_fn.findSameXOfValues = function (values, index) {
    var i,
        targetX = values[index].x,
        sames = [];
    for (i = index - 1; i >= 0; i--) {
        if (targetX !== values[i].x) {
            break;
        }
        sames.push(values[i]);
    }
    for (i = index; i < values.length; i++) {
        if (targetX !== values[i].x) {
            break;
        }
        sames.push(values[i]);
    }
    return sames;
};

c3_chart_internal_fn.findClosestFromTargets = function (targets, pos) {
    var $$ = this,
        candidates;

    // map to array of closest points of each target
    candidates = targets.map(function (target) {
        return $$.findClosest(target.values, pos);
    });

    // decide closest point and return
    return $$.findClosest(candidates, pos);
};
c3_chart_internal_fn.findClosest = function (values, pos) {
    var $$ = this,
        minDist = $$.config.point_sensitivity,
        closest;

    // find mouseovering bar
    values.filter(function (v) {
        return v && $$.isBarType(v.id);
    }).forEach(function (v) {
        var shape = $$.main.select('.' + CLASS.bars + $$.getTargetSelectorSuffix(v.id) + ' .' + CLASS.bar + '-' + v.index).node();
        if (!closest && $$.isWithinBar(shape)) {
            closest = v;
        }
    });

    // find closest point from non-bar
    values.filter(function (v) {
        return v && !$$.isBarType(v.id);
    }).forEach(function (v) {
        var d = $$.dist(v, pos);
        if (d < minDist) {
            minDist = d;
            closest = v;
        }
    });

    return closest;
};
c3_chart_internal_fn.dist = function (data, pos) {
    var $$ = this,
        config = $$.config,
        xIndex = config.axis_rotated ? 1 : 0,
        yIndex = config.axis_rotated ? 0 : 1,
        y = $$.circleY(data, data.index),
        x = $$.x(data.x);
    return Math.sqrt(Math.pow(x - pos[xIndex], 2) + Math.pow(y - pos[yIndex], 2));
};
c3_chart_internal_fn.convertValuesToStep = function (values) {
    var converted = [].concat(values),
        i;

    if (!this.isCategorized()) {
        return values;
    }

    for (i = values.length + 1; 0 < i; i--) {
        converted[i] = converted[i - 1];
    }

    converted[0] = {
        x: converted[0].x - 1,
        value: converted[0].value,
        id: converted[0].id
    };
    converted[values.length + 1] = {
        x: converted[values.length].x + 1,
        value: converted[values.length].value,
        id: converted[values.length].id
    };

    return converted;
};
c3_chart_internal_fn.updateDataAttributes = function (name, attrs) {
    var $$ = this,
        config = $$.config,
        current = config['data_' + name];
    if (typeof attrs === 'undefined') {
        return current;
    }
    Object.keys(attrs).forEach(function (id) {
        current[id] = attrs[id];
    });
    $$.redraw({ withLegend: true });
    return current;
};

c3_chart_internal_fn.load = function (targets, args) {
    var $$ = this;
    if (targets) {
        // filter loading targets if needed
        if (args.filter) {
            targets = targets.filter(args.filter);
        }
        // set type if args.types || args.type specified
        if (args.type || args.types) {
            targets.forEach(function (t) {
                var type = args.types && args.types[t.id] ? args.types[t.id] : args.type;
                $$.setTargetType(t.id, type);
            });
        }
        // Update/Add data
        $$.data.targets.forEach(function (d) {
            for (var i = 0; i < targets.length; i++) {
                if (d.id === targets[i].id) {
                    d.values = targets[i].values;
                    targets.splice(i, 1);
                    break;
                }
            }
        });
        $$.data.targets = $$.data.targets.concat(targets); // add remained
    }

    // Set targets
    $$.updateTargets($$.data.targets);

    // Redraw with new targets
    $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true });

    if (args.done) {
        args.done();
    }
};
c3_chart_internal_fn.loadFromArgs = function (args) {
    var $$ = this;
    if (args.data) {
        $$.load($$.convertDataToTargets(args.data), args);
    } else if (args.url) {
        $$.convertUrlToData(args.url, args.mimeType, args.headers, args.keys, function (data) {
            $$.load($$.convertDataToTargets(data), args);
        });
    } else if (args.json) {
        $$.load($$.convertDataToTargets($$.convertJsonToData(args.json, args.keys)), args);
    } else if (args.rows) {
        $$.load($$.convertDataToTargets($$.convertRowsToData(args.rows)), args);
    } else if (args.columns) {
        $$.load($$.convertDataToTargets($$.convertColumnsToData(args.columns)), args);
    } else {
        $$.load(null, args);
    }
};
c3_chart_internal_fn.unload = function (targetIds, done) {
    var $$ = this;
    if (!done) {
        done = function done() {};
    }
    // filter existing target
    targetIds = targetIds.filter(function (id) {
        return $$.hasTarget($$.data.targets, id);
    });
    // If no target, call done and return
    if (!targetIds || targetIds.length === 0) {
        done();
        return;
    }
    $$.svg.selectAll(targetIds.map(function (id) {
        return $$.selectorTarget(id);
    })).transition().style('opacity', 0).remove().call($$.endall, done);
    targetIds.forEach(function (id) {
        // Reset fadein for future load
        $$.withoutFadeIn[id] = false;
        // Remove target's elements
        if ($$.legend) {
            $$.legend.selectAll('.' + CLASS.legendItem + $$.getTargetSelectorSuffix(id)).remove();
        }
        // Remove target
        $$.data.targets = $$.data.targets.filter(function (t) {
            return t.id !== id;
        });
    });
};

c3_chart_internal_fn.getYDomainMin = function (targets) {
    var $$ = this,
        config = $$.config,
        ids = $$.mapToIds(targets),
        ys = $$.getValuesAsIdKeyed(targets),
        j,
        k,
        baseId,
        idsInGroup,
        id,
        hasNegativeValue;
    if (config.data_groups.length > 0) {
        hasNegativeValue = $$.hasNegativeValueInTargets(targets);
        for (j = 0; j < config.data_groups.length; j++) {
            // Determine baseId
            idsInGroup = config.data_groups[j].filter(function (id) {
                return ids.indexOf(id) >= 0;
            });
            if (idsInGroup.length === 0) {
                continue;
            }
            baseId = idsInGroup[0];
            // Consider negative values
            if (hasNegativeValue && ys[baseId]) {
                ys[baseId].forEach(function (v, i) {
                    ys[baseId][i] = v < 0 ? v : 0;
                });
            }
            // Compute min
            for (k = 1; k < idsInGroup.length; k++) {
                id = idsInGroup[k];
                if (!ys[id]) {
                    continue;
                }
                ys[id].forEach(function (v, i) {
                    if ($$.axis.getId(id) === $$.axis.getId(baseId) && ys[baseId] && !(hasNegativeValue && +v > 0)) {
                        ys[baseId][i] += +v;
                    }
                });
            }
        }
    }
    return $$.d3.min(Object.keys(ys).map(function (key) {
        return $$.d3.min(ys[key]);
    }));
};
c3_chart_internal_fn.getYDomainMax = function (targets) {
    var $$ = this,
        config = $$.config,
        ids = $$.mapToIds(targets),
        ys = $$.getValuesAsIdKeyed(targets),
        j,
        k,
        baseId,
        idsInGroup,
        id,
        hasPositiveValue;
    if (config.data_groups.length > 0) {
        hasPositiveValue = $$.hasPositiveValueInTargets(targets);
        for (j = 0; j < config.data_groups.length; j++) {
            // Determine baseId
            idsInGroup = config.data_groups[j].filter(function (id) {
                return ids.indexOf(id) >= 0;
            });
            if (idsInGroup.length === 0) {
                continue;
            }
            baseId = idsInGroup[0];
            // Consider positive values
            if (hasPositiveValue && ys[baseId]) {
                ys[baseId].forEach(function (v, i) {
                    ys[baseId][i] = v > 0 ? v : 0;
                });
            }
            // Compute max
            for (k = 1; k < idsInGroup.length; k++) {
                id = idsInGroup[k];
                if (!ys[id]) {
                    continue;
                }
                ys[id].forEach(function (v, i) {
                    if ($$.axis.getId(id) === $$.axis.getId(baseId) && ys[baseId] && !(hasPositiveValue && +v < 0)) {
                        ys[baseId][i] += +v;
                    }
                });
            }
        }
    }
    return $$.d3.max(Object.keys(ys).map(function (key) {
        return $$.d3.max(ys[key]);
    }));
};
c3_chart_internal_fn.getYDomain = function (targets, axisId, xDomain) {
    var $$ = this,
        config = $$.config,
        targetsByAxisId = targets.filter(function (t) {
        return $$.axis.getId(t.id) === axisId;
    }),
        yTargets = xDomain ? $$.filterByXDomain(targetsByAxisId, xDomain) : targetsByAxisId,
        yMin = axisId === 'y2' ? config.axis_y2_min : config.axis_y_min,
        yMax = axisId === 'y2' ? config.axis_y2_max : config.axis_y_max,
        yDomainMin = $$.getYDomainMin(yTargets),
        yDomainMax = $$.getYDomainMax(yTargets),
        domain,
        domainLength,
        padding,
        padding_top,
        padding_bottom,
        center = axisId === 'y2' ? config.axis_y2_center : config.axis_y_center,
        yDomainAbs,
        lengths,
        diff,
        ratio,
        isAllPositive,
        isAllNegative,
        isZeroBased = $$.hasType('bar', yTargets) && config.bar_zerobased || $$.hasType('area', yTargets) && config.area_zerobased,
        isInverted = axisId === 'y2' ? config.axis_y2_inverted : config.axis_y_inverted,
        showHorizontalDataLabel = $$.hasDataLabel() && config.axis_rotated,
        showVerticalDataLabel = $$.hasDataLabel() && !config.axis_rotated;

    // MEMO: avoid inverting domain unexpectedly
    yDomainMin = isValue(yMin) ? yMin : isValue(yMax) ? yDomainMin < yMax ? yDomainMin : yMax - 10 : yDomainMin;
    yDomainMax = isValue(yMax) ? yMax : isValue(yMin) ? yMin < yDomainMax ? yDomainMax : yMin + 10 : yDomainMax;

    if (yTargets.length === 0) {
        // use current domain if target of axisId is none
        return axisId === 'y2' ? $$.y2.domain() : $$.y.domain();
    }
    if (isNaN(yDomainMin)) {
        // set minimum to zero when not number
        yDomainMin = 0;
    }
    if (isNaN(yDomainMax)) {
        // set maximum to have same value as yDomainMin
        yDomainMax = yDomainMin;
    }
    if (yDomainMin === yDomainMax) {
        yDomainMin < 0 ? yDomainMax = 0 : yDomainMin = 0;
    }
    isAllPositive = yDomainMin >= 0 && yDomainMax >= 0;
    isAllNegative = yDomainMin <= 0 && yDomainMax <= 0;

    // Cancel zerobased if axis_*_min / axis_*_max specified
    if (isValue(yMin) && isAllPositive || isValue(yMax) && isAllNegative) {
        isZeroBased = false;
    }

    // Bar/Area chart should be 0-based if all positive|negative
    if (isZeroBased) {
        if (isAllPositive) {
            yDomainMin = 0;
        }
        if (isAllNegative) {
            yDomainMax = 0;
        }
    }

    domainLength = Math.abs(yDomainMax - yDomainMin);
    padding = padding_top = padding_bottom = domainLength * 0.1;

    if (typeof center !== 'undefined') {
        yDomainAbs = Math.max(Math.abs(yDomainMin), Math.abs(yDomainMax));
        yDomainMax = center + yDomainAbs;
        yDomainMin = center - yDomainAbs;
    }
    // add padding for data label
    if (showHorizontalDataLabel) {
        lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, 'width');
        diff = diffDomain($$.y.range());
        ratio = [lengths[0] / diff, lengths[1] / diff];
        padding_top += domainLength * (ratio[1] / (1 - ratio[0] - ratio[1]));
        padding_bottom += domainLength * (ratio[0] / (1 - ratio[0] - ratio[1]));
    } else if (showVerticalDataLabel) {
        lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, 'height');
        padding_top += $$.axis.convertPixelsToAxisPadding(lengths[1], domainLength);
        padding_bottom += $$.axis.convertPixelsToAxisPadding(lengths[0], domainLength);
    }
    if (axisId === 'y' && notEmpty(config.axis_y_padding)) {
        padding_top = $$.axis.getPadding(config.axis_y_padding, 'top', padding_top, domainLength);
        padding_bottom = $$.axis.getPadding(config.axis_y_padding, 'bottom', padding_bottom, domainLength);
    }
    if (axisId === 'y2' && notEmpty(config.axis_y2_padding)) {
        padding_top = $$.axis.getPadding(config.axis_y2_padding, 'top', padding_top, domainLength);
        padding_bottom = $$.axis.getPadding(config.axis_y2_padding, 'bottom', padding_bottom, domainLength);
    }
    // Bar/Area chart should be 0-based if all positive|negative
    if (isZeroBased) {
        if (isAllPositive) {
            padding_bottom = yDomainMin;
        }
        if (isAllNegative) {
            padding_top = -yDomainMax;
        }
    }
    domain = [yDomainMin - padding_bottom, yDomainMax + padding_top];
    return isInverted ? domain.reverse() : domain;
};
c3_chart_internal_fn.getXDomainMin = function (targets) {
    var $$ = this,
        config = $$.config;
    return isDefined(config.axis_x_min) ? $$.isTimeSeries() ? this.parseDate(config.axis_x_min) : config.axis_x_min : $$.d3.min(targets, function (t) {
        return $$.d3.min(t.values, function (v) {
            return v.x;
        });
    });
};
c3_chart_internal_fn.getXDomainMax = function (targets) {
    var $$ = this,
        config = $$.config;
    return isDefined(config.axis_x_max) ? $$.isTimeSeries() ? this.parseDate(config.axis_x_max) : config.axis_x_max : $$.d3.max(targets, function (t) {
        return $$.d3.max(t.values, function (v) {
            return v.x;
        });
    });
};
c3_chart_internal_fn.getXDomainPadding = function (domain) {
    var $$ = this,
        config = $$.config,
        diff = domain[1] - domain[0],
        maxDataCount,
        padding,
        paddingLeft,
        paddingRight;
    if ($$.isCategorized()) {
        padding = 0;
    } else if ($$.hasType('bar')) {
        maxDataCount = $$.getMaxDataCount();
        padding = maxDataCount > 1 ? diff / (maxDataCount - 1) / 2 : 0.5;
    } else {
        padding = diff * 0.01;
    }
    if (_typeof(config.axis_x_padding) === 'object' && notEmpty(config.axis_x_padding)) {
        paddingLeft = isValue(config.axis_x_padding.left) ? config.axis_x_padding.left : padding;
        paddingRight = isValue(config.axis_x_padding.right) ? config.axis_x_padding.right : padding;
    } else if (typeof config.axis_x_padding === 'number') {
        paddingLeft = paddingRight = config.axis_x_padding;
    } else {
        paddingLeft = paddingRight = padding;
    }
    return { left: paddingLeft, right: paddingRight };
};
c3_chart_internal_fn.getXDomain = function (targets) {
    var $$ = this,
        xDomain = [$$.getXDomainMin(targets), $$.getXDomainMax(targets)],
        firstX = xDomain[0],
        lastX = xDomain[1],
        padding = $$.getXDomainPadding(xDomain),
        min = 0,
        max = 0;
    // show center of x domain if min and max are the same
    if (firstX - lastX === 0 && !$$.isCategorized()) {
        if ($$.isTimeSeries()) {
            firstX = new Date(firstX.getTime() * 0.5);
            lastX = new Date(lastX.getTime() * 1.5);
        } else {
            firstX = firstX === 0 ? 1 : firstX * 0.5;
            lastX = lastX === 0 ? -1 : lastX * 1.5;
        }
    }
    if (firstX || firstX === 0) {
        min = $$.isTimeSeries() ? new Date(firstX.getTime() - padding.left) : firstX - padding.left;
    }
    if (lastX || lastX === 0) {
        max = $$.isTimeSeries() ? new Date(lastX.getTime() + padding.right) : lastX + padding.right;
    }
    return [min, max];
};
c3_chart_internal_fn.updateXDomain = function (targets, withUpdateXDomain, withUpdateOrgXDomain, withTrim, domain) {
    var $$ = this,
        config = $$.config;

    if (withUpdateOrgXDomain) {
        $$.x.domain(domain ? domain : $$.d3.extent($$.getXDomain(targets)));
        $$.orgXDomain = $$.x.domain();
        if (config.zoom_enabled) {
            $$.zoom.scale($$.x).updateScaleExtent();
        }
        $$.subX.domain($$.x.domain());
        if ($$.brush) {
            $$.brush.scale($$.subX);
        }
    }
    if (withUpdateXDomain) {
        $$.x.domain(domain ? domain : !$$.brush || $$.brush.empty() ? $$.orgXDomain : $$.brush.extent());
        if (config.zoom_enabled) {
            $$.zoom.scale($$.x).updateScaleExtent();
        }
    }

    // Trim domain when too big by zoom mousemove event
    if (withTrim) {
        $$.x.domain($$.trimXDomain($$.x.orgDomain()));
    }

    return $$.x.domain();
};
c3_chart_internal_fn.trimXDomain = function (domain) {
    var zoomDomain = this.getZoomDomain(),
        min = zoomDomain[0],
        max = zoomDomain[1];
    if (domain[0] <= min) {
        domain[1] = +domain[1] + (min - domain[0]);
        domain[0] = min;
    }
    if (max <= domain[1]) {
        domain[0] = +domain[0] - (domain[1] - max);
        domain[1] = max;
    }
    return domain;
};

c3_chart_internal_fn.drag = function (mouse) {
    var $$ = this,
        config = $$.config,
        main = $$.main,
        d3 = $$.d3;
    var sx, sy, mx, my, minX, maxX, minY, maxY;

    if ($$.hasArcType()) {
        return;
    }
    if (!config.data_selection_enabled) {
        return;
    } // do nothing if not selectable
    if (config.zoom_enabled && !$$.zoom.altDomain) {
        return;
    } // skip if zoomable because of conflict drag dehavior
    if (!config.data_selection_multiple) {
        return;
    } // skip when single selection because drag is used for multiple selection

    sx = $$.dragStart[0];
    sy = $$.dragStart[1];
    mx = mouse[0];
    my = mouse[1];
    minX = Math.min(sx, mx);
    maxX = Math.max(sx, mx);
    minY = config.data_selection_grouped ? $$.margin.top : Math.min(sy, my);
    maxY = config.data_selection_grouped ? $$.height : Math.max(sy, my);

    main.select('.' + CLASS.dragarea).attr('x', minX).attr('y', minY).attr('width', maxX - minX).attr('height', maxY - minY);
    // TODO: binary search when multiple xs
    main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).filter(function (d) {
        return config.data_selection_isselectable(d);
    }).each(function (d, i) {
        var shape = d3.select(this),
            isSelected = shape.classed(CLASS.SELECTED),
            isIncluded = shape.classed(CLASS.INCLUDED),
            _x,
            _y,
            _w,
            _h,
            toggle,
            isWithin = false,
            box;
        if (shape.classed(CLASS.circle)) {
            _x = shape.attr("cx") * 1;
            _y = shape.attr("cy") * 1;
            toggle = $$.togglePoint;
            isWithin = minX < _x && _x < maxX && minY < _y && _y < maxY;
        } else if (shape.classed(CLASS.bar)) {
            box = getPathBox(this);
            _x = box.x;
            _y = box.y;
            _w = box.width;
            _h = box.height;
            toggle = $$.togglePath;
            isWithin = !(maxX < _x || _x + _w < minX) && !(maxY < _y || _y + _h < minY);
        } else {
            // line/area selection not supported yet
            return;
        }
        if (isWithin ^ isIncluded) {
            shape.classed(CLASS.INCLUDED, !isIncluded);
            // TODO: included/unincluded callback here
            shape.classed(CLASS.SELECTED, !isSelected);
            toggle.call($$, !isSelected, shape, d, i);
        }
    });
};

c3_chart_internal_fn.dragstart = function (mouse) {
    var $$ = this,
        config = $$.config;
    if ($$.hasArcType()) {
        return;
    }
    if (!config.data_selection_enabled) {
        return;
    } // do nothing if not selectable
    $$.dragStart = mouse;
    $$.main.select('.' + CLASS.chart).append('rect').attr('class', CLASS.dragarea).style('opacity', 0.1);
    $$.dragging = true;
};

c3_chart_internal_fn.dragend = function () {
    var $$ = this,
        config = $$.config;
    if ($$.hasArcType()) {
        return;
    }
    if (!config.data_selection_enabled) {
        return;
    } // do nothing if not selectable
    $$.main.select('.' + CLASS.dragarea).transition().duration(100).style('opacity', 0).remove();
    $$.main.selectAll('.' + CLASS.shape).classed(CLASS.INCLUDED, false);
    $$.dragging = false;
};

c3_chart_internal_fn.getYFormat = function (forArc) {
    var $$ = this,
        formatForY = forArc && !$$.hasType('gauge') ? $$.defaultArcValueFormat : $$.yFormat,
        formatForY2 = forArc && !$$.hasType('gauge') ? $$.defaultArcValueFormat : $$.y2Format;
    return function (v, ratio, id) {
        var format = $$.axis.getId(id) === 'y2' ? formatForY2 : formatForY;
        return format.call($$, v, ratio);
    };
};
c3_chart_internal_fn.yFormat = function (v) {
    var $$ = this,
        config = $$.config,
        format = config.axis_y_tick_format ? config.axis_y_tick_format : $$.defaultValueFormat;
    return format(v);
};
c3_chart_internal_fn.y2Format = function (v) {
    var $$ = this,
        config = $$.config,
        format = config.axis_y2_tick_format ? config.axis_y2_tick_format : $$.defaultValueFormat;
    return format(v);
};
c3_chart_internal_fn.defaultValueFormat = function (v) {
    return isValue(v) ? +v : "";
};
c3_chart_internal_fn.defaultArcValueFormat = function (v, ratio) {
    return (ratio * 100).toFixed(1) + '%';
};
c3_chart_internal_fn.dataLabelFormat = function (targetId) {
    var $$ = this,
        data_labels = $$.config.data_labels,
        format,
        defaultFormat = function defaultFormat(v) {
        return isValue(v) ? +v : "";
    };
    // find format according to axis id
    if (typeof data_labels.format === 'function') {
        format = data_labels.format;
    } else if (_typeof(data_labels.format) === 'object') {
        if (data_labels.format[targetId]) {
            format = data_labels.format[targetId] === true ? defaultFormat : data_labels.format[targetId];
        } else {
            format = function format() {
                return '';
            };
        }
    } else {
        format = defaultFormat;
    }
    return format;
};

c3_chart_internal_fn.initGrid = function () {
    var $$ = this,
        config = $$.config,
        d3 = $$.d3;
    $$.grid = $$.main.append('g').attr("clip-path", $$.clipPathForGrid).attr('class', CLASS.grid);
    if (config.grid_x_show) {
        $$.grid.append("g").attr("class", CLASS.xgrids);
    }
    if (config.grid_y_show) {
        $$.grid.append('g').attr('class', CLASS.ygrids);
    }
    if (config.grid_focus_show) {
        $$.grid.append('g').attr("class", CLASS.xgridFocus).append('line').attr('class', CLASS.xgridFocus);
    }
    $$.xgrid = d3.selectAll([]);
    if (!config.grid_lines_front) {
        $$.initGridLines();
    }
};
c3_chart_internal_fn.initGridLines = function () {
    var $$ = this,
        d3 = $$.d3;
    $$.gridLines = $$.main.append('g').attr("clip-path", $$.clipPathForGrid).attr('class', CLASS.grid + ' ' + CLASS.gridLines);
    $$.gridLines.append('g').attr("class", CLASS.xgridLines);
    $$.gridLines.append('g').attr('class', CLASS.ygridLines);
    $$.xgridLines = d3.selectAll([]);
};
c3_chart_internal_fn.updateXGrid = function (withoutUpdate) {
    var $$ = this,
        config = $$.config,
        d3 = $$.d3,
        xgridData = $$.generateGridData(config.grid_x_type, $$.x),
        tickOffset = $$.isCategorized() ? $$.xAxis.tickOffset() : 0;

    $$.xgridAttr = config.axis_rotated ? {
        'x1': 0,
        'x2': $$.width,
        'y1': function y1(d) {
            return $$.x(d) - tickOffset;
        },
        'y2': function y2(d) {
            return $$.x(d) - tickOffset;
        }
    } : {
        'x1': function x1(d) {
            return $$.x(d) + tickOffset;
        },
        'x2': function x2(d) {
            return $$.x(d) + tickOffset;
        },
        'y1': 0,
        'y2': $$.height
    };

    $$.xgrid = $$.main.select('.' + CLASS.xgrids).selectAll('.' + CLASS.xgrid).data(xgridData);
    $$.xgrid.enter().append('line').attr("class", CLASS.xgrid);
    if (!withoutUpdate) {
        $$.xgrid.attr($$.xgridAttr).style("opacity", function () {
            return +d3.select(this).attr(config.axis_rotated ? 'y1' : 'x1') === (config.axis_rotated ? $$.height : 0) ? 0 : 1;
        });
    }
    $$.xgrid.exit().remove();
};

c3_chart_internal_fn.updateYGrid = function () {
    var $$ = this,
        config = $$.config,
        gridValues = $$.yAxis.tickValues() || $$.y.ticks(config.grid_y_ticks);
    $$.ygrid = $$.main.select('.' + CLASS.ygrids).selectAll('.' + CLASS.ygrid).data(gridValues);
    $$.ygrid.enter().append('line').attr('class', CLASS.ygrid);
    $$.ygrid.attr("x1", config.axis_rotated ? $$.y : 0).attr("x2", config.axis_rotated ? $$.y : $$.width).attr("y1", config.axis_rotated ? 0 : $$.y).attr("y2", config.axis_rotated ? $$.height : $$.y);
    $$.ygrid.exit().remove();
    $$.smoothLines($$.ygrid, 'grid');
};

c3_chart_internal_fn.gridTextAnchor = function (d) {
    return d.position ? d.position : "end";
};
c3_chart_internal_fn.gridTextDx = function (d) {
    return d.position === 'start' ? 4 : d.position === 'middle' ? 0 : -4;
};
c3_chart_internal_fn.xGridTextX = function (d) {
    return d.position === 'start' ? -this.height : d.position === 'middle' ? -this.height / 2 : 0;
};
c3_chart_internal_fn.yGridTextX = function (d) {
    return d.position === 'start' ? 0 : d.position === 'middle' ? this.width / 2 : this.width;
};
c3_chart_internal_fn.updateGrid = function (duration) {
    var $$ = this,
        main = $$.main,
        config = $$.config,
        xgridLine,
        ygridLine,
        yv;

    // hide if arc type
    $$.grid.style('visibility', $$.hasArcType() ? 'hidden' : 'visible');

    main.select('line.' + CLASS.xgridFocus).style("visibility", "hidden");
    if (config.grid_x_show) {
        $$.updateXGrid();
    }
    $$.xgridLines = main.select('.' + CLASS.xgridLines).selectAll('.' + CLASS.xgridLine).data(config.grid_x_lines);
    // enter
    xgridLine = $$.xgridLines.enter().append('g').attr("class", function (d) {
        return CLASS.xgridLine + (d['class'] ? ' ' + d['class'] : '');
    });
    xgridLine.append('line').style("opacity", 0);
    xgridLine.append('text').attr("text-anchor", $$.gridTextAnchor).attr("transform", config.axis_rotated ? "" : "rotate(-90)").attr('dx', $$.gridTextDx).attr('dy', -5).style("opacity", 0);
    // udpate
    // done in d3.transition() of the end of this function
    // exit
    $$.xgridLines.exit().transition().duration(duration).style("opacity", 0).remove();

    // Y-Grid
    if (config.grid_y_show) {
        $$.updateYGrid();
    }
    $$.ygridLines = main.select('.' + CLASS.ygridLines).selectAll('.' + CLASS.ygridLine).data(config.grid_y_lines);
    // enter
    ygridLine = $$.ygridLines.enter().append('g').attr("class", function (d) {
        return CLASS.ygridLine + (d['class'] ? ' ' + d['class'] : '');
    });
    ygridLine.append('line').style("opacity", 0);
    ygridLine.append('text').attr("text-anchor", $$.gridTextAnchor).attr("transform", config.axis_rotated ? "rotate(-90)" : "").attr('dx', $$.gridTextDx).attr('dy', -5).style("opacity", 0);
    // update
    yv = $$.yv.bind($$);
    $$.ygridLines.select('line').transition().duration(duration).attr("x1", config.axis_rotated ? yv : 0).attr("x2", config.axis_rotated ? yv : $$.width).attr("y1", config.axis_rotated ? 0 : yv).attr("y2", config.axis_rotated ? $$.height : yv).style("opacity", 1);
    $$.ygridLines.select('text').transition().duration(duration).attr("x", config.axis_rotated ? $$.xGridTextX.bind($$) : $$.yGridTextX.bind($$)).attr("y", yv).text(function (d) {
        return d.text;
    }).style("opacity", 1);
    // exit
    $$.ygridLines.exit().transition().duration(duration).style("opacity", 0).remove();
};
c3_chart_internal_fn.redrawGrid = function (withTransition) {
    var $$ = this,
        config = $$.config,
        xv = $$.xv.bind($$),
        lines = $$.xgridLines.select('line'),
        texts = $$.xgridLines.select('text');
    return [(withTransition ? lines.transition() : lines).attr("x1", config.axis_rotated ? 0 : xv).attr("x2", config.axis_rotated ? $$.width : xv).attr("y1", config.axis_rotated ? xv : 0).attr("y2", config.axis_rotated ? xv : $$.height).style("opacity", 1), (withTransition ? texts.transition() : texts).attr("x", config.axis_rotated ? $$.yGridTextX.bind($$) : $$.xGridTextX.bind($$)).attr("y", xv).text(function (d) {
        return d.text;
    }).style("opacity", 1)];
};
c3_chart_internal_fn.showXGridFocus = function (selectedData) {
    var $$ = this,
        config = $$.config,
        dataToShow = selectedData.filter(function (d) {
        return d && isValue(d.value);
    }),
        focusEl = $$.main.selectAll('line.' + CLASS.xgridFocus),
        xx = $$.xx.bind($$);
    if (!config.tooltip_show) {
        return;
    }
    // Hide when scatter plot exists
    if ($$.hasType('scatter') || $$.hasArcType()) {
        return;
    }
    focusEl.style("visibility", "visible").data([dataToShow[0]]).attr(config.axis_rotated ? 'y1' : 'x1', xx).attr(config.axis_rotated ? 'y2' : 'x2', xx);
    $$.smoothLines(focusEl, 'grid');
};
c3_chart_internal_fn.hideXGridFocus = function () {
    this.main.select('line.' + CLASS.xgridFocus).style("visibility", "hidden");
};
c3_chart_internal_fn.updateXgridFocus = function () {
    var $$ = this,
        config = $$.config;
    $$.main.select('line.' + CLASS.xgridFocus).attr("x1", config.axis_rotated ? 0 : -10).attr("x2", config.axis_rotated ? $$.width : -10).attr("y1", config.axis_rotated ? -10 : 0).attr("y2", config.axis_rotated ? -10 : $$.height);
};
c3_chart_internal_fn.generateGridData = function (type, scale) {
    var $$ = this,
        gridData = [],
        xDomain,
        firstYear,
        lastYear,
        i,
        tickNum = $$.main.select("." + CLASS.axisX).selectAll('.tick').size();
    if (type === 'year') {
        xDomain = $$.getXDomain();
        firstYear = xDomain[0].getFullYear();
        lastYear = xDomain[1].getFullYear();
        for (i = firstYear; i <= lastYear; i++) {
            gridData.push(new Date(i + '-01-01 00:00:00'));
        }
    } else {
        gridData = scale.ticks(10);
        if (gridData.length > tickNum) {
            // use only int
            gridData = gridData.filter(function (d) {
                return ("" + d).indexOf('.') < 0;
            });
        }
    }
    return gridData;
};
c3_chart_internal_fn.getGridFilterToRemove = function (params) {
    return params ? function (line) {
        var found = false;
        [].concat(params).forEach(function (param) {
            if ('value' in param && line.value === param.value || 'class' in param && line['class'] === param['class']) {
                found = true;
            }
        });
        return found;
    } : function () {
        return true;
    };
};
c3_chart_internal_fn.removeGridLines = function (params, forX) {
    var $$ = this,
        config = $$.config,
        toRemove = $$.getGridFilterToRemove(params),
        toShow = function toShow(line) {
        return !toRemove(line);
    },
        classLines = forX ? CLASS.xgridLines : CLASS.ygridLines,
        classLine = forX ? CLASS.xgridLine : CLASS.ygridLine;
    $$.main.select('.' + classLines).selectAll('.' + classLine).filter(toRemove).transition().duration(config.transition_duration).style('opacity', 0).remove();
    if (forX) {
        config.grid_x_lines = config.grid_x_lines.filter(toShow);
    } else {
        config.grid_y_lines = config.grid_y_lines.filter(toShow);
    }
};

c3_chart_internal_fn.initEventRect = function () {
    var $$ = this;
    $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.eventRects).style('fill-opacity', 0);
};
c3_chart_internal_fn.redrawEventRect = function () {
    var $$ = this,
        config = $$.config,
        eventRectUpdate,
        maxDataCountTarget,
        isMultipleX = $$.isMultipleX();

    // rects for mouseover
    var eventRects = $$.main.select('.' + CLASS.eventRects).style('cursor', config.zoom_enabled ? config.axis_rotated ? 'ns-resize' : 'ew-resize' : null).classed(CLASS.eventRectsMultiple, isMultipleX).classed(CLASS.eventRectsSingle, !isMultipleX);

    // clear old rects
    eventRects.selectAll('.' + CLASS.eventRect).remove();

    // open as public variable
    $$.eventRect = eventRects.selectAll('.' + CLASS.eventRect);

    if (isMultipleX) {
        eventRectUpdate = $$.eventRect.data([0]);
        // enter : only one rect will be added
        $$.generateEventRectsForMultipleXs(eventRectUpdate.enter());
        // update
        $$.updateEventRect(eventRectUpdate);
        // exit : not needed because always only one rect exists
    } else {
        // Set data and update $$.eventRect
        maxDataCountTarget = $$.getMaxDataCountTarget($$.data.targets);
        eventRects.datum(maxDataCountTarget ? maxDataCountTarget.values : []);
        $$.eventRect = eventRects.selectAll('.' + CLASS.eventRect);
        eventRectUpdate = $$.eventRect.data(function (d) {
            return d;
        });
        // enter
        $$.generateEventRectsForSingleX(eventRectUpdate.enter());
        // update
        $$.updateEventRect(eventRectUpdate);
        // exit
        eventRectUpdate.exit().remove();
    }
};
c3_chart_internal_fn.updateEventRect = function (eventRectUpdate) {
    var $$ = this,
        config = $$.config,
        x,
        y,
        w,
        h,
        rectW,
        rectX;

    // set update selection if null
    eventRectUpdate = eventRectUpdate || $$.eventRect.data(function (d) {
        return d;
    });

    if ($$.isMultipleX()) {
        // TODO: rotated not supported yet
        x = 0;
        y = 0;
        w = $$.width;
        h = $$.height;
    } else {
        if (($$.isCustomX() || $$.isTimeSeries()) && !$$.isCategorized()) {

            // update index for x that is used by prevX and nextX
            $$.updateXs();

            rectW = function rectW(d) {
                var prevX = $$.getPrevX(d.index),
                    nextX = $$.getNextX(d.index);

                // if there this is a single data point make the eventRect full width (or height)
                if (prevX === null && nextX === null) {
                    return config.axis_rotated ? $$.height : $$.width;
                }

                if (prevX === null) {
                    prevX = $$.x.domain()[0];
                }
                if (nextX === null) {
                    nextX = $$.x.domain()[1];
                }

                return Math.max(0, ($$.x(nextX) - $$.x(prevX)) / 2);
            };
            rectX = function rectX(d) {
                var prevX = $$.getPrevX(d.index),
                    nextX = $$.getNextX(d.index),
                    thisX = $$.data.xs[d.id][d.index];

                // if there this is a single data point position the eventRect at 0
                if (prevX === null && nextX === null) {
                    return 0;
                }

                if (prevX === null) {
                    prevX = $$.x.domain()[0];
                }

                return ($$.x(thisX) + $$.x(prevX)) / 2;
            };
        } else {
            rectW = $$.getEventRectWidth();
            rectX = function rectX(d) {
                return $$.x(d.x) - rectW / 2;
            };
        }
        x = config.axis_rotated ? 0 : rectX;
        y = config.axis_rotated ? rectX : 0;
        w = config.axis_rotated ? $$.width : rectW;
        h = config.axis_rotated ? rectW : $$.height;
    }

    eventRectUpdate.attr('class', $$.classEvent.bind($$)).attr("x", x).attr("y", y).attr("width", w).attr("height", h);
};
c3_chart_internal_fn.generateEventRectsForSingleX = function (eventRectEnter) {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config;
    eventRectEnter.append("rect").attr("class", $$.classEvent.bind($$)).style("cursor", config.data_selection_enabled && config.data_selection_grouped ? "pointer" : null).on('mouseover', function (d) {
        var index = d.index;

        if ($$.dragging || $$.flowing) {
            return;
        } // do nothing while dragging/flowing
        if ($$.hasArcType()) {
            return;
        }

        // Expand shapes for selection
        if (config.point_focus_expand_enabled) {
            $$.expandCircles(index, null, true);
        }
        $$.expandBars(index, null, true);

        // Call event handler
        $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {
            config.data_onmouseover.call($$.api, d);
        });
    }).on('mouseout', function (d) {
        var index = d.index;
        if (!$$.config) {
            return;
        } // chart is destroyed
        if ($$.hasArcType()) {
            return;
        }
        $$.hideXGridFocus();
        $$.hideTooltip();
        // Undo expanded shapes
        $$.unexpandCircles();
        $$.unexpandBars();
        // Call event handler
        $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {
            config.data_onmouseout.call($$.api, d);
        });
    }).on('mousemove', function (d) {
        var selectedData,
            index = d.index,
            eventRect = $$.svg.select('.' + CLASS.eventRect + '-' + index);

        if ($$.dragging || $$.flowing) {
            return;
        } // do nothing while dragging/flowing
        if ($$.hasArcType()) {
            return;
        }

        if ($$.isStepType(d) && $$.config.line_step_type === 'step-after' && d3.mouse(this)[0] < $$.x($$.getXValue(d.id, index))) {
            index -= 1;
        }

        // Show tooltip
        selectedData = $$.filterTargetsToShow($$.data.targets).map(function (t) {
            return $$.addName($$.getValueOnIndex(t.values, index));
        });

        if (config.tooltip_grouped) {
            $$.showTooltip(selectedData, this);
            $$.showXGridFocus(selectedData);
        }

        if (config.tooltip_grouped && (!config.data_selection_enabled || config.data_selection_grouped)) {
            return;
        }

        $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function () {
            d3.select(this).classed(CLASS.EXPANDED, true);
            if (config.data_selection_enabled) {
                eventRect.style('cursor', config.data_selection_grouped ? 'pointer' : null);
            }
            if (!config.tooltip_grouped) {
                $$.hideXGridFocus();
                $$.hideTooltip();
                if (!config.data_selection_grouped) {
                    $$.unexpandCircles(index);
                    $$.unexpandBars(index);
                }
            }
        }).filter(function (d) {
            return $$.isWithinShape(this, d);
        }).each(function (d) {
            if (config.data_selection_enabled && (config.data_selection_grouped || config.data_selection_isselectable(d))) {
                eventRect.style('cursor', 'pointer');
            }
            if (!config.tooltip_grouped) {
                $$.showTooltip([d], this);
                $$.showXGridFocus([d]);
                if (config.point_focus_expand_enabled) {
                    $$.expandCircles(index, d.id, true);
                }
                $$.expandBars(index, d.id, true);
            }
        });
    }).on('click', function (d) {
        var index = d.index;
        if ($$.hasArcType() || !$$.toggleShape) {
            return;
        }
        if ($$.cancelClick) {
            $$.cancelClick = false;
            return;
        }
        if ($$.isStepType(d) && config.line_step_type === 'step-after' && d3.mouse(this)[0] < $$.x($$.getXValue(d.id, index))) {
            index -= 1;
        }
        $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {
            if (config.data_selection_grouped || $$.isWithinShape(this, d)) {
                $$.toggleShape(this, d, index);
                $$.config.data_onclick.call($$.api, d, this);
            }
        });
    }).call(config.data_selection_draggable && $$.drag ? d3.behavior.drag().origin(Object).on('drag', function () {
        $$.drag(d3.mouse(this));
    }).on('dragstart', function () {
        $$.dragstart(d3.mouse(this));
    }).on('dragend', function () {
        $$.dragend();
    }) : function () {});
};

c3_chart_internal_fn.generateEventRectsForMultipleXs = function (eventRectEnter) {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config;

    function mouseout() {
        $$.svg.select('.' + CLASS.eventRect).style('cursor', null);
        $$.hideXGridFocus();
        $$.hideTooltip();
        $$.unexpandCircles();
        $$.unexpandBars();
    }

    eventRectEnter.append('rect').attr('x', 0).attr('y', 0).attr('width', $$.width).attr('height', $$.height).attr('class', CLASS.eventRect).on('mouseout', function () {
        if (!$$.config) {
            return;
        } // chart is destroyed
        if ($$.hasArcType()) {
            return;
        }
        mouseout();
    }).on('mousemove', function () {
        var targetsToShow = $$.filterTargetsToShow($$.data.targets);
        var mouse, closest, sameXData, selectedData;

        if ($$.dragging) {
            return;
        } // do nothing when dragging
        if ($$.hasArcType(targetsToShow)) {
            return;
        }

        mouse = d3.mouse(this);
        closest = $$.findClosestFromTargets(targetsToShow, mouse);

        if ($$.mouseover && (!closest || closest.id !== $$.mouseover.id)) {
            config.data_onmouseout.call($$.api, $$.mouseover);
            $$.mouseover = undefined;
        }

        if (!closest) {
            mouseout();
            return;
        }

        if ($$.isScatterType(closest) || !config.tooltip_grouped) {
            sameXData = [closest];
        } else {
            sameXData = $$.filterByX(targetsToShow, closest.x);
        }

        // show tooltip when cursor is close to some point
        selectedData = sameXData.map(function (d) {
            return $$.addName(d);
        });
        $$.showTooltip(selectedData, this);

        // expand points
        if (config.point_focus_expand_enabled) {
            $$.expandCircles(closest.index, closest.id, true);
        }
        $$.expandBars(closest.index, closest.id, true);

        // Show xgrid focus line
        $$.showXGridFocus(selectedData);

        // Show cursor as pointer if point is close to mouse position
        if ($$.isBarType(closest.id) || $$.dist(closest, mouse) < config.point_sensitivity) {
            $$.svg.select('.' + CLASS.eventRect).style('cursor', 'pointer');
            if (!$$.mouseover) {
                config.data_onmouseover.call($$.api, closest);
                $$.mouseover = closest;
            }
        }
    }).on('click', function () {
        var targetsToShow = $$.filterTargetsToShow($$.data.targets);
        var mouse, closest;
        if ($$.hasArcType(targetsToShow)) {
            return;
        }

        mouse = d3.mouse(this);
        closest = $$.findClosestFromTargets(targetsToShow, mouse);
        if (!closest) {
            return;
        }
        // select if selection enabled
        if ($$.isBarType(closest.id) || $$.dist(closest, mouse) < config.point_sensitivity) {
            $$.main.selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(closest.id)).selectAll('.' + CLASS.shape + '-' + closest.index).each(function () {
                if (config.data_selection_grouped || $$.isWithinShape(this, closest)) {
                    $$.toggleShape(this, closest, closest.index);
                    $$.config.data_onclick.call($$.api, closest, this);
                }
            });
        }
    }).call(config.data_selection_draggable && $$.drag ? d3.behavior.drag().origin(Object).on('drag', function () {
        $$.drag(d3.mouse(this));
    }).on('dragstart', function () {
        $$.dragstart(d3.mouse(this));
    }).on('dragend', function () {
        $$.dragend();
    }) : function () {});
};
c3_chart_internal_fn.dispatchEvent = function (type, index, mouse) {
    var $$ = this,
        selector = '.' + CLASS.eventRect + (!$$.isMultipleX() ? '-' + index : ''),
        eventRect = $$.main.select(selector).node(),
        box = eventRect.getBoundingClientRect(),
        x = box.left + (mouse ? mouse[0] : 0),
        y = box.top + (mouse ? mouse[1] : 0),
        event = document.createEvent("MouseEvents");

    event.initMouseEvent(type, true, true, window, 0, x, y, x, y, false, false, false, false, 0, null);
    eventRect.dispatchEvent(event);
};

c3_chart_internal_fn.initLegend = function () {
    var $$ = this;
    $$.legendItemTextBox = {};
    $$.legendHasRendered = false;
    $$.legend = $$.svg.append("g").attr("transform", $$.getTranslate('legend'));
    if (!$$.config.legend_show) {
        $$.legend.style('visibility', 'hidden');
        $$.hiddenLegendIds = $$.mapToIds($$.data.targets);
        return;
    }
    // MEMO: call here to update legend box and tranlate for all
    // MEMO: translate will be upated by this, so transform not needed in updateLegend()
    $$.updateLegendWithDefaults();
};
c3_chart_internal_fn.updateLegendWithDefaults = function () {
    var $$ = this;
    $$.updateLegend($$.mapToIds($$.data.targets), { withTransform: false, withTransitionForTransform: false, withTransition: false });
};
c3_chart_internal_fn.updateSizeForLegend = function (legendHeight, legendWidth) {
    var $$ = this,
        config = $$.config,
        insetLegendPosition = {
        top: $$.isLegendTop ? $$.getCurrentPaddingTop() + config.legend_inset_y + 5.5 : $$.currentHeight - legendHeight - $$.getCurrentPaddingBottom() - config.legend_inset_y,
        left: $$.isLegendLeft ? $$.getCurrentPaddingLeft() + config.legend_inset_x + 0.5 : $$.currentWidth - legendWidth - $$.getCurrentPaddingRight() - config.legend_inset_x + 0.5
    };

    $$.margin3 = {
        top: $$.isLegendRight ? 0 : $$.isLegendInset ? insetLegendPosition.top : $$.currentHeight - legendHeight,
        right: NaN,
        bottom: 0,
        left: $$.isLegendRight ? $$.currentWidth - legendWidth : $$.isLegendInset ? insetLegendPosition.left : 0
    };
};
c3_chart_internal_fn.transformLegend = function (withTransition) {
    var $$ = this;
    (withTransition ? $$.legend.transition() : $$.legend).attr("transform", $$.getTranslate('legend'));
};
c3_chart_internal_fn.updateLegendStep = function (step) {
    this.legendStep = step;
};
c3_chart_internal_fn.updateLegendItemWidth = function (w) {
    this.legendItemWidth = w;
};
c3_chart_internal_fn.updateLegendItemHeight = function (h) {
    this.legendItemHeight = h;
};
c3_chart_internal_fn.getLegendWidth = function () {
    var $$ = this;
    return $$.config.legend_show ? $$.isLegendRight || $$.isLegendInset ? $$.legendItemWidth * ($$.legendStep + 1) : $$.currentWidth : 0;
};
c3_chart_internal_fn.getLegendHeight = function () {
    var $$ = this,
        h = 0;
    if ($$.config.legend_show) {
        if ($$.isLegendRight) {
            h = $$.currentHeight;
        } else {
            h = Math.max(20, $$.legendItemHeight) * ($$.legendStep + 1);
        }
    }
    return h;
};
c3_chart_internal_fn.opacityForLegend = function (legendItem) {
    return legendItem.classed(CLASS.legendItemHidden) ? null : 1;
};
c3_chart_internal_fn.opacityForUnfocusedLegend = function (legendItem) {
    return legendItem.classed(CLASS.legendItemHidden) ? null : 0.3;
};
c3_chart_internal_fn.toggleFocusLegend = function (targetIds, focus) {
    var $$ = this;
    targetIds = $$.mapToTargetIds(targetIds);
    $$.legend.selectAll('.' + CLASS.legendItem).filter(function (id) {
        return targetIds.indexOf(id) >= 0;
    }).classed(CLASS.legendItemFocused, focus).transition().duration(100).style('opacity', function () {
        var opacity = focus ? $$.opacityForLegend : $$.opacityForUnfocusedLegend;
        return opacity.call($$, $$.d3.select(this));
    });
};
c3_chart_internal_fn.revertLegend = function () {
    var $$ = this,
        d3 = $$.d3;
    $$.legend.selectAll('.' + CLASS.legendItem).classed(CLASS.legendItemFocused, false).transition().duration(100).style('opacity', function () {
        return $$.opacityForLegend(d3.select(this));
    });
};
c3_chart_internal_fn.showLegend = function (targetIds) {
    var $$ = this,
        config = $$.config;
    if (!config.legend_show) {
        config.legend_show = true;
        $$.legend.style('visibility', 'visible');
        if (!$$.legendHasRendered) {
            $$.updateLegendWithDefaults();
        }
    }
    $$.removeHiddenLegendIds(targetIds);
    $$.legend.selectAll($$.selectorLegends(targetIds)).style('visibility', 'visible').transition().style('opacity', function () {
        return $$.opacityForLegend($$.d3.select(this));
    });
};
c3_chart_internal_fn.hideLegend = function (targetIds) {
    var $$ = this,
        config = $$.config;
    if (config.legend_show && isEmpty(targetIds)) {
        config.legend_show = false;
        $$.legend.style('visibility', 'hidden');
    }
    $$.addHiddenLegendIds(targetIds);
    $$.legend.selectAll($$.selectorLegends(targetIds)).style('opacity', 0).style('visibility', 'hidden');
};
c3_chart_internal_fn.clearLegendItemTextBoxCache = function () {
    this.legendItemTextBox = {};
};
c3_chart_internal_fn.updateLegend = function (targetIds, options, transitions) {
    var $$ = this,
        config = $$.config;
    var xForLegend, xForLegendText, xForLegendRect, yForLegend, yForLegendText, yForLegendRect, x1ForLegendTile, x2ForLegendTile, yForLegendTile;
    var paddingTop = 4,
        paddingRight = 10,
        maxWidth = 0,
        maxHeight = 0,
        posMin = 10,
        tileWidth = config.legend_item_tile_width + 5;
    var l,
        totalLength = 0,
        offsets = {},
        widths = {},
        heights = {},
        margins = [0],
        steps = {},
        step = 0;
    var withTransition, withTransitionForTransform;
    var texts, rects, tiles, background;

    // Skip elements when their name is set to null
    targetIds = targetIds.filter(function (id) {
        return !isDefined(config.data_names[id]) || config.data_names[id] !== null;
    });

    options = options || {};
    withTransition = getOption(options, "withTransition", true);
    withTransitionForTransform = getOption(options, "withTransitionForTransform", true);

    function getTextBox(textElement, id) {
        if (!$$.legendItemTextBox[id]) {
            $$.legendItemTextBox[id] = $$.getTextRect(textElement.textContent, CLASS.legendItem, textElement);
        }
        return $$.legendItemTextBox[id];
    }

    function updatePositions(textElement, id, index) {
        var reset = index === 0,
            isLast = index === targetIds.length - 1,
            box = getTextBox(textElement, id),
            itemWidth = box.width + tileWidth + (isLast && !($$.isLegendRight || $$.isLegendInset) ? 0 : paddingRight) + config.legend_padding,
            itemHeight = box.height + paddingTop,
            itemLength = $$.isLegendRight || $$.isLegendInset ? itemHeight : itemWidth,
            areaLength = $$.isLegendRight || $$.isLegendInset ? $$.getLegendHeight() : $$.getLegendWidth(),
            margin,
            maxLength;

        // MEMO: care about condifion of step, totalLength
        function updateValues(id, withoutStep) {
            if (!withoutStep) {
                margin = (areaLength - totalLength - itemLength) / 2;
                if (margin < posMin) {
                    margin = (areaLength - itemLength) / 2;
                    totalLength = 0;
                    step++;
                }
            }
            steps[id] = step;
            margins[step] = $$.isLegendInset ? 10 : margin;
            offsets[id] = totalLength;
            totalLength += itemLength;
        }

        if (reset) {
            totalLength = 0;
            step = 0;
            maxWidth = 0;
            maxHeight = 0;
        }

        if (config.legend_show && !$$.isLegendToShow(id)) {
            widths[id] = heights[id] = steps[id] = offsets[id] = 0;
            return;
        }

        widths[id] = itemWidth;
        heights[id] = itemHeight;

        if (!maxWidth || itemWidth >= maxWidth) {
            maxWidth = itemWidth;
        }
        if (!maxHeight || itemHeight >= maxHeight) {
            maxHeight = itemHeight;
        }
        maxLength = $$.isLegendRight || $$.isLegendInset ? maxHeight : maxWidth;

        if (config.legend_equally) {
            Object.keys(widths).forEach(function (id) {
                widths[id] = maxWidth;
            });
            Object.keys(heights).forEach(function (id) {
                heights[id] = maxHeight;
            });
            margin = (areaLength - maxLength * targetIds.length) / 2;
            if (margin < posMin) {
                totalLength = 0;
                step = 0;
                targetIds.forEach(function (id) {
                    updateValues(id);
                });
            } else {
                updateValues(id, true);
            }
        } else {
            updateValues(id);
        }
    }

    if ($$.isLegendInset) {
        step = config.legend_inset_step ? config.legend_inset_step : targetIds.length;
        $$.updateLegendStep(step);
    }

    if ($$.isLegendRight) {
        xForLegend = function xForLegend(id) {
            return maxWidth * steps[id];
        };
        yForLegend = function yForLegend(id) {
            return margins[steps[id]] + offsets[id];
        };
    } else if ($$.isLegendInset) {
        xForLegend = function xForLegend(id) {
            return maxWidth * steps[id] + 10;
        };
        yForLegend = function yForLegend(id) {
            return margins[steps[id]] + offsets[id];
        };
    } else {
        xForLegend = function xForLegend(id) {
            return margins[steps[id]] + offsets[id];
        };
        yForLegend = function yForLegend(id) {
            return maxHeight * steps[id];
        };
    }
    xForLegendText = function xForLegendText(id, i) {
        return xForLegend(id, i) + 4 + config.legend_item_tile_width;
    };
    yForLegendText = function yForLegendText(id, i) {
        return yForLegend(id, i) + 9;
    };
    xForLegendRect = function xForLegendRect(id, i) {
        return xForLegend(id, i);
    };
    yForLegendRect = function yForLegendRect(id, i) {
        return yForLegend(id, i) - 5;
    };
    x1ForLegendTile = function x1ForLegendTile(id, i) {
        return xForLegend(id, i) - 2;
    };
    x2ForLegendTile = function x2ForLegendTile(id, i) {
        return xForLegend(id, i) - 2 + config.legend_item_tile_width;
    };
    yForLegendTile = function yForLegendTile(id, i) {
        return yForLegend(id, i) + 4;
    };

    // Define g for legend area
    l = $$.legend.selectAll('.' + CLASS.legendItem).data(targetIds).enter().append('g').attr('class', function (id) {
        return $$.generateClass(CLASS.legendItem, id);
    }).style('visibility', function (id) {
        return $$.isLegendToShow(id) ? 'visible' : 'hidden';
    }).style('cursor', 'pointer').on('click', function (id) {
        if (config.legend_item_onclick) {
            config.legend_item_onclick.call($$, id);
        } else {
            if ($$.d3.event.altKey) {
                $$.api.hide();
                $$.api.show(id);
            } else {
                $$.api.toggle(id);
                $$.isTargetToShow(id) ? $$.api.focus(id) : $$.api.revert();
            }
        }
    }).on('mouseover', function (id) {
        if (config.legend_item_onmouseover) {
            config.legend_item_onmouseover.call($$, id);
        } else {
            $$.d3.select(this).classed(CLASS.legendItemFocused, true);
            if (!$$.transiting && $$.isTargetToShow(id)) {
                $$.api.focus(id);
            }
        }
    }).on('mouseout', function (id) {
        if (config.legend_item_onmouseout) {
            config.legend_item_onmouseout.call($$, id);
        } else {
            $$.d3.select(this).classed(CLASS.legendItemFocused, false);
            $$.api.revert();
        }
    });
    l.append('text').text(function (id) {
        return isDefined(config.data_names[id]) ? config.data_names[id] : id;
    }).each(function (id, i) {
        updatePositions(this, id, i);
    }).style("pointer-events", "none").attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendText : -200).attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendText);
    l.append('rect').attr("class", CLASS.legendItemEvent).style('fill-opacity', 0).attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendRect : -200).attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendRect);
    l.append('line').attr('class', CLASS.legendItemTile).style('stroke', $$.color).style("pointer-events", "none").attr('x1', $$.isLegendRight || $$.isLegendInset ? x1ForLegendTile : -200).attr('y1', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendTile).attr('x2', $$.isLegendRight || $$.isLegendInset ? x2ForLegendTile : -200).attr('y2', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendTile).attr('stroke-width', config.legend_item_tile_height);

    // Set background for inset legend
    background = $$.legend.select('.' + CLASS.legendBackground + ' rect');
    if ($$.isLegendInset && maxWidth > 0 && background.size() === 0) {
        background = $$.legend.insert('g', '.' + CLASS.legendItem).attr("class", CLASS.legendBackground).append('rect');
    }

    texts = $$.legend.selectAll('text').data(targetIds).text(function (id) {
        return isDefined(config.data_names[id]) ? config.data_names[id] : id;
    } // MEMO: needed for update
    ).each(function (id, i) {
        updatePositions(this, id, i);
    });
    (withTransition ? texts.transition() : texts).attr('x', xForLegendText).attr('y', yForLegendText);

    rects = $$.legend.selectAll('rect.' + CLASS.legendItemEvent).data(targetIds);
    (withTransition ? rects.transition() : rects).attr('width', function (id) {
        return widths[id];
    }).attr('height', function (id) {
        return heights[id];
    }).attr('x', xForLegendRect).attr('y', yForLegendRect);

    tiles = $$.legend.selectAll('line.' + CLASS.legendItemTile).data(targetIds);
    (withTransition ? tiles.transition() : tiles).style('stroke', $$.color).attr('x1', x1ForLegendTile).attr('y1', yForLegendTile).attr('x2', x2ForLegendTile).attr('y2', yForLegendTile);

    if (background) {
        (withTransition ? background.transition() : background).attr('height', $$.getLegendHeight() - 12).attr('width', maxWidth * (step + 1) + 10);
    }

    // toggle legend state
    $$.legend.selectAll('.' + CLASS.legendItem).classed(CLASS.legendItemHidden, function (id) {
        return !$$.isTargetToShow(id);
    });

    // Update all to reflect change of legend
    $$.updateLegendItemWidth(maxWidth);
    $$.updateLegendItemHeight(maxHeight);
    $$.updateLegendStep(step);
    // Update size and scale
    $$.updateSizes();
    $$.updateScales();
    $$.updateSvgSize();
    // Update g positions
    $$.transformAll(withTransitionForTransform, transitions);
    $$.legendHasRendered = true;
};

c3_chart_internal_fn.initRegion = function () {
    var $$ = this;
    $$.region = $$.main.append('g').attr("clip-path", $$.clipPath).attr("class", CLASS.regions);
};
c3_chart_internal_fn.updateRegion = function (duration) {
    var $$ = this,
        config = $$.config;

    // hide if arc type
    $$.region.style('visibility', $$.hasArcType() ? 'hidden' : 'visible');

    $$.mainRegion = $$.main.select('.' + CLASS.regions).selectAll('.' + CLASS.region).data(config.regions);
    $$.mainRegion.enter().append('g').append('rect').style("fill-opacity", 0);
    $$.mainRegion.attr('class', $$.classRegion.bind($$));
    $$.mainRegion.exit().transition().duration(duration).style("opacity", 0).remove();
};
c3_chart_internal_fn.redrawRegion = function (withTransition) {
    var $$ = this,
        regions = $$.mainRegion.selectAll('rect').each(function () {
        // data is binded to g and it's not transferred to rect (child node) automatically,
        // then data of each rect has to be updated manually.
        // TODO: there should be more efficient way to solve this?
        var parentData = $$.d3.select(this.parentNode).datum();
        $$.d3.select(this).datum(parentData);
    }),
        x = $$.regionX.bind($$),
        y = $$.regionY.bind($$),
        w = $$.regionWidth.bind($$),
        h = $$.regionHeight.bind($$);
    return [(withTransition ? regions.transition() : regions).attr("x", x).attr("y", y).attr("width", w).attr("height", h).style("fill-opacity", function (d) {
        return isValue(d.opacity) ? d.opacity : 0.1;
    })];
};
c3_chart_internal_fn.regionX = function (d) {
    var $$ = this,
        config = $$.config,
        xPos,
        yScale = d.axis === 'y' ? $$.y : $$.y2;
    if (d.axis === 'y' || d.axis === 'y2') {
        xPos = config.axis_rotated ? 'start' in d ? yScale(d.start) : 0 : 0;
    } else {
        xPos = config.axis_rotated ? 0 : 'start' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start) : 0;
    }
    return xPos;
};
c3_chart_internal_fn.regionY = function (d) {
    var $$ = this,
        config = $$.config,
        yPos,
        yScale = d.axis === 'y' ? $$.y : $$.y2;
    if (d.axis === 'y' || d.axis === 'y2') {
        yPos = config.axis_rotated ? 0 : 'end' in d ? yScale(d.end) : 0;
    } else {
        yPos = config.axis_rotated ? 'start' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start) : 0 : 0;
    }
    return yPos;
};
c3_chart_internal_fn.regionWidth = function (d) {
    var $$ = this,
        config = $$.config,
        start = $$.regionX(d),
        end,
        yScale = d.axis === 'y' ? $$.y : $$.y2;
    if (d.axis === 'y' || d.axis === 'y2') {
        end = config.axis_rotated ? 'end' in d ? yScale(d.end) : $$.width : $$.width;
    } else {
        end = config.axis_rotated ? $$.width : 'end' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end) : $$.width;
    }
    return end < start ? 0 : end - start;
};
c3_chart_internal_fn.regionHeight = function (d) {
    var $$ = this,
        config = $$.config,
        start = this.regionY(d),
        end,
        yScale = d.axis === 'y' ? $$.y : $$.y2;
    if (d.axis === 'y' || d.axis === 'y2') {
        end = config.axis_rotated ? $$.height : 'start' in d ? yScale(d.start) : $$.height;
    } else {
        end = config.axis_rotated ? 'end' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end) : $$.height : $$.height;
    }
    return end < start ? 0 : end - start;
};
c3_chart_internal_fn.isRegionOnX = function (d) {
    return !d.axis || d.axis === 'x';
};

c3_chart_internal_fn.getScale = function (min, max, forTimeseries) {
    return (forTimeseries ? this.d3.time.scale() : this.d3.scale.linear()).range([min, max]);
};
c3_chart_internal_fn.getX = function (min, max, domain, offset) {
    var $$ = this,
        scale = $$.getScale(min, max, $$.isTimeSeries()),
        _scale = domain ? scale.domain(domain) : scale,
        key;
    // Define customized scale if categorized axis
    if ($$.isCategorized()) {
        offset = offset || function () {
            return 0;
        };
        scale = function scale(d, raw) {
            var v = _scale(d) + offset(d);
            return raw ? v : Math.ceil(v);
        };
    } else {
        scale = function scale(d, raw) {
            var v = _scale(d);
            return raw ? v : Math.ceil(v);
        };
    }
    // define functions
    for (key in _scale) {
        scale[key] = _scale[key];
    }
    scale.orgDomain = function () {
        return _scale.domain();
    };
    // define custom domain() for categorized axis
    if ($$.isCategorized()) {
        scale.domain = function (domain) {
            if (!arguments.length) {
                domain = this.orgDomain();
                return [domain[0], domain[1] + 1];
            }
            _scale.domain(domain);
            return scale;
        };
    }
    return scale;
};
c3_chart_internal_fn.getY = function (min, max, domain) {
    var scale = this.getScale(min, max, this.isTimeSeriesY());
    if (domain) {
        scale.domain(domain);
    }
    return scale;
};
c3_chart_internal_fn.getYScale = function (id) {
    return this.axis.getId(id) === 'y2' ? this.y2 : this.y;
};
c3_chart_internal_fn.getSubYScale = function (id) {
    return this.axis.getId(id) === 'y2' ? this.subY2 : this.subY;
};
c3_chart_internal_fn.updateScales = function () {
    var $$ = this,
        config = $$.config,
        forInit = !$$.x;
    // update edges
    $$.xMin = config.axis_rotated ? 1 : 0;
    $$.xMax = config.axis_rotated ? $$.height : $$.width;
    $$.yMin = config.axis_rotated ? 0 : $$.height;
    $$.yMax = config.axis_rotated ? $$.width : 1;
    $$.subXMin = $$.xMin;
    $$.subXMax = $$.xMax;
    $$.subYMin = config.axis_rotated ? 0 : $$.height2;
    $$.subYMax = config.axis_rotated ? $$.width2 : 1;
    // update scales
    $$.x = $$.getX($$.xMin, $$.xMax, forInit ? undefined : $$.x.orgDomain(), function () {
        return $$.xAxis.tickOffset();
    });
    $$.y = $$.getY($$.yMin, $$.yMax, forInit ? config.axis_y_default : $$.y.domain());
    $$.y2 = $$.getY($$.yMin, $$.yMax, forInit ? config.axis_y2_default : $$.y2.domain());
    $$.subX = $$.getX($$.xMin, $$.xMax, $$.orgXDomain, function (d) {
        return d % 1 ? 0 : $$.subXAxis.tickOffset();
    });
    $$.subY = $$.getY($$.subYMin, $$.subYMax, forInit ? config.axis_y_default : $$.subY.domain());
    $$.subY2 = $$.getY($$.subYMin, $$.subYMax, forInit ? config.axis_y2_default : $$.subY2.domain());
    // update axes
    $$.xAxisTickFormat = $$.axis.getXAxisTickFormat();
    $$.xAxisTickValues = $$.axis.getXAxisTickValues();
    $$.yAxisTickValues = $$.axis.getYAxisTickValues();
    $$.y2AxisTickValues = $$.axis.getY2AxisTickValues();

    $$.xAxis = $$.axis.getXAxis($$.x, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);
    $$.subXAxis = $$.axis.getXAxis($$.subX, $$.subXOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);
    $$.yAxis = $$.axis.getYAxis($$.y, $$.yOrient, config.axis_y_tick_format, $$.yAxisTickValues, config.axis_y_tick_outer);
    $$.y2Axis = $$.axis.getYAxis($$.y2, $$.y2Orient, config.axis_y2_tick_format, $$.y2AxisTickValues, config.axis_y2_tick_outer);

    // Set initialized scales to brush and zoom
    if (!forInit) {
        if ($$.brush) {
            $$.brush.scale($$.subX);
        }
        if (config.zoom_enabled) {
            $$.zoom.scale($$.x);
        }
    }
    // update for arc
    if ($$.updateArc) {
        $$.updateArc();
    }
};

c3_chart_internal_fn.selectPoint = function (target, d, i) {
    var $$ = this,
        config = $$.config,
        cx = (config.axis_rotated ? $$.circleY : $$.circleX).bind($$),
        cy = (config.axis_rotated ? $$.circleX : $$.circleY).bind($$),
        r = $$.pointSelectR.bind($$);
    config.data_onselected.call($$.api, d, target.node());
    // add selected-circle on low layer g
    $$.main.select('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id)).selectAll('.' + CLASS.selectedCircle + '-' + i).data([d]).enter().append('circle').attr("class", function () {
        return $$.generateClass(CLASS.selectedCircle, i);
    }).attr("cx", cx).attr("cy", cy).attr("stroke", function () {
        return $$.color(d);
    }).attr("r", function (d) {
        return $$.pointSelectR(d) * 1.4;
    }).transition().duration(100).attr("r", r);
};
c3_chart_internal_fn.unselectPoint = function (target, d, i) {
    var $$ = this;
    $$.config.data_onunselected.call($$.api, d, target.node());
    // remove selected-circle from low layer g
    $$.main.select('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id)).selectAll('.' + CLASS.selectedCircle + '-' + i).transition().duration(100).attr('r', 0).remove();
};
c3_chart_internal_fn.togglePoint = function (selected, target, d, i) {
    selected ? this.selectPoint(target, d, i) : this.unselectPoint(target, d, i);
};
c3_chart_internal_fn.selectPath = function (target, d) {
    var $$ = this;
    $$.config.data_onselected.call($$, d, target.node());
    if ($$.config.interaction_brighten) {
        target.transition().duration(100).style("fill", function () {
            return $$.d3.rgb($$.color(d)).brighter(0.75);
        });
    }
};
c3_chart_internal_fn.unselectPath = function (target, d) {
    var $$ = this;
    $$.config.data_onunselected.call($$, d, target.node());
    if ($$.config.interaction_brighten) {
        target.transition().duration(100).style("fill", function () {
            return $$.color(d);
        });
    }
};
c3_chart_internal_fn.togglePath = function (selected, target, d, i) {
    selected ? this.selectPath(target, d, i) : this.unselectPath(target, d, i);
};
c3_chart_internal_fn.getToggle = function (that, d) {
    var $$ = this,
        toggle;
    if (that.nodeName === 'circle') {
        if ($$.isStepType(d)) {
            // circle is hidden in step chart, so treat as within the click area
            toggle = function toggle() {}; // TODO: how to select step chart?
        } else {
            toggle = $$.togglePoint;
        }
    } else if (that.nodeName === 'path') {
        toggle = $$.togglePath;
    }
    return toggle;
};
c3_chart_internal_fn.toggleShape = function (that, d, i) {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config,
        shape = d3.select(that),
        isSelected = shape.classed(CLASS.SELECTED),
        toggle = $$.getToggle(that, d).bind($$);

    if (config.data_selection_enabled && config.data_selection_isselectable(d)) {
        if (!config.data_selection_multiple) {
            $$.main.selectAll('.' + CLASS.shapes + (config.data_selection_grouped ? $$.getTargetSelectorSuffix(d.id) : "")).selectAll('.' + CLASS.shape).each(function (d, i) {
                var shape = d3.select(this);
                if (shape.classed(CLASS.SELECTED)) {
                    toggle(false, shape.classed(CLASS.SELECTED, false), d, i);
                }
            });
        }
        shape.classed(CLASS.SELECTED, !isSelected);
        toggle(!isSelected, shape, d, i);
    }
};

c3_chart_internal_fn.initBar = function () {
    var $$ = this;
    $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartBars);
};
c3_chart_internal_fn.updateTargetsForBar = function (targets) {
    var $$ = this,
        config = $$.config,
        mainBarUpdate,
        mainBarEnter,
        classChartBar = $$.classChartBar.bind($$),
        classBars = $$.classBars.bind($$),
        classFocus = $$.classFocus.bind($$);
    mainBarUpdate = $$.main.select('.' + CLASS.chartBars).selectAll('.' + CLASS.chartBar).data(targets).attr('class', function (d) {
        return classChartBar(d) + classFocus(d);
    });
    mainBarEnter = mainBarUpdate.enter().append('g').attr('class', classChartBar).style("pointer-events", "none");
    // Bars for each data
    mainBarEnter.append('g').attr("class", classBars).style("cursor", function (d) {
        return config.data_selection_isselectable(d) ? "pointer" : null;
    });
};
c3_chart_internal_fn.updateBar = function (durationForExit) {
    var $$ = this,
        barData = $$.barData.bind($$),
        classBar = $$.classBar.bind($$),
        initialOpacity = $$.initialOpacity.bind($$),
        color = function color(d) {
        return $$.color(d.id);
    };
    $$.mainBar = $$.main.selectAll('.' + CLASS.bars).selectAll('.' + CLASS.bar).data(barData);
    $$.mainBar.enter().append('path').attr("class", classBar).style("stroke", color).style("fill", color);
    $$.mainBar.style("opacity", initialOpacity);
    $$.mainBar.exit().transition().duration(durationForExit).remove();
};
c3_chart_internal_fn.redrawBar = function (drawBar, withTransition) {
    return [(withTransition ? this.mainBar.transition(Math.random().toString()) : this.mainBar).attr('d', drawBar).style("fill", this.color).style("opacity", 1)];
};
c3_chart_internal_fn.getBarW = function (axis, barTargetsNum) {
    var $$ = this,
        config = $$.config,
        w = typeof config.bar_width === 'number' ? config.bar_width : barTargetsNum ? axis.tickInterval() * config.bar_width_ratio / barTargetsNum : 0;
    return config.bar_width_max && w > config.bar_width_max ? config.bar_width_max : w;
};
c3_chart_internal_fn.getBars = function (i, id) {
    var $$ = this;
    return (id ? $$.main.selectAll('.' + CLASS.bars + $$.getTargetSelectorSuffix(id)) : $$.main).selectAll('.' + CLASS.bar + (isValue(i) ? '-' + i : ''));
};
c3_chart_internal_fn.expandBars = function (i, id, reset) {
    var $$ = this;
    if (reset) {
        $$.unexpandBars();
    }
    $$.getBars(i, id).classed(CLASS.EXPANDED, true);
};
c3_chart_internal_fn.unexpandBars = function (i) {
    var $$ = this;
    $$.getBars(i).classed(CLASS.EXPANDED, false);
};
c3_chart_internal_fn.generateDrawBar = function (barIndices, isSub) {
    var $$ = this,
        config = $$.config,
        getPoints = $$.generateGetBarPoints(barIndices, isSub);
    return function (d, i) {
        // 4 points that make a bar
        var points = getPoints(d, i);

        // switch points if axis is rotated, not applicable for sub chart
        var indexX = config.axis_rotated ? 1 : 0;
        var indexY = config.axis_rotated ? 0 : 1;

        var path = 'M ' + points[0][indexX] + ',' + points[0][indexY] + ' ' + 'L' + points[1][indexX] + ',' + points[1][indexY] + ' ' + 'L' + points[2][indexX] + ',' + points[2][indexY] + ' ' + 'L' + points[3][indexX] + ',' + points[3][indexY] + ' ' + 'z';

        return path;
    };
};
c3_chart_internal_fn.generateGetBarPoints = function (barIndices, isSub) {
    var $$ = this,
        axis = isSub ? $$.subXAxis : $$.xAxis,
        barTargetsNum = barIndices.__max__ + 1,
        barW = $$.getBarW(axis, barTargetsNum),
        barX = $$.getShapeX(barW, barTargetsNum, barIndices, !!isSub),
        barY = $$.getShapeY(!!isSub),
        barOffset = $$.getShapeOffset($$.isBarType, barIndices, !!isSub),
        yScale = isSub ? $$.getSubYScale : $$.getYScale;
    return function (d, i) {
        var y0 = yScale.call($$, d.id)(0),
            offset = barOffset(d, i) || y0,
            // offset is for stacked bar chart
        posX = barX(d),
            posY = barY(d);
        // fix posY not to overflow opposite quadrant
        if ($$.config.axis_rotated) {
            if (0 < d.value && posY < y0 || d.value < 0 && y0 < posY) {
                posY = y0;
            }
        }
        // 4 points that make a bar
        return [[posX, offset], [posX, posY - (y0 - offset)], [posX + barW, posY - (y0 - offset)], [posX + barW, offset]];
    };
};
c3_chart_internal_fn.isWithinBar = function (that) {
    var mouse = this.d3.mouse(that),
        box = that.getBoundingClientRect(),
        seg0 = that.pathSegList.getItem(0),
        seg1 = that.pathSegList.getItem(1),
        x = Math.min(seg0.x, seg1.x),
        y = Math.min(seg0.y, seg1.y),
        w = box.width,
        h = box.height,
        offset = 2,
        sx = x - offset,
        ex = x + w + offset,
        sy = y + h + offset,
        ey = y - offset;
    return sx < mouse[0] && mouse[0] < ex && ey < mouse[1] && mouse[1] < sy;
};

c3_chart_internal_fn.getShapeIndices = function (typeFilter) {
    var $$ = this,
        config = $$.config,
        indices = {},
        i = 0,
        j,
        k;
    $$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$)).forEach(function (d) {
        for (j = 0; j < config.data_groups.length; j++) {
            if (config.data_groups[j].indexOf(d.id) < 0) {
                continue;
            }
            for (k = 0; k < config.data_groups[j].length; k++) {
                if (config.data_groups[j][k] in indices) {
                    indices[d.id] = indices[config.data_groups[j][k]];
                    break;
                }
            }
        }
        if (isUndefined(indices[d.id])) {
            indices[d.id] = i++;
        }
    });
    indices.__max__ = i - 1;
    return indices;
};
c3_chart_internal_fn.getShapeX = function (offset, targetsNum, indices, isSub) {
    var $$ = this,
        scale = isSub ? $$.subX : $$.x;
    return function (d) {
        var index = d.id in indices ? indices[d.id] : 0;
        return d.x || d.x === 0 ? scale(d.x) - offset * (targetsNum / 2 - index) : 0;
    };
};
c3_chart_internal_fn.getShapeY = function (isSub) {
    var $$ = this;
    return function (d) {
        var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id);
        return scale(d.value);
    };
};
c3_chart_internal_fn.getShapeOffset = function (typeFilter, indices, isSub) {
    var $$ = this,
        targets = $$.orderTargets($$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$))),
        targetIds = targets.map(function (t) {
        return t.id;
    });
    return function (d, i) {
        var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id),
            y0 = scale(0),
            offset = y0;
        targets.forEach(function (t) {
            var values = $$.isStepType(d) ? $$.convertValuesToStep(t.values) : t.values;
            if (t.id === d.id || indices[t.id] !== indices[d.id]) {
                return;
            }
            if (targetIds.indexOf(t.id) < targetIds.indexOf(d.id)) {
                // check if the x values line up
                if (typeof values[i] === 'undefined' || +values[i].x !== +d.x) {
                    // "+" for timeseries
                    // if not, try to find the value that does line up
                    i = -1;
                    values.forEach(function (v, j) {
                        if (v.x === d.x) {
                            i = j;
                        }
                    });
                }
                if (i in values && values[i].value * d.value >= 0) {
                    offset += scale(values[i].value) - y0;
                }
            }
        });
        return offset;
    };
};
c3_chart_internal_fn.isWithinShape = function (that, d) {
    var $$ = this,
        shape = $$.d3.select(that),
        isWithin;
    if (!$$.isTargetToShow(d.id)) {
        isWithin = false;
    } else if (that.nodeName === 'circle') {
        isWithin = $$.isStepType(d) ? $$.isWithinStep(that, $$.getYScale(d.id)(d.value)) : $$.isWithinCircle(that, $$.pointSelectR(d) * 1.5);
    } else if (that.nodeName === 'path') {
        isWithin = shape.classed(CLASS.bar) ? $$.isWithinBar(that) : true;
    }
    return isWithin;
};

c3_chart_internal_fn.getInterpolate = function (d) {
    var $$ = this,
        interpolation = $$.isInterpolationType($$.config.spline_interpolation_type) ? $$.config.spline_interpolation_type : 'cardinal';
    return $$.isSplineType(d) ? interpolation : $$.isStepType(d) ? $$.config.line_step_type : "linear";
};

c3_chart_internal_fn.initLine = function () {
    var $$ = this;
    $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartLines);
};
c3_chart_internal_fn.updateTargetsForLine = function (targets) {
    var $$ = this,
        config = $$.config,
        mainLineUpdate,
        mainLineEnter,
        classChartLine = $$.classChartLine.bind($$),
        classLines = $$.classLines.bind($$),
        classAreas = $$.classAreas.bind($$),
        classCircles = $$.classCircles.bind($$),
        classFocus = $$.classFocus.bind($$);
    mainLineUpdate = $$.main.select('.' + CLASS.chartLines).selectAll('.' + CLASS.chartLine).data(targets).attr('class', function (d) {
        return classChartLine(d) + classFocus(d);
    });
    mainLineEnter = mainLineUpdate.enter().append('g').attr('class', classChartLine).style('opacity', 0).style("pointer-events", "none");
    // Lines for each data
    mainLineEnter.append('g').attr("class", classLines);
    // Areas
    mainLineEnter.append('g').attr('class', classAreas);
    // Circles for each data point on lines
    mainLineEnter.append('g').attr("class", function (d) {
        return $$.generateClass(CLASS.selectedCircles, d.id);
    });
    mainLineEnter.append('g').attr("class", classCircles).style("cursor", function (d) {
        return config.data_selection_isselectable(d) ? "pointer" : null;
    });
    // Update date for selected circles
    targets.forEach(function (t) {
        $$.main.selectAll('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(t.id)).selectAll('.' + CLASS.selectedCircle).each(function (d) {
            d.value = t.values[d.index].value;
        });
    });
    // MEMO: can not keep same color...
    //mainLineUpdate.exit().remove();
};
c3_chart_internal_fn.updateLine = function (durationForExit) {
    var $$ = this;
    $$.mainLine = $$.main.selectAll('.' + CLASS.lines).selectAll('.' + CLASS.line).data($$.lineData.bind($$));
    $$.mainLine.enter().append('path').attr('class', $$.classLine.bind($$)).style("stroke", $$.color);
    $$.mainLine.style("opacity", $$.initialOpacity.bind($$)).style('shape-rendering', function (d) {
        return $$.isStepType(d) ? 'crispEdges' : '';
    }).attr('transform', null);
    $$.mainLine.exit().transition().duration(durationForExit).style('opacity', 0).remove();
};
c3_chart_internal_fn.redrawLine = function (drawLine, withTransition) {
    return [(withTransition ? this.mainLine.transition(Math.random().toString()) : this.mainLine).attr("d", drawLine).style("stroke", this.color).style("opacity", 1)];
};
c3_chart_internal_fn.generateDrawLine = function (lineIndices, isSub) {
    var $$ = this,
        config = $$.config,
        line = $$.d3.svg.line(),
        getPoints = $$.generateGetLinePoints(lineIndices, isSub),
        yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale,
        xValue = function xValue(d) {
        return (isSub ? $$.subxx : $$.xx).call($$, d);
    },
        yValue = function yValue(d, i) {
        return config.data_groups.length > 0 ? getPoints(d, i)[0][1] : yScaleGetter.call($$, d.id)(d.value);
    };

    line = config.axis_rotated ? line.x(yValue).y(xValue) : line.x(xValue).y(yValue);
    if (!config.line_connectNull) {
        line = line.defined(function (d) {
            return d.value != null;
        });
    }
    return function (d) {
        var values = config.line_connectNull ? $$.filterRemoveNull(d.values) : d.values,
            x = isSub ? $$.x : $$.subX,
            y = yScaleGetter.call($$, d.id),
            x0 = 0,
            y0 = 0,
            path;
        if ($$.isLineType(d)) {
            if (config.data_regions[d.id]) {
                path = $$.lineWithRegions(values, x, y, config.data_regions[d.id]);
            } else {
                if ($$.isStepType(d)) {
                    values = $$.convertValuesToStep(values);
                }
                path = line.interpolate($$.getInterpolate(d))(values);
            }
        } else {
            if (values[0]) {
                x0 = x(values[0].x);
                y0 = y(values[0].value);
            }
            path = config.axis_rotated ? "M " + y0 + " " + x0 : "M " + x0 + " " + y0;
        }
        return path ? path : "M 0 0";
    };
};
c3_chart_internal_fn.generateGetLinePoints = function (lineIndices, isSub) {
    // partial duplication of generateGetBarPoints
    var $$ = this,
        config = $$.config,
        lineTargetsNum = lineIndices.__max__ + 1,
        x = $$.getShapeX(0, lineTargetsNum, lineIndices, !!isSub),
        y = $$.getShapeY(!!isSub),
        lineOffset = $$.getShapeOffset($$.isLineType, lineIndices, !!isSub),
        yScale = isSub ? $$.getSubYScale : $$.getYScale;
    return function (d, i) {
        var y0 = yScale.call($$, d.id)(0),
            offset = lineOffset(d, i) || y0,
            // offset is for stacked area chart
        posX = x(d),
            posY = y(d);
        // fix posY not to overflow opposite quadrant
        if (config.axis_rotated) {
            if (0 < d.value && posY < y0 || d.value < 0 && y0 < posY) {
                posY = y0;
            }
        }
        // 1 point that marks the line position
        return [[posX, posY - (y0 - offset)], [posX, posY - (y0 - offset)], // needed for compatibility
        [posX, posY - (y0 - offset)], // needed for compatibility
        [posX, posY - (y0 - offset)] // needed for compatibility
        ];
    };
};

c3_chart_internal_fn.lineWithRegions = function (d, x, y, _regions) {
    var $$ = this,
        config = $$.config,
        prev = -1,
        i,
        j,
        s = "M",
        sWithRegion,
        xp,
        yp,
        dx,
        dy,
        dd,
        diff,
        diffx2,
        xOffset = $$.isCategorized() ? 0.5 : 0,
        xValue,
        yValue,
        regions = [];

    function isWithinRegions(x, regions) {
        var i;
        for (i = 0; i < regions.length; i++) {
            if (regions[i].start < x && x <= regions[i].end) {
                return true;
            }
        }
        return false;
    }

    // Check start/end of regions
    if (isDefined(_regions)) {
        for (i = 0; i < _regions.length; i++) {
            regions[i] = {};
            if (isUndefined(_regions[i].start)) {
                regions[i].start = d[0].x;
            } else {
                regions[i].start = $$.isTimeSeries() ? $$.parseDate(_regions[i].start) : _regions[i].start;
            }
            if (isUndefined(_regions[i].end)) {
                regions[i].end = d[d.length - 1].x;
            } else {
                regions[i].end = $$.isTimeSeries() ? $$.parseDate(_regions[i].end) : _regions[i].end;
            }
        }
    }

    // Set scales
    xValue = config.axis_rotated ? function (d) {
        return y(d.value);
    } : function (d) {
        return x(d.x);
    };
    yValue = config.axis_rotated ? function (d) {
        return x(d.x);
    } : function (d) {
        return y(d.value);
    };

    // Define svg generator function for region
    function generateM(points) {
        return 'M' + points[0][0] + ' ' + points[0][1] + ' ' + points[1][0] + ' ' + points[1][1];
    }
    if ($$.isTimeSeries()) {
        sWithRegion = function sWithRegion(d0, d1, j, diff) {
            var x0 = d0.x.getTime(),
                x_diff = d1.x - d0.x,
                xv0 = new Date(x0 + x_diff * j),
                xv1 = new Date(x0 + x_diff * (j + diff)),
                points;
            if (config.axis_rotated) {
                points = [[y(yp(j)), x(xv0)], [y(yp(j + diff)), x(xv1)]];
            } else {
                points = [[x(xv0), y(yp(j))], [x(xv1), y(yp(j + diff))]];
            }
            return generateM(points);
        };
    } else {
        sWithRegion = function sWithRegion(d0, d1, j, diff) {
            var points;
            if (config.axis_rotated) {
                points = [[y(yp(j), true), x(xp(j))], [y(yp(j + diff), true), x(xp(j + diff))]];
            } else {
                points = [[x(xp(j), true), y(yp(j))], [x(xp(j + diff), true), y(yp(j + diff))]];
            }
            return generateM(points);
        };
    }

    // Generate
    for (i = 0; i < d.length; i++) {

        // Draw as normal
        if (isUndefined(regions) || !isWithinRegions(d[i].x, regions)) {
            s += " " + xValue(d[i]) + " " + yValue(d[i]);
        }
        // Draw with region // TODO: Fix for horizotal charts
        else {
                xp = $$.getScale(d[i - 1].x + xOffset, d[i].x + xOffset, $$.isTimeSeries());
                yp = $$.getScale(d[i - 1].value, d[i].value);

                dx = x(d[i].x) - x(d[i - 1].x);
                dy = y(d[i].value) - y(d[i - 1].value);
                dd = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
                diff = 2 / dd;
                diffx2 = diff * 2;

                for (j = diff; j <= 1; j += diffx2) {
                    s += sWithRegion(d[i - 1], d[i], j, diff);
                }
            }
        prev = d[i].x;
    }

    return s;
};

c3_chart_internal_fn.updateArea = function (durationForExit) {
    var $$ = this,
        d3 = $$.d3;
    $$.mainArea = $$.main.selectAll('.' + CLASS.areas).selectAll('.' + CLASS.area).data($$.lineData.bind($$));
    $$.mainArea.enter().append('path').attr("class", $$.classArea.bind($$)).style("fill", $$.color).style("opacity", function () {
        $$.orgAreaOpacity = +d3.select(this).style('opacity');return 0;
    });
    $$.mainArea.style("opacity", $$.orgAreaOpacity);
    $$.mainArea.exit().transition().duration(durationForExit).style('opacity', 0).remove();
};
c3_chart_internal_fn.redrawArea = function (drawArea, withTransition) {
    return [(withTransition ? this.mainArea.transition(Math.random().toString()) : this.mainArea).attr("d", drawArea).style("fill", this.color).style("opacity", this.orgAreaOpacity)];
};
c3_chart_internal_fn.generateDrawArea = function (areaIndices, isSub) {
    var $$ = this,
        config = $$.config,
        area = $$.d3.svg.area(),
        getPoints = $$.generateGetAreaPoints(areaIndices, isSub),
        yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale,
        xValue = function xValue(d) {
        return (isSub ? $$.subxx : $$.xx).call($$, d);
    },
        value0 = function value0(d, i) {
        return config.data_groups.length > 0 ? getPoints(d, i)[0][1] : yScaleGetter.call($$, d.id)($$.getAreaBaseValue(d.id));
    },
        value1 = function value1(d, i) {
        return config.data_groups.length > 0 ? getPoints(d, i)[1][1] : yScaleGetter.call($$, d.id)(d.value);
    };

    area = config.axis_rotated ? area.x0(value0).x1(value1).y(xValue) : area.x(xValue).y0(config.area_above ? 0 : value0).y1(value1);
    if (!config.line_connectNull) {
        area = area.defined(function (d) {
            return d.value !== null;
        });
    }

    return function (d) {
        var values = config.line_connectNull ? $$.filterRemoveNull(d.values) : d.values,
            x0 = 0,
            y0 = 0,
            path;
        if ($$.isAreaType(d)) {
            if ($$.isStepType(d)) {
                values = $$.convertValuesToStep(values);
            }
            path = area.interpolate($$.getInterpolate(d))(values);
        } else {
            if (values[0]) {
                x0 = $$.x(values[0].x);
                y0 = $$.getYScale(d.id)(values[0].value);
            }
            path = config.axis_rotated ? "M " + y0 + " " + x0 : "M " + x0 + " " + y0;
        }
        return path ? path : "M 0 0";
    };
};
c3_chart_internal_fn.getAreaBaseValue = function () {
    return 0;
};
c3_chart_internal_fn.generateGetAreaPoints = function (areaIndices, isSub) {
    // partial duplication of generateGetBarPoints
    var $$ = this,
        config = $$.config,
        areaTargetsNum = areaIndices.__max__ + 1,
        x = $$.getShapeX(0, areaTargetsNum, areaIndices, !!isSub),
        y = $$.getShapeY(!!isSub),
        areaOffset = $$.getShapeOffset($$.isAreaType, areaIndices, !!isSub),
        yScale = isSub ? $$.getSubYScale : $$.getYScale;
    return function (d, i) {
        var y0 = yScale.call($$, d.id)(0),
            offset = areaOffset(d, i) || y0,
            // offset is for stacked area chart
        posX = x(d),
            posY = y(d);
        // fix posY not to overflow opposite quadrant
        if (config.axis_rotated) {
            if (0 < d.value && posY < y0 || d.value < 0 && y0 < posY) {
                posY = y0;
            }
        }
        // 1 point that marks the area position
        return [[posX, offset], [posX, posY - (y0 - offset)], [posX, posY - (y0 - offset)], // needed for compatibility
        [posX, offset] // needed for compatibility
        ];
    };
};

c3_chart_internal_fn.updateCircle = function () {
    var $$ = this;
    $$.mainCircle = $$.main.selectAll('.' + CLASS.circles).selectAll('.' + CLASS.circle).data($$.lineOrScatterData.bind($$));
    $$.mainCircle.enter().append("circle").attr("class", $$.classCircle.bind($$)).attr("r", $$.pointR.bind($$)).style("fill", $$.color);
    $$.mainCircle.style("opacity", $$.initialOpacityForCircle.bind($$));
    $$.mainCircle.exit().remove();
};
c3_chart_internal_fn.redrawCircle = function (cx, cy, withTransition) {
    var selectedCircles = this.main.selectAll('.' + CLASS.selectedCircle);
    return [(withTransition ? this.mainCircle.transition(Math.random().toString()) : this.mainCircle).style('opacity', this.opacityForCircle.bind(this)).style("fill", this.color).attr("cx", cx).attr("cy", cy), (withTransition ? selectedCircles.transition(Math.random().toString()) : selectedCircles).attr("cx", cx).attr("cy", cy)];
};
c3_chart_internal_fn.circleX = function (d) {
    return d.x || d.x === 0 ? this.x(d.x) : null;
};
c3_chart_internal_fn.updateCircleY = function () {
    var $$ = this,
        lineIndices,
        getPoints;
    if ($$.config.data_groups.length > 0) {
        lineIndices = $$.getShapeIndices($$.isLineType), getPoints = $$.generateGetLinePoints(lineIndices);
        $$.circleY = function (d, i) {
            return getPoints(d, i)[0][1];
        };
    } else {
        $$.circleY = function (d) {
            return $$.getYScale(d.id)(d.value);
        };
    }
};
c3_chart_internal_fn.getCircles = function (i, id) {
    var $$ = this;
    return (id ? $$.main.selectAll('.' + CLASS.circles + $$.getTargetSelectorSuffix(id)) : $$.main).selectAll('.' + CLASS.circle + (isValue(i) ? '-' + i : ''));
};
c3_chart_internal_fn.expandCircles = function (i, id, reset) {
    var $$ = this,
        r = $$.pointExpandedR.bind($$);
    if (reset) {
        $$.unexpandCircles();
    }
    $$.getCircles(i, id).classed(CLASS.EXPANDED, true).attr('r', r);
};
c3_chart_internal_fn.unexpandCircles = function (i) {
    var $$ = this,
        r = $$.pointR.bind($$);
    $$.getCircles(i).filter(function () {
        return $$.d3.select(this).classed(CLASS.EXPANDED);
    }).classed(CLASS.EXPANDED, false).attr('r', r);
};
c3_chart_internal_fn.pointR = function (d) {
    var $$ = this,
        config = $$.config;
    return $$.isStepType(d) ? 0 : isFunction(config.point_r) ? config.point_r(d) : config.point_r;
};
c3_chart_internal_fn.pointExpandedR = function (d) {
    var $$ = this,
        config = $$.config;
    return config.point_focus_expand_enabled ? config.point_focus_expand_r ? config.point_focus_expand_r : $$.pointR(d) * 1.75 : $$.pointR(d);
};
c3_chart_internal_fn.pointSelectR = function (d) {
    var $$ = this,
        config = $$.config;
    return isFunction(config.point_select_r) ? config.point_select_r(d) : config.point_select_r ? config.point_select_r : $$.pointR(d) * 4;
};
c3_chart_internal_fn.isWithinCircle = function (that, r) {
    var d3 = this.d3,
        mouse = d3.mouse(that),
        d3_this = d3.select(that),
        cx = +d3_this.attr("cx"),
        cy = +d3_this.attr("cy");
    return Math.sqrt(Math.pow(cx - mouse[0], 2) + Math.pow(cy - mouse[1], 2)) < r;
};
c3_chart_internal_fn.isWithinStep = function (that, y) {
    return Math.abs(y - this.d3.mouse(that)[1]) < 30;
};

c3_chart_internal_fn.getCurrentWidth = function () {
    var $$ = this,
        config = $$.config;
    return config.size_width ? config.size_width : $$.getParentWidth();
};
c3_chart_internal_fn.getCurrentHeight = function () {
    var $$ = this,
        config = $$.config,
        h = config.size_height ? config.size_height : $$.getParentHeight();
    return h > 0 ? h : 320 / ($$.hasType('gauge') && !config.gauge_fullCircle ? 2 : 1);
};
c3_chart_internal_fn.getCurrentPaddingTop = function () {
    var $$ = this,
        config = $$.config,
        padding = isValue(config.padding_top) ? config.padding_top : 0;
    if ($$.title && $$.title.node()) {
        padding += $$.getTitlePadding();
    }
    return padding;
};
c3_chart_internal_fn.getCurrentPaddingBottom = function () {
    var config = this.config;
    return isValue(config.padding_bottom) ? config.padding_bottom : 0;
};
c3_chart_internal_fn.getCurrentPaddingLeft = function (withoutRecompute) {
    var $$ = this,
        config = $$.config;
    if (isValue(config.padding_left)) {
        return config.padding_left;
    } else if (config.axis_rotated) {
        return !config.axis_x_show ? 1 : Math.max(ceil10($$.getAxisWidthByAxisId('x', withoutRecompute)), 40);
    } else if (!config.axis_y_show || config.axis_y_inner) {
        // && !config.axis_rotated
        return $$.axis.getYAxisLabelPosition().isOuter ? 30 : 1;
    } else {
        return ceil10($$.getAxisWidthByAxisId('y', withoutRecompute));
    }
};
c3_chart_internal_fn.getCurrentPaddingRight = function () {
    var $$ = this,
        config = $$.config,
        defaultPadding = 10,
        legendWidthOnRight = $$.isLegendRight ? $$.getLegendWidth() + 20 : 0;
    if (isValue(config.padding_right)) {
        return config.padding_right + 1; // 1 is needed not to hide tick line
    } else if (config.axis_rotated) {
        return defaultPadding + legendWidthOnRight;
    } else if (!config.axis_y2_show || config.axis_y2_inner) {
        // && !config.axis_rotated
        return 2 + legendWidthOnRight + ($$.axis.getY2AxisLabelPosition().isOuter ? 20 : 0);
    } else {
        return ceil10($$.getAxisWidthByAxisId('y2')) + legendWidthOnRight;
    }
};

c3_chart_internal_fn.getParentRectValue = function (key) {
    var parent = this.selectChart.node(),
        v;
    while (parent && parent.tagName !== 'BODY') {
        try {
            v = parent.getBoundingClientRect()[key];
        } catch (e) {
            if (key === 'width') {
                // In IE in certain cases getBoundingClientRect
                // will cause an "unspecified error"
                v = parent.offsetWidth;
            }
        }
        if (v) {
            break;
        }
        parent = parent.parentNode;
    }
    return v;
};
c3_chart_internal_fn.getParentWidth = function () {
    return this.getParentRectValue('width');
};
c3_chart_internal_fn.getParentHeight = function () {
    var h = this.selectChart.style('height');
    return h.indexOf('px') > 0 ? +h.replace('px', '') : 0;
};

c3_chart_internal_fn.getSvgLeft = function (withoutRecompute) {
    var $$ = this,
        config = $$.config,
        hasLeftAxisRect = config.axis_rotated || !config.axis_rotated && !config.axis_y_inner,
        leftAxisClass = config.axis_rotated ? CLASS.axisX : CLASS.axisY,
        leftAxis = $$.main.select('.' + leftAxisClass).node(),
        svgRect = leftAxis && hasLeftAxisRect ? leftAxis.getBoundingClientRect() : { right: 0 },
        chartRect = $$.selectChart.node().getBoundingClientRect(),
        hasArc = $$.hasArcType(),
        svgLeft = svgRect.right - chartRect.left - (hasArc ? 0 : $$.getCurrentPaddingLeft(withoutRecompute));
    return svgLeft > 0 ? svgLeft : 0;
};

c3_chart_internal_fn.getAxisWidthByAxisId = function (id, withoutRecompute) {
    var $$ = this,
        position = $$.axis.getLabelPositionById(id);
    return $$.axis.getMaxTickWidth(id, withoutRecompute) + (position.isInner ? 20 : 40);
};
c3_chart_internal_fn.getHorizontalAxisHeight = function (axisId) {
    var $$ = this,
        config = $$.config,
        h = 30;
    if (axisId === 'x' && !config.axis_x_show) {
        return 8;
    }
    if (axisId === 'x' && config.axis_x_height) {
        return config.axis_x_height;
    }
    if (axisId === 'y' && !config.axis_y_show) {
        return config.legend_show && !$$.isLegendRight && !$$.isLegendInset ? 10 : 1;
    }
    if (axisId === 'y2' && !config.axis_y2_show) {
        return $$.rotated_padding_top;
    }
    // Calculate x axis height when tick rotated
    if (axisId === 'x' && !config.axis_rotated && config.axis_x_tick_rotate) {
        h = 30 + $$.axis.getMaxTickWidth(axisId) * Math.cos(Math.PI * (90 - config.axis_x_tick_rotate) / 180);
    }
    // Calculate y axis height when tick rotated
    if (axisId === 'y' && config.axis_rotated && config.axis_y_tick_rotate) {
        h = 30 + $$.axis.getMaxTickWidth(axisId) * Math.cos(Math.PI * (90 - config.axis_y_tick_rotate) / 180);
    }
    return h + ($$.axis.getLabelPositionById(axisId).isInner ? 0 : 10) + (axisId === 'y2' ? -10 : 0);
};

c3_chart_internal_fn.getEventRectWidth = function () {
    return Math.max(0, this.xAxis.tickInterval());
};

c3_chart_internal_fn.initBrush = function () {
    var $$ = this,
        d3 = $$.d3;
    $$.brush = d3.svg.brush().on("brush", function () {
        $$.redrawForBrush();
    });
    $$.brush.update = function () {
        if ($$.context) {
            $$.context.select('.' + CLASS.brush).call(this);
        }
        return this;
    };
    $$.brush.scale = function (scale) {
        return $$.config.axis_rotated ? this.y(scale) : this.x(scale);
    };
};
c3_chart_internal_fn.initSubchart = function () {
    var $$ = this,
        config = $$.config,
        context = $$.context = $$.svg.append("g").attr("transform", $$.getTranslate('context')),
        visibility = config.subchart_show ? 'visible' : 'hidden';

    context.style('visibility', visibility);

    // Define g for chart area
    context.append('g').attr("clip-path", $$.clipPathForSubchart).attr('class', CLASS.chart);

    // Define g for bar chart area
    context.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartBars);

    // Define g for line chart area
    context.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartLines);

    // Add extent rect for Brush
    context.append("g").attr("clip-path", $$.clipPath).attr("class", CLASS.brush).call($$.brush);

    // ATTENTION: This must be called AFTER chart added
    // Add Axis
    $$.axes.subx = context.append("g").attr("class", CLASS.axisX).attr("transform", $$.getTranslate('subx')).attr("clip-path", config.axis_rotated ? "" : $$.clipPathForXAxis).style("visibility", config.subchart_axis_x_show ? visibility : 'hidden');
};
c3_chart_internal_fn.updateTargetsForSubchart = function (targets) {
    var $$ = this,
        context = $$.context,
        config = $$.config,
        contextLineEnter,
        contextLineUpdate,
        contextBarEnter,
        contextBarUpdate,
        classChartBar = $$.classChartBar.bind($$),
        classBars = $$.classBars.bind($$),
        classChartLine = $$.classChartLine.bind($$),
        classLines = $$.classLines.bind($$),
        classAreas = $$.classAreas.bind($$);

    if (config.subchart_show) {
        //-- Bar --//
        contextBarUpdate = context.select('.' + CLASS.chartBars).selectAll('.' + CLASS.chartBar).data(targets).attr('class', classChartBar);
        contextBarEnter = contextBarUpdate.enter().append('g').style('opacity', 0).attr('class', classChartBar);
        // Bars for each data
        contextBarEnter.append('g').attr("class", classBars);

        //-- Line --//
        contextLineUpdate = context.select('.' + CLASS.chartLines).selectAll('.' + CLASS.chartLine).data(targets).attr('class', classChartLine);
        contextLineEnter = contextLineUpdate.enter().append('g').style('opacity', 0).attr('class', classChartLine);
        // Lines for each data
        contextLineEnter.append("g").attr("class", classLines);
        // Area
        contextLineEnter.append("g").attr("class", classAreas);

        //-- Brush --//
        context.selectAll('.' + CLASS.brush + ' rect').attr(config.axis_rotated ? "width" : "height", config.axis_rotated ? $$.width2 : $$.height2);
    }
};
c3_chart_internal_fn.updateBarForSubchart = function (durationForExit) {
    var $$ = this;
    $$.contextBar = $$.context.selectAll('.' + CLASS.bars).selectAll('.' + CLASS.bar).data($$.barData.bind($$));
    $$.contextBar.enter().append('path').attr("class", $$.classBar.bind($$)).style("stroke", 'none').style("fill", $$.color);
    $$.contextBar.style("opacity", $$.initialOpacity.bind($$));
    $$.contextBar.exit().transition().duration(durationForExit).style('opacity', 0).remove();
};
c3_chart_internal_fn.redrawBarForSubchart = function (drawBarOnSub, withTransition, duration) {
    (withTransition ? this.contextBar.transition(Math.random().toString()).duration(duration) : this.contextBar).attr('d', drawBarOnSub).style('opacity', 1);
};
c3_chart_internal_fn.updateLineForSubchart = function (durationForExit) {
    var $$ = this;
    $$.contextLine = $$.context.selectAll('.' + CLASS.lines).selectAll('.' + CLASS.line).data($$.lineData.bind($$));
    $$.contextLine.enter().append('path').attr('class', $$.classLine.bind($$)).style('stroke', $$.color);
    $$.contextLine.style("opacity", $$.initialOpacity.bind($$));
    $$.contextLine.exit().transition().duration(durationForExit).style('opacity', 0).remove();
};
c3_chart_internal_fn.redrawLineForSubchart = function (drawLineOnSub, withTransition, duration) {
    (withTransition ? this.contextLine.transition(Math.random().toString()).duration(duration) : this.contextLine).attr("d", drawLineOnSub).style('opacity', 1);
};
c3_chart_internal_fn.updateAreaForSubchart = function (durationForExit) {
    var $$ = this,
        d3 = $$.d3;
    $$.contextArea = $$.context.selectAll('.' + CLASS.areas).selectAll('.' + CLASS.area).data($$.lineData.bind($$));
    $$.contextArea.enter().append('path').attr("class", $$.classArea.bind($$)).style("fill", $$.color).style("opacity", function () {
        $$.orgAreaOpacity = +d3.select(this).style('opacity');return 0;
    });
    $$.contextArea.style("opacity", 0);
    $$.contextArea.exit().transition().duration(durationForExit).style('opacity', 0).remove();
};
c3_chart_internal_fn.redrawAreaForSubchart = function (drawAreaOnSub, withTransition, duration) {
    (withTransition ? this.contextArea.transition(Math.random().toString()).duration(duration) : this.contextArea).attr("d", drawAreaOnSub).style("fill", this.color).style("opacity", this.orgAreaOpacity);
};
c3_chart_internal_fn.redrawSubchart = function (withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices) {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config,
        drawAreaOnSub,
        drawBarOnSub,
        drawLineOnSub;

    $$.context.style('visibility', config.subchart_show ? 'visible' : 'hidden');

    // subchart
    if (config.subchart_show) {
        // reflect main chart to extent on subchart if zoomed
        if (d3.event && d3.event.type === 'zoom') {
            $$.brush.extent($$.x.orgDomain()).update();
        }
        // update subchart elements if needed
        if (withSubchart) {

            // extent rect
            if (!$$.brush.empty()) {
                $$.brush.extent($$.x.orgDomain()).update();
            }
            // setup drawer - MEMO: this must be called after axis updated
            drawAreaOnSub = $$.generateDrawArea(areaIndices, true);
            drawBarOnSub = $$.generateDrawBar(barIndices, true);
            drawLineOnSub = $$.generateDrawLine(lineIndices, true);

            $$.updateBarForSubchart(duration);
            $$.updateLineForSubchart(duration);
            $$.updateAreaForSubchart(duration);

            $$.redrawBarForSubchart(drawBarOnSub, duration, duration);
            $$.redrawLineForSubchart(drawLineOnSub, duration, duration);
            $$.redrawAreaForSubchart(drawAreaOnSub, duration, duration);
        }
    }
};
c3_chart_internal_fn.redrawForBrush = function () {
    var $$ = this,
        x = $$.x;
    $$.redraw({
        withTransition: false,
        withY: $$.config.zoom_rescale,
        withSubchart: false,
        withUpdateXDomain: true,
        withDimension: false
    });
    $$.config.subchart_onbrush.call($$.api, x.orgDomain());
};
c3_chart_internal_fn.transformContext = function (withTransition, transitions) {
    var $$ = this,
        subXAxis;
    if (transitions && transitions.axisSubX) {
        subXAxis = transitions.axisSubX;
    } else {
        subXAxis = $$.context.select('.' + CLASS.axisX);
        if (withTransition) {
            subXAxis = subXAxis.transition();
        }
    }
    $$.context.attr("transform", $$.getTranslate('context'));
    subXAxis.attr("transform", $$.getTranslate('subx'));
};
c3_chart_internal_fn.getDefaultExtent = function () {
    var $$ = this,
        config = $$.config,
        extent = isFunction(config.axis_x_extent) ? config.axis_x_extent($$.getXDomain($$.data.targets)) : config.axis_x_extent;
    if ($$.isTimeSeries()) {
        extent = [$$.parseDate(extent[0]), $$.parseDate(extent[1])];
    }
    return extent;
};

c3_chart_internal_fn.initText = function () {
    var $$ = this;
    $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartTexts);
    $$.mainText = $$.d3.selectAll([]);
};
c3_chart_internal_fn.updateTargetsForText = function (targets) {
    var $$ = this,
        mainTextUpdate,
        mainTextEnter,
        classChartText = $$.classChartText.bind($$),
        classTexts = $$.classTexts.bind($$),
        classFocus = $$.classFocus.bind($$);
    mainTextUpdate = $$.main.select('.' + CLASS.chartTexts).selectAll('.' + CLASS.chartText).data(targets).attr('class', function (d) {
        return classChartText(d) + classFocus(d);
    });
    mainTextEnter = mainTextUpdate.enter().append('g').attr('class', classChartText).style('opacity', 0).style("pointer-events", "none");
    mainTextEnter.append('g').attr('class', classTexts);
};
c3_chart_internal_fn.updateText = function (durationForExit) {
    var $$ = this,
        config = $$.config,
        barOrLineData = $$.barOrLineData.bind($$),
        classText = $$.classText.bind($$);
    $$.mainText = $$.main.selectAll('.' + CLASS.texts).selectAll('.' + CLASS.text).data(barOrLineData);
    $$.mainText.enter().append('text').attr("class", classText).attr('text-anchor', function (d) {
        return config.axis_rotated ? d.value < 0 ? 'end' : 'start' : 'middle';
    }).style("stroke", 'none').style("fill", function (d) {
        return $$.color(d);
    }).style("fill-opacity", 0);
    $$.mainText.text(function (d, i, j) {
        return $$.dataLabelFormat(d.id)(d.value, d.id, i, j);
    });
    $$.mainText.exit().transition().duration(durationForExit).style('fill-opacity', 0).remove();
};
c3_chart_internal_fn.redrawText = function (xForText, yForText, forFlow, withTransition) {
    return [(withTransition ? this.mainText.transition() : this.mainText).attr('x', xForText).attr('y', yForText).style("fill", this.color).style("fill-opacity", forFlow ? 0 : this.opacityForText.bind(this))];
};
c3_chart_internal_fn.getTextRect = function (text, cls, element) {
    var dummy = this.d3.select('body').append('div').classed('c3', true),
        svg = dummy.append("svg").style('visibility', 'hidden').style('position', 'fixed').style('top', 0).style('left', 0),
        font = this.d3.select(element).style('font'),
        rect;
    svg.selectAll('.dummy').data([text]).enter().append('text').classed(cls ? cls : "", true).style('font', font).text(text).each(function () {
        rect = this.getBoundingClientRect();
    });
    dummy.remove();
    return rect;
};
c3_chart_internal_fn.generateXYForText = function (areaIndices, barIndices, lineIndices, forX) {
    var $$ = this,
        getAreaPoints = $$.generateGetAreaPoints(areaIndices, false),
        getBarPoints = $$.generateGetBarPoints(barIndices, false),
        getLinePoints = $$.generateGetLinePoints(lineIndices, false),
        getter = forX ? $$.getXForText : $$.getYForText;
    return function (d, i) {
        var getPoints = $$.isAreaType(d) ? getAreaPoints : $$.isBarType(d) ? getBarPoints : getLinePoints;
        return getter.call($$, getPoints(d, i), d, this);
    };
};
c3_chart_internal_fn.getXForText = function (points, d, textElement) {
    var $$ = this,
        box = textElement.getBoundingClientRect(),
        xPos,
        padding;
    if ($$.config.axis_rotated) {
        padding = $$.isBarType(d) ? 4 : 6;
        xPos = points[2][1] + padding * (d.value < 0 ? -1 : 1);
    } else {
        xPos = $$.hasType('bar') ? (points[2][0] + points[0][0]) / 2 : points[0][0];
    }
    // show labels regardless of the domain if value is null
    if (d.value === null) {
        if (xPos > $$.width) {
            xPos = $$.width - box.width;
        } else if (xPos < 0) {
            xPos = 4;
        }
    }
    return xPos;
};
c3_chart_internal_fn.getYForText = function (points, d, textElement) {
    var $$ = this,
        box = textElement.getBoundingClientRect(),
        yPos;
    if ($$.config.axis_rotated) {
        yPos = (points[0][0] + points[2][0] + box.height * 0.6) / 2;
    } else {
        yPos = points[2][1];
        if (d.value < 0 || d.value === 0 && !$$.hasPositiveValue) {
            yPos += box.height;
            if ($$.isBarType(d) && $$.isSafari()) {
                yPos -= 3;
            } else if (!$$.isBarType(d) && $$.isChrome()) {
                yPos += 3;
            }
        } else {
            yPos += $$.isBarType(d) ? -3 : -6;
        }
    }
    // show labels regardless of the domain if value is null
    if (d.value === null && !$$.config.axis_rotated) {
        if (yPos < box.height) {
            yPos = box.height;
        } else if (yPos > this.height) {
            yPos = this.height - 4;
        }
    }
    return yPos;
};

c3_chart_internal_fn.initTitle = function () {
    var $$ = this;
    $$.title = $$.svg.append("text").text($$.config.title_text).attr("class", $$.CLASS.title);
};
c3_chart_internal_fn.redrawTitle = function () {
    var $$ = this;
    $$.title.attr("x", $$.xForTitle.bind($$)).attr("y", $$.yForTitle.bind($$));
};
c3_chart_internal_fn.xForTitle = function () {
    var $$ = this,
        config = $$.config,
        position = config.title_position || 'left',
        x;
    if (position.indexOf('right') >= 0) {
        x = $$.currentWidth - $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).width - config.title_padding.right;
    } else if (position.indexOf('center') >= 0) {
        x = ($$.currentWidth - $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).width) / 2;
    } else {
        // left
        x = config.title_padding.left;
    }
    return x;
};
c3_chart_internal_fn.yForTitle = function () {
    var $$ = this;
    return $$.config.title_padding.top + $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).height;
};
c3_chart_internal_fn.getTitlePadding = function () {
    var $$ = this;
    return $$.yForTitle() + $$.config.title_padding.bottom;
};

c3_chart_internal_fn.initTooltip = function () {
    var $$ = this,
        config = $$.config,
        i;
    $$.tooltip = $$.selectChart.style("position", "relative").append("div").attr('class', CLASS.tooltipContainer).style("position", "absolute").style("pointer-events", "none").style("display", "none");
    // Show tooltip if needed
    if (config.tooltip_init_show) {
        if ($$.isTimeSeries() && isString(config.tooltip_init_x)) {
            config.tooltip_init_x = $$.parseDate(config.tooltip_init_x);
            for (i = 0; i < $$.data.targets[0].values.length; i++) {
                if ($$.data.targets[0].values[i].x - config.tooltip_init_x === 0) {
                    break;
                }
            }
            config.tooltip_init_x = i;
        }
        $$.tooltip.html(config.tooltip_contents.call($$, $$.data.targets.map(function (d) {
            return $$.addName(d.values[config.tooltip_init_x]);
        }), $$.axis.getXAxisTickFormat(), $$.getYFormat($$.hasArcType()), $$.color));
        $$.tooltip.style("top", config.tooltip_init_position.top).style("left", config.tooltip_init_position.left).style("display", "block");
    }
};
c3_chart_internal_fn.getTooltipSortFunction = function () {
    var $$ = this,
        config = $$.config;

    if (config.data_groups.length === 0 || config.tooltip_order !== undefined) {
        // if data are not grouped or if an order is specified
        // for the tooltip values we sort them by their values

        var order = config.tooltip_order;
        if (order === undefined) {
            order = config.data_order;
        }

        var valueOf = function valueOf(obj) {
            return obj ? obj.value : null;
        };

        // if data are not grouped, we sort them by their value
        if (isString(order) && order.toLowerCase() === 'asc') {
            return function (a, b) {
                return valueOf(a) - valueOf(b);
            };
        } else if (isString(order) && order.toLowerCase() === 'desc') {
            return function (a, b) {
                return valueOf(b) - valueOf(a);
            };
        } else if (isFunction(order)) {

            // if the function is from data_order we need
            // to wrap the returned function in order to format
            // the sorted value to the expected format

            var sortFunction = order;

            if (config.tooltip_order === undefined) {
                sortFunction = function sortFunction(a, b) {
                    return order(a ? {
                        id: a.id,
                        values: [a]
                    } : null, b ? {
                        id: b.id,
                        values: [b]
                    } : null);
                };
            }

            return sortFunction;
        } else if (isArray(order)) {
            return function (a, b) {
                return order.indexOf(a.id) - order.indexOf(b.id);
            };
        }
    } else {
        // if data are grouped, we follow the order of grouped targets
        var ids = $$.orderTargets($$.data.targets).map(function (i) {
            return i.id;
        });

        // if it was either asc or desc we need to invert the order
        // returned by orderTargets
        if ($$.isOrderAsc() || $$.isOrderDesc()) {
            ids = ids.reverse();
        }

        return function (a, b) {
            return ids.indexOf(a.id) - ids.indexOf(b.id);
        };
    }
};
c3_chart_internal_fn.getTooltipContent = function (d, defaultTitleFormat, defaultValueFormat, color) {
    var $$ = this,
        config = $$.config,
        titleFormat = config.tooltip_format_title || defaultTitleFormat,
        nameFormat = config.tooltip_format_name || function (name) {
        return name;
    },
        valueFormat = config.tooltip_format_value || defaultValueFormat,
        text,
        i,
        title,
        value,
        name,
        bgcolor;

    var tooltipSortFunction = this.getTooltipSortFunction();
    if (tooltipSortFunction) {
        d.sort(tooltipSortFunction);
    }

    for (i = 0; i < d.length; i++) {
        if (!(d[i] && (d[i].value || d[i].value === 0))) {
            continue;
        }

        if (!text) {
            title = sanitise(titleFormat ? titleFormat(d[i].x) : d[i].x);
            text = "<table class='" + $$.CLASS.tooltip + "'>" + (title || title === 0 ? "<tr><th colspan='2'>" + title + "</th></tr>" : "");
        }

        value = sanitise(valueFormat(d[i].value, d[i].ratio, d[i].id, d[i].index, d));
        if (value !== undefined) {
            // Skip elements when their name is set to null
            if (d[i].name === null) {
                continue;
            }
            name = sanitise(nameFormat(d[i].name, d[i].ratio, d[i].id, d[i].index));
            bgcolor = $$.levelColor ? $$.levelColor(d[i].value) : color(d[i].id);

            text += "<tr class='" + $$.CLASS.tooltipName + "-" + $$.getTargetSelectorSuffix(d[i].id) + "'>";
            text += "<td class='name'><span style='background-color:" + bgcolor + "'></span>" + name + "</td>";
            text += "<td class='value'>" + value + "</td>";
            text += "</tr>";
        }
    }
    return text + "</table>";
};
c3_chart_internal_fn.tooltipPosition = function (dataToShow, tWidth, tHeight, element) {
    var $$ = this,
        config = $$.config,
        d3 = $$.d3;
    var svgLeft, tooltipLeft, tooltipRight, tooltipTop, chartRight;
    var forArc = $$.hasArcType(),
        mouse = d3.mouse(element);
    // Determin tooltip position
    if (forArc) {
        tooltipLeft = ($$.width - ($$.isLegendRight ? $$.getLegendWidth() : 0)) / 2 + mouse[0];
        tooltipTop = $$.height / 2 + mouse[1] + 20;
    } else {
        svgLeft = $$.getSvgLeft(true);
        if (config.axis_rotated) {
            tooltipLeft = svgLeft + mouse[0] + 100;
            tooltipRight = tooltipLeft + tWidth;
            chartRight = $$.currentWidth - $$.getCurrentPaddingRight();
            tooltipTop = $$.x(dataToShow[0].x) + 20;
        } else {
            tooltipLeft = svgLeft + $$.getCurrentPaddingLeft(true) + $$.x(dataToShow[0].x) + 20;
            tooltipRight = tooltipLeft + tWidth;
            chartRight = svgLeft + $$.currentWidth - $$.getCurrentPaddingRight();
            tooltipTop = mouse[1] + 15;
        }

        if (tooltipRight > chartRight) {
            // 20 is needed for Firefox to keep tooltip width
            tooltipLeft -= tooltipRight - chartRight + 20;
        }
        if (tooltipTop + tHeight > $$.currentHeight) {
            tooltipTop -= tHeight + 30;
        }
    }
    if (tooltipTop < 0) {
        tooltipTop = 0;
    }
    return { top: tooltipTop, left: tooltipLeft };
};
c3_chart_internal_fn.showTooltip = function (selectedData, element) {
    var $$ = this,
        config = $$.config;
    var tWidth, tHeight, position;
    var forArc = $$.hasArcType(),
        dataToShow = selectedData.filter(function (d) {
        return d && isValue(d.value);
    }),
        positionFunction = config.tooltip_position || c3_chart_internal_fn.tooltipPosition;
    if (dataToShow.length === 0 || !config.tooltip_show) {
        return;
    }
    $$.tooltip.html(config.tooltip_contents.call($$, selectedData, $$.axis.getXAxisTickFormat(), $$.getYFormat(forArc), $$.color)).style("display", "block");

    // Get tooltip dimensions
    tWidth = $$.tooltip.property('offsetWidth');
    tHeight = $$.tooltip.property('offsetHeight');

    position = positionFunction.call(this, dataToShow, tWidth, tHeight, element);
    // Set tooltip
    $$.tooltip.style("top", position.top + "px").style("left", position.left + 'px');
};
c3_chart_internal_fn.hideTooltip = function () {
    this.tooltip.style("display", "none");
};

c3_chart_internal_fn.setTargetType = function (targetIds, type) {
    var $$ = this,
        config = $$.config;
    $$.mapToTargetIds(targetIds).forEach(function (id) {
        $$.withoutFadeIn[id] = type === config.data_types[id];
        config.data_types[id] = type;
    });
    if (!targetIds) {
        config.data_type = type;
    }
};
c3_chart_internal_fn.hasType = function (type, targets) {
    var $$ = this,
        types = $$.config.data_types,
        has = false;
    targets = targets || $$.data.targets;
    if (targets && targets.length) {
        targets.forEach(function (target) {
            var t = types[target.id];
            if (t && t.indexOf(type) >= 0 || !t && type === 'line') {
                has = true;
            }
        });
    } else if (Object.keys(types).length) {
        Object.keys(types).forEach(function (id) {
            if (types[id] === type) {
                has = true;
            }
        });
    } else {
        has = $$.config.data_type === type;
    }
    return has;
};
c3_chart_internal_fn.hasArcType = function (targets) {
    return this.hasType('pie', targets) || this.hasType('donut', targets) || this.hasType('gauge', targets);
};
c3_chart_internal_fn.isLineType = function (d) {
    var config = this.config,
        id = isString(d) ? d : d.id;
    return !config.data_types[id] || ['line', 'spline', 'area', 'area-spline', 'step', 'area-step'].indexOf(config.data_types[id]) >= 0;
};
c3_chart_internal_fn.isStepType = function (d) {
    var id = isString(d) ? d : d.id;
    return ['step', 'area-step'].indexOf(this.config.data_types[id]) >= 0;
};
c3_chart_internal_fn.isSplineType = function (d) {
    var id = isString(d) ? d : d.id;
    return ['spline', 'area-spline'].indexOf(this.config.data_types[id]) >= 0;
};
c3_chart_internal_fn.isAreaType = function (d) {
    var id = isString(d) ? d : d.id;
    return ['area', 'area-spline', 'area-step'].indexOf(this.config.data_types[id]) >= 0;
};
c3_chart_internal_fn.isBarType = function (d) {
    var id = isString(d) ? d : d.id;
    return this.config.data_types[id] === 'bar';
};
c3_chart_internal_fn.isScatterType = function (d) {
    var id = isString(d) ? d : d.id;
    return this.config.data_types[id] === 'scatter';
};
c3_chart_internal_fn.isPieType = function (d) {
    var id = isString(d) ? d : d.id;
    return this.config.data_types[id] === 'pie';
};
c3_chart_internal_fn.isGaugeType = function (d) {
    var id = isString(d) ? d : d.id;
    return this.config.data_types[id] === 'gauge';
};
c3_chart_internal_fn.isDonutType = function (d) {
    var id = isString(d) ? d : d.id;
    return this.config.data_types[id] === 'donut';
};
c3_chart_internal_fn.isArcType = function (d) {
    return this.isPieType(d) || this.isDonutType(d) || this.isGaugeType(d);
};
c3_chart_internal_fn.lineData = function (d) {
    return this.isLineType(d) ? [d] : [];
};
c3_chart_internal_fn.arcData = function (d) {
    return this.isArcType(d.data) ? [d] : [];
};
/* not used
 function scatterData(d) {
 return isScatterType(d) ? d.values : [];
 }
 */
c3_chart_internal_fn.barData = function (d) {
    return this.isBarType(d) ? d.values : [];
};
c3_chart_internal_fn.lineOrScatterData = function (d) {
    return this.isLineType(d) || this.isScatterType(d) ? d.values : [];
};
c3_chart_internal_fn.barOrLineData = function (d) {
    return this.isBarType(d) || this.isLineType(d) ? d.values : [];
};
c3_chart_internal_fn.isInterpolationType = function (type) {
    return ['linear', 'linear-closed', 'basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'monotone'].indexOf(type) >= 0;
};

c3_chart_internal_fn.isSafari = function () {
    var ua = window.navigator.userAgent;
    return ua.indexOf('Safari') >= 0 && ua.indexOf('Chrome') < 0;
};
c3_chart_internal_fn.isChrome = function () {
    var ua = window.navigator.userAgent;
    return ua.indexOf('Chrome') >= 0;
};

c3_chart_internal_fn.initZoom = function () {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config,
        startEvent;

    $$.zoom = d3.behavior.zoom().on("zoomstart", function () {
        startEvent = d3.event.sourceEvent;
        $$.zoom.altDomain = d3.event.sourceEvent.altKey ? $$.x.orgDomain() : null;
        config.zoom_onzoomstart.call($$.api, d3.event.sourceEvent);
    }).on("zoom", function () {
        $$.redrawForZoom.call($$);
    }).on('zoomend', function () {
        var event = d3.event.sourceEvent;
        // if click, do nothing. otherwise, click interaction will be canceled.
        if (event && startEvent.clientX === event.clientX && startEvent.clientY === event.clientY) {
            return;
        }
        $$.redrawEventRect();
        $$.updateZoom();
        config.zoom_onzoomend.call($$.api, $$.x.orgDomain());
    });
    $$.zoom.scale = function (scale) {
        return config.axis_rotated ? this.y(scale) : this.x(scale);
    };
    $$.zoom.orgScaleExtent = function () {
        var extent = config.zoom_extent ? config.zoom_extent : [1, 10];
        return [extent[0], Math.max($$.getMaxDataCount() / extent[1], extent[1])];
    };
    $$.zoom.updateScaleExtent = function () {
        var ratio = diffDomain($$.x.orgDomain()) / diffDomain($$.getZoomDomain()),
            extent = this.orgScaleExtent();
        this.scaleExtent([extent[0] * ratio, extent[1] * ratio]);
        return this;
    };
};
c3_chart_internal_fn.getZoomDomain = function () {
    var $$ = this,
        config = $$.config,
        d3 = $$.d3,
        min = d3.min([$$.orgXDomain[0], config.zoom_x_min]),
        max = d3.max([$$.orgXDomain[1], config.zoom_x_max]);
    return [min, max];
};
c3_chart_internal_fn.updateZoom = function () {
    var $$ = this,
        z = $$.config.zoom_enabled ? $$.zoom : function () {};
    $$.main.select('.' + CLASS.zoomRect).call(z).on("dblclick.zoom", null);
    $$.main.selectAll('.' + CLASS.eventRect).call(z).on("dblclick.zoom", null);
};
c3_chart_internal_fn.redrawForZoom = function () {
    var $$ = this,
        d3 = $$.d3,
        config = $$.config,
        zoom = $$.zoom,
        x = $$.x;
    if (!config.zoom_enabled) {
        return;
    }
    if ($$.filterTargetsToShow($$.data.targets).length === 0) {
        return;
    }
    if (d3.event.sourceEvent.type === 'mousemove' && zoom.altDomain) {
        x.domain(zoom.altDomain);
        zoom.scale(x).updateScaleExtent();
        return;
    }
    if ($$.isCategorized() && x.orgDomain()[0] === $$.orgXDomain[0]) {
        x.domain([$$.orgXDomain[0] - 1e-10, x.orgDomain()[1]]);
    }
    $$.redraw({
        withTransition: false,
        withY: config.zoom_rescale,
        withSubchart: false,
        withEventRect: false,
        withDimension: false
    });
    if (d3.event.sourceEvent.type === 'mousemove') {
        $$.cancelClick = true;
    }
    config.zoom_onzoom.call($$.api, x.orgDomain());
};

return c3$1;

})));


/***/ }),

/***/ 8356:
/***/ ((module, exports) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;
	var nativeCodeString = '[native code]';

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				if (arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				}
			} else if (argType === 'object') {
				if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
					classes.push(arg.toString());
					continue;
				}

				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ 59633:
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ 91389:
/***/ ((module) => {

"use strict";


module.exports = function (i) {
  return i[1];
};

/***/ }),

/***/ 92846:
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {
  var d3 = {
    version: "3.5.17"
  };
  var d3_arraySlice = [].slice, d3_array = function(list) {
    return d3_arraySlice.call(list);
  };
  var d3_document = this.document;
  function d3_documentElement(node) {
    return node && (node.ownerDocument || node.document || node).documentElement;
  }
  function d3_window(node) {
    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
  }
  if (d3_document) {
    try {
      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
    } catch (e) {
      d3_array = function(list) {
        var i = list.length, array = new Array(i);
        while (i--) array[i] = list[i];
        return array;
      };
    }
  }
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  if (d3_document) {
    try {
      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
    } catch (error) {
      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
      d3_element_prototype.setAttribute = function(name, value) {
        d3_element_setAttribute.call(this, name, value + "");
      };
      d3_element_prototype.setAttributeNS = function(space, local, value) {
        d3_element_setAttributeNS.call(this, space, local, value + "");
      };
      d3_style_prototype.setProperty = function(name, value, priority) {
        d3_style_setProperty.call(this, name, value + "", priority);
      };
    }
  }
  d3.ascending = d3_ascending;
  function d3_ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  function d3_number(x) {
    return x === null ? NaN : +x;
  }
  function d3_numeric(x) {
    return !isNaN(x);
  }
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
    } else {
      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  d3.mean = function(array, f) {
    var s = 0, n = array.length, a, i = -1, j = n;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
    }
    if (j) return s / j;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    var numbers = [], n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
    }
    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
  };
  d3.variance = function(array, f) {
    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
    if (arguments.length === 1) {
      while (++i < n) {
        if (d3_numeric(a = d3_number(array[i]))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    } else {
      while (++i < n) {
        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    }
    if (j > 1) return s / (j - 1);
  };
  d3.deviation = function() {
    var v = d3.variance.apply(this, arguments);
    return v ? Math.sqrt(v) : v;
  };
  function d3_bisector(compare) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  }
  var d3_bisect = d3_bisector(d3_ascending);
  d3.bisectLeft = d3_bisect.left;
  d3.bisect = d3.bisectRight = d3_bisect.right;
  d3.bisector = function(f) {
    return d3_bisector(f.length === 1 ? function(d, x) {
      return d3_ascending(f(d), x);
    } : f);
  };
  d3.shuffle = function(array, i0, i1) {
    if ((m = arguments.length) < 3) {
      i1 = array.length;
      if (m < 2) i0 = 0;
    }
    var m = i1 - i0, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
    return pairs;
  };
  d3.transpose = function(matrix) {
    if (!(n = matrix.length)) return [];
    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
        row[j] = matrix[j][i];
      }
    }
    return transpose;
  };
  function d3_transposeLength(d) {
    return d.length;
  }
  d3.zip = function() {
    return d3.transpose(arguments);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    for (var key in properties) {
      Object.defineProperty(ctor.prototype, key, {
        value: properties[key],
        enumerable: false
      });
    }
  }
  d3.map = function(object, f) {
    var map = new d3_Map();
    if (object instanceof d3_Map) {
      object.forEach(function(key, value) {
        map.set(key, value);
      });
    } else if (Array.isArray(object)) {
      var i = -1, n = object.length, o;
      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
    } else {
      for (var key in object) map.set(key, object[key]);
    }
    return map;
  };
  function d3_Map() {
    this._ = Object.create(null);
  }
  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
  d3_class(d3_Map, {
    has: d3_map_has,
    get: function(key) {
      return this._[d3_map_escape(key)];
    },
    set: function(key, value) {
      return this._[d3_map_escape(key)] = value;
    },
    remove: d3_map_remove,
    keys: d3_map_keys,
    values: function() {
      var values = [];
      for (var key in this._) values.push(this._[key]);
      return values;
    },
    entries: function() {
      var entries = [];
      for (var key in this._) entries.push({
        key: d3_map_unescape(key),
        value: this._[key]
      });
      return entries;
    },
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
    }
  });
  function d3_map_escape(key) {
    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
  }
  function d3_map_unescape(key) {
    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
  }
  function d3_map_has(key) {
    return d3_map_escape(key) in this._;
  }
  function d3_map_remove(key) {
    return (key = d3_map_escape(key)) in this._ && delete this._[key];
  }
  function d3_map_keys() {
    var keys = [];
    for (var key in this._) keys.push(d3_map_unescape(key));
    return keys;
  }
  function d3_map_size() {
    var size = 0;
    for (var key in this._) ++size;
    return size;
  }
  function d3_map_empty() {
    for (var key in this._) return false;
    return true;
  }
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };
  function d3_Set() {
    this._ = Object.create(null);
  }
  d3_class(d3_Set, {
    has: d3_map_has,
    add: function(key) {
      this._[d3_map_escape(key += "")] = true;
      return key;
    },
    remove: d3_map_remove,
    values: d3_map_keys,
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key));
    }
  });
  d3.behavior = {};
  function d3_identity(d) {
    return d;
  }
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.slice(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.slice(i + 1);
      type = type.slice(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatches = function(n, s) {
    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
    d3_selectMatches = function(n, s) {
      return d3_selectMatcher.call(n, s);
    };
    return d3_selectMatches(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = Sizzle;
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3.select(d3_document.documentElement);
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: d3_nsXhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classes(name) {
    return (name + "").trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) {
        var node = this.node();
        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
      }
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    function create() {
      var document = this.ownerDocument, namespace = this.namespaceURI;
      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
    }
    function createNS() {
      return this.ownerDocument.createElementNS(name.space, name.local);
    }
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(d3_selectionRemove);
  };
  function d3_selectionRemove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  }
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
        for (i = -1; ++i < n; ) {
          if (node = group[i]) {
            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
              exitNodes[i] = node;
            } else {
              nodeByKeyValue.set(keyValue, node);
            }
            keyValues[i] = keyValue;
          }
        }
        for (i = -1; ++i < m; ) {
          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          } else if (node !== true) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          }
          nodeByKeyValue.set(keyValue, true);
        }
        for (i = -1; ++i < n; ) {
          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3_ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    d3_selection_each(this, function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3.select = function(node) {
    var group;
    if (typeof node === "string") {
      group = [ d3_select(node, d3_document) ];
      group.parentNode = d3_document.documentElement;
    } else {
      group = [ node ];
      group.parentNode = d3_documentElement(node);
    }
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group;
    if (typeof nodes === "string") {
      group = d3_array(d3_selectAll(nodes, d3_document));
      group.parentNode = d3_document.documentElement;
    } else {
      group = d3_array(nodes);
      group.parentNode = null;
    }
    return d3_selection([ group ]);
  };
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.slice(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  if (d3_document) {
    d3_selection_onFilters.forEach(function(k) {
      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
    });
  }
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect, d3_event_dragId = 0;
  function d3_event_dragSuppress(node) {
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect == null) {
      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
    }
    if (d3_event_dragSelect) {
      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        var off = function() {
          w.on(click, null);
        };
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0) {
        var window = d3_window(container);
        if (window.scrollX || window.scrollY) {
          svg = d3.select("body").append("svg").style({
            position: "absolute",
            top: 0,
            left: 0,
            margin: 0,
            padding: 0,
            border: "none"
          }, "important");
          var ctm = svg[0][0].getScreenCTM();
          d3_mouse_bug44083 = !(ctm.f || ctm.e);
          svg.remove();
        }
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
      point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touch = function(container, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
      if ((touch = touches[i]).identifier === identifier) {
        return d3_mousePoint(container, touch);
      }
    }
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function dragstart(id, position, subject, move, end) {
      return function() {
        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
        if (origin) {
          dragOffset = origin.apply(that, arguments);
          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
        } else {
          dragOffset = [ 0, 0 ];
        }
        dispatch({
          type: "dragstart"
        });
        function moved() {
          var position1 = position(parent, dragId), dx, dy;
          if (!position1) return;
          dx = position1[0] - position0[0];
          dy = position1[1] - position0[1];
          dragged |= dx | dy;
          position0 = position1;
          dispatch({
            type: "drag",
            x: position1[0] + dragOffset[0],
            y: position1[1] + dragOffset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          if (!position(parent, dragId)) return;
          dragSubject.on(move + dragName, null).on(end + dragName, null);
          dragRestore(dragged);
          dispatch({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  function d3_behavior_dragTouchId() {
    return d3.event.changedTouches[0].identifier;
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_cross2d(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < ε2) {
      S = Math.log(w1 / w0) / ρ;
      i = function(t) {
        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / ρ;
      i = function(t) {
        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
      };
    }
    i.duration = S * 1e3;
    return i;
  };
  d3.behavior.zoom = function() {
    var view = {
      x: 0,
      y: 0,
      k: 1
    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    if (!d3_behavior_zoomWheel) {
      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return d3.event.wheelDelta;
      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
        return -d3.event.detail;
      }, "MozMousePixelScroll");
    }
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var dispatch = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(dispatch);
          }).tween("zoom:zoom", function() {
            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(dispatch);
            };
          }).each("interrupt.zoom", function() {
            zoomended(dispatch);
          }).each("end.zoom", function() {
            zoomended(dispatch);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(dispatch);
          zoomed(dispatch);
          zoomended(dispatch);
        }
      });
    };
    zoom.translate = function(_) {
      if (!arguments.length) return [ view.x, view.y ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: null
      };
      scaleTo(+_);
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.duration = function(_) {
      if (!arguments.length) return duration;
      duration = +_;
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
    }
    function point(l) {
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function zoomTo(that, p, l, k) {
      that.__chart__ = {
        x: view.x,
        y: view.y,
        k: view.k
      };
      scaleTo(Math.pow(2, k));
      translateTo(center0 = p, l);
      that = d3.select(that);
      if (duration > 0) that = that.transition().duration(duration);
      that.call(zoom.event);
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }
    function zoomstarted(dispatch) {
      if (!zooming++) dispatch({
        type: "zoomstart"
      });
    }
    function zoomed(dispatch) {
      rescale();
      dispatch({
        type: "zoom",
        scale: view.k,
        translate: [ view.x, view.y ]
      });
    }
    function zoomended(dispatch) {
      if (!--zooming) dispatch({
        type: "zoomend"
      }), center0 = null;
    }
    function mousedowned() {
      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
      d3_selection_interrupt.call(that);
      zoomstarted(dispatch);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(that), location0);
        zoomed(dispatch);
      }
      function ended() {
        subject.on(mousemove, null).on(mouseup, null);
        dragRestore(dragged);
        zoomended(dispatch);
      }
    }
    function touchstarted() {
      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
      started();
      zoomstarted(dispatch);
      subject.on(mousedown, null).on(touchstart, started);
      function relocate() {
        var touches = d3.touches(that);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var target = d3.event.target;
        d3.select(target).on(touchmove, moved).on(touchend, ended);
        targets.push(target);
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0];
            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
            d3_eventPreventDefault();
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(that), p0, l0, p1, l1;
        d3_selection_interrupt.call(that);
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(dispatch);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        d3.selectAll(targets).on(zoomName, null);
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(dispatch);
      }
    }
    function mousewheeled() {
      var dispatch = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(dispatch);
      }, 50);
      d3_eventPreventDefault();
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(center0, translate0);
      zoomed(dispatch);
    }
    function dblclicked() {
      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
  d3.color = d3_color;
  function d3_color() {}
  d3_color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = d3_hsl;
  function d3_hsl(h, s, l) {
    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
  }
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = d3_hcl;
  function d3_hcl(h, c, l) {
    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
  }
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
  d3_hclPrototype.brighter = function(k) {
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = d3_lab;
  function d3_lab(l, a, b) {
    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_lab.prototype = new d3_color();
  d3_labPrototype.brighter = function(k) {
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = d3_rgb;
  function d3_rgb(r, g, b) {
    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
  }
  function d3_rgbNumber(value) {
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return new d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_rgb(k * this.r, k * this.g, k * this.b);
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, color;
    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (color = d3_rgb_names.get(format)) {
      return rgb(color.r, color.g, color.b);
    }
    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
      if (format.length === 4) {
        r = (color & 3840) >> 4;
        r = r >> 4 | r;
        g = color & 240;
        g = g >> 4 | g;
        b = color & 15;
        b = b << 4 | b;
      } else if (format.length === 7) {
        r = (color & 16711680) >> 16;
        g = (color & 65280) >> 8;
        b = color & 255;
      }
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  function d3_xhrHasResponse(request) {
    var type = request.responseType;
    return type && type !== "text" ? request.response : request.responseText;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.slice(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.slice(j, I - k);
        }
        return text.slice(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && (a = f(a, n++)) == null) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv("	", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function() {
    d3_timer.apply(this, arguments);
  };
  function d3_timer(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      c: callback,
      t: time,
      n: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
    return timer;
  }
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now(), timer = d3_timer_queueHead;
    while (timer) {
      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
      timer = timer.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.c) {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      } else {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value = +value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  function d3_locale_numberFormat(locale) {
    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = locale_grouping[j = (j + 1) % locale_grouping.length];
      }
      return t.reverse().join(locale_thousands);
    } : d3_identity;
    return function(specifier) {
      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
      if (precision) precision = +precision.substring(1);
      if (zfill || fill === "0" && align === "=") {
        zfill = fill = "0";
        align = "=";
      }
      switch (type) {
       case "n":
        comma = true;
        type = "g";
        break;

       case "%":
        scale = 100;
        suffix = "%";
        type = "f";
        break;

       case "p":
        scale = 100;
        suffix = "%";
        type = "r";
        break;

       case "b":
       case "o":
       case "x":
       case "X":
        if (symbol === "#") prefix = "0" + type.toLowerCase();

       case "c":
        exponent = false;

       case "d":
        integer = true;
        precision = 0;
        break;

       case "s":
        scale = -1;
        type = "r";
        break;
      }
      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
      if (type == "r" && !precision) type = "g";
      if (precision != null) {
        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
      }
      type = d3_format_types.get(type) || d3_format_typeDefault;
      var zcomma = zfill && comma;
      return function(value) {
        var fullSuffix = suffix;
        if (integer && value % 1) return "";
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
        if (scale < 0) {
          var unit = d3.formatPrefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }
        value = type(value, precision);
        var i = value.lastIndexOf("."), before, after;
        if (i < 0) {
          var j = exponent ? value.lastIndexOf("e") : -1;
          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
        } else {
          before = value.substring(0, i);
          after = locale_decimal + value.substring(i + 1);
        }
        if (!zfill && comma) before = formatGroup(before, Infinity);
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
        negative += prefix;
        value = before + after;
        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      };
    };
  }
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_time = d3.time = {}, d3_date = Date;
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  function d3_locale_timeFormat(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    function d3_time_format(template) {
      var n = template.length;
      function format(date) {
        var string = [], i = -1, j = 0, c, p, f;
        while (++i < n) {
          if (template.charCodeAt(i) === 37) {
            string.push(template.slice(j, i));
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(template.slice(j, i));
        return string.join("");
      }
      format.parse = function(string) {
        var d = {
          y: 1900,
          m: 0,
          d: 1,
          H: 0,
          M: 0,
          S: 0,
          L: 0,
          Z: null
        }, i = d3_time_parse(d, template, string, 0);
        if (i != string.length) return null;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
          date.setFullYear(d.y, 0, 1);
          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
        } else date.setFullYear(d.y, d.m, d.d);
        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
        return localZ ? date._ : date;
      };
      format.toString = function() {
        return template;
      };
      return format;
    }
    function d3_time_parse(date, template, string, j) {
      var c, p, t, i = 0, n = template.length, m = string.length;
      while (i < n) {
        if (j >= m) return -1;
        c = template.charCodeAt(i++);
        if (c === 37) {
          t = template.charAt(i++);
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
          if (!p || (j = p(date, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    d3_time_format.utc = function(template) {
      var local = d3_time_format(template);
      function format(date) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date();
          utc._ = date;
          return local(utc);
        } finally {
          d3_date = Date;
        }
      }
      format.parse = function(string) {
        try {
          d3_date = d3_date_utc;
          var date = local.parse(string);
          return date && date._;
        } finally {
          d3_date = Date;
        }
      };
      format.toString = local.toString;
      return format;
    };
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function(p, i) {
      d3_time_periodLookup.set(p.toLowerCase(), i);
    });
    var d3_time_formats = {
      a: function(d) {
        return locale_shortDays[d.getDay()];
      },
      A: function(d) {
        return locale_days[d.getDay()];
      },
      b: function(d) {
        return locale_shortMonths[d.getMonth()];
      },
      B: function(d) {
        return locale_months[d.getMonth()];
      },
      c: d3_time_format(locale_dateTime),
      d: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function(d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function(d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function(d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function(d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function(d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function(d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function(d) {
        return locale_periods[+(d.getHours() >= 12)];
      },
      S: function(d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function(d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function(d) {
        return d.getDay();
      },
      W: function(d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(locale_date),
      X: d3_time_format(locale_time),
      y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
      },
      Z: d3_time_zone,
      "%": function() {
        return "%";
      }
    };
    var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      "%": d3_time_parseLiteralPercent
    };
    function d3_time_parseWeekdayAbbrev(date, string, i) {
      d3_time_dayAbbrevRe.lastIndex = 0;
      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseWeekday(date, string, i) {
      d3_time_dayRe.lastIndex = 0;
      var n = d3_time_dayRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonthAbbrev(date, string, i) {
      d3_time_monthAbbrevRe.lastIndex = 0;
      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonth(date, string, i) {
      d3_time_monthRe.lastIndex = 0;
      var n = d3_time_monthRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseLocaleFull(date, string, i) {
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
    }
    function d3_time_parseLocaleDate(date, string, i) {
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
    }
    function d3_time_parseLocaleTime(date, string, i) {
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
    }
    function d3_time_parseAmPm(date, string, i) {
      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
      return n == null ? -1 : (date.p = n, i);
    }
    return d3_time_format;
  }
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
    i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function d3_time_formatMulti(formats) {
    var n = formats.length, i = -1;
    while (++i < n) formats[i][0] = this(formats[i][0]);
    return function(date) {
      var i = 0, f = formats[i];
      while (!f[1](date)) f = formats[++i];
      return f[0](date);
    };
  }
  d3.locale = function(locale) {
    return {
      numberFormat: d3_locale_numberFormat(locale),
      timeFormat: d3_locale_timeFormat(locale)
    };
  };
  var d3_locale_enUS = d3.locale({
    decimal: ".",
    thousands: ",",
    grouping: [ 3 ],
    currency: [ "$", "" ],
    dateTime: "%a %b %e %X %Y",
    date: "%m/%d/%Y",
    time: "%H:%M:%S",
    periods: [ "AM", "PM" ],
    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
  });
  d3.format = d3_locale_enUS.numberFormat;
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
      sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
      function pointRing(λ, φ) {
        ring.push([ λ, φ ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          if (n > 0) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            while (++i < n) listener.point((point = segment[i])[0], point[1]);
            listener.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([ λ, φ ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x + pointRadius, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([ x * d3_degrees, y * d3_degrees ]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + δx, δy - x[1] * k ];
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + δx, δy - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [ λ, φ ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function(φ) {
      return Math.tan(π / 4 + φ / 2);
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(λ, φ) {
      if (F > 0) {
        if (φ < -halfπ + ε) φ = -halfπ + ε;
      } else {
        if (φ > halfπ - ε) φ = halfπ - ε;
      }
      var ρ = F / Math.pow(t(φ), n);
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε) return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
  };
  (d3.geo.transverseMercator = function() {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function(_) {
      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
    };
    projection.rotate = function(_) {
      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
      [ _[0], _[1], _[2] - 90 ]);
    };
    return rotate([ 0, 0, 90 ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
      for (i = 0; i < n; i++) {
        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
      }
      points.sort(d3_geom_hullOrder);
      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
      return polygon;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullUpper(points) {
    var n = points.length, hull = [ 0, 1 ], hs = 2;
    for (var i = 2; i < n; i++) {
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
      hull[hs++] = i;
    }
    return hull.slice(0, hs);
  }
  function d3_geom_hullOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
      x: x,
      y: y
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε) node = node.L; else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,
      y: (bx * hc - cx * hb) / d + ay
    };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2) return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L; else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R; else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        }; else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        }; else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          }; else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          }; else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          }; else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          }; else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next; else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
          var s = e.start();
          return [ s.x, s.y ];
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = xm; else x2 = xm;
        if (below) y1 = ym; else y2 = ym;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      root.find = function(point) {
        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
    var minDistance2 = Infinity, closestPoint;
    (function find(node, x1, y1, x2, y2) {
      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
      if (point = node.point) {
        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
        if (distance2 < minDistance2) {
          var distance = Math.sqrt(minDistance2 = distance2);
          x0 = x - distance, y0 = y - distance;
          x3 = x + distance, y3 = y + distance;
          closestPoint = point;
        }
      }
      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
        if (node = children[i & 3]) switch (i & 3) {
         case 0:
          find(node, x1, y1, xm, ym);
          break;

         case 1:
          find(node, xm, y1, x2, ym);
          break;

         case 2:
          find(node, x1, ym, xm, y2);
          break;

         case 3:
          find(node, xm, ym, x2, y2);
          break;
        }
      }
    })(root, x0, y0, x3, y3);
    return closestPoint;
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    a = +a, b = +b;
    return function(t) {
      return a * (1 - t) + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";
    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i]) s[i] += bm; else s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i: i,
          x: d3_interpolateNumber(am, bm)
        });
      }
      bi = d3_interpolate_numberB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; else s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
      return b(t) + "";
    }) : function() {
      return b;
    } : (b = q.length, function(t) {
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    });
  }
  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransformPop(s) {
    return s.length ? s.pop() + "," : "";
  }
  function d3_interpolateTranslate(ta, tb, s, q) {
    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
      var i = s.push("translate(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    }
  }
  function d3_interpolateRotate(ra, rb, s, q) {
    if (ra !== rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
    }
  }
  function d3_interpolateSkew(wa, wb, s, q) {
    if (wa !== wb) {
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
    }
  }
  function d3_interpolateScale(ka, kb, s, q) {
    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] !== 1 || kb[1] !== 1) {
      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
    }
  }
  function d3_interpolateTransform(a, b) {
    var s = [], q = [];
    a = d3.transform(a), b = d3.transform(b);
    d3_interpolateTranslate(a.translate, b.translate, s, q);
    d3_interpolateRotate(a.rotate, b.rotate, s, q);
    d3_interpolateSkew(a.skew, b.skew, s, q);
    d3_interpolateScale(a.scale, b.scale, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return (x - a) / b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) / b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: groupSums[di]
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
          if (dw * dw / theta2 < dn) {
            if (dn < chargeDistance2) {
              var k = quad.charge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
            return true;
          }
          if (quad.point && dn && dn < chargeDistance2) {
            var k = quad.pointCharge / dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        timer = null;
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.chargeDistance = function(x) {
      if (!arguments.length) return Math.sqrt(chargeDistance2);
      chargeDistance2 = x * x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return Math.sqrt(theta2);
      theta2 = x * x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) {
          alpha = x;
        } else {
          timer.c = null, timer.t = NaN, timer = null;
          event.end({
            type: "end",
            alpha: alpha = 0
          });
        }
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        timer = d3_timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, l = candidates.length, x;
        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function hierarchy(root) {
      var stack = [ root ], nodes = [], node;
      root.depth = 0;
      while ((node = stack.pop()) != null) {
        nodes.push(node);
        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
          var n, childs, child;
          while (--n >= 0) {
            stack.push(child = childs[n]);
            child.parent = node;
            child.depth = node.depth + 1;
          }
          if (value) node.value = 0;
          node.children = childs;
        } else {
          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
          delete node.children;
        }
      }
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var childs, parent;
        if (sort && (childs = node.children)) childs.sort(sort);
        if (value && (parent = node.parent)) parent.value += node.value;
      });
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      if (value) {
        d3_layout_hierarchyVisitBefore(root, function(node) {
          if (node.children) node.value = 0;
        });
        d3_layout_hierarchyVisitAfter(root, function(node) {
          var parent;
          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
          if (parent = node.parent) parent.value += node.value;
        });
      }
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyVisitBefore(node, callback) {
    var nodes = [ node ];
    while ((node = nodes.pop()) != null) {
      callback(node);
      if ((children = node.children) && (n = children.length)) {
        var n, children;
        while (--n >= 0) nodes.push(children[n]);
      }
    }
  }
  function d3_layout_hierarchyVisitAfter(node, callback) {
    var nodes = [ node ], nodes2 = [];
    while ((node = nodes.pop()) != null) {
      nodes2.push(node);
      if ((children = node.children) && (n = children.length)) {
        var i = -1, n, children;
        while (++i < n) nodes.push(children[i]);
      }
    }
    while ((node = nodes2.pop()) != null) {
      callback(node);
    }
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
    function pie(data) {
      var n = data.length, values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      index.forEach(function(i) {
        arcs[i] = {
          data: data[i],
          value: v = values[i],
          startAngle: a,
          endAngle: a += v * k + pa,
          padAngle: p
        };
      });
      return arcs;
    }
    pie.value = function(_) {
      if (!arguments.length) return value;
      value = _;
      return pie;
    };
    pie.sort = function(_) {
      if (!arguments.length) return sort;
      sort = _;
      return pie;
    };
    pie.startAngle = function(_) {
      if (!arguments.length) return startAngle;
      startAngle = _;
      return pie;
    };
    pie.endAngle = function(_) {
      if (!arguments.length) return endAngle;
      endAngle = _;
      return pie;
    };
    pie.padAngle = function(_) {
      if (!arguments.length) return padAngle;
      padAngle = _;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      if (!(n = data.length)) return data;
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var m = series[0].length, n, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_hierarchyVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
      d3_layout_hierarchyVisitBefore(root1, secondWalk);
      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
        var left = root0, right = root0, bottom = root0;
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return nodes;
    }
    function wrapTree(root0) {
      var root1 = {
        A: null,
        children: [ root0 ]
      }, queue = [ root1 ], node1;
      while ((node1 = queue.pop()) != null) {
        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
          queue.push((children[i] = child = {
            _: children[i],
            parent: node1,
            children: (child = children[i].children) && child.slice() || [],
            A: null,
            a: null,
            z: 0,
            m: 0,
            c: 0,
            s: 0,
            t: null,
            i: i
          }).a = child);
        }
      }
      return root1.children[0];
    }
    function firstWalk(v) {
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
      if (children.length) {
        d3_layout_treeShift(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
          vom = d3_layout_treeLeft(vom);
          vop = d3_layout_treeRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !d3_layout_treeRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !d3_layout_treeLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= size[0];
      node.y = node.depth * size[1];
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null ? sizeNode : null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) == null ? null : sizeNode;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(v) {
    var children = v.children;
    return children.length ? children[0] : v.t;
  }
  function d3_layout_treeRight(v) {
    var children = v.children, n;
    return (n = children.length) ? children[n - 1] : v.t;
  }
  function d3_layout_treeMove(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }
  function d3_layout_treeShift(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }
  function d3_layout_treeAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = root.y = 0;
      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    bates: function(m) {
      var random = d3.random.irwinHall(m);
      return function() {
        return random() / m;
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    return domain;
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    if (format) {
      var match = d3_format_re.exec(format);
      match.shift();
      if (match[8] === "s") {
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
        match[8] = "f";
        format = d3.format(match.join(""));
        return function(d) {
          return format(prefix.scale(d)) + prefix.symbol;
        };
      }
      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
      format = match.join("");
    } else {
      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
    }
    return d3.format(format);
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(1, base * n / scale.ticks().length);
      return function(d) {
        var i = d / pow(Math.round(log(d)));
        if (i * base < base - .5) i *= base;
        return i <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
      0) : (stop - start) / (domain.length - 1 + padding);
      range = steps(start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundPoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
      0) : (stop - start) / (domain.length - 1 + padding) | 0;
      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
      rangeBand = 0;
      ranger = {
        t: "rangeRoundPoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  function d3_zero() {
    return 0;
  }
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
    function arc() {
      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
        if (!cw) p1 *= -1;
        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
      }
      if (r1) {
        x0 = r1 * Math.cos(a0 + p1);
        y0 = r1 * Math.sin(a0 + p1);
        x1 = r1 * Math.cos(a1 - p1);
        y1 = r1 * Math.sin(a1 - p1);
        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
          var h1 = (a0 + a1) / 2;
          x0 = r1 * Math.cos(h1);
          y0 = r1 * Math.sin(h1);
          x1 = y1 = null;
        }
      } else {
        x0 = y0 = 0;
      }
      if (r0) {
        x2 = r0 * Math.cos(a1 - p0);
        y2 = r0 * Math.sin(a1 - p0);
        x3 = r0 * Math.cos(a0 + p0);
        y3 = r0 * Math.sin(a0 + p0);
        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
          var h0 = (a0 + a1) / 2;
          x2 = r0 * Math.cos(h0);
          y2 = r0 * Math.sin(h0);
          x3 = y3 = null;
        }
      } else {
        x2 = y2 = 0;
      }
      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
        cr = r0 < r1 ^ cw ? 0 : 1;
        var rc1 = rc, rc0 = rc;
        if (da < π) {
          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
        }
        if (x1 != null) {
          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
          if (rc === rc1) {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
          } else {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
          }
        } else {
          path.push("M", x0, ",", y0);
        }
        if (x3 != null) {
          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
          if (rc === rc0) {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          } else {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          }
        } else {
          path.push("L", x2, ",", y2);
        }
      } else {
        path.push("M", x0, ",", y0);
        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
        path.push("L", x2, ",", y2);
        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
      }
      path.push("Z");
      return path.join("");
    }
    function circleSegment(r1, cw) {
      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.cornerRadius = function(v) {
      if (!arguments.length) return cornerRadius;
      cornerRadius = d3_functor(v);
      return arc;
    };
    arc.padRadius = function(v) {
      if (!arguments.length) return padRadius;
      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.padAngle = function(v) {
      if (!arguments.length) return padAngle;
      padAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcAuto = "auto";
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_arcPadAngle(d) {
    return d && d.padAngle;
  }
  function d3_svg_arcSweep(x0, y0, x1, y1) {
    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
  }
  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.length > 1 ? points.join("L") : points + "Z";
  }
  function d3_svg_lineLinearClosed(points) {
    return points.join("L") + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] - halfπ;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  d3_selectionPrototype.transition = function(name) {
    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_selectionPrototype.interrupt = function(name) {
    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
  };
  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
  function d3_selection_interruptNS(ns) {
    return function() {
      var lock, activeId, active;
      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
        active.timer.c = null;
        active.timer.t = NaN;
        if (--lock.count) delete lock[activeId]; else delete this[ns];
        lock.active += .5;
        active.event && active.event.interrupt.call(this, this.__data__, active.index);
      }
    };
  }
  function d3_transition(groups, ns, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.namespace = ns;
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection, name) {
    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node[ns][id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.namespace, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node[ns][id].tween.remove(name);
    } : function(node) {
      node[ns][id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id, ns = groups.namespace;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node[ns][id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    var ns = this.namespace;
    return this.each("end.transition", function() {
      var p;
      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node[ns][id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].delay;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node[ns][id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].duration;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function(node) {
      node[ns][id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      try {
        d3_transitionInheritId = id;
        d3_selection_each(this, function(node, i, j) {
          d3_transitionInherit = node[ns][id];
          type.call(node, node.__data__, i, j);
        });
      } finally {
        d3_transitionInherit = inherit;
        d3_transitionInheritId = inheritId;
      }
    } else {
      d3_selection_each(this, function(node) {
        var transition = node[ns][id];
        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = node[ns][id0];
          d3_transitionNode(node, i, ns, id1, {
            time: transition.time,
            ease: transition.ease,
            delay: transition.delay + transition.duration,
            duration: transition.duration
          });
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id1);
  };
  function d3_transitionNamespace(name) {
    return name == null ? "__transition__" : "__transition_" + name + "__";
  }
  function d3_transitionNode(node, i, ns, id, inherit) {
    var lock = node[ns] || (node[ns] = {
      active: 0,
      count: 0
    }), transition = lock[id], time, timer, duration, ease, tweens;
    function schedule(elapsed) {
      var delay = transition.delay;
      timer.t = delay + time;
      if (delay <= elapsed) return start(elapsed - delay);
      timer.c = start;
    }
    function start(elapsed) {
      var activeId = lock.active, active = lock[activeId];
      if (active) {
        active.timer.c = null;
        active.timer.t = NaN;
        --lock.count;
        delete lock[activeId];
        active.event && active.event.interrupt.call(node, node.__data__, active.index);
      }
      for (var cancelId in lock) {
        if (+cancelId < id) {
          var cancel = lock[cancelId];
          cancel.timer.c = null;
          cancel.timer.t = NaN;
          --lock.count;
          delete lock[cancelId];
        }
      }
      timer.c = tick;
      d3_timer(function() {
        if (timer.c && tick(elapsed || 1)) {
          timer.c = null;
          timer.t = NaN;
        }
        return 1;
      }, 0, time);
      lock.active = id;
      transition.event && transition.event.start.call(node, node.__data__, i);
      tweens = [];
      transition.tween.forEach(function(key, value) {
        if (value = value.call(node, node.__data__, i)) {
          tweens.push(value);
        }
      });
      ease = transition.ease;
      duration = transition.duration;
    }
    function tick(elapsed) {
      var t = elapsed / duration, e = ease(t), n = tweens.length;
      while (n > 0) {
        tweens[--n].call(node, e);
      }
      if (t >= 1) {
        transition.event && transition.event.end.call(node, node.__data__, i);
        if (--lock.count) delete lock[id]; else delete node[ns];
        return 1;
      }
    }
    if (!transition) {
      time = inherit.time;
      timer = d3_timer(schedule, 0, time);
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        timer: timer,
        delay: inherit.delay,
        duration: inherit.duration,
        ease: inherit.ease,
        index: i
      };
      inherit = null;
      ++lock.count;
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
        d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
        if (orient === "bottom" || orient === "top") {
          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
        } else {
          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
        }
        lineEnter.attr(y2, sign * innerTickSize);
        textEnter.attr(y1, sign * tickSpacing);
        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1, scale0);
        }
        tickEnter.call(tickTransform, scale0, scale1);
        tickUpdate.call(tickTransform, scale1, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = d3_array(arguments);
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x0, x1) {
    selection.attr("transform", function(d) {
      var v0 = x0(d);
      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y0, y1) {
    selection.attr("transform", function(d) {
      var v0 = y0(d);
      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), extent1 = {
          x: xExtent,
          y: yExtent,
          i: xExtentDomain,
          j: yExtentDomain
        }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null; else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [ x0, x1 ];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [ y0, y1 ];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
  var d3_time_formatUtc = d3_time_format.utc;
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
        return d / 31536e6;
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval
      }, skip ];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
    return d.getMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getMinutes();
  } ], [ "%I %p", function(d) {
    return d.getHours();
  } ], [ "%a %d", function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getDate() != 1;
  } ], [ "%B", function(d) {
    return d.getMonth();
  } ], [ "%Y", d3_true ] ]);
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
    return d.getUTCMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getUTCSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getUTCMinutes();
  } ], [ "%I %p", function(d) {
    return d.getUTCHours();
  } ], [ "%a %d", function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getUTCDate() != 1;
  } ], [ "%B", function(d) {
    return d.getUTCMonth();
  } ], [ "%Y", d3_true ] ]);
  d3_time_scaleUtcMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else {}
}();

/***/ }),

/***/ 24420:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(13056);

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ 69042:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(24420),
    getRawTag = __webpack_require__(66282),
    objectToString = __webpack_require__(37661);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ 20439:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var trimmedEndIndex = __webpack_require__(5630);

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

module.exports = baseTrim;


/***/ }),

/***/ 91744:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

module.exports = freeGlobal;


/***/ }),

/***/ 66282:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(24420);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ 37661:
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ 13056:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var freeGlobal = __webpack_require__(91744);

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ 5630:
/***/ ((module) => {

/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

module.exports = trimmedEndIndex;


/***/ }),

/***/ 79412:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(67040),
    now = __webpack_require__(14736),
    toNumber = __webpack_require__(314);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;


/***/ }),

/***/ 67040:
/***/ ((module) => {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ 91259:
/***/ ((module) => {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ 57386:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(69042),
    isObjectLike = __webpack_require__(91259);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ 14736:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(13056);

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;


/***/ }),

/***/ 49789:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var debounce = __webpack_require__(79412),
    isObject = __webpack_require__(67040);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

module.exports = throttle;


/***/ }),

/***/ 314:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseTrim = __webpack_require__(20439),
    isObject = __webpack_require__(67040),
    isSymbol = __webpack_require__(57386);

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),

/***/ 82497:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Pi": () => (/* binding */ mobxreact_esm_observer)
});

// UNUSED EXPORTS: MobXProviderContext, Observer, PropTypes, Provider, disposeOnUnmount, enableStaticRendering, inject, isUsingStaticRendering, observerBatching, useAsObservableSource, useLocalObservable, useLocalStore, useObserver, useStaticRendering

// EXTERNAL MODULE: ./node_modules/mobx/dist/mobx.esm.js
var mobx_esm = __webpack_require__(31056);
// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(70846);
;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/assertEnvironment.js


if (!react.useState) {
    throw new Error("mobx-react-lite requires React with Hooks support");
}
if (!mobx_esm/* makeObservable */.rC) {
    throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");
}

// EXTERNAL MODULE: ./node_modules/react-dom/index.js
var react_dom = __webpack_require__(76644);
;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js


;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/observerBatching.js

function defaultNoopBatch(callback) {
    callback();
}
function observerBatching(reactionScheduler) {
    if (!reactionScheduler) {
        reactionScheduler = defaultNoopBatch;
        if (false) {}
    }
    (0,mobx_esm/* configure */.jQ)({ reactionScheduler: reactionScheduler });
}
var isObserverBatched = function () {
    if (false) {}
    return true;
};

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/printDebugValue.js

function printDebugValue(v) {
    return (0,mobx_esm/* getDependencyTree */.Gf)(v);
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/FinalizationRegistryWrapper.js
var FinalizationRegistryLocal = typeof FinalizationRegistry === "undefined" ? undefined : FinalizationRegistry;


;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js
function createTrackingData(reaction) {
    var trackingData = {
        reaction: reaction,
        mounted: false,
        changedBeforeMount: false,
        cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS
    };
    return trackingData;
}
/**
 * The minimum time before we'll clean up a Reaction created in a render
 * for a component that hasn't managed to run its effects. This needs to
 * be big enough to ensure that a component won't turn up and have its
 * effects run without being re-rendered.
 */
var CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;
/**
 * The frequency with which we'll check for leaked reactions.
 */
var CLEANUP_TIMER_LOOP_MILLIS = 10000;

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/createReactionCleanupTrackingUsingFinalizationRegister.js

/**
 * FinalizationRegistry-based uncommitted reaction cleanup
 */
function createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistry) {
    var cleanupTokenToReactionTrackingMap = new Map();
    var globalCleanupTokensCounter = 1;
    var registry = new FinalizationRegistry(function cleanupFunction(token) {
        var trackedReaction = cleanupTokenToReactionTrackingMap.get(token);
        if (trackedReaction) {
            trackedReaction.reaction.dispose();
            cleanupTokenToReactionTrackingMap.delete(token);
        }
    });
    return {
        addReactionToTrack: function (reactionTrackingRef, reaction, objectRetainedByReact) {
            var token = globalCleanupTokensCounter++;
            registry.register(objectRetainedByReact, token, reactionTrackingRef);
            reactionTrackingRef.current = createTrackingData(reaction);
            reactionTrackingRef.current.finalizationRegistryCleanupToken = token;
            cleanupTokenToReactionTrackingMap.set(token, reactionTrackingRef.current);
            return reactionTrackingRef.current;
        },
        recordReactionAsCommitted: function (reactionRef) {
            registry.unregister(reactionRef);
            if (reactionRef.current && reactionRef.current.finalizationRegistryCleanupToken) {
                cleanupTokenToReactionTrackingMap.delete(reactionRef.current.finalizationRegistryCleanupToken);
            }
        },
        forceCleanupTimerToRunNowForTests: function () {
            // When FinalizationRegistry in use, this this is no-op
        },
        resetCleanupScheduleForTests: function () {
            // When FinalizationRegistry in use, this this is no-op
        }
    };
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/createTimerBasedReactionCleanupTracking.js
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

/**
 * timers, gc-style, uncommitted reaction cleanup
 */
function createTimerBasedReactionCleanupTracking() {
    /**
     * Reactions created by components that have yet to be fully mounted.
     */
    var uncommittedReactionRefs = new Set();
    /**
     * Latest 'uncommitted reactions' cleanup timer handle.
     */
    var reactionCleanupHandle;
    /* istanbul ignore next */
    /**
     * Only to be used by test functions; do not export outside of mobx-react-lite
     */
    function forceCleanupTimerToRunNowForTests() {
        // This allows us to control the execution of the cleanup timer
        // to force it to run at awkward times in unit tests.
        if (reactionCleanupHandle) {
            clearTimeout(reactionCleanupHandle);
            cleanUncommittedReactions();
        }
    }
    /* istanbul ignore next */
    function resetCleanupScheduleForTests() {
        var e_1, _a;
        if (uncommittedReactionRefs.size > 0) {
            try {
                for (var uncommittedReactionRefs_1 = __values(uncommittedReactionRefs), uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next(); !uncommittedReactionRefs_1_1.done; uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next()) {
                    var ref = uncommittedReactionRefs_1_1.value;
                    var tracking = ref.current;
                    if (tracking) {
                        tracking.reaction.dispose();
                        ref.current = null;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (uncommittedReactionRefs_1_1 && !uncommittedReactionRefs_1_1.done && (_a = uncommittedReactionRefs_1.return)) _a.call(uncommittedReactionRefs_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            uncommittedReactionRefs.clear();
        }
        if (reactionCleanupHandle) {
            clearTimeout(reactionCleanupHandle);
            reactionCleanupHandle = undefined;
        }
    }
    function ensureCleanupTimerRunning() {
        if (reactionCleanupHandle === undefined) {
            reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);
        }
    }
    function scheduleCleanupOfReactionIfLeaked(ref) {
        uncommittedReactionRefs.add(ref);
        ensureCleanupTimerRunning();
    }
    function recordReactionAsCommitted(reactionRef) {
        uncommittedReactionRefs.delete(reactionRef);
    }
    /**
     * Run by the cleanup timer to dispose any outstanding reactions
     */
    function cleanUncommittedReactions() {
        reactionCleanupHandle = undefined;
        // Loop through all the candidate leaked reactions; those older
        // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.
        var now = Date.now();
        uncommittedReactionRefs.forEach(function (ref) {
            var tracking = ref.current;
            if (tracking) {
                if (now >= tracking.cleanAt) {
                    // It's time to tidy up this leaked reaction.
                    tracking.reaction.dispose();
                    ref.current = null;
                    uncommittedReactionRefs.delete(ref);
                }
            }
        });
        if (uncommittedReactionRefs.size > 0) {
            // We've just finished a round of cleanups but there are still
            // some leak candidates outstanding.
            ensureCleanupTimerRunning();
        }
    }
    return {
        addReactionToTrack: function (reactionTrackingRef, reaction, 
        /**
         * On timer based implementation we don't really need this object,
         * but we keep the same api
         */
        objectRetainedByReact) {
            reactionTrackingRef.current = createTrackingData(reaction);
            scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);
            return reactionTrackingRef.current;
        },
        recordReactionAsCommitted: recordReactionAsCommitted,
        forceCleanupTimerToRunNowForTests: forceCleanupTimerToRunNowForTests,
        resetCleanupScheduleForTests: resetCleanupScheduleForTests
    };
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactionCleanupTracking.js



var _a = FinalizationRegistryLocal
    ? createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistryLocal)
    : createTimerBasedReactionCleanupTracking(), addReactionToTrack = _a.addReactionToTrack, recordReactionAsCommitted = _a.recordReactionAsCommitted, resetCleanupScheduleForTests = _a.resetCleanupScheduleForTests, forceCleanupTimerToRunNowForTests = _a.forceCleanupTimerToRunNowForTests;


;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/staticRendering.js
var globalIsUsingStaticRendering = false;
function staticRendering_enableStaticRendering(enable) {
    globalIsUsingStaticRendering = enable;
}
function isUsingStaticRendering() {
    return globalIsUsingStaticRendering;
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useObserver.js
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};





function observerComponentNameFor(baseComponentName) {
    return "observer".concat(baseComponentName);
}
/**
 * We use class to make it easier to detect in heap snapshots by name
 */
var ObjectToBeRetainedByReact = /** @class */ (function () {
    function ObjectToBeRetainedByReact() {
    }
    return ObjectToBeRetainedByReact;
}());
function objectToBeRetainedByReactFactory() {
    return new ObjectToBeRetainedByReact();
}
function useObserver(fn, baseComponentName) {
    if (baseComponentName === void 0) { baseComponentName = "observed"; }
    if (isUsingStaticRendering()) {
        return fn();
    }
    var _a = __read(react.useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a[0];
    // Force update, see #2982
    var _b = __read(react.useState(), 2), setState = _b[1];
    var forceUpdate = function () { return setState([]); };
    // StrictMode/ConcurrentMode/Suspense may mean that our component is
    // rendered and abandoned multiple times, so we need to track leaked
    // Reactions.
    var reactionTrackingRef = react.useRef(null);
    if (!reactionTrackingRef.current) {
        // First render for this component (or first time since a previous
        // reaction from an abandoned render was disposed).
        var newReaction = new mobx_esm/* Reaction */.le(observerComponentNameFor(baseComponentName), function () {
            // Observable has changed, meaning we want to re-render
            // BUT if we're a component that hasn't yet got to the useEffect()
            // stage, we might be a component that _started_ to render, but
            // got dropped, and we don't want to make state changes then.
            // (It triggers warnings in StrictMode, for a start.)
            if (trackingData_1.mounted) {
                // We have reached useEffect(), so we're mounted, and can trigger an update
                forceUpdate();
            }
            else {
                // We haven't yet reached useEffect(), so we'll need to trigger a re-render
                // when (and if) useEffect() arrives.
                trackingData_1.changedBeforeMount = true;
            }
        });
        var trackingData_1 = addReactionToTrack(reactionTrackingRef, newReaction, objectRetainedByReact);
    }
    var reaction = reactionTrackingRef.current.reaction;
    react.useDebugValue(reaction, printDebugValue);
    react.useEffect(function () {
        // Called on first mount only
        recordReactionAsCommitted(reactionTrackingRef);
        if (reactionTrackingRef.current) {
            // Great. We've already got our reaction from our render;
            // all we need to do is to record that it's now mounted,
            // to allow future observable changes to trigger re-renders
            reactionTrackingRef.current.mounted = true;
            // Got a change before first mount, force an update
            if (reactionTrackingRef.current.changedBeforeMount) {
                reactionTrackingRef.current.changedBeforeMount = false;
                forceUpdate();
            }
        }
        else {
            // The reaction we set up in our render has been disposed.
            // This can be due to bad timings of renderings, e.g. our
            // component was paused for a _very_ long time, and our
            // reaction got cleaned up
            // Re-create the reaction
            reactionTrackingRef.current = {
                reaction: new mobx_esm/* Reaction */.le(observerComponentNameFor(baseComponentName), function () {
                    // We've definitely already been mounted at this point
                    forceUpdate();
                }),
                mounted: true,
                changedBeforeMount: false,
                cleanAt: Infinity
            };
            forceUpdate();
        }
        return function () {
            reactionTrackingRef.current.reaction.dispose();
            reactionTrackingRef.current = null;
        };
    }, []);
    // render the original component, but have the
    // reaction track the observables, so that rendering
    // can be invalidated (see above) once a dependency changes
    var rendering;
    var exception;
    reaction.track(function () {
        try {
            rendering = fn();
        }
        catch (e) {
            exception = e;
        }
    });
    if (exception) {
        throw exception; // re-throw any exceptions caught during rendering
    }
    return rendering;
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/observer.js



var warnObserverOptionsDeprecated = true;
var hasSymbol = typeof Symbol === "function" && Symbol.for;
// Using react-is had some issues (and operates on elements, not on types), see #608 / #609
var ReactForwardRefSymbol = hasSymbol
    ? Symbol.for("react.forward_ref")
    : typeof react.forwardRef === "function" && (0,react.forwardRef)(function (props) { return null; })["$$typeof"];
var ReactMemoSymbol = hasSymbol
    ? Symbol.for("react.memo")
    : typeof react.memo === "function" && (0,react.memo)(function (props) { return null; })["$$typeof"];
// n.b. base case is not used for actual typings or exported in the typing files
function observer(baseComponent, 
// TODO remove in next major
options) {
    var _a;
    if (false) {}
    if (ReactMemoSymbol && baseComponent["$$typeof"] === ReactMemoSymbol) {
        throw new Error("[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.");
    }
    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307
    if (isUsingStaticRendering()) {
        return baseComponent;
    }
    var useForwardRef = (_a = options === null || options === void 0 ? void 0 : options.forwardRef) !== null && _a !== void 0 ? _a : false;
    var render = baseComponent;
    var baseComponentName = baseComponent.displayName || baseComponent.name;
    // If already wrapped with forwardRef, unwrap,
    // so we can patch render and apply memo
    if (ReactForwardRefSymbol && baseComponent["$$typeof"] === ReactForwardRefSymbol) {
        useForwardRef = true;
        render = baseComponent["render"];
        if (typeof render !== "function") {
            throw new Error("[mobx-react-lite] `render` property of ForwardRef was not a function");
        }
    }
    var observerComponent = function (props, ref) {
        return useObserver(function () { return render(props, ref); }, baseComponentName);
    };
    // Don't set `displayName` for anonymous components,
    // so the `displayName` can be customized by user, see #3192.
    if (baseComponentName !== "") {
        ;
        observerComponent.displayName = baseComponentName;
    }
    // Support legacy context: `contextTypes` must be applied before `memo`
    if (baseComponent.contextTypes) {
        ;
        observerComponent.contextTypes = baseComponent.contextTypes;
    }
    if (useForwardRef) {
        // `forwardRef` must be applied prior `memo`
        // `forwardRef(observer(cmp))` throws:
        // "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))"
        observerComponent = (0,react.forwardRef)(observerComponent);
    }
    // memo; we are not interested in deep updates
    // in props; we assume that if deep objects are changed,
    // this is in observables, which would have been tracked anyway
    observerComponent = (0,react.memo)(observerComponent);
    copyStaticProperties(baseComponent, observerComponent);
    if (false) {}
    return observerComponent;
}
// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js
var hoistBlackList = {
    $$typeof: true,
    render: true,
    compare: true,
    type: true,
    // Don't redefine `displayName`,
    // it's defined as getter-setter pair on `memo` (see #3192).
    displayName: true
};
function copyStaticProperties(base, target) {
    Object.keys(base).forEach(function (key) {
        if (!hoistBlackList[key]) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
        }
    });
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/ObserverComponent.js

function ObserverComponent(_a) {
    var children = _a.children, render = _a.render;
    var component = children || render;
    if (typeof component !== "function") {
        return null;
    }
    return useObserver(component);
}
if (false) {}
ObserverComponent.displayName = "Observer";

function ObserverPropsCheck(props, key, componentName, location, propFullName) {
    var extraKey = key === "children" ? "render" : "children";
    var hasProp = typeof props[key] === "function";
    var hasExtraProp = typeof props[extraKey] === "function";
    if (hasProp && hasExtraProp) {
        return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);
    }
    if (hasProp || hasExtraProp) {
        return null;
    }
    return new Error("Invalid prop `" +
        propFullName +
        "` of type `" +
        typeof props[key] +
        "` supplied to" +
        " `" +
        componentName +
        "`, expected `function`.");
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useLocalObservable.js


function useLocalObservable(initializer, annotations) {
    return useState(function () { return observable(initializer(), annotations, { autoBind: true }); })[0];
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useAsObservableSource.js
var useAsObservableSource_read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};



function useAsObservableSource_useAsObservableSource(current) {
    if (false)
        {}
    var _a = useAsObservableSource_read(useState(function () { return observable(current, {}, { deep: false }); }), 1), res = _a[0];
    runInAction(function () {
        Object.assign(res, current);
    });
    return res;
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useLocalStore.js




function useLocalStore(initializer, current) {
    if (false)
        {}
    var source = current && useAsObservableSource(current);
    return useState(function () { return observable(initializer(source), undefined, { autoBind: true }); })[0];
}

;// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/index.js






observerBatching(react_dom.unstable_batchedUpdates);







function es_useObserver(fn, baseComponentName) {
    if (baseComponentName === void 0) { baseComponentName = "observed"; }
    if (false) {}
    return useObserverOriginal(fn, baseComponentName);
}

function useStaticRendering(enable) {
    if (false) {}
    enableStaticRendering(enable);
}

;// CONCATENATED MODULE: ./node_modules/mobx-react/dist/mobxreact.esm.js





var symbolId = 0;

function createSymbol(name) {
  if (typeof Symbol === "function") {
    return Symbol(name);
  }

  var symbol = "__$mobx-react " + name + " (" + symbolId + ")";
  symbolId++;
  return symbol;
}

var createdSymbols = {};
function newSymbol(name) {
  if (!createdSymbols[name]) {
    createdSymbols[name] = createSymbol(name);
  }

  return createdSymbols[name];
}
function shallowEqual(objA, objB) {
  //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  for (var i = 0; i < keysA.length; i++) {
    if (!Object.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

function is(x, y) {
  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js


var mobxreact_esm_hoistBlackList = {
  $$typeof: 1,
  render: 1,
  compare: 1,
  type: 1,
  childContextTypes: 1,
  contextType: 1,
  contextTypes: 1,
  defaultProps: 1,
  getDefaultProps: 1,
  getDerivedStateFromError: 1,
  getDerivedStateFromProps: 1,
  mixins: 1,
  displayName: 1,
  propTypes: 1
};
function mobxreact_esm_copyStaticProperties(base, target) {
  var protoProps = Object.getOwnPropertyNames(Object.getPrototypeOf(base));
  Object.getOwnPropertyNames(base).forEach(function (key) {
    if (!mobxreact_esm_hoistBlackList[key] && protoProps.indexOf(key) === -1) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
    }
  });
}
/**
 * Helper to set `prop` to `this` as non-enumerable (hidden prop)
 * @param target
 * @param prop
 * @param value
 */

function setHiddenProp(target, prop, value) {
  if (!Object.hasOwnProperty.call(target, prop)) {
    Object.defineProperty(target, prop, {
      enumerable: false,
      configurable: true,
      writable: true,
      value: value
    });
  } else {
    target[prop] = value;
  }
}
/**
 * Utilities for patching componentWillUnmount, to make sure @disposeOnUnmount works correctly icm with user defined hooks
 * and the handler provided by mobx-react
 */

var mobxMixins = /*#__PURE__*/newSymbol("patchMixins");
var mobxPatchedDefinition = /*#__PURE__*/newSymbol("patchedDefinition");

function getMixins(target, methodName) {
  var mixins = target[mobxMixins] = target[mobxMixins] || {};
  var methodMixins = mixins[methodName] = mixins[methodName] || {};
  methodMixins.locks = methodMixins.locks || 0;
  methodMixins.methods = methodMixins.methods || [];
  return methodMixins;
}

function wrapper(realMethod, mixins) {
  var _this = this;

  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls
  mixins.locks++;

  try {
    var retVal;

    if (realMethod !== undefined && realMethod !== null) {
      retVal = realMethod.apply(this, args);
    }

    return retVal;
  } finally {
    mixins.locks--;

    if (mixins.locks === 0) {
      mixins.methods.forEach(function (mx) {
        mx.apply(_this, args);
      });
    }
  }
}

function wrapFunction(realMethod, mixins) {
  var fn = function fn() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    wrapper.call.apply(wrapper, [this, realMethod, mixins].concat(args));
  };

  return fn;
}

function patch(target, methodName, mixinMethod) {
  var mixins = getMixins(target, methodName);

  if (mixins.methods.indexOf(mixinMethod) < 0) {
    mixins.methods.push(mixinMethod);
  }

  var oldDefinition = Object.getOwnPropertyDescriptor(target, methodName);

  if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {
    // already patched definition, do not repatch
    return;
  }

  var originalMethod = target[methodName];
  var newDefinition = createDefinition(target, methodName, oldDefinition ? oldDefinition.enumerable : undefined, mixins, originalMethod);
  Object.defineProperty(target, methodName, newDefinition);
}

function createDefinition(target, methodName, enumerable, mixins, originalMethod) {
  var _ref;

  var wrappedFunc = wrapFunction(originalMethod, mixins);
  return _ref = {}, _ref[mobxPatchedDefinition] = true, _ref.get = function get() {
    return wrappedFunc;
  }, _ref.set = function set(value) {
    if (this === target) {
      wrappedFunc = wrapFunction(value, mixins);
    } else {
      // when it is an instance of the prototype/a child prototype patch that particular case again separately
      // since we need to store separate values depending on wether it is the actual instance, the prototype, etc
      // e.g. the method for super might not be the same as the method for the prototype which might be not the same
      // as the method for the instance
      var newDefinition = createDefinition(this, methodName, enumerable, mixins, value);
      Object.defineProperty(this, methodName, newDefinition);
    }
  }, _ref.configurable = true, _ref.enumerable = enumerable, _ref;
}

var mobxAdminProperty = mobx_esm/* $mobx */.so || "$mobx"; // BC

var mobxObserverProperty = /*#__PURE__*/newSymbol("isMobXReactObserver");
var mobxIsUnmounted = /*#__PURE__*/newSymbol("isUnmounted");
var skipRenderKey = /*#__PURE__*/newSymbol("skipRender");
var isForcingUpdateKey = /*#__PURE__*/newSymbol("isForcingUpdate");
function makeClassComponentObserver(componentClass) {
  var target = componentClass.prototype;

  if (componentClass[mobxObserverProperty]) {
    var displayName = getDisplayName(target);
    console.warn("The provided component class (" + displayName + ")\n                has already been declared as an observer component.");
  } else {
    componentClass[mobxObserverProperty] = true;
  }

  if (target.componentWillReact) {
    throw new Error("The componentWillReact life-cycle event is no longer supported");
  }

  if (componentClass["__proto__"] !== react.PureComponent) {
    if (!target.shouldComponentUpdate) {
      target.shouldComponentUpdate = observerSCU;
    } else if (target.shouldComponentUpdate !== observerSCU) {
      // n.b. unequal check, instead of existence check, as @observer might be on superclass as well
      throw new Error("It is not allowed to use shouldComponentUpdate in observer based components.");
    }
  } // this.props and this.state are made observable, just to make sure @computed fields that
  // are defined inside the component, and which rely on state or props, re-compute if state or props change
  // (otherwise the computed wouldn't update and become stale on props change, since props are not observable)
  // However, this solution is not without it's own problems: https://github.com/mobxjs/mobx-react/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Aobservable-props-or-not+


  makeObservableProp(target, "props");
  makeObservableProp(target, "state");

  if (componentClass.contextType) {
    makeObservableProp(target, "context");
  }

  var originalRender = target.render;

  if (typeof originalRender !== "function") {
    var _displayName = getDisplayName(target);

    throw new Error("[mobx-react] class component (" + _displayName + ") is missing `render` method." + "\n`observer` requires `render` being a function defined on prototype." + "\n`render = () => {}` or `render = function() {}` is not supported.");
  }

  target.render = function () {
    this.render = isUsingStaticRendering() ? originalRender : createReactiveRender.call(this, originalRender);
    return this.render();
  };

  patch(target, "componentDidMount", function () {
    this[mobxIsUnmounted] = false;

    if (!this.render[mobxAdminProperty]) {
      // Reaction is re-created automatically during render, but a component can re-mount and skip render #3395.
      // To re-create the reaction and re-subscribe to relevant observables we have to force an update.
      react.Component.prototype.forceUpdate.call(this);
    }
  });
  patch(target, "componentWillUnmount", function () {
    if (isUsingStaticRendering()) {
      return;
    }

    var reaction = this.render[mobxAdminProperty];

    if (reaction) {
      reaction.dispose(); // Forces reaction to be re-created on next render

      this.render[mobxAdminProperty] = null;
    } else {
      // Render may have been hot-swapped and/or overridden by a subclass.
      var _displayName2 = getDisplayName(this);

      console.warn("The reactive render of an observer class component (" + _displayName2 + ")\n                was overridden after MobX attached. This may result in a memory leak if the\n                overridden reactive render was not properly disposed.");
    }

    this[mobxIsUnmounted] = true;
  });
  return componentClass;
} // Generates a friendly name for debugging

function getDisplayName(comp) {
  return comp.displayName || comp.name || comp.constructor && (comp.constructor.displayName || comp.constructor.name) || "<component>";
}

function createReactiveRender(originalRender) {
  var _this = this;

  /**
   * If props are shallowly modified, react will render anyway,
   * so atom.reportChanged() should not result in yet another re-render
   */
  setHiddenProp(this, skipRenderKey, false);
  /**
   * forceUpdate will re-assign this.props. We don't want that to cause a loop,
   * so detect these changes
   */

  setHiddenProp(this, isForcingUpdateKey, false);
  var initialName = getDisplayName(this);
  var boundOriginalRender = originalRender.bind(this);
  var isRenderingPending = false;

  var createReaction = function createReaction() {
    var reaction = new mobx_esm/* Reaction */.le(initialName + ".render()", function () {
      if (!isRenderingPending) {
        // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.test.tsx)
        // This unidiomatic React usage but React will correctly warn about this so we continue as usual
        // See #85 / Pull #44
        isRenderingPending = true;

        if (_this[mobxIsUnmounted] !== true) {
          var hasError = true;

          try {
            setHiddenProp(_this, isForcingUpdateKey, true);

            if (!_this[skipRenderKey]) {
              react.Component.prototype.forceUpdate.call(_this);
            }

            hasError = false;
          } finally {
            setHiddenProp(_this, isForcingUpdateKey, false);

            if (hasError) {
              reaction.dispose(); // Forces reaction to be re-created on next render

              _this.render[mobxAdminProperty] = null;
            }
          }
        }
      }
    });
    reaction["reactComponent"] = _this;
    return reaction;
  };

  function reactiveRender() {
    var _reactiveRender$mobxA;

    isRenderingPending = false; // Create reaction lazily to support re-mounting #3395

    var reaction = (_reactiveRender$mobxA = reactiveRender[mobxAdminProperty]) != null ? _reactiveRender$mobxA : reactiveRender[mobxAdminProperty] = createReaction();
    var exception = undefined;
    var rendering = undefined;
    reaction.track(function () {
      try {
        // TODO@major
        // Optimization: replace with _allowStateChangesStart/End (not available in mobx@6.0.0)
        rendering = (0,mobx_esm/* _allowStateChanges */.$$)(false, boundOriginalRender);
      } catch (e) {
        exception = e;
      }
    });

    if (exception) {
      throw exception;
    }

    return rendering;
  }

  return reactiveRender;
}

function observerSCU(nextProps, nextState) {
  if (isUsingStaticRendering()) {
    console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.");
  } // update on any state changes (as is the default)


  if (this.state !== nextState) {
    return true;
  } // update if props are shallowly not equal, inspired by PureRenderMixin
  // we could return just 'false' here, and avoid the `skipRender` checks etc
  // however, it is nicer if lifecycle events are triggered like usually,
  // so we return true here if props are shallowly modified.


  return !shallowEqual(this.props, nextProps);
}

function makeObservableProp(target, propName) {
  var valueHolderKey = newSymbol("reactProp_" + propName + "_valueHolder");
  var atomHolderKey = newSymbol("reactProp_" + propName + "_atomHolder");

  function getAtom() {
    if (!this[atomHolderKey]) {
      setHiddenProp(this, atomHolderKey, (0,mobx_esm/* createAtom */.cp)("reactive " + propName));
    }

    return this[atomHolderKey];
  }

  Object.defineProperty(target, propName, {
    configurable: true,
    enumerable: true,
    get: function get() {
      var prevReadState = false; // Why this check? BC?
      // @ts-expect-error

      if (mobx_esm/* _allowStateReadsStart */.wM && mobx_esm/* _allowStateReadsEnd */.mJ) {
        prevReadState = (0,mobx_esm/* _allowStateReadsStart */.wM)(true);
      }

      getAtom.call(this).reportObserved(); // Why this check? BC?
      // @ts-expect-error

      if (mobx_esm/* _allowStateReadsStart */.wM && mobx_esm/* _allowStateReadsEnd */.mJ) {
        (0,mobx_esm/* _allowStateReadsEnd */.mJ)(prevReadState);
      }

      return this[valueHolderKey];
    },
    set: function set(v) {
      if (!this[isForcingUpdateKey] && !shallowEqual(this[valueHolderKey], v)) {
        setHiddenProp(this, valueHolderKey, v);
        setHiddenProp(this, skipRenderKey, true);
        getAtom.call(this).reportChanged();
        setHiddenProp(this, skipRenderKey, false);
      } else {
        setHiddenProp(this, valueHolderKey, v);
      }
    }
  });
}

/**
 * Observer function / decorator
 */

function mobxreact_esm_observer(component) {
  if (component["isMobxInjector"] === true) {
    console.warn("Mobx observer: You are trying to use `observer` on a component that already has `inject`. Please apply `observer` before applying `inject`");
  }

  if (Object.prototype.isPrototypeOf.call(react.Component, component) || Object.prototype.isPrototypeOf.call(react.PureComponent, component)) {
    // Class component
    return makeClassComponentObserver(component);
  } else {
    // Function component
    return observer(component);
  }
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded = ["children"];
var MobXProviderContext = /*#__PURE__*/react.createContext({});
function Provider(props) {
  var children = props.children,
      stores = _objectWithoutPropertiesLoose(props, _excluded);

  var parentValue = react.useContext(MobXProviderContext);
  var mutableProviderRef = react.useRef(_extends({}, parentValue, stores));
  var value = mutableProviderRef.current;

  if (false) { var newValue; }

  return react.createElement(MobXProviderContext.Provider, {
    value: value
  }, children);
}
Provider.displayName = "MobXProvider";

/**
 * Store Injection
 */

function createStoreInjector(grabStoresFn, component, injectNames, makeReactive) {
  // Support forward refs
  var Injector = React__default.forwardRef(function (props, ref) {
    var newProps = _extends({}, props);

    var context = React__default.useContext(MobXProviderContext);
    Object.assign(newProps, grabStoresFn(context || {}, newProps) || {});

    if (ref) {
      newProps.ref = ref;
    }

    return React__default.createElement(component, newProps);
  });
  if (makeReactive) Injector = mobxreact_esm_observer(Injector);
  Injector["isMobxInjector"] = true; // assigned late to suppress observer warning
  // Static fields from component should be visible on the generated Injector

  mobxreact_esm_copyStaticProperties(component, Injector);
  Injector["wrappedComponent"] = component;
  Injector.displayName = getInjectName(component, injectNames);
  return Injector;
}

function getInjectName(component, injectNames) {
  var displayName;
  var componentName = component.displayName || component.name || component.constructor && component.constructor.name || "Component";
  if (injectNames) displayName = "inject-with-" + injectNames + "(" + componentName + ")";else displayName = "inject(" + componentName + ")";
  return displayName;
}

function grabStoresByName(storeNames) {
  return function (baseStores, nextProps) {
    storeNames.forEach(function (storeName) {
      if (storeName in nextProps // prefer props over stores
      ) return;
      if (!(storeName in baseStores)) throw new Error("MobX injector: Store '" + storeName + "' is not available! Make sure it is provided by some Provider");
      nextProps[storeName] = baseStores[storeName];
    });
    return nextProps;
  };
}
/**
 * higher order component that injects stores to a child.
 * takes either a varargs list of strings, which are stores read from the context,
 * or a function that manually maps the available stores from the context to props:
 * storesToProps(mobxStores, props, context) => newProps
 */


function inject() {
  for (var _len = arguments.length, storeNames = new Array(_len), _key = 0; _key < _len; _key++) {
    storeNames[_key] = arguments[_key];
  }

  if (typeof arguments[0] === "function") {
    var grabStoresFn = arguments[0];
    return function (componentClass) {
      return createStoreInjector(grabStoresFn, componentClass, grabStoresFn.name, true);
    };
  } else {
    return function (componentClass) {
      return createStoreInjector(grabStoresByName(storeNames), componentClass, storeNames.join("-"), false);
    };
  }
}

var protoStoreKey = /*#__PURE__*/(/* unused pure expression or super */ null && (newSymbol("disposeOnUnmountProto")));
var instStoreKey = /*#__PURE__*/(/* unused pure expression or super */ null && (newSymbol("disposeOnUnmountInst")));

function runDisposersOnWillUnmount() {
  var _this = this;
  [].concat(this[protoStoreKey] || [], this[instStoreKey] || []).forEach(function (propKeyOrFunction) {
    var prop = typeof propKeyOrFunction === "string" ? _this[propKeyOrFunction] : propKeyOrFunction;

    if (prop !== undefined && prop !== null) {
      if (Array.isArray(prop)) prop.map(function (f) {
        return f();
      });else prop();
    }
  });
}

function disposeOnUnmount(target, propertyKeyOrFunction) {
  if (Array.isArray(propertyKeyOrFunction)) {
    return propertyKeyOrFunction.map(function (fn) {
      return disposeOnUnmount(target, fn);
    });
  }

  var c = Object.getPrototypeOf(target).constructor;
  var c2 = Object.getPrototypeOf(target.constructor); // Special case for react-hot-loader

  var c3 = Object.getPrototypeOf(Object.getPrototypeOf(target));

  if (!(c === React__default.Component || c === React__default.PureComponent || c2 === React__default.Component || c2 === React__default.PureComponent || c3 === React__default.Component || c3 === React__default.PureComponent)) {
    throw new Error("[mobx-react] disposeOnUnmount only supports direct subclasses of React.Component or React.PureComponent.");
  }

  if (typeof propertyKeyOrFunction !== "string" && typeof propertyKeyOrFunction !== "function" && !Array.isArray(propertyKeyOrFunction)) {
    throw new Error("[mobx-react] disposeOnUnmount only works if the parameter is either a property key or a function.");
  } // decorator's target is the prototype, so it doesn't have any instance properties like props


  var isDecorator = typeof propertyKeyOrFunction === "string"; // add property key / function we want run (disposed) to the store

  var componentWasAlreadyModified = !!target[protoStoreKey] || !!target[instStoreKey];
  var store = isDecorator ? // decorators are added to the prototype store
  target[protoStoreKey] || (target[protoStoreKey] = []) : // functions are added to the instance store
  target[instStoreKey] || (target[instStoreKey] = []);
  store.push(propertyKeyOrFunction); // tweak the component class componentWillUnmount if not done already

  if (!componentWasAlreadyModified) {
    patch(target, "componentWillUnmount", runDisposersOnWillUnmount);
  } // return the disposer as is if invoked as a non decorator


  if (typeof propertyKeyOrFunction !== "string") {
    return propertyKeyOrFunction;
  }
}

function createChainableTypeChecker(validator) {
  function checkType(isRequired, props, propName, componentName, location, propFullName) {
    for (var _len = arguments.length, rest = new Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
      rest[_key - 6] = arguments[_key];
    }

    return (0,mobx_esm/* untracked */.rg)(function () {
      componentName = componentName || "<<anonymous>>";
      propFullName = propFullName || propName;

      if (props[propName] == null) {
        if (isRequired) {
          var actual = props[propName] === null ? "null" : "undefined";
          return new Error("The " + location + " `" + propFullName + "` is marked as required " + "in `" + componentName + "`, but its value is `" + actual + "`.");
        }

        return null;
      } else {
        // @ts-ignore rest arg is necessary for some React internals - fails tests otherwise
        return validator.apply(void 0, [props, propName, componentName, location, propFullName].concat(rest));
      }
    });
  }

  var chainedCheckType = checkType.bind(null, false); // Add isRequired to satisfy Requirable

  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
} // Copied from React.PropTypes


function isSymbol(propType, propValue) {
  // Native Symbol.
  if (propType === "symbol") {
    return true;
  } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


  if (propValue["@@toStringTag"] === "Symbol") {
    return true;
  } // Fallback for non-spec compliant Symbols which are polyfilled.


  if (typeof Symbol === "function" && propValue instanceof Symbol) {
    return true;
  }

  return false;
} // Copied from React.PropTypes


function getPropType(propValue) {
  var propType = typeof propValue;

  if (Array.isArray(propValue)) {
    return "array";
  }

  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return "object";
  }

  if (isSymbol(propType, propValue)) {
    return "symbol";
  }

  return propType;
} // This handles more types than `getPropType`. Only used for error messages.
// Copied from React.PropTypes


function getPreciseType(propValue) {
  var propType = getPropType(propValue);

  if (propType === "object") {
    if (propValue instanceof Date) {
      return "date";
    } else if (propValue instanceof RegExp) {
      return "regexp";
    }
  }

  return propType;
}

function createObservableTypeCheckerCreator(allowNativeType, mobxType) {
  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
    return (0,mobx_esm/* untracked */.rg)(function () {
      if (allowNativeType) {
        if (getPropType(props[propName]) === mobxType.toLowerCase()) return null;
      }

      var mobxChecker;

      switch (mobxType) {
        case "Array":
          mobxChecker = mobx_esm/* isObservableArray */.Ei;
          break;

        case "Object":
          mobxChecker = mobx_esm/* isObservableObject */.Pb;
          break;

        case "Map":
          mobxChecker = mobx_esm/* isObservableMap */.LJ;
          break;

        default:
          throw new Error("Unexpected mobxType: " + mobxType);
      }

      var propValue = props[propName];

      if (!mobxChecker(propValue)) {
        var preciseType = getPreciseType(propValue);
        var nativeTypeExpectationMessage = allowNativeType ? " or javascript `" + mobxType.toLowerCase() + "`" : "";
        return new Error("Invalid prop `" + propFullName + "` of type `" + preciseType + "` supplied to" + " `" + componentName + "`, expected `mobx.Observable" + mobxType + "`" + nativeTypeExpectationMessage + ".");
      }

      return null;
    });
  });
}

function createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {
  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
      rest[_key2 - 5] = arguments[_key2];
    }

    return (0,mobx_esm/* untracked */.rg)(function () {
      if (typeof typeChecker !== "function") {
        return new Error("Property `" + propFullName + "` of component `" + componentName + "` has " + "invalid PropType notation.");
      } else {
        var error = createObservableTypeCheckerCreator(allowNativeType, "Array")(props, propName, componentName, location, propFullName);
        if (error instanceof Error) return error;
        var propValue = props[propName];

        for (var i = 0; i < propValue.length; i++) {
          error = typeChecker.apply(void 0, [propValue, i, componentName, location, propFullName + "[" + i + "]"].concat(rest));
          if (error instanceof Error) return error;
        }

        return null;
      }
    });
  });
}

var observableArray = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Array");
var observableArrayOf = /*#__PURE__*/createObservableArrayOfTypeChecker.bind(null, false);
var observableMap = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Map");
var observableObject = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Object");
var arrayOrObservableArray = /*#__PURE__*/createObservableTypeCheckerCreator(true, "Array");
var arrayOrObservableArrayOf = /*#__PURE__*/createObservableArrayOfTypeChecker.bind(null, true);
var objectOrObservableObject = /*#__PURE__*/createObservableTypeCheckerCreator(true, "Object");
var PropTypes = {
  observableArray: observableArray,
  observableArrayOf: observableArrayOf,
  observableMap: observableMap,
  observableObject: observableObject,
  arrayOrObservableArray: arrayOrObservableArray,
  arrayOrObservableArrayOf: arrayOrObservableArrayOf,
  objectOrObservableObject: objectOrObservableObject
};

if (!react.Component) throw new Error("mobx-react requires React to be available");
if (!mobx_esm/* observable */.LO) throw new Error("mobx-react requires mobx to be available");




/***/ }),

/***/ 2860:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZP": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony exports ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode */


/** Highest positive signed 32-bit float value */
const maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

/** Bootstring parameters */
const base = 36;
const tMin = 1;
const tMax = 26;
const skew = 38;
const damp = 700;
const initialBias = 72;
const initialN = 128; // 0x80
const delimiter = '-'; // '\x2D'

/** Regular expressions */
const regexPunycode = /^xn--/;
const regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

/** Error messages */
const errors = {
	'overflow': 'Overflow: input needs wider integers to process',
	'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
	'invalid-input': 'Invalid input'
};

/** Convenience shortcuts */
const baseMinusTMin = base - tMin;
const floor = Math.floor;
const stringFromCharCode = String.fromCharCode;

/*--------------------------------------------------------------------------*/

/**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */
function error(type) {
	throw new RangeError(errors[type]);
}

/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */
function map(array, fn) {
	const result = [];
	let length = array.length;
	while (length--) {
		result[length] = fn(array[length]);
	}
	return result;
}

/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {Array} A new string of characters returned by the callback
 * function.
 */
function mapDomain(string, fn) {
	const parts = string.split('@');
	let result = '';
	if (parts.length > 1) {
		// In email addresses, only the domain name should be punycoded. Leave
		// the local part (i.e. everything up to `@`) intact.
		result = parts[0] + '@';
		string = parts[1];
	}
	// Avoid `split(regex)` for IE8 compatibility. See #17.
	string = string.replace(regexSeparators, '\x2E');
	const labels = string.split('.');
	const encoded = map(labels, fn).join('.');
	return result + encoded;
}

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */
function ucs2decode(string) {
	const output = [];
	let counter = 0;
	const length = string.length;
	while (counter < length) {
		const value = string.charCodeAt(counter++);
		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
			// It's a high surrogate, and there is a next character.
			const extra = string.charCodeAt(counter++);
			if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
			} else {
				// It's an unmatched surrogate; only append this code unit, in case the
				// next code unit is the high surrogate of a surrogate pair.
				output.push(value);
				counter--;
			}
		} else {
			output.push(value);
		}
	}
	return output;
}

/**
 * Creates a string based on an array of numeric code points.
 * @see `punycode.ucs2.decode`
 * @memberOf punycode.ucs2
 * @name encode
 * @param {Array} codePoints The array of numeric code points.
 * @returns {String} The new Unicode string (UCS-2).
 */
const ucs2encode = array => String.fromCodePoint(...array);

/**
 * Converts a basic code point into a digit/integer.
 * @see `digitToBasic()`
 * @private
 * @param {Number} codePoint The basic numeric code point value.
 * @returns {Number} The numeric value of a basic code point (for use in
 * representing integers) in the range `0` to `base - 1`, or `base` if
 * the code point does not represent a value.
 */
const basicToDigit = function(codePoint) {
	if (codePoint - 0x30 < 0x0A) {
		return codePoint - 0x16;
	}
	if (codePoint - 0x41 < 0x1A) {
		return codePoint - 0x41;
	}
	if (codePoint - 0x61 < 0x1A) {
		return codePoint - 0x61;
	}
	return base;
};

/**
 * Converts a digit/integer into a basic code point.
 * @see `basicToDigit()`
 * @private
 * @param {Number} digit The numeric value of a basic code point.
 * @returns {Number} The basic code point whose value (when used for
 * representing integers) is `digit`, which needs to be in the range
 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
 * used; else, the lowercase form is used. The behavior is undefined
 * if `flag` is non-zero and `digit` has no uppercase form.
 */
const digitToBasic = function(digit, flag) {
	//  0..25 map to ASCII a..z or A..Z
	// 26..35 map to ASCII 0..9
	return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 * @private
 */
const adapt = function(delta, numPoints, firstTime) {
	let k = 0;
	delta = firstTime ? floor(delta / damp) : delta >> 1;
	delta += floor(delta / numPoints);
	for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
		delta = floor(delta / baseMinusTMin);
	}
	return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
 * symbols.
 * @memberOf punycode
 * @param {String} input The Punycode string of ASCII-only symbols.
 * @returns {String} The resulting string of Unicode symbols.
 */
const decode = function(input) {
	// Don't use UCS-2.
	const output = [];
	const inputLength = input.length;
	let i = 0;
	let n = initialN;
	let bias = initialBias;

	// Handle the basic code points: let `basic` be the number of input code
	// points before the last delimiter, or `0` if there is none, then copy
	// the first basic code points to the output.

	let basic = input.lastIndexOf(delimiter);
	if (basic < 0) {
		basic = 0;
	}

	for (let j = 0; j < basic; ++j) {
		// if it's not a basic code point
		if (input.charCodeAt(j) >= 0x80) {
			error('not-basic');
		}
		output.push(input.charCodeAt(j));
	}

	// Main decoding loop: start just after the last delimiter if any basic code
	// points were copied; start at the beginning otherwise.

	for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

		// `index` is the index of the next character to be consumed.
		// Decode a generalized variable-length integer into `delta`,
		// which gets added to `i`. The overflow checking is easier
		// if we increase `i` as we go, then subtract off its starting
		// value at the end to obtain `delta`.
		let oldi = i;
		for (let w = 1, k = base; /* no condition */; k += base) {

			if (index >= inputLength) {
				error('invalid-input');
			}

			const digit = basicToDigit(input.charCodeAt(index++));

			if (digit >= base || digit > floor((maxInt - i) / w)) {
				error('overflow');
			}

			i += digit * w;
			const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

			if (digit < t) {
				break;
			}

			const baseMinusT = base - t;
			if (w > floor(maxInt / baseMinusT)) {
				error('overflow');
			}

			w *= baseMinusT;

		}

		const out = output.length + 1;
		bias = adapt(i - oldi, out, oldi == 0);

		// `i` was supposed to wrap around from `out` to `0`,
		// incrementing `n` each time, so we'll fix that now:
		if (floor(i / out) > maxInt - n) {
			error('overflow');
		}

		n += floor(i / out);
		i %= out;

		// Insert `n` at position `i` of the output.
		output.splice(i++, 0, n);

	}

	return String.fromCodePoint(...output);
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 * @memberOf punycode
 * @param {String} input The string of Unicode symbols.
 * @returns {String} The resulting Punycode string of ASCII-only symbols.
 */
const encode = function(input) {
	const output = [];

	// Convert the input in UCS-2 to an array of Unicode code points.
	input = ucs2decode(input);

	// Cache the length.
	let inputLength = input.length;

	// Initialize the state.
	let n = initialN;
	let delta = 0;
	let bias = initialBias;

	// Handle the basic code points.
	for (const currentValue of input) {
		if (currentValue < 0x80) {
			output.push(stringFromCharCode(currentValue));
		}
	}

	let basicLength = output.length;
	let handledCPCount = basicLength;

	// `handledCPCount` is the number of code points that have been handled;
	// `basicLength` is the number of basic code points.

	// Finish the basic string with a delimiter unless it's empty.
	if (basicLength) {
		output.push(delimiter);
	}

	// Main encoding loop:
	while (handledCPCount < inputLength) {

		// All non-basic code points < n have been handled already. Find the next
		// larger one:
		let m = maxInt;
		for (const currentValue of input) {
			if (currentValue >= n && currentValue < m) {
				m = currentValue;
			}
		}

		// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
		// but guard against overflow.
		const handledCPCountPlusOne = handledCPCount + 1;
		if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
			error('overflow');
		}

		delta += (m - n) * handledCPCountPlusOne;
		n = m;

		for (const currentValue of input) {
			if (currentValue < n && ++delta > maxInt) {
				error('overflow');
			}
			if (currentValue == n) {
				// Represent delta as a generalized variable-length integer.
				let q = delta;
				for (let k = base; /* no condition */; k += base) {
					const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
					if (q < t) {
						break;
					}
					const qMinusT = q - t;
					const baseMinusT = base - t;
					output.push(
						stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
					);
					q = floor(qMinusT / baseMinusT);
				}

				output.push(stringFromCharCode(digitToBasic(q, 0)));
				bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
				delta = 0;
				++handledCPCount;
			}
		}

		++delta;
		++n;

	}
	return output.join('');
};

/**
 * Converts a Punycode string representing a domain name or an email address
 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
 * it doesn't matter if you call it on a string that has already been
 * converted to Unicode.
 * @memberOf punycode
 * @param {String} input The Punycoded domain name or email address to
 * convert to Unicode.
 * @returns {String} The Unicode representation of the given Punycode
 * string.
 */
const toUnicode = function(input) {
	return mapDomain(input, function(string) {
		return regexPunycode.test(string)
			? decode(string.slice(4).toLowerCase())
			: string;
	});
};

/**
 * Converts a Unicode string representing a domain name or an email address to
 * Punycode. Only the non-ASCII parts of the domain name will be converted,
 * i.e. it doesn't matter if you call it with a domain that's already in
 * ASCII.
 * @memberOf punycode
 * @param {String} input The domain name or email address to convert, as a
 * Unicode string.
 * @returns {String} The Punycode representation of the given domain name or
 * email address.
 */
const toASCII = function(input) {
	return mapDomain(input, function(string) {
		return regexNonASCII.test(string)
			? 'xn--' + encode(string)
			: string;
	});
};

/*--------------------------------------------------------------------------*/

/** Define the public API */
const punycode = {
	/**
	 * A string representing the current Punycode.js version number.
	 * @memberOf punycode
	 * @type String
	 */
	'version': '2.1.0',
	/**
	 * An object of methods to convert from JavaScript's internal character
	 * representation (UCS-2) to Unicode code points, and back.
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode
	 * @type Object
	 */
	'ucs2': {
		'decode': ucs2decode,
		'encode': ucs2encode
	},
	'decode': decode,
	'encode': encode,
	'toASCII': toASCII,
	'toUnicode': toUnicode
};


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (punycode);


/***/ }),

/***/ 35491:
/***/ ((module) => {

"use strict";


var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ 48190:
/***/ ((module) => {

"use strict";


var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ 60664:
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ 47630:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ 19532:
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ 82563:
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ 53679:
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (module) {
  /* webextension-polyfill - v0.10.0 - Fri Aug 12 2022 19:42:44 */

  /* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */

  /* vim: set sts=2 sw=2 et tw=80: */

  /* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
  "use strict";

  if (!globalThis.chrome?.runtime?.id) {
    throw new Error("This script should only be loaded in a browser extension.");
  }

  if (typeof globalThis.browser === "undefined" || Object.getPrototypeOf(globalThis.browser) !== Object.prototype) {
    const CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE = "The message port closed before a response was received."; // Wrapping the bulk of this polyfill in a one-time-use function is a minor
    // optimization for Firefox. Since Spidermonkey does not fully parse the
    // contents of a function until the first time it's called, and since it will
    // never actually need to be called, this allows the polyfill to be included
    // in Firefox nearly for free.

    const wrapAPIs = extensionAPIs => {
      // NOTE: apiMetadata is associated to the content of the api-metadata.json file
      // at build time by replacing the following "include" with the content of the
      // JSON file.
      const apiMetadata = {
        "alarms": {
          "clear": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "clearAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "get": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "bookmarks": {
          "create": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getChildren": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getRecent": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getSubTree": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTree": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "move": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeTree": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "browserAction": {
          "disable": {
            "minArgs": 0,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "enable": {
            "minArgs": 0,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "getBadgeBackgroundColor": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getBadgeText": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getPopup": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTitle": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "openPopup": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "setBadgeBackgroundColor": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setBadgeText": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setIcon": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "setPopup": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setTitle": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "browsingData": {
          "remove": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "removeCache": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeCookies": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeDownloads": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeFormData": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeHistory": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeLocalStorage": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removePasswords": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removePluginData": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "settings": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "commands": {
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "contextMenus": {
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "cookies": {
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAllCookieStores": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "set": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "devtools": {
          "inspectedWindow": {
            "eval": {
              "minArgs": 1,
              "maxArgs": 2,
              "singleCallbackArg": false
            }
          },
          "panels": {
            "create": {
              "minArgs": 3,
              "maxArgs": 3,
              "singleCallbackArg": true
            },
            "elements": {
              "createSidebarPane": {
                "minArgs": 1,
                "maxArgs": 1
              }
            }
          }
        },
        "downloads": {
          "cancel": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "download": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "erase": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getFileIcon": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "open": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "pause": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeFile": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "resume": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "show": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "extension": {
          "isAllowedFileSchemeAccess": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "isAllowedIncognitoAccess": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "history": {
          "addUrl": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "deleteAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "deleteRange": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "deleteUrl": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getVisits": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "search": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "i18n": {
          "detectLanguage": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAcceptLanguages": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "identity": {
          "launchWebAuthFlow": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "idle": {
          "queryState": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "management": {
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getSelf": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "setEnabled": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "uninstallSelf": {
            "minArgs": 0,
            "maxArgs": 1
          }
        },
        "notifications": {
          "clear": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "create": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getPermissionLevel": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        },
        "pageAction": {
          "getPopup": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getTitle": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "hide": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setIcon": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "setPopup": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "setTitle": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          },
          "show": {
            "minArgs": 1,
            "maxArgs": 1,
            "fallbackToNoCallback": true
          }
        },
        "permissions": {
          "contains": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "request": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "runtime": {
          "getBackgroundPage": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getPlatformInfo": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "openOptionsPage": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "requestUpdateCheck": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "sendMessage": {
            "minArgs": 1,
            "maxArgs": 3
          },
          "sendNativeMessage": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "setUninstallURL": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "sessions": {
          "getDevices": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getRecentlyClosed": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "restore": {
            "minArgs": 0,
            "maxArgs": 1
          }
        },
        "storage": {
          "local": {
            "clear": {
              "minArgs": 0,
              "maxArgs": 0
            },
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "remove": {
              "minArgs": 1,
              "maxArgs": 1
            },
            "set": {
              "minArgs": 1,
              "maxArgs": 1
            }
          },
          "managed": {
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            }
          },
          "sync": {
            "clear": {
              "minArgs": 0,
              "maxArgs": 0
            },
            "get": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "getBytesInUse": {
              "minArgs": 0,
              "maxArgs": 1
            },
            "remove": {
              "minArgs": 1,
              "maxArgs": 1
            },
            "set": {
              "minArgs": 1,
              "maxArgs": 1
            }
          }
        },
        "tabs": {
          "captureVisibleTab": {
            "minArgs": 0,
            "maxArgs": 2
          },
          "create": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "detectLanguage": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "discard": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "duplicate": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "executeScript": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getCurrent": {
            "minArgs": 0,
            "maxArgs": 0
          },
          "getZoom": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getZoomSettings": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "goBack": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "goForward": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "highlight": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "insertCSS": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "move": {
            "minArgs": 2,
            "maxArgs": 2
          },
          "query": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "reload": {
            "minArgs": 0,
            "maxArgs": 2
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "removeCSS": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "sendMessage": {
            "minArgs": 2,
            "maxArgs": 3
          },
          "setZoom": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "setZoomSettings": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "update": {
            "minArgs": 1,
            "maxArgs": 2
          }
        },
        "topSites": {
          "get": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "webNavigation": {
          "getAllFrames": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "getFrame": {
            "minArgs": 1,
            "maxArgs": 1
          }
        },
        "webRequest": {
          "handlerBehaviorChanged": {
            "minArgs": 0,
            "maxArgs": 0
          }
        },
        "windows": {
          "create": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "get": {
            "minArgs": 1,
            "maxArgs": 2
          },
          "getAll": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getCurrent": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "getLastFocused": {
            "minArgs": 0,
            "maxArgs": 1
          },
          "remove": {
            "minArgs": 1,
            "maxArgs": 1
          },
          "update": {
            "minArgs": 2,
            "maxArgs": 2
          }
        }
      };

      if (Object.keys(apiMetadata).length === 0) {
        throw new Error("api-metadata.json has not been included in browser-polyfill");
      }
      /**
       * A WeakMap subclass which creates and stores a value for any key which does
       * not exist when accessed, but behaves exactly as an ordinary WeakMap
       * otherwise.
       *
       * @param {function} createItem
       *        A function which will be called in order to create the value for any
       *        key which does not exist, the first time it is accessed. The
       *        function receives, as its only argument, the key being created.
       */


      class DefaultWeakMap extends WeakMap {
        constructor(createItem, items = undefined) {
          super(items);
          this.createItem = createItem;
        }

        get(key) {
          if (!this.has(key)) {
            this.set(key, this.createItem(key));
          }

          return super.get(key);
        }

      }
      /**
       * Returns true if the given object is an object with a `then` method, and can
       * therefore be assumed to behave as a Promise.
       *
       * @param {*} value The value to test.
       * @returns {boolean} True if the value is thenable.
       */


      const isThenable = value => {
        return value && typeof value === "object" && typeof value.then === "function";
      };
      /**
       * Creates and returns a function which, when called, will resolve or reject
       * the given promise based on how it is called:
       *
       * - If, when called, `chrome.runtime.lastError` contains a non-null object,
       *   the promise is rejected with that value.
       * - If the function is called with exactly one argument, the promise is
       *   resolved to that value.
       * - Otherwise, the promise is resolved to an array containing all of the
       *   function's arguments.
       *
       * @param {object} promise
       *        An object containing the resolution and rejection functions of a
       *        promise.
       * @param {function} promise.resolve
       *        The promise's resolution function.
       * @param {function} promise.reject
       *        The promise's rejection function.
       * @param {object} metadata
       *        Metadata about the wrapped method which has created the callback.
       * @param {boolean} metadata.singleCallbackArg
       *        Whether or not the promise is resolved with only the first
       *        argument of the callback, alternatively an array of all the
       *        callback arguments is resolved. By default, if the callback
       *        function is invoked with only a single argument, that will be
       *        resolved to the promise, while all arguments will be resolved as
       *        an array if multiple are given.
       *
       * @returns {function}
       *        The generated callback function.
       */


      const makeCallback = (promise, metadata) => {
        return (...callbackArgs) => {
          if (extensionAPIs.runtime.lastError) {
            promise.reject(new Error(extensionAPIs.runtime.lastError.message));
          } else if (metadata.singleCallbackArg || callbackArgs.length <= 1 && metadata.singleCallbackArg !== false) {
            promise.resolve(callbackArgs[0]);
          } else {
            promise.resolve(callbackArgs);
          }
        };
      };

      const pluralizeArguments = numArgs => numArgs == 1 ? "argument" : "arguments";
      /**
       * Creates a wrapper function for a method with the given name and metadata.
       *
       * @param {string} name
       *        The name of the method which is being wrapped.
       * @param {object} metadata
       *        Metadata about the method being wrapped.
       * @param {integer} metadata.minArgs
       *        The minimum number of arguments which must be passed to the
       *        function. If called with fewer than this number of arguments, the
       *        wrapper will raise an exception.
       * @param {integer} metadata.maxArgs
       *        The maximum number of arguments which may be passed to the
       *        function. If called with more than this number of arguments, the
       *        wrapper will raise an exception.
       * @param {boolean} metadata.singleCallbackArg
       *        Whether or not the promise is resolved with only the first
       *        argument of the callback, alternatively an array of all the
       *        callback arguments is resolved. By default, if the callback
       *        function is invoked with only a single argument, that will be
       *        resolved to the promise, while all arguments will be resolved as
       *        an array if multiple are given.
       *
       * @returns {function(object, ...*)}
       *       The generated wrapper function.
       */


      const wrapAsyncFunction = (name, metadata) => {
        return function asyncFunctionWrapper(target, ...args) {
          if (args.length < metadata.minArgs) {
            throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);
          }

          if (args.length > metadata.maxArgs) {
            throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);
          }

          return new Promise((resolve, reject) => {
            if (metadata.fallbackToNoCallback) {
              // This API method has currently no callback on Chrome, but it return a promise on Firefox,
              // and so the polyfill will try to call it with a callback first, and it will fallback
              // to not passing the callback if the first call fails.
              try {
                target[name](...args, makeCallback({
                  resolve,
                  reject
                }, metadata));
              } catch (cbError) {
                console.warn(`${name} API method doesn't seem to support the callback parameter, ` + "falling back to call it without a callback: ", cbError);
                target[name](...args); // Update the API method metadata, so that the next API calls will not try to
                // use the unsupported callback anymore.

                metadata.fallbackToNoCallback = false;
                metadata.noCallback = true;
                resolve();
              }
            } else if (metadata.noCallback) {
              target[name](...args);
              resolve();
            } else {
              target[name](...args, makeCallback({
                resolve,
                reject
              }, metadata));
            }
          });
        };
      };
      /**
       * Wraps an existing method of the target object, so that calls to it are
       * intercepted by the given wrapper function. The wrapper function receives,
       * as its first argument, the original `target` object, followed by each of
       * the arguments passed to the original method.
       *
       * @param {object} target
       *        The original target object that the wrapped method belongs to.
       * @param {function} method
       *        The method being wrapped. This is used as the target of the Proxy
       *        object which is created to wrap the method.
       * @param {function} wrapper
       *        The wrapper function which is called in place of a direct invocation
       *        of the wrapped method.
       *
       * @returns {Proxy<function>}
       *        A Proxy object for the given method, which invokes the given wrapper
       *        method in its place.
       */


      const wrapMethod = (target, method, wrapper) => {
        return new Proxy(method, {
          apply(targetMethod, thisObj, args) {
            return wrapper.call(thisObj, target, ...args);
          }

        });
      };

      let hasOwnProperty = Function.call.bind(Object.prototype.hasOwnProperty);
      /**
       * Wraps an object in a Proxy which intercepts and wraps certain methods
       * based on the given `wrappers` and `metadata` objects.
       *
       * @param {object} target
       *        The target object to wrap.
       *
       * @param {object} [wrappers = {}]
       *        An object tree containing wrapper functions for special cases. Any
       *        function present in this object tree is called in place of the
       *        method in the same location in the `target` object tree. These
       *        wrapper methods are invoked as described in {@see wrapMethod}.
       *
       * @param {object} [metadata = {}]
       *        An object tree containing metadata used to automatically generate
       *        Promise-based wrapper functions for asynchronous. Any function in
       *        the `target` object tree which has a corresponding metadata object
       *        in the same location in the `metadata` tree is replaced with an
       *        automatically-generated wrapper function, as described in
       *        {@see wrapAsyncFunction}
       *
       * @returns {Proxy<object>}
       */

      const wrapObject = (target, wrappers = {}, metadata = {}) => {
        let cache = Object.create(null);
        let handlers = {
          has(proxyTarget, prop) {
            return prop in target || prop in cache;
          },

          get(proxyTarget, prop, receiver) {
            if (prop in cache) {
              return cache[prop];
            }

            if (!(prop in target)) {
              return undefined;
            }

            let value = target[prop];

            if (typeof value === "function") {
              // This is a method on the underlying object. Check if we need to do
              // any wrapping.
              if (typeof wrappers[prop] === "function") {
                // We have a special-case wrapper for this method.
                value = wrapMethod(target, target[prop], wrappers[prop]);
              } else if (hasOwnProperty(metadata, prop)) {
                // This is an async method that we have metadata for. Create a
                // Promise wrapper for it.
                let wrapper = wrapAsyncFunction(prop, metadata[prop]);
                value = wrapMethod(target, target[prop], wrapper);
              } else {
                // This is a method that we don't know or care about. Return the
                // original method, bound to the underlying object.
                value = value.bind(target);
              }
            } else if (typeof value === "object" && value !== null && (hasOwnProperty(wrappers, prop) || hasOwnProperty(metadata, prop))) {
              // This is an object that we need to do some wrapping for the children
              // of. Create a sub-object wrapper for it with the appropriate child
              // metadata.
              value = wrapObject(value, wrappers[prop], metadata[prop]);
            } else if (hasOwnProperty(metadata, "*")) {
              // Wrap all properties in * namespace.
              value = wrapObject(value, wrappers[prop], metadata["*"]);
            } else {
              // We don't need to do any wrapping for this property,
              // so just forward all access to the underlying object.
              Object.defineProperty(cache, prop, {
                configurable: true,
                enumerable: true,

                get() {
                  return target[prop];
                },

                set(value) {
                  target[prop] = value;
                }

              });
              return value;
            }

            cache[prop] = value;
            return value;
          },

          set(proxyTarget, prop, value, receiver) {
            if (prop in cache) {
              cache[prop] = value;
            } else {
              target[prop] = value;
            }

            return true;
          },

          defineProperty(proxyTarget, prop, desc) {
            return Reflect.defineProperty(cache, prop, desc);
          },

          deleteProperty(proxyTarget, prop) {
            return Reflect.deleteProperty(cache, prop);
          }

        }; // Per contract of the Proxy API, the "get" proxy handler must return the
        // original value of the target if that value is declared read-only and
        // non-configurable. For this reason, we create an object with the
        // prototype set to `target` instead of using `target` directly.
        // Otherwise we cannot return a custom object for APIs that
        // are declared read-only and non-configurable, such as `chrome.devtools`.
        //
        // The proxy handlers themselves will still use the original `target`
        // instead of the `proxyTarget`, so that the methods and properties are
        // dereferenced via the original targets.

        let proxyTarget = Object.create(target);
        return new Proxy(proxyTarget, handlers);
      };
      /**
       * Creates a set of wrapper functions for an event object, which handles
       * wrapping of listener functions that those messages are passed.
       *
       * A single wrapper is created for each listener function, and stored in a
       * map. Subsequent calls to `addListener`, `hasListener`, or `removeListener`
       * retrieve the original wrapper, so that  attempts to remove a
       * previously-added listener work as expected.
       *
       * @param {DefaultWeakMap<function, function>} wrapperMap
       *        A DefaultWeakMap object which will create the appropriate wrapper
       *        for a given listener function when one does not exist, and retrieve
       *        an existing one when it does.
       *
       * @returns {object}
       */


      const wrapEvent = wrapperMap => ({
        addListener(target, listener, ...args) {
          target.addListener(wrapperMap.get(listener), ...args);
        },

        hasListener(target, listener) {
          return target.hasListener(wrapperMap.get(listener));
        },

        removeListener(target, listener) {
          target.removeListener(wrapperMap.get(listener));
        }

      });

      const onRequestFinishedWrappers = new DefaultWeakMap(listener => {
        if (typeof listener !== "function") {
          return listener;
        }
        /**
         * Wraps an onRequestFinished listener function so that it will return a
         * `getContent()` property which returns a `Promise` rather than using a
         * callback API.
         *
         * @param {object} req
         *        The HAR entry object representing the network request.
         */


        return function onRequestFinished(req) {
          const wrappedReq = wrapObject(req, {}
          /* wrappers */
          , {
            getContent: {
              minArgs: 0,
              maxArgs: 0
            }
          });
          listener(wrappedReq);
        };
      });
      const onMessageWrappers = new DefaultWeakMap(listener => {
        if (typeof listener !== "function") {
          return listener;
        }
        /**
         * Wraps a message listener function so that it may send responses based on
         * its return value, rather than by returning a sentinel value and calling a
         * callback. If the listener function returns a Promise, the response is
         * sent when the promise either resolves or rejects.
         *
         * @param {*} message
         *        The message sent by the other end of the channel.
         * @param {object} sender
         *        Details about the sender of the message.
         * @param {function(*)} sendResponse
         *        A callback which, when called with an arbitrary argument, sends
         *        that value as a response.
         * @returns {boolean}
         *        True if the wrapped listener returned a Promise, which will later
         *        yield a response. False otherwise.
         */


        return function onMessage(message, sender, sendResponse) {
          let didCallSendResponse = false;
          let wrappedSendResponse;
          let sendResponsePromise = new Promise(resolve => {
            wrappedSendResponse = function (response) {
              didCallSendResponse = true;
              resolve(response);
            };
          });
          let result;

          try {
            result = listener(message, sender, wrappedSendResponse);
          } catch (err) {
            result = Promise.reject(err);
          }

          const isResultThenable = result !== true && isThenable(result); // If the listener didn't returned true or a Promise, or called
          // wrappedSendResponse synchronously, we can exit earlier
          // because there will be no response sent from this listener.

          if (result !== true && !isResultThenable && !didCallSendResponse) {
            return false;
          } // A small helper to send the message if the promise resolves
          // and an error if the promise rejects (a wrapped sendMessage has
          // to translate the message into a resolved promise or a rejected
          // promise).


          const sendPromisedResult = promise => {
            promise.then(msg => {
              // send the message value.
              sendResponse(msg);
            }, error => {
              // Send a JSON representation of the error if the rejected value
              // is an instance of error, or the object itself otherwise.
              let message;

              if (error && (error instanceof Error || typeof error.message === "string")) {
                message = error.message;
              } else {
                message = "An unexpected error occurred";
              }

              sendResponse({
                __mozWebExtensionPolyfillReject__: true,
                message
              });
            }).catch(err => {
              // Print an error on the console if unable to send the response.
              console.error("Failed to send onMessage rejected reply", err);
            });
          }; // If the listener returned a Promise, send the resolved value as a
          // result, otherwise wait the promise related to the wrappedSendResponse
          // callback to resolve and send it as a response.


          if (isResultThenable) {
            sendPromisedResult(result);
          } else {
            sendPromisedResult(sendResponsePromise);
          } // Let Chrome know that the listener is replying.


          return true;
        };
      });

      const wrappedSendMessageCallback = ({
        reject,
        resolve
      }, reply) => {
        if (extensionAPIs.runtime.lastError) {
          // Detect when none of the listeners replied to the sendMessage call and resolve
          // the promise to undefined as in Firefox.
          // See https://github.com/mozilla/webextension-polyfill/issues/130
          if (extensionAPIs.runtime.lastError.message === CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE) {
            resolve();
          } else {
            reject(new Error(extensionAPIs.runtime.lastError.message));
          }
        } else if (reply && reply.__mozWebExtensionPolyfillReject__) {
          // Convert back the JSON representation of the error into
          // an Error instance.
          reject(new Error(reply.message));
        } else {
          resolve(reply);
        }
      };

      const wrappedSendMessage = (name, metadata, apiNamespaceObj, ...args) => {
        if (args.length < metadata.minArgs) {
          throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);
        }

        if (args.length > metadata.maxArgs) {
          throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);
        }

        return new Promise((resolve, reject) => {
          const wrappedCb = wrappedSendMessageCallback.bind(null, {
            resolve,
            reject
          });
          args.push(wrappedCb);
          apiNamespaceObj.sendMessage(...args);
        });
      };

      const staticWrappers = {
        devtools: {
          network: {
            onRequestFinished: wrapEvent(onRequestFinishedWrappers)
          }
        },
        runtime: {
          onMessage: wrapEvent(onMessageWrappers),
          onMessageExternal: wrapEvent(onMessageWrappers),
          sendMessage: wrappedSendMessage.bind(null, "sendMessage", {
            minArgs: 1,
            maxArgs: 3
          })
        },
        tabs: {
          sendMessage: wrappedSendMessage.bind(null, "sendMessage", {
            minArgs: 2,
            maxArgs: 3
          })
        }
      };
      const settingMetadata = {
        clear: {
          minArgs: 1,
          maxArgs: 1
        },
        get: {
          minArgs: 1,
          maxArgs: 1
        },
        set: {
          minArgs: 1,
          maxArgs: 1
        }
      };
      apiMetadata.privacy = {
        network: {
          "*": settingMetadata
        },
        services: {
          "*": settingMetadata
        },
        websites: {
          "*": settingMetadata
        }
      };
      return wrapObject(extensionAPIs, staticWrappers, apiMetadata);
    }; // The build process adds a UMD wrapper around this file, which makes the
    // `module` variable available.


    module.exports = wrapAPIs(chrome);
  } else {
    module.exports = globalThis.browser;
  }
});


/***/ }),

/***/ 26813:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ _applyDecoratedDescriptor)
/* harmony export */ });
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object.keys(descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object.defineProperty(target, property, desc);
    desc = null;
  }

  return desc;
}

/***/ }),

/***/ 5497:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ _initializerDefineProperty)
/* harmony export */ });
function _initializerDefineProperty(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

/***/ }),

/***/ 32380:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "x0": () => (/* binding */ nanoid)
/* harmony export */ });
/* unused harmony exports customAlphabet, customRandom, random */

let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))
let customRandom = (alphabet, defaultSize, getRandom) => {
  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1
  let step = -~((1.6 * mask * defaultSize) / alphabet.length)
  return (size = defaultSize) => {
    let id = ''
    while (true) {
      let bytes = getRandom(step)
      let j = step
      while (j--) {
        id += alphabet[bytes[j] & mask] || ''
        if (id.length === size) return id
      }
    }
  }
}
let customAlphabet = (alphabet, size = 21) =>
  customRandom(alphabet, size, random)
let nanoid = (size = 21) =>
  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
    byte &= 63
    if (byte < 36) {
      id += byte.toString(36)
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase()
    } else if (byte > 62) {
      id += '-'
    } else {
      id += '_'
    }
    return id
  }, '')



/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, [374,49], () => (__webpack_exec__(98570)));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);